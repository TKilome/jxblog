{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/toumingdu.css","path":"css/toumingdu.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/sakura.js","path":"js/sakura.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/Flink 处理迟到数据.jpg","path":"images/Flink 处理迟到数据.jpg","modified":0,"renderable":0},{"_id":"source/images/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.jpg","path":"images/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.jpg","modified":0,"renderable":0},{"_id":"source/images/aHR0cHM6Ly9naXRlZS5jb20vd2FuZ193eC9pbWFnZV9iZWQvcmF3L21hc3Rlci8yMDIwLzIwMjAwNDE4MjI0NDI3LnBuZw.png","path":"images/aHR0cHM6Ly9naXRlZS5jb20vd2FuZ193eC9pbWFnZV9iZWQvcmF3L21hc3Rlci8yMDIwLzIwMjAwNDE4MjI0NDI3LnBuZw.png","modified":0,"renderable":0},{"_id":"source/images/flume实时采集mysql数据库的数据到kafka.jpg","path":"images/flume实时采集mysql数据库的数据到kafka.jpg","modified":0,"renderable":0},{"_id":"source/images/linux笔记.jpg","path":"images/linux笔记.jpg","modified":0,"renderable":0},{"_id":"source/images/music.png","path":"images/music.png","modified":0,"renderable":0},{"_id":"source/images/mysql笔记.jpg","path":"images/mysql笔记.jpg","modified":0,"renderable":0},{"_id":"source/images/python笔记.jpg","path":"images/python笔记.jpg","modified":0,"renderable":0},{"_id":"source/images/shell笔记.jpg","path":"images/shell笔记.jpg","modified":0,"renderable":0},{"_id":"source/images/test.jpg","path":"images/test.jpg","modified":0,"renderable":0},{"_id":"source/images/top_img.png","path":"images/top_img.png","modified":0,"renderable":0},{"_id":"source/images/分类.jpg","path":"images/分类.jpg","modified":0,"renderable":0},{"_id":"source/images/图库.png","path":"images/图库.png","modified":0,"renderable":0},{"_id":"source/images/头像.jpg","path":"images/头像.jpg","modified":0,"renderable":0},{"_id":"source/images/我喜欢的音乐.jpg","path":"images/我喜欢的音乐.jpg","modified":0,"renderable":0},{"_id":"source/images/留言板.jpg","path":"images/留言板.jpg","modified":0,"renderable":0},{"_id":"source/images/高清图片.png","path":"images/高清图片.png","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/1.jpg","path":"galleryGroup/高清图片1/1.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/10.jpg","path":"galleryGroup/高清图片1/10.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/11.jpg","path":"galleryGroup/高清图片1/11.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/12.jpg","path":"galleryGroup/高清图片1/12.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/13.jpg","path":"galleryGroup/高清图片1/13.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/14.jpg","path":"galleryGroup/高清图片1/14.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/15.jpg","path":"galleryGroup/高清图片1/15.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/16.jpg","path":"galleryGroup/高清图片1/16.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/17.jpg","path":"galleryGroup/高清图片1/17.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/18.jpg","path":"galleryGroup/高清图片1/18.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/19.jpg","path":"galleryGroup/高清图片1/19.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/2.jpg","path":"galleryGroup/高清图片1/2.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/20.jpg","path":"galleryGroup/高清图片1/20.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/21.jpg","path":"galleryGroup/高清图片1/21.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/22.jpg","path":"galleryGroup/高清图片1/22.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/23.jpg","path":"galleryGroup/高清图片1/23.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/3.jpg","path":"galleryGroup/高清图片1/3.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/4.jpg","path":"galleryGroup/高清图片1/4.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/5.jpg","path":"galleryGroup/高清图片1/5.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/6.jpg","path":"galleryGroup/高清图片1/6.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/7.jpg","path":"galleryGroup/高清图片1/7.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/9.jpg","path":"galleryGroup/高清图片1/9.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片1/8.jpg","path":"galleryGroup/高清图片1/8.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/1.jpg","path":"galleryGroup/高清图片2/1.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/10.jpg","path":"galleryGroup/高清图片2/10.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/11.jpg","path":"galleryGroup/高清图片2/11.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/12.jpg","path":"galleryGroup/高清图片2/12.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/13.jpg","path":"galleryGroup/高清图片2/13.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/15.jpg","path":"galleryGroup/高清图片2/15.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/14.jpg","path":"galleryGroup/高清图片2/14.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/16.jpg","path":"galleryGroup/高清图片2/16.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/17.jpg","path":"galleryGroup/高清图片2/17.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/18.jpg","path":"galleryGroup/高清图片2/18.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/19.jpg","path":"galleryGroup/高清图片2/19.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/2.jpg","path":"galleryGroup/高清图片2/2.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/3.jpg","path":"galleryGroup/高清图片2/3.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/4.jpg","path":"galleryGroup/高清图片2/4.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/5.jpg","path":"galleryGroup/高清图片2/5.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/7.jpg","path":"galleryGroup/高清图片2/7.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/8.jpg","path":"galleryGroup/高清图片2/8.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/1.jpg","path":"galleryGroup/高清图片3/1.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片2/9.jpg","path":"galleryGroup/高清图片2/9.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/10.jpg","path":"galleryGroup/高清图片3/10.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/11.jpg","path":"galleryGroup/高清图片3/11.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/12.jpg","path":"galleryGroup/高清图片3/12.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/13.jpg","path":"galleryGroup/高清图片3/13.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/15.jpg","path":"galleryGroup/高清图片3/15.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/14.jpg","path":"galleryGroup/高清图片3/14.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/16.jpg","path":"galleryGroup/高清图片3/16.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/17.jpg","path":"galleryGroup/高清图片3/17.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/18.jpg","path":"galleryGroup/高清图片3/18.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/19.jpg","path":"galleryGroup/高清图片3/19.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/2.jpg","path":"galleryGroup/高清图片3/2.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/3.jpg","path":"galleryGroup/高清图片3/3.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/4.jpg","path":"galleryGroup/高清图片3/4.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/5.jpg","path":"galleryGroup/高清图片3/5.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/6.jpg","path":"galleryGroup/高清图片3/6.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/7.jpg","path":"galleryGroup/高清图片3/7.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/8.jpg","path":"galleryGroup/高清图片3/8.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片3/9.jpg","path":"galleryGroup/高清图片3/9.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/1.jpg","path":"galleryGroup/高清图片4/1.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/10.jpg","path":"galleryGroup/高清图片4/10.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/2.jpg","path":"galleryGroup/高清图片4/2.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/3.jpg","path":"galleryGroup/高清图片4/3.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/4.jpg","path":"galleryGroup/高清图片4/4.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/6.jpg","path":"galleryGroup/高清图片4/6.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/7.jpg","path":"galleryGroup/高清图片4/7.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/8.jpg","path":"galleryGroup/高清图片4/8.jpg","modified":0,"renderable":0},{"_id":"source/galleryGroup/高清图片4/9.jpg","path":"galleryGroup/高清图片4/9.jpg","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-9d927d.png","path":"images/备用图片/wallhaven-9d927d.png","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-gpmwpq.jpg","path":"images/备用图片/wallhaven-gpmwpq.jpg","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-kxlgj6.png","path":"images/备用图片/wallhaven-kxlgj6.png","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-qzm3gq.jpg","path":"images/备用图片/wallhaven-qzm3gq.jpg","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-rrpelq.jpg","path":"images/备用图片/wallhaven-rrpelq.jpg","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-rrpy5q.png","path":"images/备用图片/wallhaven-rrpy5q.png","modified":0,"renderable":0},{"_id":"source/images/备用图片/我喜欢的音乐.png","path":"images/备用图片/我喜欢的音乐.png","modified":0,"renderable":0},{"_id":"source/images/备用图片/wallhaven-8596q2.jpg","path":"images/备用图片/wallhaven-8596q2.jpg","modified":1,"renderable":0},{"_id":"source/images/备用图片/wallhaven-m3gvjk.jpg","path":"images/备用图片/wallhaven-m3gvjk.jpg","modified":1,"renderable":0},{"_id":"source/images/备用图片/wallhaven-ex6pkk.jpg","path":"images/备用图片/wallhaven-ex6pkk.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"80a27b0852b4775a3f88b012738ed7132d78051c","modified":1691935001875},{"_id":"source/categories/index.md","hash":"446479b0cc1e4565638bd3f35f6f41fd49054109","modified":1692283501716},{"_id":"source/_posts/Flink 处理迟到数据.md","hash":"03bfb2dcedd58a427a30ce1e07dd27a8ec08756d","modified":1692236920912},{"_id":"source/_posts/Linux笔记.md","hash":"059327b1d1fd1edc81e4e27189f4f477d26e2ab3","modified":1692236920924},{"_id":"source/_posts/MySQL笔记.md","hash":"23cff6b68856b352f05ebe3f3cd9f5880f5bd71a","modified":1692236920917},{"_id":"source/_posts/Shell笔记.md","hash":"7c480ffe2bcbb72ff1830e355ccdf4fc73960d1c","modified":1692236920914},{"_id":"source/_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.md","hash":"a797c1e6c1d924a298d08938ee541677d2f6e0e1","modified":1692343080696},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka.md","hash":"0436fcc1c318b7b1da62107a479573b22355adf8","modified":1692236920921},{"_id":"source/_posts/test.md","hash":"e246276e6c9b35cd82e870c5761859a470b53701","modified":1692236920928},{"_id":"source/galleryGroup/index.md","hash":"03da9c28312eeee939a7be2704cbbc73eacff192","modified":1692327804068},{"_id":"source/images/aHR0cHM6Ly9naXRlZS5jb20vd2FuZ193eC9pbWFnZV9iZWQvcmF3L21hc3Rlci8yMDIwLzIwMjAwNDE4MjI0NDI3LnBuZw.png","hash":"6a01073d90efef8fdc62ff1b43b56e29f7eedef0","modified":1692259274128},{"_id":"source/link/index.md","hash":"4405753f97cc72d92d42e1e1be63543282f68af5","modified":1691933752938},{"_id":"source/images/头像.jpg","hash":"a3bdf0917c2fa179bcb38775b72cf67438ecce62","modified":1691934297711},{"_id":"source/music/index.md","hash":"66b6a7cd47debfbf853f848fc25f89b7849c2af9","modified":1692282370933},{"_id":"source/messageboard/index.md","hash":"78e3c08bbf3ea4856e18f7e47540f729596c12a5","modified":1692673513238},{"_id":"source/tags/index.md","hash":"7ac8d324e934c386aab9e0eec703d9ff2ea450a4","modified":1692282898151},{"_id":"source/_posts/MySQL笔记/image-20230731191501709.png","hash":"d732806a5879166a7f205f540042d9aa4d3b45ac","modified":1692105938372},{"_id":"source/_posts/MySQL笔记/image-20230731161918891.png","hash":"70037440686d3841ad28169965f8cf0544c627e1","modified":1692106134937},{"_id":"source/_posts/MySQL笔记/image-20230731192623335.png","hash":"948eee8ca670bc5cc92c11579882218ac0bf89e9","modified":1692105948265},{"_id":"source/_posts/MySQL笔记/image-20230731194630101.png","hash":"c9c82a6bc5a48a79b3bf084094ead5af1fe9cc3e","modified":1692105952039},{"_id":"source/_posts/MySQL笔记/image-20230731192045754.png","hash":"0bc915ee07afaf4c1499d10e2378bab77a13ff67","modified":1692105939742},{"_id":"source/_posts/MySQL笔记/image-20230731191806584.png","hash":"4f7fa7efe4f22cdcb078801a19e731f1f552c736","modified":1692105945244},{"_id":"source/_posts/MySQL笔记/image-20230731201052074.png","hash":"1bff1c8366a0d54e319587171b7ca7b32d93a49d","modified":1692106173879},{"_id":"source/_posts/MySQL笔记/image-20230731195153935.png","hash":"c2f11d6aaba8277f8362613a13d37465405cd8c2","modified":1692106051762},{"_id":"source/_posts/MySQL笔记/image-20230731194630101-1692105959933.png","hash":"c9c82a6bc5a48a79b3bf084094ead5af1fe9cc3e","modified":1692105959966},{"_id":"source/_posts/MySQL笔记/image-20230731204818468.png","hash":"a847605df72280e58dd07df1765273eadc0095d7","modified":1692106241756},{"_id":"source/_posts/MySQL笔记/image-20230731204742543.png","hash":"6dd53ca975fb4a08add75a060945af5f12903ceb","modified":1692106210787},{"_id":"source/_posts/MySQL笔记/image-20230731204854988.png","hash":"7cfcc8cffd15517083e1141d7d33fc1c01865668","modified":1692106229088},{"_id":"source/_posts/MySQL笔记/image-20230731205050008.png","hash":"b8bf99b5b80a6ec09db69b0ab2347fed72e99fca","modified":1692106251726},{"_id":"source/_posts/MySQL笔记/image-20230731205244443.png","hash":"eea7ef20c67643906402dbf80e87ee6995514300","modified":1692106270037},{"_id":"source/_posts/MySQL笔记/image-20230731212623170.png","hash":"a59b782860003ecf674b2a841adac1d2fec5fe67","modified":1692106279698},{"_id":"source/_posts/MySQL笔记/image-20230731205204993.png","hash":"f3d3b32384dc31f177ad70f01bc997ca6c1c168e","modified":1692106261020},{"_id":"source/_posts/MySQL笔记/image-20230801190255233.png","hash":"48ec4cdae4b9054e8393b035b8ef6be0ae6fc258","modified":1692106066177},{"_id":"source/_posts/MySQL笔记/image-20230731213327762.png","hash":"242207e3a17f1ffbedffed33f71682d28d3f41d6","modified":1692106332089},{"_id":"source/_posts/MySQL笔记/image-20230801191635470.png","hash":"1f5df19e7e950990ad7aa4b1d71aedf3bb18db9a","modified":1692106080803},{"_id":"source/_posts/MySQL笔记/image-20230801200055431.png","hash":"70f5e382c827f302bfa8dec1c29398b5f9d4c1c8","modified":1692106143974},{"_id":"source/_posts/MySQL笔记/image-20230801191658112.png","hash":"334ecc9ee79fa639d54edcae8002f7a3930270ee","modified":1692106092146},{"_id":"source/_posts/MySQL笔记/image-20230801195946980.png","hash":"1de64b0d6df9ee7894a1a8ba89cfb3b89dceb432","modified":1692106153656},{"_id":"source/_posts/MySQL笔记/image-20230803140232355.png","hash":"d1f089f238ac5e65bdd213e54eed67645a3d7e96","modified":1692106164263},{"_id":"source/_posts/Linux笔记/image-20230725164332151.png","hash":"edb11186280befba332ed9e3d45282eb8a35dfe5","modified":1692155022266},{"_id":"source/_posts/Linux笔记/image-20230725190147422.png","hash":"e7723d2232177f6b6b5cabd12deee2f0154c048e","modified":1692155028281},{"_id":"source/_posts/Linux笔记/image-20230725164534031.png","hash":"541af85d1f4adad879c4fd1087b43bf2d3cd66e4","modified":1692155026595},{"_id":"source/_posts/MySQL笔记/image-20230803213442968.png","hash":"c6da74770f9869e1256ca92600b5b3cda1d3c2ac","modified":1692106117972},{"_id":"source/_posts/Linux笔记/image-20230725191041627.png","hash":"0d57ee1c6bef61d45cc8f77c7ecd5dc67c2e6e72","modified":1692155031766},{"_id":"source/_posts/Linux笔记/image-20230725190958440.png","hash":"fe2cee35a4373e84fa8346f1aeba31f3d567d8bc","modified":1692155030043},{"_id":"source/_posts/Linux笔记/image-20230725191430990.png","hash":"744497f844cb8ca73b2968e3a81d13327ecd6480","modified":1692155034172},{"_id":"source/_posts/Linux笔记/image-20230725193304333.png","hash":"b618acf5d450563751a68365fefcf63f0d1ad60b","modified":1692155148344},{"_id":"source/_posts/Linux笔记/image-20230725194117040.png","hash":"9ed0d03d101171027a144879c05f832ece356680","modified":1692155111898},{"_id":"source/_posts/Linux笔记/image-20230725195157685.png","hash":"776a48286c951261e6546e4927915ea5a8073124","modified":1692155121153},{"_id":"source/_posts/Linux笔记/image-20230725201051683.png","hash":"8b898e077056793b16e165202567d5cf615d82c6","modified":1692155135141},{"_id":"source/_posts/Linux笔记/image-20230725195717493.png","hash":"bced99984ee8b5707343e7b52e20da8d7a4bd0c2","modified":1692155124977},{"_id":"source/_posts/Linux笔记/image-20230725201655502.png","hash":"02ff50f862bb2c299c9d7f9c802b17ee18fd1200","modified":1692155142770},{"_id":"source/_posts/Linux笔记/image-20230725201655502-1692155155569.png","hash":"02ff50f862bb2c299c9d7f9c802b17ee18fd1200","modified":1692155155572},{"_id":"source/_posts/Linux笔记/image-20230725204854629.png","hash":"c9b2d268e7f3fbce5902f8fb7cf5fdb0a50904da","modified":1692155165537},{"_id":"source/_posts/Linux笔记/image-20230725204949968.png","hash":"c1d9ede045d7a2fd69d5242a5c98554cea2c5f1f","modified":1692155169449},{"_id":"source/_posts/Linux笔记/image-20230725205030096.png","hash":"9628a81f9a94f320dbb010ba8aca7c01ec0dd38c","modified":1692155167638},{"_id":"source/_posts/Linux笔记/image-20230725210604931.png","hash":"1af912b569d2f802ec6bce66b84795194d1bc202","modified":1692155284236},{"_id":"source/_posts/Linux笔记/image-20230725212127382.png","hash":"77465bde36ed01ad9a645f46b9dcf243b74101fb","modified":1692155203025},{"_id":"source/_posts/Linux笔记/image-20230725210839326.png","hash":"21e6d0263f3ce8cf113c9dbfbf38e2b8a6665bd6","modified":1692155286158},{"_id":"source/_posts/Linux笔记/image-20230725214040146.png","hash":"78f27e6e3a29ea59431cb119aad8562decca00fd","modified":1692155207420},{"_id":"source/_posts/Linux笔记/image-20230725214239212.png","hash":"2c075024d86a1f562373d970cc162c911210825a","modified":1692155210367},{"_id":"source/_posts/Linux笔记/image-20230725213825941.png","hash":"a09eb9d9cfd5d7e64d522d9d8f2dc87f3799a8f3","modified":1692155208711},{"_id":"source/_posts/Linux笔记/image-20230725220926475.png","hash":"395b048b0cd03b2cddc8355f8e940a4aa2f0de24","modified":1692155212747},{"_id":"source/_posts/Linux笔记/image-20230725222708447.png","hash":"59d0af16f47119f67dc9361167287a6e54945e52","modified":1692155172812},{"_id":"source/_posts/Linux笔记/image-20230725221157481.png","hash":"fbc3b97871d807095ae81aa0cbf23cf420b1a226","modified":1692155274811},{"_id":"source/_posts/Linux笔记/image-20230725223150054.png","hash":"957d7960647a17d6ad433224c825a00f80de3c91","modified":1692155174098},{"_id":"source/_posts/Linux笔记/image-20230725224740961.png","hash":"254b870eb2a0cd39b86d23c1ff44c6c2f5291375","modified":1692155186885},{"_id":"source/_posts/Linux笔记/image-20230725225041772.png","hash":"8f825b4ee1d025fc3d2bd526b5e07d175b590a0a","modified":1692155188351},{"_id":"source/_posts/Linux笔记/image-20230725225334022.png","hash":"91f606c52c5d2f894a069f0dab841d72a472b289","modified":1692155190416},{"_id":"source/_posts/Linux笔记/image-20230725225905638.png","hash":"72393127871c7e204cfd5da3bd1123b79228242d","modified":1692155751729},{"_id":"source/_posts/Linux笔记/image-20230725224604750.png","hash":"fc7053dd38f2bae0fb362916a19b998dc538c206","modified":1692155185132},{"_id":"source/_posts/Linux笔记/image-20230726212127488.png","hash":"c74956c271d671077b5ec38805347c86faafdc5b","modified":1692155181775},{"_id":"source/_posts/Linux笔记/image-20230727184316885.png","hash":"53bb0c55351ef0d5b7e3059ace2fea217385e397","modified":1692155287930},{"_id":"source/_posts/Linux笔记/image-20230727184609219.png","hash":"5e52c22820d10ae5241d1bb5cbc0c9db2c85eb1b","modified":1692155635648},{"_id":"source/_posts/Linux笔记/image-20230727193920519.png","hash":"d304c4d1d60e63a40c100d73d2b34307d114d14e","modified":1692155296146},{"_id":"source/_posts/Linux笔记/image-20230727194517260.png","hash":"3ae5fb78209839847a1c148e6d925b8f93a8295a","modified":1692155304916},{"_id":"source/_posts/Linux笔记/image-20230727205255514.png","hash":"f8c8483a5c6ea05809896219144a58867009b296","modified":1692155330315},{"_id":"source/_posts/Linux笔记/image-20230727211150030.png","hash":"3dbebe9afc909b078e545af2a596359ae97746c6","modified":1692155338746},{"_id":"source/_posts/Linux笔记/image-20230728101006301.png","hash":"96805c452cbf5e5f49e4c42b25f92d4cc9dc433e","modified":1692155335503},{"_id":"source/_posts/Linux笔记/image-20230727214739399.png","hash":"354507f8d847d637c6b71f3825f2985d0428aae2","modified":1692155382653},{"_id":"source/_posts/Linux笔记/image-20230728100939773.png","hash":"b48eb7135cdcacae1ce8aec8fed928582852f54a","modified":1692155334011},{"_id":"source/_posts/Linux笔记/image-20230727213145890.png","hash":"c43db0c28e962b10f265c0272fe48eb988919958","modified":1692155279929},{"_id":"source/_posts/Linux笔记/image-20230728101020819.png","hash":"f83ce5bcda9f0d68e03eef124e30fd1e31f2d051","modified":1692155332703},{"_id":"source/_posts/Linux笔记/image-20230729145832928.png","hash":"05c3a3a9f5b0b985d8048391a945d00f65b5632c","modified":1692155298179},{"_id":"source/_posts/Linux笔记/image-20230730163321077.png","hash":"cd351e832ab619ea73a901e8df15e32441d2fd3f","modified":1692155352642},{"_id":"source/_posts/Linux笔记/image-20230730164249051.png","hash":"a86f2a156e2d861b4ad28785e413fbbb7d3da240","modified":1692155354492},{"_id":"source/_posts/Linux笔记/image-20230730164334687.png","hash":"10cb23a567cccd65cabda6d38d170bce50cc333d","modified":1692155355993},{"_id":"source/_posts/Linux笔记/image-20230730164816754.png","hash":"7f42d2478c2c632fd6dc10e149596b1f22d747f4","modified":1692155359951},{"_id":"source/_posts/Linux笔记/image-20230730165344441.png","hash":"2ebd1abe265ccc337b2a8b082b517bc959a5173b","modified":1692155361771},{"_id":"source/_posts/Linux笔记/image-20230730170533372.png","hash":"1c4cb2691ded3e299167d1e998b7ce86ebd3b5a7","modified":1692155363567},{"_id":"source/_posts/Linux笔记/image-20230730172211211.png","hash":"b697029788f797fe95f922062cd0d7da763052e6","modified":1692155357461},{"_id":"source/_posts/Linux笔记/image-20230730171241699.png","hash":"c040536b059ec717f7de315fdb8b9ce7dda91bc7","modified":1692155340819},{"_id":"source/_posts/Linux笔记/image-20230730174650797.png","hash":"7b3cb7fc334412ff0b19095023dddef6f6e82a02","modified":1692155368370},{"_id":"source/_posts/Shell笔记/image-20230728215607642.png","hash":"53ef4b050e655773e3ac88442555c701be398395","modified":1692154863244},{"_id":"source/_posts/Shell笔记/image-20230728213715198.png","hash":"8a9df9825ce198cbc8f1acacce9f93b78ca5ffb1","modified":1692154799654},{"_id":"source/_posts/Shell笔记/image-20230728220405690.png","hash":"00f38f3420b6035e53410136d40bdb6a56b9db9b","modified":1692154869675},{"_id":"source/_posts/Shell笔记/image-20230728220325735.png","hash":"6540033bf0528ca5403ed9882cfe38916eccffd2","modified":1692154864713},{"_id":"source/_posts/Shell笔记/image-20230728220459641.png","hash":"7fc65b5914e7506d2bc3b3ac810ad0a73a74bc9f","modified":1692154872005},{"_id":"source/_posts/Shell笔记/image-20230728220333688.png","hash":"31335376e8eb9a97bf5514fef0a3c0fd9cbb922a","modified":1692154866322},{"_id":"source/_posts/Shell笔记/image-20230728220538400.png","hash":"aef0b6345f7dc19b4b7a058e8fd1eddee4a2e05f","modified":1692154873508},{"_id":"source/_posts/Shell笔记/image-20230728221059362.png","hash":"e7e711e00515109b7dacd5c4b4eca744f2846d38","modified":1692154868104},{"_id":"source/_posts/Shell笔记/image-20230730151543568.png","hash":"02282ce9e3999b822abbe136dab99c23e44530ab","modified":1692154845549},{"_id":"source/_posts/Shell笔记/image-20230730151208807.png","hash":"4a523e7f79d4463e6ce5b2894a54ee4b280fb5dd","modified":1692154836072},{"_id":"source/_posts/Shell笔记/image-20230730153345945.png","hash":"8a4bc71fe6d34405ac99f0f7fd4dabfd532fa104","modified":1692154877910},{"_id":"source/_posts/Shell笔记/image-20230730153053695.png","hash":"636678071b1ac6db10f5179bc76c5d2f1ed038af","modified":1692154876409},{"_id":"source/_posts/Shell笔记/image-20230730153913576.png","hash":"bfb665b0c5f4d4e8afe269f5fc295e575d9e50ed","modified":1692154881356},{"_id":"source/_posts/Shell笔记/image-20230730154054651.png","hash":"ed69b4bd83f06f765946042261785ccb07e7d776","modified":1692154882450},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/14142856df9b4ceb91c3d85b4b017eb4.png","hash":"421848a43c467f655b607e4e41ad90efb621c86d","modified":1692189178254},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/416d1b9dd07d4e43bbaabeb02047e809.png","hash":"4f3008b5371a000f982b6fb319a97275ae3c1c87","modified":1692189204982},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/5c0301edb3124c6191bc2a33c805eddc.png","hash":"3c7ad5dd17d586a38945cf6319e9f12bc7e8b992","modified":1692189183383},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/5a3bc3a8ba45423d94fa4fbe005973b3.png","hash":"74dfa4e19cfbae7613167e62e88b927cb12bdc12","modified":1692189176387},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/7d1527b8fdd14ee3a942f5df899f9327.png","hash":"8de9065322a22a2381d7d981051bad214ac911f7","modified":1692189190829},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png","hash":"895c05ca9bc6f3d0aeec93f36f6a88e7f8c37045","modified":1692189188908},{"_id":"source/_posts/python笔记/LjTR2tNPAO81cnU.png","hash":"cc7c405c066200a2f39514d88a2bb05d7f44ffbc","modified":1691667468602},{"_id":"source/_posts/test/image-20230710200106371.png","hash":"cbf821068fe412e247a15dd32b4db94ff74cf2df","modified":1691671104148},{"_id":"source/_posts/python笔记/image-20230710193122871.png","hash":"798cd022be9dc97136ef2e2e1d117a01bd8fac33","modified":1691667308295},{"_id":"source/_posts/python笔记/bxmZRYfl4UXaeB6.png","hash":"d32fe239e0862186b102589dd53cfb1ed6037ccc","modified":1691667524320},{"_id":"source/_posts/python笔记/image-20230710194742530.png","hash":"099bcf29bd11e9a200aefd0c506472421a0bf771","modified":1691667344310},{"_id":"source/_posts/python笔记/image-20230710195906290.png","hash":"df1143640bf2e56c247ec037557e64c852094071","modified":1691667353659},{"_id":"source/_posts/python笔记/image-20230710200106371.png","hash":"cbf821068fe412e247a15dd32b4db94ff74cf2df","modified":1691667359223},{"_id":"source/_posts/python笔记/image-20230710200130611.png","hash":"dc54625879ba7e882aabe1c2ea52dde814e632ce","modified":1691667358244},{"_id":"source/_posts/python笔记/image-20230711103411381.png","hash":"e5d2ce764dc53aa15ab47fdb606c45252322e1b1","modified":1691667371988},{"_id":"source/_posts/python笔记/image-20230711103427935.png","hash":"ae0d816c525137a9de5418758aca03f76d05ef8c","modified":1691667370491},{"_id":"source/_posts/python笔记/image-20230711150851404.png","hash":"1e61afade8d136af3c45b672f5ed17527378cca0","modified":1691667374414},{"_id":"source/_posts/python笔记/image-20230711151030189.png","hash":"9a6e314982e3ce83ea6144031e0aab2af553b834","modified":1691667376451},{"_id":"source/_posts/python笔记/image-20230711151053019.png","hash":"8a16054e28b5da0336c39ed71c30bfcb73799a2f","modified":1691667378786},{"_id":"source/_posts/python笔记/image-20230711151134903.png","hash":"d28ea1372e1d00b3efb778f8887535f004f82097","modified":1691667380040},{"_id":"source/_posts/python笔记/image-20230711182305418.png","hash":"040438bdbf763322e22a088d63ff2c3e4deec86d","modified":1691667382195},{"_id":"source/_posts/python笔记/image-20230713221852883.png","hash":"054cc72ec39dbb1b46d9b5709f561af2455f83bd","modified":1691667412159},{"_id":"source/_posts/python笔记/image-20230713212833658.png","hash":"21f2c049ec2abf594a29ac246b5d5a7750ffbea7","modified":1691667399719},{"_id":"source/_posts/python笔记/image-20230714090438935.png","hash":"43fa236cc3d3a4f33a1d5e321bccf21898eb2bdd","modified":1691667422088},{"_id":"source/_posts/python笔记/image-20230714090457699.png","hash":"d1c248982a3e82904bcaa92e6fa87b410582a204","modified":1691667431112},{"_id":"source/_posts/python笔记/image-20230715194720536.png","hash":"181ab1bc11a9ffb8abf0257dd90825df2ac8c44d","modified":1691667440257},{"_id":"source/_posts/python笔记/image-20230723143523063.png","hash":"741f160bbd55c521a4315fea020001e85d1ebfe2","modified":1691667475153},{"_id":"source/_posts/python笔记/image-20230723143638690.png","hash":"f6e230dfa258621aa1ae6836eef6defd0ce514c3","modified":1691667477199},{"_id":"source/_posts/python笔记/image-20230723151140532.png","hash":"2bbb0c174b9fe4875dc55bbe04c9669be6bda4db","modified":1691667486587},{"_id":"source/_posts/python笔记/image-20230724090823259.png","hash":"299edba0eab5b297ea6a9c1543097f42ecc22acd","modified":1691667484436},{"_id":"source/_posts/python笔记/image-20230723144731031.png","hash":"7b0934dbdd88950857c48ae10fd98df717767e3a","modified":1691667478712},{"_id":"source/_posts/python笔记/image-20230724212046687.png","hash":"9edbcc82e499c1b62a26f081e00b2a8bda0861c1","modified":1691667489299},{"_id":"source/_posts/python笔记/image-20230724214335918.png","hash":"a4f906f13b6e18ce59e536993debab481f1332b9","modified":1691667495507},{"_id":"source/_posts/python笔记/image-20230724212222545.png","hash":"3719e98841b374f1337185dfbdefe80531893516","modified":1691667491360},{"_id":"source/_posts/python笔记/image-20230724223247119.png","hash":"ebb6d5d8d521fbfcfb62ef08c73e051b4dbe49f9","modified":1691667511808},{"_id":"source/_posts/python笔记/image-20230725102707716.png","hash":"24caa4d3981862cbcf33c11a4dd489d4fc96d16d","modified":1691667515969},{"_id":"source/_posts/python笔记/image-20230724223315189.png","hash":"253bcd16be6cd10c0b97fe2aad11845a412d1edd","modified":1691667513611},{"_id":"source/_posts/python笔记/image-20230724215256243.png","hash":"57d3d8deabed22bfd8d3e3d8bed9cd1652e62ced","modified":1691667502762},{"_id":"source/_posts/python笔记/image-20230815135457898.png","hash":"e3e2428d007864da5e17730c27b4b78a29cc0cd3","modified":1692078897904},{"_id":"source/galleryGroup/日常分享/index.md","hash":"1bcb24a19ce13dc06412069801e5b9211fbd83f9","modified":1692325450908},{"_id":"source/_posts/python笔记/image-20230724223358859.png","hash":"8d389862f44f8659bfd651db9b47408ebfec5a12","modified":1691667507500},{"_id":"source/galleryGroup/高清图片1/21.jpg","hash":"1412b0e40b0f8f647e74769e5e4ceb0672b9485f","modified":1692282001055},{"_id":"source/galleryGroup/高清图片1/index - 副本.md","hash":"91d8f132c89c7f45c28a7132528079192399ec61","modified":1692273669637},{"_id":"source/galleryGroup/高清图片1/index.md","hash":"61efaca825af81d22bbf257bbdbb80aeca66d250","modified":1692324746733},{"_id":"source/galleryGroup/高清图片2/index.md","hash":"5f3c1c7f929fc325e2f644e80fa6b37375de59bd","modified":1692324746734},{"_id":"source/galleryGroup/高清图片3/12.jpg","hash":"ca0ec257aa4756361d03051920fa33febfab4d1d","modified":1692283573074},{"_id":"source/galleryGroup/高清图片3/index.md","hash":"65e954748e7d97ea42fa46e22115e57ab4ef0460","modified":1692324746735},{"_id":"source/galleryGroup/高清图片4/8.jpg","hash":"4fea183cecd301490aff6dd373f7bd9bdce9cb5f","modified":1692284661818},{"_id":"source/galleryGroup/高清图片4/index.md","hash":"15176c0c4abc7d3303be223e0be47984e6547f0c","modified":1692324746735},{"_id":"source/_posts/python笔记.md","hash":"66be01d6059c69ed86a7695e6b32c57467dadc16","modified":1692236920931},{"_id":"source/_posts/MySQL笔记/image-20230731201237975.png","hash":"3da26c6ec755779b9f89981e37fcff20bf508e48","modified":1692106183142},{"_id":"source/_posts/MySQL笔记/image-20230731213059217.png","hash":"5d16635e101fffc84ddc93b1ba6a740820f37c85","modified":1692106289320},{"_id":"source/_posts/Linux笔记/image-20230725190743350.png","hash":"5b6e2773ea3b297d3c2bc30baad0cfd51f035b1f","modified":1692155024724},{"_id":"source/_posts/Linux笔记/image-20230725190639601.png","hash":"a71bccd7d241c8ca330bee392fc3b3eb615420cd","modified":1692155019975},{"_id":"source/_posts/Linux笔记/image-20230725192038917.png","hash":"d035b9b9c7ea7f448a3449ec9a518aede6ad2188","modified":1692155073560},{"_id":"source/_posts/Linux笔记/image-20230725192317190.png","hash":"83dcd3ac8c8051d46936a6995bc030611293c148","modified":1692155077282},{"_id":"source/_posts/Linux笔记/image-20230725192330984.png","hash":"f2ae8916c45e9f135de775baad155bb818f71081","modified":1692155080273},{"_id":"source/_posts/Linux笔记/image-20230725192651359.png","hash":"43ba7786799fc58666433707fb9633b50b933298","modified":1692155151702},{"_id":"source/_posts/Linux笔记/image-20230725192937089.png","hash":"5fa3a1d41d924fb16ac6700da7b15de405be3700","modified":1692155146582},{"_id":"source/_posts/Linux笔记/image-20230725193128431.png","hash":"c9abeb5801d30252d59bd527ce245778f32cbed0","modified":1692155149773},{"_id":"source/_posts/Linux笔记/image-20230725200621688.png","hash":"fd85a2d1dc8dc062a01fcf9083eabda3af95fa88","modified":1692155129693},{"_id":"source/_posts/Linux笔记/image-20230725201026739.png","hash":"018652cdc995831ee86325320fdf477825fe4aeb","modified":1692155131923},{"_id":"source/_posts/Linux笔记/image-20230725201748442.png","hash":"eff4d78c741865177956e7f48a72b06d3a06597b","modified":1692155144835},{"_id":"source/_posts/Linux笔记/image-20230725202853702.png","hash":"e04fbc2434b336e1056573a737e4fc75b839a938","modified":1692155160408},{"_id":"source/_posts/Linux笔记/image-20230725202522782.png","hash":"c4512e5972db17b05dd810263ddf02bc72cccb3a","modified":1692155157275},{"_id":"source/_posts/Linux笔记/image-20230725203045211.png","hash":"a04a92caed861a89772bd832505d50e5bd5f72fb","modified":1692155163262},{"_id":"source/_posts/Linux笔记/image-20230725213809973.png","hash":"3a3394f34837d813a5b632844bfdb2ec203998bf","modified":1692155205642},{"_id":"source/_posts/Linux笔记/image-20230725222004113.png","hash":"109247feecd308510496204d2b5fcaca42704423","modified":1692155179747},{"_id":"source/_posts/Linux笔记/image-20230725221833744.png","hash":"f94003aeb82bc05662eab5e2862ef890b0945735","modified":1692155178396},{"_id":"source/_posts/Linux笔记/image-20230725230129222.png","hash":"662e8ab785e908294a6d81a9cece19322cf084e5","modified":1692155192673},{"_id":"source/_posts/Linux笔记/image-20230726212412260.png","hash":"3739a801ef7bd97fc6ce5be475b882724cf33f64","modified":1692155199323},{"_id":"source/_posts/Linux笔记/image-20230727183225209.png","hash":"d574cc9aac6a6ced548673727b65f6ca8bdab7b3","modified":1692155380640},{"_id":"source/_posts/Linux笔记/image-20230727151820522.png","hash":"347c1d501965ca801476f403fdc3dd6adee4ce20","modified":1692155377319},{"_id":"source/_posts/Linux笔记/image-20230727193418935.png","hash":"d7cf5b1634bd04699226ffbd657d330639cd81fe","modified":1692155294192},{"_id":"source/_posts/Linux笔记/image-20230726212756839.png","hash":"a63960665ef3ca392d10b94159c151754cd9bdad","modified":1692155201078},{"_id":"source/_posts/Linux笔记/image-20230727194425502.png","hash":"5caee04f35a93f8fc7dafa28e88a0fb09dfa0746","modified":1692155302688},{"_id":"source/_posts/Linux笔记/image-20230727194425502-1692155580085.png","hash":"5caee04f35a93f8fc7dafa28e88a0fb09dfa0746","modified":1692155580091},{"_id":"source/_posts/Linux笔记/image-20230727194724286-1692155590711.png","hash":"bf3f709376ca8aad3a6f8ef53b09b672219ee30e","modified":1692155590744},{"_id":"source/_posts/Linux笔记/image-20230727194724286.png","hash":"bf3f709376ca8aad3a6f8ef53b09b672219ee30e","modified":1692155300737},{"_id":"source/_posts/Linux笔记/image-20230727200849580.png","hash":"7c678e8eadaf8a109363a2b181c687d220a2522b","modified":1692155306529},{"_id":"source/_posts/Linux笔记/image-20230727200919785.png","hash":"f864fcc1889bdb7e36d35d65d3e8f963314b67ea","modified":1692155311743},{"_id":"source/_posts/Linux笔记/image-20230727200934622.png","hash":"19767b296e24d310e19d223f32584105bb70bf2f","modified":1692155527989},{"_id":"source/_posts/Linux笔记/image-20230727201038649.png","hash":"0fca6ff4e6e0184f500200e27d71904e77b4f4e3","modified":1692155317744},{"_id":"source/_posts/Linux笔记/image-20230727201607999.png","hash":"1e5e5596a188e089a2a45921f0af96585e75a0d2","modified":1692155327427},{"_id":"source/_posts/Shell笔记/image-20230728211130724.png","hash":"e5816c9108607786f2f7757db20e236b5b649814","modified":1692154765976},{"_id":"source/_posts/Shell笔记/image-20230728213452920.png","hash":"3dbec6826f300945c05278ca7248a90f203c9907","modified":1692154788418},{"_id":"source/_posts/Shell笔记/image-20230728214023978.png","hash":"999e8eca33ddda0340b3743a0fa77f6f0be788d8","modified":1692154809165},{"_id":"source/_posts/Shell笔记/image-20230730160038334.png","hash":"05cb2b67d5c901d0f6d78381d8be9add40d68120","modified":1692154884928},{"_id":"source/_posts/python笔记/image-20230710193716304.png","hash":"8f59d396ebf1110be4005704d158f36e7735df3e","modified":1691667336632},{"_id":"source/_posts/python笔记/image-20230710193646276.png","hash":"521b67cf9cae02d91d6cfd4030b3f39a7597ac66","modified":1691667323917},{"_id":"source/_posts/python笔记/image-20230710194400177.png","hash":"f33ea33342d202472511918ea6071a25873efa1a","modified":1691667342373},{"_id":"source/_posts/python笔记/image-20230710195406248.png","hash":"7e16792fc7ecc6a9687d6e3e1a2c32c7885e7ecb","modified":1691667351694},{"_id":"source/_posts/python笔记/image-20230710200010566.png","hash":"f7d418b197193b421238766747e084e9c242a49c","modified":1691667355342},{"_id":"source/_posts/python笔记/image-20230710201025426.png","hash":"ccd00cf3c10c4b48e33effa5e3451c0f48e1ed5a","modified":1691667361023},{"_id":"source/_posts/python笔记/image-20230710200739516.png","hash":"7f0b50186fb89b79764a59f329cf563ce6ed054c","modified":1691667346327},{"_id":"source/_posts/python笔记/image-20230710200539139.png","hash":"8dc46e9c39146ffd656bf0e7212e37ab3779a11a","modified":1691667348276},{"_id":"source/_posts/python笔记/image-20230710200312751.png","hash":"4cdace65d93ddc56b5480aa02190b0e8ed277a85","modified":1691667349541},{"_id":"source/_posts/python笔记/image-20230710202256691.png","hash":"7efd40fe23abdf1ddd6a46407e7bbdc98f5fbb48","modified":1691667368553},{"_id":"source/_posts/python笔记/image-20230710201900839.png","hash":"ba3cf40385fb3196cbe52efcaca88f725eec65c1","modified":1691667364843},{"_id":"source/_posts/python笔记/image-20230713201620205.png","hash":"f24c9b5e4db001a4d0ba443da939f880d9619a3a","modified":1691667390397},{"_id":"source/_posts/python笔记/image-20230713201804728.png","hash":"5876fe92cfac5994fbd16442342dc3e180b620b9","modified":1691667395216},{"_id":"source/_posts/python笔记/image-20230713201653705.png","hash":"6fdd4875c454f5858ee49141747ae4b8baafd3d0","modified":1691667391821},{"_id":"source/_posts/python笔记/image-20230713201728513.png","hash":"69aa462f5385a14c3e569d1b223bbbddc08e9a84","modified":1691667393592},{"_id":"source/_posts/python笔记/image-20230713215248858.png","hash":"2a07c98a4a8dc9385e056fa3a8530709f839faca","modified":1691667404291},{"_id":"source/_posts/python笔记/image-20230714204312252.png","hash":"d5be514d313613845ebbf70de7a860394328b695","modified":1691667434173},{"_id":"source/_posts/python笔记/image-20230718202931072.png","hash":"6a543b6cab9628c3ebc1dab417e1a99074d9f1ef","modified":1691667461076},{"_id":"source/_posts/python笔记/image-20230724153228728.png","hash":"bb218a2b53c63abfb71ff0b79e70f0a14564ee10","modified":1691667497808},{"_id":"source/_posts/python笔记/image-20230718202052338.png","hash":"25f9ec70e441e1671b65d412476af46ae1cfb3ee","modified":1691667457132},{"_id":"source/_posts/Linux笔记/image-20230725191757477.png","hash":"f65f0d0d1f2e3aa53f82c253f0eef751c6e0d0e5","modified":1692155036208},{"_id":"source/_posts/Linux笔记/image-20230725193917275.png","hash":"f0bf3801381fb8496d4d8e8ed9a409ac434c7af7","modified":1692155107887},{"_id":"source/_posts/Linux笔记/image-20230725193756322.png","hash":"1e6a67f58491c6953a97737efa028b6c9bc8ba31","modified":1692155091721},{"_id":"source/_posts/Linux笔记/image-20230725194536832.png","hash":"403f1d677adae813b9022c211de766b704c489ef","modified":1692155117713},{"_id":"source/_posts/Linux笔记/image-20230726141327993.png","hash":"70161868585385a24579e9ba33d62cd526bfcc5c","modified":1692155007319},{"_id":"source/_posts/Linux笔记/image-20230726141424420.png","hash":"8bbc05a2f094db83e2b8bad4f24f76bb248bbe54","modified":1692155009043},{"_id":"source/_posts/Shell笔记/image-20230728194954237.png","hash":"fbe5639b00c7ddedb94f1d20eabcdf6e58f6777c","modified":1692154733487},{"_id":"source/_posts/Shell笔记/image-20230728213352217.png","hash":"38367822da33fc3fea72a1cc660dd8dc2ea6d5da","modified":1692154779592},{"_id":"source/_posts/Shell笔记/image-20230730151025266.png","hash":"94b6498f999401433fb51d18a3285d1918174dc9","modified":1692154828481},{"_id":"source/_posts/Shell笔记/image-20230730152240408.png","hash":"e1a91415d6ebc436ad62410051075fa3cabbbd4e","modified":1692154855059},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/0d1b5a8572aa47119e603c7cd291307d.png","hash":"e06a4aaf23c555afc162158c135745cb0444bdbc","modified":1692189171920},{"_id":"source/_posts/test/hZ9SjgCDRMUGOxT.png","hash":"0c9770e97329528c62d32ca91369a628e438d171","modified":1691667521878},{"_id":"source/_posts/python笔记/hZ9SjgCDRMUGOxT.png","hash":"0c9770e97329528c62d32ca91369a628e438d171","modified":1691667521878},{"_id":"source/_posts/python笔记/image-20230710193859950.png","hash":"c3115bdecca74b0fd894c9807841c552e2b91941","modified":1691667338675},{"_id":"source/_posts/python笔记/image-20230715193157730.png","hash":"e151abfc823d57f9eb110a1e0a7ebbf757baa77a","modified":1691667437971},{"_id":"source/_posts/python笔记/image-20230718201445587.png","hash":"39d6dd9848151b29dadd6b7dc0d0d51f6dc7d603","modified":1691667455107},{"_id":"source/_posts/python笔记/image-20230724153243607.png","hash":"858f129658f8915e896fe13a91a1af393065bc27","modified":1691667500213},{"_id":"source/_posts/python笔记/knIXUFbEWBLwZJa.png","hash":"28cb8b72b50fc9ba705d7a4cec0cb0cdbdfac2ef","modified":1691667519839},{"_id":"source/galleryGroup/高清图片1/22.jpg","hash":"196e219639a4a41746c3c8f9f7d720c9d0e63278","modified":1692282005110},{"_id":"source/_posts/Linux笔记/image-20230725191831967.png","hash":"966159076d7994591df59164d3ab68b577dec803","modified":1692155071431},{"_id":"source/_posts/Linux笔记/image-20230725192233909.png","hash":"ad630586ab9328ccfb2775841a5e0b548728dd04","modified":1692155075521},{"_id":"source/_posts/Shell笔记/image-20230728204933405.png","hash":"b4392de7c2b56456c447b5d55f59b39c81d1c96f","modified":1692154747327},{"_id":"source/_posts/Shell笔记/image-20230729100834110.png","hash":"0c80cda7e131c23757bd4768eab97f48ddfc5add","modified":1692154818479},{"_id":"source/_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/11841aceda8e43e8adfbeac278967917.png","hash":"7d068db975367dbf75b7663beeca351988b5894e","modified":1692341080051},{"_id":"source/_posts/python笔记/image-20230710194234672.png","hash":"0027225092c488ef021dbf6fbe52cad1074dcf1d","modified":1691667340541},{"_id":"source/_posts/python笔记/image-20230713201909704.png","hash":"ca146eb2545f4e37837dad2536605e341d527b37","modified":1691667396886},{"_id":"source/_posts/python笔记/image-20230713220504552.png","hash":"3749a076625f6b2b1388890f6a1ebd815c410433","modified":1691667406520},{"_id":"source/_posts/python笔记/image-20230717203553391.png","hash":"9fd38c061f8fb28032cc1bd086782e4b4f8dd488","modified":1691667448725},{"_id":"source/galleryGroup/高清图片1/8.jpg","hash":"5d59b6dc42f49fdc5ce5931752765d657d2343c3","modified":1692282776460},{"_id":"source/galleryGroup/高清图片3/2.jpg","hash":"2d29d7333d2429c5941ec41c7ba11db7b25cc8e2","modified":1692283429471},{"_id":"source/images/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.jpg","hash":"beec6eac214878a23603930a344d0b05330b133d","modified":1692107116630},{"_id":"source/_posts/Flink 处理迟到数据/29667c7b2c474359bdcea93d920fb133.png","hash":"e6dfe0f63df92298e6ccd146433b260614fc6215","modified":1692187838182},{"_id":"source/_posts/Linux笔记/image-20230725201613953-1692155153717.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692155153722},{"_id":"source/_posts/Linux笔记/image-20230725201613953-1692155175847.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692155175881},{"_id":"source/_posts/Linux笔记/image-20230725201613953.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692155140918},{"_id":"source/_posts/Linux笔记/image-20230725202727704.png","hash":"68166f2f0a478c0fb6a68a06de59240723b7a988","modified":1692155158896},{"_id":"source/_posts/Linux笔记/image-20230731090649262.png","hash":"8a962800fb46a23445358e063398544e0a5f7788","modified":1692155324183},{"_id":"source/_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/2ea6f2e3bd9047b5b492e25b1ade73dd.png","hash":"2ad2a4abfd5e8ea47f04e85d74e7e8ac95bc3e85","modified":1692341077568},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/ac873024932c4287ab8205db9afe0584.png","hash":"41257ee0b36be707a6ca83025c44cd8474f6a146","modified":1692189168402},{"_id":"source/galleryGroup/高清图片1/19.jpg","hash":"30a1c21136ae1783741f24e6791aa0a48a626655","modified":1692282901200},{"_id":"source/galleryGroup/高清图片1/4.jpg","hash":"58143b186719039718e251fee8457fd6fb9092b3","modified":1692282713991},{"_id":"source/galleryGroup/高清图片2/13.jpg","hash":"0755914d86977bfe53611342fa0566f0a6fbbaa7","modified":1692283040696},{"_id":"source/images/备用图片/wallhaven-gpmwpq.jpg","hash":"0755914d86977bfe53611342fa0566f0a6fbbaa7","modified":1692106820829},{"_id":"source/_posts/Linux笔记/image-20230725194021377.png","hash":"3a4caef6b585249a5b45273f4efbd35288981cef","modified":1692155109887},{"_id":"source/galleryGroup/高清图片3/10.jpg","hash":"c8f32600b704921e2e35de6d9f8f613b4b65659e","modified":1692283544890},{"_id":"source/images/mysql笔记.jpg","hash":"d654b51c557b98cb6c1c424c905795076b85ec48","modified":1692106628283},{"_id":"source/images/shell笔记.jpg","hash":"f5bcc0354e260aa57e5105b08b8ea8a9e837b50f","modified":1692106891567},{"_id":"source/_posts/Linux笔记/image-20230726210518731.png","hash":"8d2c1390d40173e1fd2889e581a839bb9fc5f4ef","modified":1692155137113},{"_id":"source/_posts/Linux笔记/image-20230726210638937.png","hash":"d228f4264296e372c0fdad4c25cee1b304ab4f42","modified":1692155138964},{"_id":"source/galleryGroup/高清图片3/8.jpg","hash":"eaf45956b98f083787cea28b25e9a64afebecc92","modified":1692283522895},{"_id":"source/_posts/Linux笔记/image-20230725194432819.png","hash":"3374d4d84626c5bb1a3f638e72defa0008821c6c","modified":1692155113491},{"_id":"source/_posts/Linux笔记/image-20230725200304363.png","hash":"be7df5a9bbc298f8d102984811836e2d8d6b4bf5","modified":1692155126861},{"_id":"source/galleryGroup/高清图片2/11.jpg","hash":"6494f8428533abbd48754ed74e96a54a16e23a53","modified":1692283031628},{"_id":"source/images/flume实时采集mysql数据库的数据到kafka.jpg","hash":"b445ea45e40537e69fe3f2aef30e40a4230be49e","modified":1692107120147},{"_id":"source/images/linux笔记.jpg","hash":"f87dfd4c34a4493b56f576ad751abd892856605f","modified":1692107055943},{"_id":"source/galleryGroup/高清图片1/13.jpg","hash":"2fb8065f01ed051f511ceb400709b9f5f45e50ff","modified":1692282828726},{"_id":"source/galleryGroup/高清图片3/4.jpg","hash":"cbe20c30d6fff410a7accd9410a079870ab6b4a4","modified":1692283445005},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"3e1f11eef1bb74b0ebb1fe8ae66c3ed1de1fc36c","modified":1691932650887},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/custom.css","hash":"f7fa52423342fda2d23feb9ca9fc960d8b6eec91","modified":1692235584530},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/toumingdu.css","hash":"dd2357b973f0264b3f130facd5ce9ac1e615d3fd","modified":1692187583205},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/sakura.js","hash":"f7251d0108f9a0e8069b464c5d00305cdb02abcf","modified":1692259379525},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1692242522471},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":499162500000},{"_id":"source/images/留言板.jpg","hash":"ca3e9e728c359ca2287532903e5e74d89c4b7109","modified":1692670788450},{"_id":"source/images/python笔记.jpg","hash":"33859a8227a6ddf1758a04d465f42f93fff13aef","modified":1692083897873},{"_id":"source/galleryGroup/高清图片2/1.jpg","hash":"33859a8227a6ddf1758a04d465f42f93fff13aef","modified":1692282905934},{"_id":"source/galleryGroup/高清图片2/15.jpg","hash":"ac0afc18702068535f29a5ba7a707f590213243c","modified":1692283057712},{"_id":"source/galleryGroup/高清图片3/16.jpg","hash":"7768e6b9768624193d9e0bb9a5478f0ca679320e","modified":1692283995080},{"_id":"source/galleryGroup/高清图片4/1.jpg","hash":"11d3d163a371115510bdc97638b73993731e13b8","modified":1692284054678},{"_id":"source/images/Flink 处理迟到数据.jpg","hash":"0a287e749a80242b573a3e5f220a6f30d2363c1c","modified":1692106781258},{"_id":"source/galleryGroup/高清图片1/12.jpg","hash":"0a287e749a80242b573a3e5f220a6f30d2363c1c","modified":1692282819602},{"_id":"source/galleryGroup/高清图片3/6.jpg","hash":"91e0ae3e770ad0bf024d7bd1e7c8f0a2c500b3ae","modified":1692283497913},{"_id":"source/galleryGroup/高清图片1/10.jpg","hash":"56761c82434727763fc307eb1288d5ac6e839d0a","modified":1692282797920},{"_id":"source/galleryGroup/高清图片4/3.jpg","hash":"a5798c4a301f9e8479cb87a808e244b9859e62e6","modified":1692284066958},{"_id":"source/galleryGroup/高清图片2/12.jpg","hash":"4ce9f4293a305feae1732634474806ba13d58476","modified":1692283037359},{"_id":"source/galleryGroup/高清图片4/2.jpg","hash":"88edacd4ab0b04398c2f1af2b21fa90de44299d4","modified":1692284060563},{"_id":"source/galleryGroup/高清图片1/5.jpg","hash":"078a88fb0b6ad4a2779dfa3e972b9257cf2e3a21","modified":1692282723536},{"_id":"source/galleryGroup/高清图片1/9.jpg","hash":"21ccc397fed20d32955c6c8a80b13cd1bcdbe99a","modified":1692282783819},{"_id":"source/galleryGroup/高清图片1/11.jpg","hash":"cf29177108c1c4e4a63697612353d534860cbd40","modified":1692282801724},{"_id":"source/galleryGroup/高清图片1/3.jpg","hash":"257af056fba2f293fecdb044a41c989d024acea8","modified":1692282710776},{"_id":"source/galleryGroup/高清图片2/5.jpg","hash":"28c5e6af7c4185f7c93e68ac8099a7c6e01a918e","modified":1692282983029},{"_id":"source/galleryGroup/高清图片1/20.jpg","hash":"52753971c3582a46271b4b81bf3c13295b50d00f","modified":1692281998123},{"_id":"source/galleryGroup/高清图片1/15.jpg","hash":"9c18aa6e56501db9d61f8c4e6e9f338d6ac9c253","modified":1692282853707},{"_id":"source/galleryGroup/高清图片3/13.jpg","hash":"88c15aecc688d036ed613acd664ea3d65a8ec008","modified":1692283652369},{"_id":"source/galleryGroup/高清图片1/14.jpg","hash":"35585827600a2a0c76a811406f5bbccf89621d68","modified":1692282835292},{"_id":"source/galleryGroup/高清图片2/18.jpg","hash":"3aefd201969cb5e80ab98bd05887b0d6d8dcbf9f","modified":1692283098874},{"_id":"source/galleryGroup/高清图片3/17.jpg","hash":"c5cb1db2f20acf955b70c4d5cbedb051cc55774e","modified":1692284009273},{"_id":"source/galleryGroup/高清图片1/1.jpg","hash":"ad8f56bf3f26ae04f524cea0f5f0f92b70170536","modified":1692282591075},{"_id":"source/galleryGroup/高清图片1/16.jpg","hash":"74b55b50c35844e87e8d7457163c8c49a352babd","modified":1692282872034},{"_id":"source/galleryGroup/高清图片3/9.jpg","hash":"868b1739a488794326de296c21e38dad7520810a","modified":1692283535439},{"_id":"source/galleryGroup/高清图片2/10.jpg","hash":"29734d9ff7d3bed01a1c05fec157aa7a9e934fa6","modified":1692283024722},{"_id":"source/galleryGroup/高清图片3/3.jpg","hash":"a4e8bcdce855626b198eaea891df657d4f6a9123","modified":1692283438051},{"_id":"source/galleryGroup/高清图片3/14.jpg","hash":"6cc103a6e243bad35c21499af7ff558a6c1fb320","modified":1692283693016},{"_id":"source/images/高清图片.png","hash":"042001af1f78db37a94215e29a81d444a4a89fb7","modified":1692262417065},{"_id":"source/images/备用图片/wallhaven-rrpelq.jpg","hash":"16cf2329dd68d206f0afa49699af9660c338322c","modified":1692107267293},{"_id":"source/galleryGroup/高清图片2/4.jpg","hash":"b51e4a593a66765a5b386e7b14cb7a0cfc3f2563","modified":1692282975973},{"_id":"source/galleryGroup/高清图片2/7.jpg","hash":"f7f6be55c46d49fda15ea0760950b30c4a37be83","modified":1692282993074},{"_id":"source/images/备用图片/wallhaven-9d927d.png","hash":"f7f6be55c46d49fda15ea0760950b30c4a37be83","modified":1692107122737},{"_id":"source/images/music.png","hash":"0545a2539c8b5a4c8bc918d4e92d60ddf10f18d5","modified":1691935484276},{"_id":"source/galleryGroup/高清图片3/5.jpg","hash":"2e9763cc15e9b9f330079e4cbc859c9dedd6dc5f","modified":1692283489033},{"_id":"source/galleryGroup/高清图片3/7.jpg","hash":"9779d9c6d02cc7edc503fdc05f17e3d75ef8aa6a","modified":1692283515394},{"_id":"source/galleryGroup/高清图片4/9.jpg","hash":"79da98a78f038401f2a5cf70163af9c50d5e5f98","modified":1692284669792},{"_id":"source/images/图库.png","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692107026218},{"_id":"source/galleryGroup/高清图片1/2.jpg","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692282641466},{"_id":"source/images/备用图片/我喜欢的音乐.png","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692107026218},{"_id":"source/images/备用图片/wallhaven-qzm3gq.jpg","hash":"d28f03f31c98b041e8597205cc03c7d20691b25f","modified":1692107263334},{"_id":"source/galleryGroup/高清图片1/23.jpg","hash":"d164e3ceaf307d1db1411b2b5b449fb6d9eaced1","modified":1692282011602},{"_id":"source/images/我喜欢的音乐.jpg","hash":"b98b90df3c4678bb0a7cb61fb4471692250fc6a7","modified":1692281991120},{"_id":"source/galleryGroup/高清图片1/6.jpg","hash":"6f39a41f45cb869d7ef7e306582c9bc92fa44267","modified":1692282765701},{"_id":"source/images/test.jpg","hash":"ab3723c45a023de792210bb20e9534805a7d2c86","modified":1692106803099},{"_id":"source/galleryGroup/高清图片2/3.jpg","hash":"ab3723c45a023de792210bb20e9534805a7d2c86","modified":1692282966100},{"_id":"source/galleryGroup/高清图片3/19.jpg","hash":"8afc2bda0f5b1caa3ce674ae20bf5190c1d2a188","modified":1692284043191},{"_id":"source/images/分类.jpg","hash":"2b684f70776a2359942ca68748d7e27c47955622","modified":1692283008429},{"_id":"source/galleryGroup/高清图片2/8.jpg","hash":"2b684f70776a2359942ca68748d7e27c47955622","modified":1692283008429},{"_id":"source/images/备用图片/wallhaven-kxlgj6.png","hash":"88188b2f42139bb04cb6fb7e097cfbd63870e5c3","modified":1692107020831},{"_id":"source/galleryGroup/高清图片2/14.jpg","hash":"235333832f3ff9356c6c51b0a0be01418fab4e22","modified":1692283051026},{"_id":"source/galleryGroup/高清图片3/11.jpg","hash":"f8375d00df4630c53eead37628631e3f470dfd49","modified":1692283567795},{"_id":"source/galleryGroup/高清图片2/19.jpg","hash":"80b35cb4d6e4a43dbd11ed7730b23a1b4f13517f","modified":1692283111177},{"_id":"source/galleryGroup/高清图片3/1.jpg","hash":"f3f076a4040c08ce55712e7e4fe89d685a601acd","modified":1692283424540},{"_id":"source/galleryGroup/高清图片2/9.jpg","hash":"86358c3194a0620035088ad069e89e46b4f06475","modified":1692283014428},{"_id":"source/galleryGroup/高清图片4/10.jpg","hash":"fb47874a97e9c8bf29f881536fb7887b012d2c75","modified":1692284679035},{"_id":"source/galleryGroup/高清图片2/17.jpg","hash":"835894786d1bd5c41eabf7b41a1f39d7c87abcef","modified":1692283088436},{"_id":"source/galleryGroup/高清图片1/18.jpg","hash":"e38b80f9fa51883be96e59f25e53c7ed08b2ca39","modified":1692282893694},{"_id":"source/images/备用图片/wallhaven-rrpy5q.png","hash":"0bf81deafa4f93053c1292f06347ae678263440b","modified":1692106864083},{"_id":"source/galleryGroup/高清图片2/16.jpg","hash":"aa8c7cb13adfb8ef39253c80d9a62c6ebf57054d","modified":1692283078505},{"_id":"source/galleryGroup/高清图片3/18.jpg","hash":"1e3fc208224b6229c7d3e736f274552a495e49a6","modified":1692284021159},{"_id":"source/galleryGroup/高清图片1/17.jpg","hash":"92eaba081c5850a53727199412963305fcb23b02","modified":1692282882349},{"_id":"source/galleryGroup/高清图片4/7.jpg","hash":"6a85e5e142de6910d888e9b837af950837202e1e","modified":1692284659691},{"_id":"source/galleryGroup/高清图片4/4.jpg","hash":"b046d2dc877e3eebc86f4b7be721d15b2fdca71f","modified":1692284206028},{"_id":"source/galleryGroup/高清图片1/7.jpg","hash":"07288222f193515b8130044aebb37e326837189c","modified":1692282773321},{"_id":"source/galleryGroup/高清图片3/15.jpg","hash":"73c6307674a2d417de223847e39e27e2c0edee12","modified":1692283983473},{"_id":"source/galleryGroup/高清图片4/6.jpg","hash":"f0de2a6e608b550c18509d296afbe2d8edb80458","modified":1692284641964},{"_id":"source/images/top_img.png","hash":"ac330e5c1e49ae5f7af791245c67628d569d4a27","modified":1692083165345},{"_id":"source/galleryGroup/高清图片2/2.jpg","hash":"2240fe7ebde4d6221e99bccb9f4bc5953b4872a7","modified":1692282941684},{"_id":"public/search.xml","hash":"a6603f322a04d08f5fb257699b7fa74c492f6ffc","modified":1692673886089},{"_id":"public/404.html","hash":"78d8d7555f59d8f72efee60097f9f724daeb31bb","modified":1692673886089},{"_id":"public/messageboard/index.html","hash":"1f035c707e62b6d22bf2ec97ab3553f7e16f9b7a","modified":1692673886089},{"_id":"public/categories/index.html","hash":"c948fdf09478e86f31d13b145c18cfd44c197ed3","modified":1692673886089},{"_id":"public/galleryGroup/index.html","hash":"3a8ac164dbfdfd513e4110b35afda4a4e9e0b3bd","modified":1692673886089},{"_id":"public/link/index.html","hash":"9f00c8e20cb57763647319de0da269716be39f84","modified":1692673886089},{"_id":"public/music/index.html","hash":"577e7a831e7907ad63706097f6e5a670416dcc43","modified":1692673886089},{"_id":"public/tags/index.html","hash":"9496ac5865870303db5eeb172a7d09db28382df0","modified":1692673886089},{"_id":"public/galleryGroup/日常分享/index.html","hash":"08e300e497d3811e1b66f7abe5f8c44c8bc55d00","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/index.html","hash":"5153845a1560903c1501388008037571a374dae6","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/index.html","hash":"b6fd9d51abae4a205d4db2c5c18c875c253b8bf7","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/index.html","hash":"f59fbba86218c846c5f8da65b95890be558d6754","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/index - 副本.html","hash":"f7c7bcc7edf63063f80a49c3032a402c0f165b96","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/index.html","hash":"bddeebd76d749d9ecf7178a38bd1275924f654a3","modified":1692673886089},{"_id":"public/posts/bc5825f3.html","hash":"2c5291163eb4ee27f55a34b1d030510cba10922e","modified":1692673886089},{"_id":"public/posts/51e65fa8.html","hash":"5189c9995080d100aa236bf35bdd397396a15a34","modified":1692673886089},{"_id":"public/posts/4a854bd2.html","hash":"6fd66e81b294183f54fd4cc7d16b3d5f72fab3b8","modified":1692673886089},{"_id":"public/posts/638d4d8a.html","hash":"f5c42d47d1bb2dd0a096f9bbf39ae3427e12a989","modified":1692673886089},{"_id":"public/posts/c3711ab9.html","hash":"2113ea8eeed3f4b74fdbc4e2d9e08dd2065ecddd","modified":1692673886089},{"_id":"public/posts/cff900a3.html","hash":"51d76779c3ecb0f2fc6725a03a708b04728b708b","modified":1692673886089},{"_id":"public/posts/c00b24b1.html","hash":"7f8aeb39c53d34d8c1c8f0775a8c3d558c72be00","modified":1692673886089},{"_id":"public/posts/d87f7e0c.html","hash":"ec9da088a7d214e81689376763c5df4463702707","modified":1692673886089},{"_id":"public/archives/index.html","hash":"58d70c87c55f1fd0b239e8fe8253daa5c1f00f44","modified":1692673886089},{"_id":"public/index.html","hash":"6f1f554a71aefa4bbc8be950486405d1526a94d9","modified":1692673886089},{"_id":"public/archives/2023/index.html","hash":"a7b9d91aa98cef9ea910d57f1040020e63c66b9f","modified":1692673886089},{"_id":"public/archives/2023/08/index.html","hash":"d701df836b87f6994b1a28c620d18513f1b8f0a9","modified":1692673886089},{"_id":"public/categories/Flink/index.html","hash":"dbfe965aabadfd5521af83bfbb110f78cf26a985","modified":1692673886089},{"_id":"public/categories/Linux/index.html","hash":"0c7e486eb4c98fec73fa473ed8fc423b0c34c2dc","modified":1692673886089},{"_id":"public/categories/Bug/index.html","hash":"f6a2ba66fb6d2ce9d4e1cfbfe42c7c0cb6d939b4","modified":1692673886089},{"_id":"public/categories/MySQL/index.html","hash":"20aca2d317d2ff7c6c53d692f1ff67bd66425131","modified":1692673886089},{"_id":"public/categories/Python/index.html","hash":"7934cb8d81e7e16aa630d22920bf803b3eeca8f9","modified":1692673886089},{"_id":"public/tags/Python/index.html","hash":"c02122ad727d51ad764d76cd8a1f47d19b82a366","modified":1692673886089},{"_id":"public/tags/Linux/index.html","hash":"f57bc741d46314fe7036c3e8b134602556958437","modified":1692673886089},{"_id":"public/tags/Spark/index.html","hash":"670406d61f53cac70e0c6591dcf20c76bb7b3e76","modified":1692673886089},{"_id":"public/tags/Bug/index.html","hash":"8c277dd6560a67af202e30dfe7e63cee47f68cad","modified":1692673886089},{"_id":"public/tags/MySQL/index.html","hash":"19e57976f985b23ab4b47fa3331fbd7fa28b8aa5","modified":1692673886089},{"_id":"public/tags/Flink/index.html","hash":"904760f2b4488b7739af43b268d96730e97cd882","modified":1692673886089},{"_id":"public/tags/Kafaka/index.html","hash":"a89f468b8b46ec78bcf292752bad53200f1ccc02","modified":1692673886089},{"_id":"public/tags/测试/index.html","hash":"5d2a383d1f9a49342f6c994831f9f62a4c0bd31f","modified":1692673886089},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692673886089},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692673886089},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692673886089},{"_id":"public/images/aHR0cHM6Ly9naXRlZS5jb20vd2FuZ193eC9pbWFnZV9iZWQvcmF3L21hc3Rlci8yMDIwLzIwMjAwNDE4MjI0NDI3LnBuZw.png","hash":"6a01073d90efef8fdc62ff1b43b56e29f7eedef0","modified":1692673886089},{"_id":"public/images/头像.jpg","hash":"a3bdf0917c2fa179bcb38775b72cf67438ecce62","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/21.jpg","hash":"1412b0e40b0f8f647e74769e5e4ceb0672b9485f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/12.jpg","hash":"ca0ec257aa4756361d03051920fa33febfab4d1d","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/8.jpg","hash":"4fea183cecd301490aff6dd373f7bd9bdce9cb5f","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725164332151.png","hash":"edb11186280befba332ed9e3d45282eb8a35dfe5","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725164534031.png","hash":"541af85d1f4adad879c4fd1087b43bf2d3cd66e4","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725190147422.png","hash":"e7723d2232177f6b6b5cabd12deee2f0154c048e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725190958440.png","hash":"fe2cee35a4373e84fa8346f1aeba31f3d567d8bc","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725191041627.png","hash":"0d57ee1c6bef61d45cc8f77c7ecd5dc67c2e6e72","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725191430990.png","hash":"744497f844cb8ca73b2968e3a81d13327ecd6480","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725193304333.png","hash":"b618acf5d450563751a68365fefcf63f0d1ad60b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725194117040.png","hash":"9ed0d03d101171027a144879c05f832ece356680","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725195157685.png","hash":"776a48286c951261e6546e4927915ea5a8073124","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725195717493.png","hash":"bced99984ee8b5707343e7b52e20da8d7a4bd0c2","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201051683.png","hash":"8b898e077056793b16e165202567d5cf615d82c6","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201655502.png","hash":"02ff50f862bb2c299c9d7f9c802b17ee18fd1200","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201655502-1692155155569.png","hash":"02ff50f862bb2c299c9d7f9c802b17ee18fd1200","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725204854629.png","hash":"c9b2d268e7f3fbce5902f8fb7cf5fdb0a50904da","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725204949968.png","hash":"c1d9ede045d7a2fd69d5242a5c98554cea2c5f1f","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725205030096.png","hash":"9628a81f9a94f320dbb010ba8aca7c01ec0dd38c","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725210604931.png","hash":"1af912b569d2f802ec6bce66b84795194d1bc202","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725210839326.png","hash":"21e6d0263f3ce8cf113c9dbfbf38e2b8a6665bd6","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725212127382.png","hash":"77465bde36ed01ad9a645f46b9dcf243b74101fb","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725213825941.png","hash":"a09eb9d9cfd5d7e64d522d9d8f2dc87f3799a8f3","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725214040146.png","hash":"78f27e6e3a29ea59431cb119aad8562decca00fd","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725214239212.png","hash":"2c075024d86a1f562373d970cc162c911210825a","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725220926475.png","hash":"395b048b0cd03b2cddc8355f8e940a4aa2f0de24","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725221157481.png","hash":"fbc3b97871d807095ae81aa0cbf23cf420b1a226","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725222708447.png","hash":"59d0af16f47119f67dc9361167287a6e54945e52","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725223150054.png","hash":"957d7960647a17d6ad433224c825a00f80de3c91","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725224740961.png","hash":"254b870eb2a0cd39b86d23c1ff44c6c2f5291375","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725225334022.png","hash":"91f606c52c5d2f894a069f0dab841d72a472b289","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725224604750.png","hash":"fc7053dd38f2bae0fb362916a19b998dc538c206","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725225041772.png","hash":"8f825b4ee1d025fc3d2bd526b5e07d175b590a0a","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725225905638.png","hash":"72393127871c7e204cfd5da3bd1123b79228242d","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726212127488.png","hash":"c74956c271d671077b5ec38805347c86faafdc5b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727184316885.png","hash":"53bb0c55351ef0d5b7e3059ace2fea217385e397","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727184609219.png","hash":"5e52c22820d10ae5241d1bb5cbc0c9db2c85eb1b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727193920519.png","hash":"d304c4d1d60e63a40c100d73d2b34307d114d14e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727194517260.png","hash":"3ae5fb78209839847a1c148e6d925b8f93a8295a","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727211150030.png","hash":"3dbebe9afc909b078e545af2a596359ae97746c6","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727205255514.png","hash":"f8c8483a5c6ea05809896219144a58867009b296","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727213145890.png","hash":"c43db0c28e962b10f265c0272fe48eb988919958","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727214739399.png","hash":"354507f8d847d637c6b71f3825f2985d0428aae2","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230728100939773.png","hash":"b48eb7135cdcacae1ce8aec8fed928582852f54a","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230728101006301.png","hash":"96805c452cbf5e5f49e4c42b25f92d4cc9dc433e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230728101020819.png","hash":"f83ce5bcda9f0d68e03eef124e30fd1e31f2d051","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230729145832928.png","hash":"05c3a3a9f5b0b985d8048391a945d00f65b5632c","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730164249051.png","hash":"a86f2a156e2d861b4ad28785e413fbbb7d3da240","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730164334687.png","hash":"10cb23a567cccd65cabda6d38d170bce50cc333d","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730163321077.png","hash":"cd351e832ab619ea73a901e8df15e32441d2fd3f","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730165344441.png","hash":"2ebd1abe265ccc337b2a8b082b517bc959a5173b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730171241699.png","hash":"c040536b059ec717f7de315fdb8b9ce7dda91bc7","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730170533372.png","hash":"1c4cb2691ded3e299167d1e998b7ce86ebd3b5a7","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730164816754.png","hash":"7f42d2478c2c632fd6dc10e149596b1f22d747f4","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730172211211.png","hash":"b697029788f797fe95f922062cd0d7da763052e6","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230730174650797.png","hash":"7b3cb7fc334412ff0b19095023dddef6f6e82a02","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728213715198.png","hash":"8a9df9825ce198cbc8f1acacce9f93b78ca5ffb1","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728215607642.png","hash":"53ef4b050e655773e3ac88442555c701be398395","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728220325735.png","hash":"6540033bf0528ca5403ed9882cfe38916eccffd2","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728220333688.png","hash":"31335376e8eb9a97bf5514fef0a3c0fd9cbb922a","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728220459641.png","hash":"7fc65b5914e7506d2bc3b3ac810ad0a73a74bc9f","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728220405690.png","hash":"00f38f3420b6035e53410136d40bdb6a56b9db9b","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728221059362.png","hash":"e7e711e00515109b7dacd5c4b4eca744f2846d38","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728220538400.png","hash":"aef0b6345f7dc19b4b7a058e8fd1eddee4a2e05f","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730151208807.png","hash":"4a523e7f79d4463e6ce5b2894a54ee4b280fb5dd","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730151543568.png","hash":"02282ce9e3999b822abbe136dab99c23e44530ab","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730153053695.png","hash":"636678071b1ac6db10f5179bc76c5d2f1ed038af","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730153345945.png","hash":"8a4bc71fe6d34405ac99f0f7fd4dabfd532fa104","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730154054651.png","hash":"ed69b4bd83f06f765946042261785ccb07e7d776","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730153913576.png","hash":"bfb665b0c5f4d4e8afe269f5fc295e575d9e50ed","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731161918891.png","hash":"70037440686d3841ad28169965f8cf0544c627e1","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731191501709.png","hash":"d732806a5879166a7f205f540042d9aa4d3b45ac","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731192045754.png","hash":"0bc915ee07afaf4c1499d10e2378bab77a13ff67","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731192623335.png","hash":"948eee8ca670bc5cc92c11579882218ac0bf89e9","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731191806584.png","hash":"4f7fa7efe4f22cdcb078801a19e731f1f552c736","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731194630101-1692105959933.png","hash":"c9c82a6bc5a48a79b3bf084094ead5af1fe9cc3e","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731194630101.png","hash":"c9c82a6bc5a48a79b3bf084094ead5af1fe9cc3e","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731195153935.png","hash":"c2f11d6aaba8277f8362613a13d37465405cd8c2","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731204742543.png","hash":"6dd53ca975fb4a08add75a060945af5f12903ceb","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731201052074.png","hash":"1bff1c8366a0d54e319587171b7ca7b32d93a49d","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731204818468.png","hash":"a847605df72280e58dd07df1765273eadc0095d7","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731204854988.png","hash":"7cfcc8cffd15517083e1141d7d33fc1c01865668","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731205244443.png","hash":"eea7ef20c67643906402dbf80e87ee6995514300","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731205050008.png","hash":"b8bf99b5b80a6ec09db69b0ab2347fed72e99fca","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731205204993.png","hash":"f3d3b32384dc31f177ad70f01bc997ca6c1c168e","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731212623170.png","hash":"a59b782860003ecf674b2a841adac1d2fec5fe67","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731213327762.png","hash":"242207e3a17f1ffbedffed33f71682d28d3f41d6","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230801190255233.png","hash":"48ec4cdae4b9054e8393b035b8ef6be0ae6fc258","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230801191635470.png","hash":"1f5df19e7e950990ad7aa4b1d71aedf3bb18db9a","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230801191658112.png","hash":"334ecc9ee79fa639d54edcae8002f7a3930270ee","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230801195946980.png","hash":"1de64b0d6df9ee7894a1a8ba89cfb3b89dceb432","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230801200055431.png","hash":"70f5e382c827f302bfa8dec1c29398b5f9d4c1c8","modified":1692673886089},{"_id":"public/posts/d87f7e0c/image-20230710200106371.png","hash":"cbf821068fe412e247a15dd32b4db94ff74cf2df","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230803213442968.png","hash":"c6da74770f9869e1256ca92600b5b3cda1d3c2ac","modified":1692673886089},{"_id":"public/posts/4a854bd2/14142856df9b4ceb91c3d85b4b017eb4.png","hash":"421848a43c467f655b607e4e41ad90efb621c86d","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230803140232355.png","hash":"d1f089f238ac5e65bdd213e54eed67645a3d7e96","modified":1692673886089},{"_id":"public/posts/4a854bd2/416d1b9dd07d4e43bbaabeb02047e809.png","hash":"4f3008b5371a000f982b6fb319a97275ae3c1c87","modified":1692673886089},{"_id":"public/posts/4a854bd2/5c0301edb3124c6191bc2a33c805eddc.png","hash":"3c7ad5dd17d586a38945cf6319e9f12bc7e8b992","modified":1692673886089},{"_id":"public/posts/4a854bd2/5a3bc3a8ba45423d94fa4fbe005973b3.png","hash":"74dfa4e19cfbae7613167e62e88b927cb12bdc12","modified":1692673886089},{"_id":"public/css/toumingdu.css","hash":"dd2357b973f0264b3f130facd5ce9ac1e615d3fd","modified":1692673886089},{"_id":"public/css/custom.css","hash":"0f6f116f4405e88fd91c800a5628c47c96e1017c","modified":1692673886089},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692673886089},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1692673886089},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1692673886089},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1692673886089},{"_id":"public/css/index.css","hash":"91d3bbf8e39bee84f278f60a77820b76a2a91d14","modified":1692673886089},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1692673886089},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1692673886089},{"_id":"public/js/sakura.js","hash":"7f7683eaec96549f99eaeb2bd1182bcaea3d7c78","modified":1692673886089},{"_id":"public/posts/4a854bd2/7d1527b8fdd14ee3a942f5df899f9327.png","hash":"8de9065322a22a2381d7d981051bad214ac911f7","modified":1692673886089},{"_id":"public/posts/4a854bd2/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png","hash":"895c05ca9bc6f3d0aeec93f36f6a88e7f8c37045","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710193122871.png","hash":"798cd022be9dc97136ef2e2e1d117a01bd8fac33","modified":1692673886089},{"_id":"public/posts/c00b24b1/bxmZRYfl4UXaeB6.png","hash":"d32fe239e0862186b102589dd53cfb1ed6037ccc","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710194742530.png","hash":"099bcf29bd11e9a200aefd0c506472421a0bf771","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710195906290.png","hash":"df1143640bf2e56c247ec037557e64c852094071","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200106371.png","hash":"cbf821068fe412e247a15dd32b4db94ff74cf2df","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200130611.png","hash":"dc54625879ba7e882aabe1c2ea52dde814e632ce","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711103411381.png","hash":"e5d2ce764dc53aa15ab47fdb606c45252322e1b1","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711150851404.png","hash":"1e61afade8d136af3c45b672f5ed17527378cca0","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711103427935.png","hash":"ae0d816c525137a9de5418758aca03f76d05ef8c","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711151053019.png","hash":"8a16054e28b5da0336c39ed71c30bfcb73799a2f","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711182305418.png","hash":"040438bdbf763322e22a088d63ff2c3e4deec86d","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711151030189.png","hash":"9a6e314982e3ce83ea6144031e0aab2af553b834","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230711151134903.png","hash":"d28ea1372e1d00b3efb778f8887535f004f82097","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713212833658.png","hash":"21f2c049ec2abf594a29ac246b5d5a7750ffbea7","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230714090438935.png","hash":"43fa236cc3d3a4f33a1d5e321bccf21898eb2bdd","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713221852883.png","hash":"054cc72ec39dbb1b46d9b5709f561af2455f83bd","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230714090457699.png","hash":"d1c248982a3e82904bcaa92e6fa87b410582a204","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230715194720536.png","hash":"181ab1bc11a9ffb8abf0257dd90825df2ac8c44d","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230723143523063.png","hash":"741f160bbd55c521a4315fea020001e85d1ebfe2","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230723143638690.png","hash":"f6e230dfa258621aa1ae6836eef6defd0ce514c3","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230723151140532.png","hash":"2bbb0c174b9fe4875dc55bbe04c9669be6bda4db","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724090823259.png","hash":"299edba0eab5b297ea6a9c1543097f42ecc22acd","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230723144731031.png","hash":"7b0934dbdd88950857c48ae10fd98df717767e3a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724212046687.png","hash":"9edbcc82e499c1b62a26f081e00b2a8bda0861c1","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724214335918.png","hash":"a4f906f13b6e18ce59e536993debab481f1332b9","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724212222545.png","hash":"3719e98841b374f1337185dfbdefe80531893516","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724215256243.png","hash":"57d3d8deabed22bfd8d3e3d8bed9cd1652e62ced","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724223315189.png","hash":"253bcd16be6cd10c0b97fe2aad11845a412d1edd","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724223247119.png","hash":"ebb6d5d8d521fbfcfb62ef08c73e051b4dbe49f9","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724223358859.png","hash":"8d389862f44f8659bfd651db9b47408ebfec5a12","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230725102707716.png","hash":"24caa4d3981862cbcf33c11a4dd489d4fc96d16d","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230815135457898.png","hash":"e3e2428d007864da5e17730c27b4b78a29cc0cd3","modified":1692673886089},{"_id":"public/posts/c00b24b1/LjTR2tNPAO81cnU.png","hash":"cc7c405c066200a2f39514d88a2bb05d7f44ffbc","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725190639601.png","hash":"a71bccd7d241c8ca330bee392fc3b3eb615420cd","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725190743350.png","hash":"5b6e2773ea3b297d3c2bc30baad0cfd51f035b1f","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192038917.png","hash":"d035b9b9c7ea7f448a3449ec9a518aede6ad2188","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192317190.png","hash":"83dcd3ac8c8051d46936a6995bc030611293c148","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192330984.png","hash":"f2ae8916c45e9f135de775baad155bb818f71081","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192651359.png","hash":"43ba7786799fc58666433707fb9633b50b933298","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192937089.png","hash":"5fa3a1d41d924fb16ac6700da7b15de405be3700","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725193128431.png","hash":"c9abeb5801d30252d59bd527ce245778f32cbed0","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725200621688.png","hash":"fd85a2d1dc8dc062a01fcf9083eabda3af95fa88","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201026739.png","hash":"018652cdc995831ee86325320fdf477825fe4aeb","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201748442.png","hash":"eff4d78c741865177956e7f48a72b06d3a06597b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725202522782.png","hash":"c4512e5972db17b05dd810263ddf02bc72cccb3a","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725202853702.png","hash":"e04fbc2434b336e1056573a737e4fc75b839a938","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725203045211.png","hash":"a04a92caed861a89772bd832505d50e5bd5f72fb","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725213809973.png","hash":"3a3394f34837d813a5b632844bfdb2ec203998bf","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725221833744.png","hash":"f94003aeb82bc05662eab5e2862ef890b0945735","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725222004113.png","hash":"109247feecd308510496204d2b5fcaca42704423","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725230129222.png","hash":"662e8ab785e908294a6d81a9cece19322cf084e5","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726212756839.png","hash":"a63960665ef3ca392d10b94159c151754cd9bdad","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726212412260.png","hash":"3739a801ef7bd97fc6ce5be475b882724cf33f64","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727151820522.png","hash":"347c1d501965ca801476f403fdc3dd6adee4ce20","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727183225209.png","hash":"d574cc9aac6a6ced548673727b65f6ca8bdab7b3","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727193418935.png","hash":"d7cf5b1634bd04699226ffbd657d330639cd81fe","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727194425502-1692155580085.png","hash":"5caee04f35a93f8fc7dafa28e88a0fb09dfa0746","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727194425502.png","hash":"5caee04f35a93f8fc7dafa28e88a0fb09dfa0746","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727194724286-1692155590711.png","hash":"bf3f709376ca8aad3a6f8ef53b09b672219ee30e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727194724286.png","hash":"bf3f709376ca8aad3a6f8ef53b09b672219ee30e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727200849580.png","hash":"7c678e8eadaf8a109363a2b181c687d220a2522b","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727200919785.png","hash":"f864fcc1889bdb7e36d35d65d3e8f963314b67ea","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727200934622.png","hash":"19767b296e24d310e19d223f32584105bb70bf2f","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727201038649.png","hash":"0fca6ff4e6e0184f500200e27d71904e77b4f4e3","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230727201607999.png","hash":"1e5e5596a188e089a2a45921f0af96585e75a0d2","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728211130724.png","hash":"e5816c9108607786f2f7757db20e236b5b649814","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728213452920.png","hash":"3dbec6826f300945c05278ca7248a90f203c9907","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728214023978.png","hash":"999e8eca33ddda0340b3743a0fa77f6f0be788d8","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730160038334.png","hash":"05cb2b67d5c901d0f6d78381d8be9add40d68120","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731201237975.png","hash":"3da26c6ec755779b9f89981e37fcff20bf508e48","modified":1692673886089},{"_id":"public/posts/cff900a3/image-20230731213059217.png","hash":"5d16635e101fffc84ddc93b1ba6a740820f37c85","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/22.jpg","hash":"196e219639a4a41746c3c8f9f7d720c9d0e63278","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710193716304.png","hash":"8f59d396ebf1110be4005704d158f36e7735df3e","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710193646276.png","hash":"521b67cf9cae02d91d6cfd4030b3f39a7597ac66","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710194400177.png","hash":"f33ea33342d202472511918ea6071a25873efa1a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710195406248.png","hash":"7e16792fc7ecc6a9687d6e3e1a2c32c7885e7ecb","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200739516.png","hash":"7f0b50186fb89b79764a59f329cf563ce6ed054c","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200010566.png","hash":"f7d418b197193b421238766747e084e9c242a49c","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200539139.png","hash":"8dc46e9c39146ffd656bf0e7212e37ab3779a11a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710200312751.png","hash":"4cdace65d93ddc56b5480aa02190b0e8ed277a85","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710201025426.png","hash":"ccd00cf3c10c4b48e33effa5e3451c0f48e1ed5a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710202256691.png","hash":"7efd40fe23abdf1ddd6a46407e7bbdc98f5fbb48","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710201900839.png","hash":"ba3cf40385fb3196cbe52efcaca88f725eec65c1","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713201804728.png","hash":"5876fe92cfac5994fbd16442342dc3e180b620b9","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713201620205.png","hash":"f24c9b5e4db001a4d0ba443da939f880d9619a3a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713201653705.png","hash":"6fdd4875c454f5858ee49141747ae4b8baafd3d0","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713201728513.png","hash":"69aa462f5385a14c3e569d1b223bbbddc08e9a84","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713215248858.png","hash":"2a07c98a4a8dc9385e056fa3a8530709f839faca","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230714204312252.png","hash":"d5be514d313613845ebbf70de7a860394328b695","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230718202052338.png","hash":"25f9ec70e441e1671b65d412476af46ae1cfb3ee","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230718202931072.png","hash":"6a543b6cab9628c3ebc1dab417e1a99074d9f1ef","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724153228728.png","hash":"bb218a2b53c63abfb71ff0b79e70f0a14564ee10","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725191757477.png","hash":"f65f0d0d1f2e3aa53f82c253f0eef751c6e0d0e5","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725193756322.png","hash":"1e6a67f58491c6953a97737efa028b6c9bc8ba31","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725193917275.png","hash":"f0bf3801381fb8496d4d8e8ed9a409ac434c7af7","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725194536832.png","hash":"403f1d677adae813b9022c211de766b704c489ef","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726141424420.png","hash":"8bbc05a2f094db83e2b8bad4f24f76bb248bbe54","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726141327993.png","hash":"70161868585385a24579e9ba33d62cd526bfcc5c","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728194954237.png","hash":"fbe5639b00c7ddedb94f1d20eabcdf6e58f6777c","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728213352217.png","hash":"38367822da33fc3fea72a1cc660dd8dc2ea6d5da","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730151025266.png","hash":"94b6498f999401433fb51d18a3285d1918174dc9","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230730152240408.png","hash":"e1a91415d6ebc436ad62410051075fa3cabbbd4e","modified":1692673886089},{"_id":"public/posts/d87f7e0c/hZ9SjgCDRMUGOxT.png","hash":"0c9770e97329528c62d32ca91369a628e438d171","modified":1692673886089},{"_id":"public/posts/4a854bd2/0d1b5a8572aa47119e603c7cd291307d.png","hash":"e06a4aaf23c555afc162158c135745cb0444bdbc","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/8.jpg","hash":"5d59b6dc42f49fdc5ce5931752765d657d2343c3","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/2.jpg","hash":"2d29d7333d2429c5941ec41c7ba11db7b25cc8e2","modified":1692673886089},{"_id":"public/posts/c00b24b1/hZ9SjgCDRMUGOxT.png","hash":"0c9770e97329528c62d32ca91369a628e438d171","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710193859950.png","hash":"c3115bdecca74b0fd894c9807841c552e2b91941","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230715193157730.png","hash":"e151abfc823d57f9eb110a1e0a7ebbf757baa77a","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230724153243607.png","hash":"858f129658f8915e896fe13a91a1af393065bc27","modified":1692673886089},{"_id":"public/posts/c00b24b1/knIXUFbEWBLwZJa.png","hash":"28cb8b72b50fc9ba705d7a4cec0cb0cdbdfac2ef","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230718201445587.png","hash":"39d6dd9848151b29dadd6b7dc0d0d51f6dc7d603","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725192233909.png","hash":"ad630586ab9328ccfb2775841a5e0b548728dd04","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725191831967.png","hash":"966159076d7994591df59164d3ab68b577dec803","modified":1692673886089},{"_id":"public/posts/bc5825f3/11841aceda8e43e8adfbeac278967917.png","hash":"7d068db975367dbf75b7663beeca351988b5894e","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230728204933405.png","hash":"b4392de7c2b56456c447b5d55f59b39c81d1c96f","modified":1692673886089},{"_id":"public/posts/c3711ab9/image-20230729100834110.png","hash":"0c80cda7e131c23757bd4768eab97f48ddfc5add","modified":1692673886089},{"_id":"public/images/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.jpg","hash":"beec6eac214878a23603930a344d0b05330b133d","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/19.jpg","hash":"30a1c21136ae1783741f24e6791aa0a48a626655","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/4.jpg","hash":"58143b186719039718e251fee8457fd6fb9092b3","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/13.jpg","hash":"0755914d86977bfe53611342fa0566f0a6fbbaa7","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230710194234672.png","hash":"0027225092c488ef021dbf6fbe52cad1074dcf1d","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713220504552.png","hash":"3749a076625f6b2b1388890f6a1ebd815c410433","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230713201909704.png","hash":"ca146eb2545f4e37837dad2536605e341d527b37","modified":1692673886089},{"_id":"public/posts/c00b24b1/image-20230717203553391.png","hash":"9fd38c061f8fb28032cc1bd086782e4b4f8dd488","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-gpmwpq.jpg","hash":"0755914d86977bfe53611342fa0566f0a6fbbaa7","modified":1692673886089},{"_id":"public/posts/51e65fa8/29667c7b2c474359bdcea93d920fb133.png","hash":"e6dfe0f63df92298e6ccd146433b260614fc6215","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201613953-1692155153717.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201613953.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725201613953-1692155175847.png","hash":"24e664d8f95248ee4818463a12b10c565b8d782e","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725202727704.png","hash":"68166f2f0a478c0fb6a68a06de59240723b7a988","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230731090649262.png","hash":"8a962800fb46a23445358e063398544e0a5f7788","modified":1692673886089},{"_id":"public/posts/bc5825f3/2ea6f2e3bd9047b5b492e25b1ade73dd.png","hash":"2ad2a4abfd5e8ea47f04e85d74e7e8ac95bc3e85","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/10.jpg","hash":"c8f32600b704921e2e35de6d9f8f613b4b65659e","modified":1692673886089},{"_id":"public/posts/4a854bd2/ac873024932c4287ab8205db9afe0584.png","hash":"41257ee0b36be707a6ca83025c44cd8474f6a146","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725194021377.png","hash":"3a4caef6b585249a5b45273f4efbd35288981cef","modified":1692673886089},{"_id":"public/images/mysql笔记.jpg","hash":"d654b51c557b98cb6c1c424c905795076b85ec48","modified":1692673886089},{"_id":"public/images/shell笔记.jpg","hash":"f5bcc0354e260aa57e5105b08b8ea8a9e837b50f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/8.jpg","hash":"eaf45956b98f083787cea28b25e9a64afebecc92","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726210638937.png","hash":"d228f4264296e372c0fdad4c25cee1b304ab4f42","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230726210518731.png","hash":"8d2c1390d40173e1fd2889e581a839bb9fc5f4ef","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/11.jpg","hash":"6494f8428533abbd48754ed74e96a54a16e23a53","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725200304363.png","hash":"be7df5a9bbc298f8d102984811836e2d8d6b4bf5","modified":1692673886089},{"_id":"public/posts/638d4d8a/image-20230725194432819.png","hash":"3374d4d84626c5bb1a3f638e72defa0008821c6c","modified":1692673886089},{"_id":"public/images/flume实时采集mysql数据库的数据到kafka.jpg","hash":"b445ea45e40537e69fe3f2aef30e40a4230be49e","modified":1692673886089},{"_id":"public/images/linux笔记.jpg","hash":"f87dfd4c34a4493b56f576ad751abd892856605f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/13.jpg","hash":"2fb8065f01ed051f511ceb400709b9f5f45e50ff","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/4.jpg","hash":"cbe20c30d6fff410a7accd9410a079870ab6b4a4","modified":1692673886089},{"_id":"public/images/留言板.jpg","hash":"ca3e9e728c359ca2287532903e5e74d89c4b7109","modified":1692673886089},{"_id":"public/images/python笔记.jpg","hash":"33859a8227a6ddf1758a04d465f42f93fff13aef","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/15.jpg","hash":"ac0afc18702068535f29a5ba7a707f590213243c","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/1.jpg","hash":"33859a8227a6ddf1758a04d465f42f93fff13aef","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/16.jpg","hash":"7768e6b9768624193d9e0bb9a5478f0ca679320e","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/1.jpg","hash":"11d3d163a371115510bdc97638b73993731e13b8","modified":1692673886089},{"_id":"public/images/Flink 处理迟到数据.jpg","hash":"0a287e749a80242b573a3e5f220a6f30d2363c1c","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/12.jpg","hash":"0a287e749a80242b573a3e5f220a6f30d2363c1c","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/6.jpg","hash":"91e0ae3e770ad0bf024d7bd1e7c8f0a2c500b3ae","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/10.jpg","hash":"56761c82434727763fc307eb1288d5ac6e839d0a","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/3.jpg","hash":"a5798c4a301f9e8479cb87a808e244b9859e62e6","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/12.jpg","hash":"4ce9f4293a305feae1732634474806ba13d58476","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/2.jpg","hash":"88edacd4ab0b04398c2f1af2b21fa90de44299d4","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/5.jpg","hash":"078a88fb0b6ad4a2779dfa3e972b9257cf2e3a21","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/9.jpg","hash":"21ccc397fed20d32955c6c8a80b13cd1bcdbe99a","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/11.jpg","hash":"cf29177108c1c4e4a63697612353d534860cbd40","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/3.jpg","hash":"257af056fba2f293fecdb044a41c989d024acea8","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/5.jpg","hash":"28c5e6af7c4185f7c93e68ac8099a7c6e01a918e","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/20.jpg","hash":"52753971c3582a46271b4b81bf3c13295b50d00f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/15.jpg","hash":"9c18aa6e56501db9d61f8c4e6e9f338d6ac9c253","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/13.jpg","hash":"88c15aecc688d036ed613acd664ea3d65a8ec008","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/14.jpg","hash":"35585827600a2a0c76a811406f5bbccf89621d68","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/18.jpg","hash":"3aefd201969cb5e80ab98bd05887b0d6d8dcbf9f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/17.jpg","hash":"c5cb1db2f20acf955b70c4d5cbedb051cc55774e","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/1.jpg","hash":"ad8f56bf3f26ae04f524cea0f5f0f92b70170536","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/16.jpg","hash":"74b55b50c35844e87e8d7457163c8c49a352babd","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/9.jpg","hash":"868b1739a488794326de296c21e38dad7520810a","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/10.jpg","hash":"29734d9ff7d3bed01a1c05fec157aa7a9e934fa6","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/3.jpg","hash":"a4e8bcdce855626b198eaea891df657d4f6a9123","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/14.jpg","hash":"6cc103a6e243bad35c21499af7ff558a6c1fb320","modified":1692673886089},{"_id":"public/images/高清图片.png","hash":"042001af1f78db37a94215e29a81d444a4a89fb7","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-rrpelq.jpg","hash":"16cf2329dd68d206f0afa49699af9660c338322c","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/4.jpg","hash":"b51e4a593a66765a5b386e7b14cb7a0cfc3f2563","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/7.jpg","hash":"f7f6be55c46d49fda15ea0760950b30c4a37be83","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-9d927d.png","hash":"f7f6be55c46d49fda15ea0760950b30c4a37be83","modified":1692673886089},{"_id":"public/images/music.png","hash":"0545a2539c8b5a4c8bc918d4e92d60ddf10f18d5","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/5.jpg","hash":"2e9763cc15e9b9f330079e4cbc859c9dedd6dc5f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/7.jpg","hash":"9779d9c6d02cc7edc503fdc05f17e3d75ef8aa6a","modified":1692673886089},{"_id":"public/images/图库.png","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/2.jpg","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/9.jpg","hash":"79da98a78f038401f2a5cf70163af9c50d5e5f98","modified":1692673886089},{"_id":"public/images/备用图片/我喜欢的音乐.png","hash":"cac815070d9f16661e4106f444049c747f98e3a2","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-qzm3gq.jpg","hash":"d28f03f31c98b041e8597205cc03c7d20691b25f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/23.jpg","hash":"d164e3ceaf307d1db1411b2b5b449fb6d9eaced1","modified":1692673886089},{"_id":"public/images/我喜欢的音乐.jpg","hash":"b98b90df3c4678bb0a7cb61fb4471692250fc6a7","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/6.jpg","hash":"6f39a41f45cb869d7ef7e306582c9bc92fa44267","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/3.jpg","hash":"ab3723c45a023de792210bb20e9534805a7d2c86","modified":1692673886089},{"_id":"public/images/test.jpg","hash":"ab3723c45a023de792210bb20e9534805a7d2c86","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/19.jpg","hash":"8afc2bda0f5b1caa3ce674ae20bf5190c1d2a188","modified":1692673886089},{"_id":"public/images/分类.jpg","hash":"2b684f70776a2359942ca68748d7e27c47955622","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/8.jpg","hash":"2b684f70776a2359942ca68748d7e27c47955622","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-kxlgj6.png","hash":"88188b2f42139bb04cb6fb7e097cfbd63870e5c3","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/14.jpg","hash":"235333832f3ff9356c6c51b0a0be01418fab4e22","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/11.jpg","hash":"f8375d00df4630c53eead37628631e3f470dfd49","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/19.jpg","hash":"80b35cb4d6e4a43dbd11ed7730b23a1b4f13517f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/1.jpg","hash":"f3f076a4040c08ce55712e7e4fe89d685a601acd","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/9.jpg","hash":"86358c3194a0620035088ad069e89e46b4f06475","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/10.jpg","hash":"fb47874a97e9c8bf29f881536fb7887b012d2c75","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/17.jpg","hash":"835894786d1bd5c41eabf7b41a1f39d7c87abcef","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/18.jpg","hash":"e38b80f9fa51883be96e59f25e53c7ed08b2ca39","modified":1692673886089},{"_id":"public/images/备用图片/wallhaven-rrpy5q.png","hash":"0bf81deafa4f93053c1292f06347ae678263440b","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/16.jpg","hash":"aa8c7cb13adfb8ef39253c80d9a62c6ebf57054d","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/18.jpg","hash":"1e3fc208224b6229c7d3e736f274552a495e49a6","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/17.jpg","hash":"92eaba081c5850a53727199412963305fcb23b02","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/7.jpg","hash":"6a85e5e142de6910d888e9b837af950837202e1e","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/4.jpg","hash":"b046d2dc877e3eebc86f4b7be721d15b2fdca71f","modified":1692673886089},{"_id":"public/galleryGroup/高清图片1/7.jpg","hash":"07288222f193515b8130044aebb37e326837189c","modified":1692673886089},{"_id":"public/galleryGroup/高清图片3/15.jpg","hash":"73c6307674a2d417de223847e39e27e2c0edee12","modified":1692673886089},{"_id":"public/galleryGroup/高清图片4/6.jpg","hash":"f0de2a6e608b550c18509d296afbe2d8edb80458","modified":1692673886089},{"_id":"public/images/top_img.png","hash":"ac330e5c1e49ae5f7af791245c67628d569d4a27","modified":1692673886089},{"_id":"public/galleryGroup/高清图片2/2.jpg","hash":"2240fe7ebde4d6221e99bccb9f4bc5953b4872a7","modified":1692673886089}],"Category":[{"name":"Flink","_id":"clllqbziw000cmcux9xqa5ioc"},{"name":"Linux","_id":"clllqbzj1000jmcux0lz59spo"},{"name":"Bug","_id":"clllqbzj3000pmcux05p38fou"},{"name":"MySQL","_id":"clllqbzj6000ymcux5znr33fl"},{"name":"Python","_id":"clllqbzj80017mcuxdmj24n2x"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}],"Page":[{"title":"分类","date":"2023-08-13T13:25:09.000Z","type":"categories","comments":0,"aside":false,"top_img":"/images/分类.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-08-13 21:25:09\ntype: \"categories\"\ncomments: false\naside: false\ntop_img: /images/分类.jpg\n---\n","updated":"2023-08-17T14:45:01.716Z","path":"categories/index.html","layout":"page","_id":"clllqbzii0000mcux8stbbf2c","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"图库","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/images/图库.png","_content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup 高清图片1 非常好看 '/galleryGroup/高清图片1/' /galleryGroup/高清图片1/1.jpg %}\n{% galleryGroup 高清图片2 非常好看 '/galleryGroup/高清图片2/' /galleryGroup/高清图片2/1.jpg %}\n{% galleryGroup 高清图片3 非常好看 '/galleryGroup/高清图片3/' /galleryGroup/高清图片3/1.jpg %}\n{% galleryGroup 高清图片4 非常好看 '/galleryGroup/高清图片4/' /galleryGroup/高清图片4/1.jpg %}\n{% galleryGroup 日常分享 非常好看 '/galleryGroup/日常分享/' /galleryGroup/日常分享/1.jpg %}\n</div>\n\n\n\n","source":"galleryGroup/index.md","raw":"---\ntitle: 图库\ndate: 2023-08-17 17:02:30\naside: false\ncomments: false\ntop_img: /images/图库.png\n---\n\n<div class=\"gallery-group-main\">\n{% galleryGroup 高清图片1 非常好看 '/galleryGroup/高清图片1/' /galleryGroup/高清图片1/1.jpg %}\n{% galleryGroup 高清图片2 非常好看 '/galleryGroup/高清图片2/' /galleryGroup/高清图片2/1.jpg %}\n{% galleryGroup 高清图片3 非常好看 '/galleryGroup/高清图片3/' /galleryGroup/高清图片3/1.jpg %}\n{% galleryGroup 高清图片4 非常好看 '/galleryGroup/高清图片4/' /galleryGroup/高清图片4/1.jpg %}\n{% galleryGroup 日常分享 非常好看 '/galleryGroup/日常分享/' /galleryGroup/日常分享/1.jpg %}\n</div>\n\n\n\n","updated":"2023-08-18T03:03:24.068Z","path":"galleryGroup/index.html","layout":"page","_id":"clllqbzil0001mcuxg7arc8j0","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%871/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片1</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%871/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%872/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片2</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%872/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%873/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片3</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%873/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%874/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片4</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%874/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">日常分享</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%871/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片1</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%871/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%872/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片2</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%872/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%873/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片3</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%873/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%874/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">高清图片4</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%874/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/galleryGroup/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/1.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">日常分享</div>\n  <p>非常好看</p>\n  <a href='/galleryGroup/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n\n\n\n"},{"title":"留言板","date":"2023-08-15T02:16:31.000Z","type":"messageboard","aside":false,"top_img":"/images/留言板.jpg","_content":"\n","source":"messageboard/index.md","raw":"---\ntitle: 留言板\ndate: 2023-08-15 10:16:31\ntype: messageboard\naside: false\ntop_img: /images/留言板.jpg\n---\n\n","updated":"2023-08-22T03:05:13.238Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"clllqbzim0002mcuxe33ac0pe","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"友链","date":"2023-08-13T13:25:56.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2023-08-13 21:25:56\ntype: \"link\"\n---\n","updated":"2023-08-13T13:35:52.938Z","path":"link/index.html","comments":1,"layout":"page","_id":"clllqbzim0003mcux7m5mf40r","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"我喜欢的音乐","date":"2023-08-15T12:37:17.000Z","type":"music","aside":false,"top_img":"/images/我喜欢的音乐.jpg","_content":"\n## 可以分享自己的网易歌单链接，会被添加到网页\n\n{% meting \"8659273896\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:400px\" \"preload:none\" \"theme: #FF69B4\"%}\n\n# 歌单2\n\n{% meting \"60198\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\n# 歌单3\n\n{% meting \"60198\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:340px\" \"preload:none\" \"theme: #FF69B4\"%}\n\n","source":"music/index.md","raw":"---\ntitle: 我喜欢的音乐\ndate: 2023-08-15 20:37:17\ntype: \"music\"\naside: false\ntop_img: /images/我喜欢的音乐.jpg\n---\n\n## 可以分享自己的网易歌单链接，会被添加到网页\n\n{% meting \"8659273896\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:400px\" \"preload:none\" \"theme: #FF69B4\"%}\n\n# 歌单2\n\n{% meting \"60198\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n\n# 歌单3\n\n{% meting \"60198\" \"netease\" \"playlist\"  \"mutex:true\" \"listmaxheight:340px\" \"preload:none\" \"theme: #FF69B4\"%}\n\n","updated":"2023-08-17T14:26:10.933Z","path":"music/index.html","comments":1,"layout":"page","_id":"clllqbzin0004mcux6wc2269x","content":"<h2 id=\"可以分享自己的网易歌单链接，会被添加到网页\"><a href=\"#可以分享自己的网易歌单链接，会被添加到网页\" class=\"headerlink\" title=\"可以分享自己的网易歌单链接，会被添加到网页\"></a>可以分享自己的网易歌单链接，会被添加到网页</h2>\n    <div id=\"aplayer-JnscYcuQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"8659273896\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"400px\" data-preload=\"none\" data-theme=\" #FF69B4\"\n    ></div>\n\n<h1 id=\"歌单2\"><a href=\"#歌单2\" class=\"headerlink\" title=\"歌单2\"></a>歌单2</h1>\n    <div id=\"aplayer-ZhWxVeiw\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n\n<h1 id=\"歌单3\"><a href=\"#歌单3\" class=\"headerlink\" title=\"歌单3\"></a>歌单3</h1>\n    <div id=\"aplayer-lYStERvA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\" #FF69B4\"\n    ></div>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"可以分享自己的网易歌单链接，会被添加到网页\"><a href=\"#可以分享自己的网易歌单链接，会被添加到网页\" class=\"headerlink\" title=\"可以分享自己的网易歌单链接，会被添加到网页\"></a>可以分享自己的网易歌单链接，会被添加到网页</h2>\n    <div id=\"aplayer-JnscYcuQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"8659273896\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"400px\" data-preload=\"none\" data-theme=\" #FF69B4\"\n    ></div>\n\n<h1 id=\"歌单2\"><a href=\"#歌单2\" class=\"headerlink\" title=\"歌单2\"></a>歌单2</h1>\n    <div id=\"aplayer-ZhWxVeiw\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n\n<h1 id=\"歌单3\"><a href=\"#歌单3\" class=\"headerlink\" title=\"歌单3\"></a>歌单3</h1>\n    <div id=\"aplayer-lYStERvA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\" #FF69B4\"\n    ></div>\n\n"},{"title":"标签","date":"2023-08-13T13:23:39.000Z","type":"tags","orderby":"random","order":1,"comments":0,"aside":false,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-08-13 21:23:39\ntype: \"tags\"\norderby: random\norder: 1\ncomments: false\naside: false\n---\n\n","updated":"2023-08-17T14:34:58.151Z","path":"tags/index.html","layout":"page","_id":"clllqbzin0005mcuxe04rf1y5","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"日常分享","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/galleryGroup/日常分享/1.jpg","_content":"{% gallery %} \n![](/galleryGroup/高清图片10/1.jpg) \n![](/galleryGroup/高清图片10/10.jpg) \n![](/galleryGroup/高清图片10/11.jpg) \n![](/galleryGroup/高清图片10/12.jpg) \n![](/galleryGroup/高清图片10/13.jpg) \n![](/galleryGroup/高清图片10/14.jpg) \n![](/galleryGroup/高清图片10/15.jpg) \n![](/galleryGroup/高清图片10/16.jpg) \n![](/galleryGroup/高清图片10/17.jpg) \n![](/galleryGroup/高清图片10/18.jpg) \n![](/galleryGroup/高清图片10/19.jpg) \n![](/galleryGroup/高清图片10/2.jpg) \n![](/galleryGroup/高清图片10/3.jpg) \n![](/galleryGroup/高清图片10/4.jpg) \n![](/galleryGroup/高清图片10/5.jpg) \n![](/galleryGroup/高清图片10/6.jpg) \n![](/galleryGroup/高清图片10/7.jpg) \n![](/galleryGroup/高清图片10/8.jpg) \n![](/galleryGroup/高清图片10/9.jpg) \n{% endgallery %} \n","source":"galleryGroup/日常分享/index.md","raw":"---\ntitle: 日常分享\ndate: 2023-08-17 17:02:30 \naside: false \ncomments: false\ntop_img: /galleryGroup/日常分享/1.jpg \n---\n{% gallery %} \n![](/galleryGroup/高清图片10/1.jpg) \n![](/galleryGroup/高清图片10/10.jpg) \n![](/galleryGroup/高清图片10/11.jpg) \n![](/galleryGroup/高清图片10/12.jpg) \n![](/galleryGroup/高清图片10/13.jpg) \n![](/galleryGroup/高清图片10/14.jpg) \n![](/galleryGroup/高清图片10/15.jpg) \n![](/galleryGroup/高清图片10/16.jpg) \n![](/galleryGroup/高清图片10/17.jpg) \n![](/galleryGroup/高清图片10/18.jpg) \n![](/galleryGroup/高清图片10/19.jpg) \n![](/galleryGroup/高清图片10/2.jpg) \n![](/galleryGroup/高清图片10/3.jpg) \n![](/galleryGroup/高清图片10/4.jpg) \n![](/galleryGroup/高清图片10/5.jpg) \n![](/galleryGroup/高清图片10/6.jpg) \n![](/galleryGroup/高清图片10/7.jpg) \n![](/galleryGroup/高清图片10/8.jpg) \n![](/galleryGroup/高清图片10/9.jpg) \n{% endgallery %} \n","updated":"2023-08-18T02:24:10.908Z","path":"galleryGroup/日常分享/index.html","layout":"page","_id":"clllqbzin0006mcux0vocbqrj","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片10/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片10/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片10/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n"},{"title":"高清图片2","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/galleryGroup/高清图片2/1.jpg","_content":"{% gallery %} \n![](/galleryGroup/高清图片2/1.jpg) \n![](/galleryGroup/高清图片2/10.jpg) \n![](/galleryGroup/高清图片2/11.jpg) \n![](/galleryGroup/高清图片2/12.jpg) \n![](/galleryGroup/高清图片2/13.jpg) \n![](/galleryGroup/高清图片2/14.jpg) \n![](/galleryGroup/高清图片2/15.jpg) \n![](/galleryGroup/高清图片2/16.jpg) \n![](/galleryGroup/高清图片2/17.jpg) \n![](/galleryGroup/高清图片2/18.jpg) \n![](/galleryGroup/高清图片2/19.jpg) \n![](/galleryGroup/高清图片2/2.jpg) \n![](/galleryGroup/高清图片2/3.jpg) \n![](/galleryGroup/高清图片2/4.jpg) \n![](/galleryGroup/高清图片2/5.jpg) \n![](/galleryGroup/高清图片2/7.jpg) \n![](/galleryGroup/高清图片2/8.jpg) \n![](/galleryGroup/高清图片2/9.jpg) \n{% endgallery %} \n","source":"galleryGroup/高清图片2/index.md","raw":"---\ntitle: 高清图片2\ndate: 2023-08-17 17:02:30 \naside: false \ncomments: false\ntop_img: /galleryGroup/高清图片2/1.jpg \n---\n{% gallery %} \n![](/galleryGroup/高清图片2/1.jpg) \n![](/galleryGroup/高清图片2/10.jpg) \n![](/galleryGroup/高清图片2/11.jpg) \n![](/galleryGroup/高清图片2/12.jpg) \n![](/galleryGroup/高清图片2/13.jpg) \n![](/galleryGroup/高清图片2/14.jpg) \n![](/galleryGroup/高清图片2/15.jpg) \n![](/galleryGroup/高清图片2/16.jpg) \n![](/galleryGroup/高清图片2/17.jpg) \n![](/galleryGroup/高清图片2/18.jpg) \n![](/galleryGroup/高清图片2/19.jpg) \n![](/galleryGroup/高清图片2/2.jpg) \n![](/galleryGroup/高清图片2/3.jpg) \n![](/galleryGroup/高清图片2/4.jpg) \n![](/galleryGroup/高清图片2/5.jpg) \n![](/galleryGroup/高清图片2/7.jpg) \n![](/galleryGroup/高清图片2/8.jpg) \n![](/galleryGroup/高清图片2/9.jpg) \n{% endgallery %} \n","updated":"2023-08-18T02:12:26.734Z","path":"galleryGroup/高清图片2/index.html","layout":"page","_id":"clllqbzio0007mcux5ju99mvm","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片2/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片2/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片2/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n"},{"title":"高清图片1","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/galleryGroup/高清图片1/1.jpg","_content":"{% gallery %} \n![](/galleryGroup/高清图片1/1.jpg) \n![](/galleryGroup/高清图片1/10.jpg) \n![](/galleryGroup/高清图片1/11.jpg) \n![](/galleryGroup/高清图片1/12.jpg) \n![](/galleryGroup/高清图片1/13.jpg) \n![](/galleryGroup/高清图片1/14.jpg) \n![](/galleryGroup/高清图片1/15.jpg) \n![](/galleryGroup/高清图片1/16.jpg) \n![](/galleryGroup/高清图片1/17.jpg) \n![](/galleryGroup/高清图片1/18.jpg) \n![](/galleryGroup/高清图片1/19.jpg) \n![](/galleryGroup/高清图片1/2.jpg) \n![](/galleryGroup/高清图片1/20.jpg) \n![](/galleryGroup/高清图片1/21.jpg) \n![](/galleryGroup/高清图片1/22.jpg) \n![](/galleryGroup/高清图片1/23.jpg) \n![](/galleryGroup/高清图片1/3.jpg) \n![](/galleryGroup/高清图片1/4.jpg) \n![](/galleryGroup/高清图片1/5.jpg) \n![](/galleryGroup/高清图片1/6.jpg) \n![](/galleryGroup/高清图片1/7.jpg) \n![](/galleryGroup/高清图片1/8.jpg) \n![](/galleryGroup/高清图片1/9.jpg) \n{% endgallery %} \n","source":"galleryGroup/高清图片1/index.md","raw":"---\ntitle: 高清图片1\ndate: 2023-08-17 17:02:30 \naside: false \ncomments: false\ntop_img: /galleryGroup/高清图片1/1.jpg \n---\n{% gallery %} \n![](/galleryGroup/高清图片1/1.jpg) \n![](/galleryGroup/高清图片1/10.jpg) \n![](/galleryGroup/高清图片1/11.jpg) \n![](/galleryGroup/高清图片1/12.jpg) \n![](/galleryGroup/高清图片1/13.jpg) \n![](/galleryGroup/高清图片1/14.jpg) \n![](/galleryGroup/高清图片1/15.jpg) \n![](/galleryGroup/高清图片1/16.jpg) \n![](/galleryGroup/高清图片1/17.jpg) \n![](/galleryGroup/高清图片1/18.jpg) \n![](/galleryGroup/高清图片1/19.jpg) \n![](/galleryGroup/高清图片1/2.jpg) \n![](/galleryGroup/高清图片1/20.jpg) \n![](/galleryGroup/高清图片1/21.jpg) \n![](/galleryGroup/高清图片1/22.jpg) \n![](/galleryGroup/高清图片1/23.jpg) \n![](/galleryGroup/高清图片1/3.jpg) \n![](/galleryGroup/高清图片1/4.jpg) \n![](/galleryGroup/高清图片1/5.jpg) \n![](/galleryGroup/高清图片1/6.jpg) \n![](/galleryGroup/高清图片1/7.jpg) \n![](/galleryGroup/高清图片1/8.jpg) \n![](/galleryGroup/高清图片1/9.jpg) \n{% endgallery %} \n","updated":"2023-08-18T02:12:26.733Z","path":"galleryGroup/高清图片1/index.html","layout":"page","_id":"clllqbziq0008mcuxbygle8xm","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片1/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/20.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/21.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/22.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/23.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片1/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/20.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/21.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/22.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/23.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片1/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n"},{"title":"高清图片3","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/galleryGroup/高清图片3/1.jpg","_content":"{% gallery %} \n![](/galleryGroup/高清图片3/1.jpg) \n![](/galleryGroup/高清图片3/10.jpg) \n![](/galleryGroup/高清图片3/11.jpg) \n![](/galleryGroup/高清图片3/12.jpg) \n![](/galleryGroup/高清图片3/13.jpg) \n![](/galleryGroup/高清图片3/14.jpg) \n![](/galleryGroup/高清图片3/15.jpg) \n![](/galleryGroup/高清图片3/16.jpg) \n![](/galleryGroup/高清图片3/17.jpg) \n![](/galleryGroup/高清图片3/18.jpg) \n![](/galleryGroup/高清图片3/19.jpg) \n![](/galleryGroup/高清图片3/2.jpg) \n![](/galleryGroup/高清图片3/3.jpg) \n![](/galleryGroup/高清图片3/4.jpg) \n![](/galleryGroup/高清图片3/5.jpg) \n![](/galleryGroup/高清图片3/6.jpg) \n![](/galleryGroup/高清图片3/7.jpg) \n![](/galleryGroup/高清图片3/8.jpg) \n![](/galleryGroup/高清图片3/9.jpg) \n{% endgallery %} \n","source":"galleryGroup/高清图片3/index.md","raw":"---\ntitle: 高清图片3\ndate: 2023-08-17 17:02:30 \naside: false \ncomments: false\ntop_img: /galleryGroup/高清图片3/1.jpg \n---\n{% gallery %} \n![](/galleryGroup/高清图片3/1.jpg) \n![](/galleryGroup/高清图片3/10.jpg) \n![](/galleryGroup/高清图片3/11.jpg) \n![](/galleryGroup/高清图片3/12.jpg) \n![](/galleryGroup/高清图片3/13.jpg) \n![](/galleryGroup/高清图片3/14.jpg) \n![](/galleryGroup/高清图片3/15.jpg) \n![](/galleryGroup/高清图片3/16.jpg) \n![](/galleryGroup/高清图片3/17.jpg) \n![](/galleryGroup/高清图片3/18.jpg) \n![](/galleryGroup/高清图片3/19.jpg) \n![](/galleryGroup/高清图片3/2.jpg) \n![](/galleryGroup/高清图片3/3.jpg) \n![](/galleryGroup/高清图片3/4.jpg) \n![](/galleryGroup/高清图片3/5.jpg) \n![](/galleryGroup/高清图片3/6.jpg) \n![](/galleryGroup/高清图片3/7.jpg) \n![](/galleryGroup/高清图片3/8.jpg) \n![](/galleryGroup/高清图片3/9.jpg) \n{% endgallery %} \n","updated":"2023-08-18T02:12:26.735Z","path":"galleryGroup/高清图片3/index.html","layout":"page","_id":"clllqbziu000amcuxdk8jh51a","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片3/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片3/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片3/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n"},{"title":"高清图片","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"_content":"\n{% gallery %}\n![](/galleryGroup/高清图片/1.jpg)\n\n![](/galleryGroup/高清图片/2.jpg)\n\n![](/galleryGroup/高清图片/3.jpg)\n\n![](/galleryGroup/高清图片/4.jpg)\n\n![](/galleryGroup/高清图片/5.jpg)\n\n![](/galleryGroup/高清图片/6.jpg)\n\n![](/galleryGroup/高清图片/7.jpg)\n\n![](/galleryGroup/高清图片/8.jpg)\n\n![](/galleryGroup/高清图片/9.jpg)\n\n![](/galleryGroup/高清图片/10.jpg)\n\n![](/galleryGroup/高清图片/11.jpg)\n\n![](/galleryGroup/高清图片/12.jpg)\n\n![](/galleryGroup/高清图片/13.jpg)\n\n![](/galleryGroup/高清图片/14.jpg)\n\n![](/galleryGroup/高清图片/15.jpg)\n\n![](/galleryGroup/高清图片/16.jpg)\n\n![](/galleryGroup/高清图片/17.jpg)\n\n![](/galleryGroup/高清图片/18.jpg)\n\n![](/galleryGroup/高清图片/19.jpg)\n\n![](/galleryGroup/高清图片/10.jpg)\n\n{% endgallery %}\n\n\n","source":"galleryGroup/高清图片1/index - 副本.md","raw":"---\ntitle: 高清图片\ndate: 2023-08-17 17:02:30\naside: false\ncomments: false\n---\n\n{% gallery %}\n![](/galleryGroup/高清图片/1.jpg)\n\n![](/galleryGroup/高清图片/2.jpg)\n\n![](/galleryGroup/高清图片/3.jpg)\n\n![](/galleryGroup/高清图片/4.jpg)\n\n![](/galleryGroup/高清图片/5.jpg)\n\n![](/galleryGroup/高清图片/6.jpg)\n\n![](/galleryGroup/高清图片/7.jpg)\n\n![](/galleryGroup/高清图片/8.jpg)\n\n![](/galleryGroup/高清图片/9.jpg)\n\n![](/galleryGroup/高清图片/10.jpg)\n\n![](/galleryGroup/高清图片/11.jpg)\n\n![](/galleryGroup/高清图片/12.jpg)\n\n![](/galleryGroup/高清图片/13.jpg)\n\n![](/galleryGroup/高清图片/14.jpg)\n\n![](/galleryGroup/高清图片/15.jpg)\n\n![](/galleryGroup/高清图片/16.jpg)\n\n![](/galleryGroup/高清图片/17.jpg)\n\n![](/galleryGroup/高清图片/18.jpg)\n\n![](/galleryGroup/高清图片/19.jpg)\n\n![](/galleryGroup/高清图片/10.jpg)\n\n{% endgallery %}\n\n\n","updated":"2023-08-17T12:01:09.637Z","path":"galleryGroup/高清图片1/index - 副本.html","layout":"page","_id":"clllqbziy000emcux2abu6w47","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/9.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/10.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/5.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/9.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/11.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/12.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/13.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/14.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/15.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/16.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/17.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/18.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/19.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片/10.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n\n\n"},{"title":"高清图片4","date":"2023-08-17T09:02:30.000Z","aside":false,"comments":0,"top_img":"/galleryGroup/高清图片4/1.jpg","_content":"{% gallery %} \n![](/galleryGroup/高清图片4/1.jpg) \n![](/galleryGroup/高清图片4/10.jpg) \n![](/galleryGroup/高清图片4/2.jpg) \n![](/galleryGroup/高清图片4/3.jpg) \n![](/galleryGroup/高清图片4/4.jpg) \n![](/galleryGroup/高清图片4/6.jpg) \n![](/galleryGroup/高清图片4/7.jpg) \n![](/galleryGroup/高清图片4/8.jpg) \n![](/galleryGroup/高清图片4/9.jpg) \n{% endgallery %} \n","source":"galleryGroup/高清图片4/index.md","raw":"---\ntitle: 高清图片4\ndate: 2023-08-17 17:02:30 \naside: false \ncomments: false\ntop_img: /galleryGroup/高清图片4/1.jpg \n---\n{% gallery %} \n![](/galleryGroup/高清图片4/1.jpg) \n![](/galleryGroup/高清图片4/10.jpg) \n![](/galleryGroup/高清图片4/2.jpg) \n![](/galleryGroup/高清图片4/3.jpg) \n![](/galleryGroup/高清图片4/4.jpg) \n![](/galleryGroup/高清图片4/6.jpg) \n![](/galleryGroup/高清图片4/7.jpg) \n![](/galleryGroup/高清图片4/8.jpg) \n![](/galleryGroup/高清图片4/9.jpg) \n{% endgallery %} \n","updated":"2023-08-18T02:12:26.735Z","path":"galleryGroup/高清图片4/index.html","layout":"page","_id":"clllqbziz000gmcux9f5g7jkh","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片4/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"/galleryGroup/高清图片4/1.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/10.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/2.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/3.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/4.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/6.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/7.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/8.jpg\",\"alt\":\"\"},{\"url\":\"/galleryGroup/高清图片4/9.jpg\",\"alt\":\"\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>加载更多</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div> \n"}],"Post":[{"title":"Flink 处理迟到数据","cover":"/images/Flink 处理迟到数据.jpg","abbrlink":"51e65fa8","date":"2023-08-16T13:46:52.000Z","_content":"\n\n\n##### Flink 处理迟到数据（★）\n\n- 处理迟到数据之前首先了解**Lambda架构**\n\n  - Lambda架构的实现是：一个批处理器、一个流处理器。流处理器首先实时输出近似正确的结果（因为乱序流，可能导致流处理结果不准确，所以是近似正确），然后当批处理器处理处理完后，把最终结果更新为批处理的结果。\n\n- Flink处理迟到数据的实现，其实是相当于Lambda架构的流程实现。\n\n- 只不过，Flink实现Lambda架构的流程更为简单，只不过是调用几个API而已。\n\n- **处理迟到数据代码实现：**统计每个url的访问量。\n\n  - 分析：\n\n    - 1.首先添加Socket数据源，实现乱序流的输入\n\n      ```java\n      env.socketTextStream(\"master\", 7777);\n      ```\n\n    - 2.实现乱序流水位线生成策略，延迟时间设为2秒\n\n      ```java\n  WatermarkStrategy.<Event>forBoundedOutOfOrderness(Duration.ofSeconds(2))\n      ```\n    \n    - 3.分区、开窗\n\n      ```java\n  //分区\n      .keyBy(data -> data.url)\n  //滑动事件时间窗口，大小为10秒                .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n      ```\n    \n    - 4.设置最大延迟时间\n    \n      ```java\n  .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n      //4.设置最大延迟时间，1分钟\n  .allowedLateness(Time.minutes(1))\n      ```\n\n      \n    \n    - 5.创建标签，开启侧输出流\n    \n      - **注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n\n      ```java\n  //5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n      OutputTag<Event> outputTag = new OutputTag<Event>(\"later\") {};\n  .allowedLateness(Time.minutes(1))\n      //5.开启侧输出流\n  .sideOutputLateData(outputTag)\n      ```\n    \n    - 6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n    \n      ```java\n      .sideOutputLateData(outputTag)\n      //6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n  .aggregate(new MyAggregateFunction(), new MyProcessWindowFunction());\n      ```\n\n    - 7.获取侧输出流\n    \n      ```java\n      //7.获取侧输出流\n      streamAggregate.getSideOutput(outputTag);\n  ```\n    \n- 完整代码\n  \n    ```java\n    package finkDemo.Watermark_Windows;\n    \n  //导入自定义POJO类：Event、UrlViewCount\n    import finkDemo.Watermark_Windows.Windows.WindowsFunction.Case.UrlViewCount;\n  import finkDemo.Watermark_Windows.Windows.WindowsFunction.IncrementalAggregateFunction.Event;\n    \n    import org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;\n    import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n    import org.apache.flink.api.common.functions.AggregateFunction;\n    import org.apache.flink.api.common.functions.MapFunction;\n    import org.apache.flink.streaming.api.datastream.DataStream;\n    import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n    import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n    import org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;\n    import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;\n    import org.apache.flink.streaming.api.windowing.time.Time;\n    import org.apache.flink.streaming.api.windowing.windows.TimeWindow;\n    import org.apache.flink.util.Collector;\n    import org.apache.flink.util.OutputTag;\n    \n    import java.time.Duration;\n    \n    /**\n     * 实际应用中Flink处理迟到数据，就相当于实现了Lambda架构的流程\n     *\n     *\n     * 案例：统计每个url访问量\n     */\n    public class ProcessLaterData {\n        public static void main(String[] args) throws Exception {\n            StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n            env.setParallelism(1);\n    \n            //设置水位线生成周期:100ms\n            env.getConfig().setAutoWatermarkInterval(100);\n    \n            //1.首先添加Socket数据源，实现乱序流的输入\n            //nc端输入：Marry ./pid=1 2000等\n            SingleOutputStreamOperator<Event> streamSource = env.socketTextStream(\"master\", 7777)\n                    //转换数据结构为Event\n                    .map(new MapFunction<String, Event>() {\n                        @Override\n                        public Event map(String value) throws Exception {\n                            //切分nc端输入的字符串\n                            String[] split = value.split(\" \");\n                            //返回Event\n                            return new Event(split[0].trim(), split[1].trim(), Long.valueOf(split[2].trim()));\n                        }\n                    });\n    \n            //2.实现乱序流水位线生成策略，延迟时间设为2秒\n            SingleOutputStreamOperator<Event> streamWatermark = streamSource\n                    .assignTimestampsAndWatermarks(\n                            //创建乱序流水位线生成器，延迟时间为 2秒\n                            WatermarkStrategy.<Event>forBoundedOutOfOrderness(Duration.ofSeconds(2))\n                                    //提取、分配时间戳\n                                    .withTimestampAssigner(new SerializableTimestampAssigner<Event>() {\n                                        @Override\n                                        public long extractTimestamp(Event element, long recordTimestamp) {\n                                            //提取时间戳\n                                            return element.timestamps;\n                                        }\n                                    })\n                    );\n    \n            streamWatermark.print(\"data\");\n    \n            //5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n            OutputTag<Event> outputTag = new OutputTag<Event>(\"later\") {};\n            //3.分区、开窗\n            SingleOutputStreamOperator<UrlViewCount> streamAggregate = streamWatermark\n                    //分区\n                    .keyBy(data -> data.url)\n                    //滑动事件时间窗口，大小为10秒\n                    .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n                    //4.设置最大延迟时间，1分钟\n                    .allowedLateness(Time.minutes(1))\n                    //5.开启侧输出流\n                    .sideOutputLateData(outputTag)\n                    //6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n                    .aggregate(new MyAggregateFunction(), new MyProcessWindowFunction());\n    \n            streamAggregate.print(\"result\");\n            //7.获取侧输出流\n            DataStream<Event> streamSideOutput = streamAggregate.getSideOutput(outputTag);\n            streamSideOutput.print(\"later\");\n    \n    \n            env.execute();\n        }\n    \n        //自定义AggregateFunction\n        public static class MyAggregateFunction implements AggregateFunction<Event,Long,Long>{\n            @Override\n            public Long createAccumulator() {\n                return 0L;\n            }\n    \n            @Override\n            public Long add(Event value, Long accumulator) {\n                return accumulator+1L;\n            }\n    \n            @Override\n            public Long getResult(Long accumulator) {\n                //返回url的访问量\n                return accumulator;\n            }\n    \n            //由于不是会话窗口，可以不用写merge方法\n            @Override\n            public Long merge(Long a, Long b) {\n                return null;\n            }\n        }\n    \n        //自定义ProcessWindowFunction\n        //由于这里的IN是getResult方法的返回值，所以IN类型为Long\n        public static class MyProcessWindowFunction extends ProcessWindowFunction<Long, UrlViewCount,String, TimeWindow>{\n            @Override\n            public void process(String url, ProcessWindowFunction<Long, UrlViewCount, String, TimeWindow>.Context context, Iterable<Long> elements, Collector<UrlViewCount> out) throws Exception {\n                //窗口开启时间\n                long start = context.window().getStart();\n                //窗口关闭时间\n                long end = context.window().getEnd();\n                //获取每个url的访问量\n                Long count = elements.iterator().next();\n    \n                //分装为UrlViewCount类型输出\n                out.collect(new UrlViewCount(url,count,start,end));\n            }\n        }\n    }\n    ```\n  \n    \n  \n  - 结果分析\n  ![](Flink 处理迟到数据/29667c7b2c474359bdcea93d920fb133.png)\n  \n- 第一个result结果输出，count = 3\n  - 第一个窗口的范围为[0 , 10000)。**因为窗口默认右边值为 end-1，由于窗口大小为10000，所以end-1=9999**\n  - 前面的数据，只有三条数据的时间戳，在[0 , 10000)之内，所以count=3\n  - 由于数据时间戳为12000\n  - 延迟时间为2秒\n  - 水位线的时间戳为10000\n  - 水位线推动窗口，触发结果输出。**由于最大延迟时间，此时第一个窗口没有关闭。**\n- 第二个result结果输出，count = 4\n  - 由于最大延迟时间为，1分钟，也就是60000毫秒，所以**第一个窗口延迟关闭60000毫秒**\n  - 由于前面一条数据的时间戳为4000，在第一个窗口范围之内，所以被第一个窗口收集，并更新输出的结果，为count=4\n- 第三个result结果，count = 2\n  - 第二个窗口范围为[ 10000, 20000)\n  - 前面数据的时间戳，在[10000 , 20000)之内的数据共有两条，所以count=2\n- 第一个later，count=1\n  - 在时间戳为72000的数据的推动下，水位线为70000=最大延迟时间+end1，推动了第一个窗口的关闭、销毁。\n  - 最后一条数据的时间戳为2000，但是第一个窗口已经关闭，所以该数据会流入侧输出流，并输出。","source":"_posts/Flink 处理迟到数据.md","raw":"---\ntitle: Flink 处理迟到数据\ntags: Python\ncover: /images/Flink 处理迟到数据.jpg\ncategories: Flink\nabbrlink: 51e65fa8\ndate: 2023-08-16 21:46:52\n---\n\n\n\n##### Flink 处理迟到数据（★）\n\n- 处理迟到数据之前首先了解**Lambda架构**\n\n  - Lambda架构的实现是：一个批处理器、一个流处理器。流处理器首先实时输出近似正确的结果（因为乱序流，可能导致流处理结果不准确，所以是近似正确），然后当批处理器处理处理完后，把最终结果更新为批处理的结果。\n\n- Flink处理迟到数据的实现，其实是相当于Lambda架构的流程实现。\n\n- 只不过，Flink实现Lambda架构的流程更为简单，只不过是调用几个API而已。\n\n- **处理迟到数据代码实现：**统计每个url的访问量。\n\n  - 分析：\n\n    - 1.首先添加Socket数据源，实现乱序流的输入\n\n      ```java\n      env.socketTextStream(\"master\", 7777);\n      ```\n\n    - 2.实现乱序流水位线生成策略，延迟时间设为2秒\n\n      ```java\n  WatermarkStrategy.<Event>forBoundedOutOfOrderness(Duration.ofSeconds(2))\n      ```\n    \n    - 3.分区、开窗\n\n      ```java\n  //分区\n      .keyBy(data -> data.url)\n  //滑动事件时间窗口，大小为10秒                .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n      ```\n    \n    - 4.设置最大延迟时间\n    \n      ```java\n  .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n      //4.设置最大延迟时间，1分钟\n  .allowedLateness(Time.minutes(1))\n      ```\n\n      \n    \n    - 5.创建标签，开启侧输出流\n    \n      - **注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n\n      ```java\n  //5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n      OutputTag<Event> outputTag = new OutputTag<Event>(\"later\") {};\n  .allowedLateness(Time.minutes(1))\n      //5.开启侧输出流\n  .sideOutputLateData(outputTag)\n      ```\n    \n    - 6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n    \n      ```java\n      .sideOutputLateData(outputTag)\n      //6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n  .aggregate(new MyAggregateFunction(), new MyProcessWindowFunction());\n      ```\n\n    - 7.获取侧输出流\n    \n      ```java\n      //7.获取侧输出流\n      streamAggregate.getSideOutput(outputTag);\n  ```\n    \n- 完整代码\n  \n    ```java\n    package finkDemo.Watermark_Windows;\n    \n  //导入自定义POJO类：Event、UrlViewCount\n    import finkDemo.Watermark_Windows.Windows.WindowsFunction.Case.UrlViewCount;\n  import finkDemo.Watermark_Windows.Windows.WindowsFunction.IncrementalAggregateFunction.Event;\n    \n    import org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;\n    import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n    import org.apache.flink.api.common.functions.AggregateFunction;\n    import org.apache.flink.api.common.functions.MapFunction;\n    import org.apache.flink.streaming.api.datastream.DataStream;\n    import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n    import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n    import org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;\n    import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;\n    import org.apache.flink.streaming.api.windowing.time.Time;\n    import org.apache.flink.streaming.api.windowing.windows.TimeWindow;\n    import org.apache.flink.util.Collector;\n    import org.apache.flink.util.OutputTag;\n    \n    import java.time.Duration;\n    \n    /**\n     * 实际应用中Flink处理迟到数据，就相当于实现了Lambda架构的流程\n     *\n     *\n     * 案例：统计每个url访问量\n     */\n    public class ProcessLaterData {\n        public static void main(String[] args) throws Exception {\n            StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n            env.setParallelism(1);\n    \n            //设置水位线生成周期:100ms\n            env.getConfig().setAutoWatermarkInterval(100);\n    \n            //1.首先添加Socket数据源，实现乱序流的输入\n            //nc端输入：Marry ./pid=1 2000等\n            SingleOutputStreamOperator<Event> streamSource = env.socketTextStream(\"master\", 7777)\n                    //转换数据结构为Event\n                    .map(new MapFunction<String, Event>() {\n                        @Override\n                        public Event map(String value) throws Exception {\n                            //切分nc端输入的字符串\n                            String[] split = value.split(\" \");\n                            //返回Event\n                            return new Event(split[0].trim(), split[1].trim(), Long.valueOf(split[2].trim()));\n                        }\n                    });\n    \n            //2.实现乱序流水位线生成策略，延迟时间设为2秒\n            SingleOutputStreamOperator<Event> streamWatermark = streamSource\n                    .assignTimestampsAndWatermarks(\n                            //创建乱序流水位线生成器，延迟时间为 2秒\n                            WatermarkStrategy.<Event>forBoundedOutOfOrderness(Duration.ofSeconds(2))\n                                    //提取、分配时间戳\n                                    .withTimestampAssigner(new SerializableTimestampAssigner<Event>() {\n                                        @Override\n                                        public long extractTimestamp(Event element, long recordTimestamp) {\n                                            //提取时间戳\n                                            return element.timestamps;\n                                        }\n                                    })\n                    );\n    \n            streamWatermark.print(\"data\");\n    \n            //5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。\n            OutputTag<Event> outputTag = new OutputTag<Event>(\"later\") {};\n            //3.分区、开窗\n            SingleOutputStreamOperator<UrlViewCount> streamAggregate = streamWatermark\n                    //分区\n                    .keyBy(data -> data.url)\n                    //滑动事件时间窗口，大小为10秒\n                    .window(TumblingEventTimeWindows.of(Time.seconds(10)))\n                    //4.设置最大延迟时间，1分钟\n                    .allowedLateness(Time.minutes(1))\n                    //5.开启侧输出流\n                    .sideOutputLateData(outputTag)\n                    //6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction\n                    .aggregate(new MyAggregateFunction(), new MyProcessWindowFunction());\n    \n            streamAggregate.print(\"result\");\n            //7.获取侧输出流\n            DataStream<Event> streamSideOutput = streamAggregate.getSideOutput(outputTag);\n            streamSideOutput.print(\"later\");\n    \n    \n            env.execute();\n        }\n    \n        //自定义AggregateFunction\n        public static class MyAggregateFunction implements AggregateFunction<Event,Long,Long>{\n            @Override\n            public Long createAccumulator() {\n                return 0L;\n            }\n    \n            @Override\n            public Long add(Event value, Long accumulator) {\n                return accumulator+1L;\n            }\n    \n            @Override\n            public Long getResult(Long accumulator) {\n                //返回url的访问量\n                return accumulator;\n            }\n    \n            //由于不是会话窗口，可以不用写merge方法\n            @Override\n            public Long merge(Long a, Long b) {\n                return null;\n            }\n        }\n    \n        //自定义ProcessWindowFunction\n        //由于这里的IN是getResult方法的返回值，所以IN类型为Long\n        public static class MyProcessWindowFunction extends ProcessWindowFunction<Long, UrlViewCount,String, TimeWindow>{\n            @Override\n            public void process(String url, ProcessWindowFunction<Long, UrlViewCount, String, TimeWindow>.Context context, Iterable<Long> elements, Collector<UrlViewCount> out) throws Exception {\n                //窗口开启时间\n                long start = context.window().getStart();\n                //窗口关闭时间\n                long end = context.window().getEnd();\n                //获取每个url的访问量\n                Long count = elements.iterator().next();\n    \n                //分装为UrlViewCount类型输出\n                out.collect(new UrlViewCount(url,count,start,end));\n            }\n        }\n    }\n    ```\n  \n    \n  \n  - 结果分析\n  ![](Flink 处理迟到数据/29667c7b2c474359bdcea93d920fb133.png)\n  \n- 第一个result结果输出，count = 3\n  - 第一个窗口的范围为[0 , 10000)。**因为窗口默认右边值为 end-1，由于窗口大小为10000，所以end-1=9999**\n  - 前面的数据，只有三条数据的时间戳，在[0 , 10000)之内，所以count=3\n  - 由于数据时间戳为12000\n  - 延迟时间为2秒\n  - 水位线的时间戳为10000\n  - 水位线推动窗口，触发结果输出。**由于最大延迟时间，此时第一个窗口没有关闭。**\n- 第二个result结果输出，count = 4\n  - 由于最大延迟时间为，1分钟，也就是60000毫秒，所以**第一个窗口延迟关闭60000毫秒**\n  - 由于前面一条数据的时间戳为4000，在第一个窗口范围之内，所以被第一个窗口收集，并更新输出的结果，为count=4\n- 第三个result结果，count = 2\n  - 第二个窗口范围为[ 10000, 20000)\n  - 前面数据的时间戳，在[10000 , 20000)之内的数据共有两条，所以count=2\n- 第一个later，count=1\n  - 在时间戳为72000的数据的推动下，水位线为70000=最大延迟时间+end1，推动了第一个窗口的关闭、销毁。\n  - 最后一条数据的时间戳为2000，但是第一个窗口已经关闭，所以该数据会流入侧输出流，并输出。","slug":"Flink 处理迟到数据","published":1,"updated":"2023-08-17T01:48:40.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbzir0009mcuxgn2u3ew7","content":"<h5 id=\"Flink-处理迟到数据（★）\"><a href=\"#Flink-处理迟到数据（★）\" class=\"headerlink\" title=\"Flink 处理迟到数据（★）\"></a>Flink 处理迟到数据（★）</h5><ul>\n<li><p>处理迟到数据之前首先了解<strong>Lambda架构</strong></p>\n<ul>\n<li>Lambda架构的实现是：一个批处理器、一个流处理器。流处理器首先实时输出近似正确的结果（因为乱序流，可能导致流处理结果不准确，所以是近似正确），然后当批处理器处理处理完后，把最终结果更新为批处理的结果。</li>\n</ul>\n</li>\n<li><p>Flink处理迟到数据的实现，其实是相当于Lambda架构的流程实现。</p>\n</li>\n<li><p>只不过，Flink实现Lambda架构的流程更为简单，只不过是调用几个API而已。</p>\n</li>\n<li><p><strong>处理迟到数据代码实现：</strong>统计每个url的访问量。</p>\n<ul>\n<li><p>分析：</p>\n<ul>\n<li><p>1.首先添加Socket数据源，实现乱序流的输入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env.socketTextStream(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">7777</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.实现乱序流水位线生成策略，延迟时间设为2秒</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.分区、开窗</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分区</span></span><br><span class=\"line\">    .keyBy(data -&gt; data.url)</span><br><span class=\"line\"><span class=\"comment\">//滑动事件时间窗口，大小为10秒                .window(TumblingEventTimeWindows.of(Time.seconds(10)))</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.设置最大延迟时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.window(TumblingEventTimeWindows.of(Time.seconds(<span class=\"number\">10</span>)))</span><br><span class=\"line\">    <span class=\"comment\">//4.设置最大延迟时间，1分钟</span></span><br><span class=\"line\">.allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>5.创建标签，开启侧输出流</p>\n<ul>\n<li><strong>注意</strong>：由于泛型擦除，要把标签定义成匿名内部类的形式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class=\"line\">    OutputTag&lt;Event&gt; outputTag = <span class=\"keyword\">new</span> <span class=\"title class_\">OutputTag</span>&lt;Event&gt;(<span class=\"string\">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class=\"line\">.allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\">//5.开启侧输出流</span></span><br><span class=\"line\">.sideOutputLateData(outputTag)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .sideOutputLateData(outputTag)</span><br><span class=\"line\">    <span class=\"comment\">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class=\"line\">.aggregate(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAggregateFunction</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">MyProcessWindowFunction</span>());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>7.获取侧输出流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//7.获取侧输出流</span></span><br><span class=\"line\">streamAggregate.getSideOutput(outputTag);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>完整代码</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">package</span> finkDemo.Watermark_Windows;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//导入自定义POJO类：Event、UrlViewCount</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.Case.UrlViewCount;</span><br><span class=\"line\"><span class=\"keyword\">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.IncrementalAggregateFunction.Event;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.util.Collector;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.util.OutputTag;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 实际应用中Flink处理迟到数据，就相当于实现了Lambda架构的流程</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 案例：统计每个url访问量</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLaterData</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">          <span class=\"type\">StreamExecutionEnvironment</span> <span class=\"variable\">env</span> <span class=\"operator\">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class=\"line\">          env.setParallelism(<span class=\"number\">1</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//设置水位线生成周期:100ms</span></span><br><span class=\"line\">          env.getConfig().setAutoWatermarkInterval(<span class=\"number\">100</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//1.首先添加Socket数据源，实现乱序流的输入</span></span><br><span class=\"line\">          <span class=\"comment\">//nc端输入：Marry ./pid=1 2000等</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;Event&gt; streamSource = env.socketTextStream(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">7777</span>)</span><br><span class=\"line\">                  <span class=\"comment\">//转换数据结构为Event</span></span><br><span class=\"line\">                  .map(<span class=\"keyword\">new</span> <span class=\"title class_\">MapFunction</span>&lt;String, Event&gt;() &#123;</span><br><span class=\"line\">                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                      <span class=\"keyword\">public</span> Event <span class=\"title function_\">map</span><span class=\"params\">(String value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                          <span class=\"comment\">//切分nc端输入的字符串</span></span><br><span class=\"line\">                          String[] split = value.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                          <span class=\"comment\">//返回Event</span></span><br><span class=\"line\">                          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Event</span>(split[<span class=\"number\">0</span>].trim(), split[<span class=\"number\">1</span>].trim(), Long.valueOf(split[<span class=\"number\">2</span>].trim()));</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//2.实现乱序流水位线生成策略，延迟时间设为2秒</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;Event&gt; streamWatermark = streamSource</span><br><span class=\"line\">                  .assignTimestampsAndWatermarks(</span><br><span class=\"line\">                          <span class=\"comment\">//创建乱序流水位线生成器，延迟时间为 2秒</span></span><br><span class=\"line\">                          WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class=\"number\">2</span>))</span><br><span class=\"line\">                                  <span class=\"comment\">//提取、分配时间戳</span></span><br><span class=\"line\">                                  .withTimestampAssigner(<span class=\"keyword\">new</span> <span class=\"title class_\">SerializableTimestampAssigner</span>&lt;Event&gt;() &#123;</span><br><span class=\"line\">                                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                                      <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">extractTimestamp</span><span class=\"params\">(Event element, <span class=\"type\">long</span> recordTimestamp)</span> &#123;</span><br><span class=\"line\">                                          <span class=\"comment\">//提取时间戳</span></span><br><span class=\"line\">                                          <span class=\"keyword\">return</span> element.timestamps;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125;)</span><br><span class=\"line\">                  );</span><br><span class=\"line\">  </span><br><span class=\"line\">          streamWatermark.print(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class=\"line\">          OutputTag&lt;Event&gt; outputTag = <span class=\"keyword\">new</span> <span class=\"title class_\">OutputTag</span>&lt;Event&gt;(<span class=\"string\">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class=\"line\">          <span class=\"comment\">//3.分区、开窗</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;UrlViewCount&gt; streamAggregate = streamWatermark</span><br><span class=\"line\">                  <span class=\"comment\">//分区</span></span><br><span class=\"line\">                  .keyBy(data -&gt; data.url)</span><br><span class=\"line\">                  <span class=\"comment\">//滑动事件时间窗口，大小为10秒</span></span><br><span class=\"line\">                  .window(TumblingEventTimeWindows.of(Time.seconds(<span class=\"number\">10</span>)))</span><br><span class=\"line\">                  <span class=\"comment\">//4.设置最大延迟时间，1分钟</span></span><br><span class=\"line\">                  .allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">                  <span class=\"comment\">//5.开启侧输出流</span></span><br><span class=\"line\">                  .sideOutputLateData(outputTag)</span><br><span class=\"line\">                  <span class=\"comment\">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class=\"line\">                  .aggregate(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAggregateFunction</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">MyProcessWindowFunction</span>());</span><br><span class=\"line\">  </span><br><span class=\"line\">          streamAggregate.print(<span class=\"string\">&quot;result&quot;</span>);</span><br><span class=\"line\">          <span class=\"comment\">//7.获取侧输出流</span></span><br><span class=\"line\">          DataStream&lt;Event&gt; streamSideOutput = streamAggregate.getSideOutput(outputTag);</span><br><span class=\"line\">          streamSideOutput.print(<span class=\"string\">&quot;later&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">          env.execute();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">//自定义AggregateFunction</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAggregateFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AggregateFunction</span>&lt;Event,Long,Long&gt;&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">createAccumulator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">add</span><span class=\"params\">(Event value, Long accumulator)</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> accumulator+<span class=\"number\">1L</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">getResult</span><span class=\"params\">(Long accumulator)</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//返回url的访问量</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//由于不是会话窗口，可以不用写merge方法</span></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">merge</span><span class=\"params\">(Long a, Long b)</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">//自定义ProcessWindowFunction</span></span><br><span class=\"line\">      <span class=\"comment\">//由于这里的IN是getResult方法的返回值，所以IN类型为Long</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyProcessWindowFunction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ProcessWindowFunction</span>&lt;Long, UrlViewCount,String, TimeWindow&gt;&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(String url, ProcessWindowFunction&lt;Long, UrlViewCount, String, TimeWindow&gt;.Context context, Iterable&lt;Long&gt; elements, Collector&lt;UrlViewCount&gt; out)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">              <span class=\"comment\">//窗口开启时间</span></span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> context.window().getStart();</span><br><span class=\"line\">              <span class=\"comment\">//窗口关闭时间</span></span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> context.window().getEnd();</span><br><span class=\"line\">              <span class=\"comment\">//获取每个url的访问量</span></span><br><span class=\"line\">              <span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> elements.iterator().next();</span><br><span class=\"line\">  </span><br><span class=\"line\">              <span class=\"comment\">//分装为UrlViewCount类型输出</span></span><br><span class=\"line\">              out.collect(<span class=\"keyword\">new</span> <span class=\"title class_\">UrlViewCount</span>(url,count,start,end));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果分析<img src=\"/posts/51e65fa8/29667c7b2c474359bdcea93d920fb133.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>第一个result结果输出，count &#x3D; 3</p>\n<ul>\n<li>第一个窗口的范围为[0 , 10000)。<strong>因为窗口默认右边值为 end-1，由于窗口大小为10000，所以end-1&#x3D;9999</strong></li>\n<li>前面的数据，只有三条数据的时间戳，在[0 , 10000)之内，所以count&#x3D;3</li>\n<li>由于数据时间戳为12000</li>\n<li>延迟时间为2秒</li>\n<li>水位线的时间戳为10000</li>\n<li>水位线推动窗口，触发结果输出。<strong>由于最大延迟时间，此时第一个窗口没有关闭。</strong></li>\n</ul>\n</li>\n<li><p>第二个result结果输出，count &#x3D; 4</p>\n<ul>\n<li>由于最大延迟时间为，1分钟，也就是60000毫秒，所以<strong>第一个窗口延迟关闭60000毫秒</strong></li>\n<li>由于前面一条数据的时间戳为4000，在第一个窗口范围之内，所以被第一个窗口收集，并更新输出的结果，为count&#x3D;4</li>\n</ul>\n</li>\n<li><p>第三个result结果，count &#x3D; 2</p>\n<ul>\n<li>第二个窗口范围为[ 10000, 20000)</li>\n<li>前面数据的时间戳，在[10000 , 20000)之内的数据共有两条，所以count&#x3D;2</li>\n</ul>\n</li>\n<li><p>第一个later，count&#x3D;1</p>\n<ul>\n<li>在时间戳为72000的数据的推动下，水位线为70000&#x3D;最大延迟时间+end1，推动了第一个窗口的关闭、销毁。</li>\n<li>最后一条数据的时间戳为2000，但是第一个窗口已经关闭，所以该数据会流入侧输出流，并输出。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h5 id=\"Flink-处理迟到数据（★）\"><a href=\"#Flink-处理迟到数据（★）\" class=\"headerlink\" title=\"Flink 处理迟到数据（★）\"></a>Flink 处理迟到数据（★）</h5><ul>\n<li><p>处理迟到数据之前首先了解<strong>Lambda架构</strong></p>\n<ul>\n<li>Lambda架构的实现是：一个批处理器、一个流处理器。流处理器首先实时输出近似正确的结果（因为乱序流，可能导致流处理结果不准确，所以是近似正确），然后当批处理器处理处理完后，把最终结果更新为批处理的结果。</li>\n</ul>\n</li>\n<li><p>Flink处理迟到数据的实现，其实是相当于Lambda架构的流程实现。</p>\n</li>\n<li><p>只不过，Flink实现Lambda架构的流程更为简单，只不过是调用几个API而已。</p>\n</li>\n<li><p><strong>处理迟到数据代码实现：</strong>统计每个url的访问量。</p>\n<ul>\n<li><p>分析：</p>\n<ul>\n<li><p>1.首先添加Socket数据源，实现乱序流的输入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env.socketTextStream(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">7777</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.实现乱序流水位线生成策略，延迟时间设为2秒</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.分区、开窗</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分区</span></span><br><span class=\"line\">    .keyBy(data -&gt; data.url)</span><br><span class=\"line\"><span class=\"comment\">//滑动事件时间窗口，大小为10秒                .window(TumblingEventTimeWindows.of(Time.seconds(10)))</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.设置最大延迟时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.window(TumblingEventTimeWindows.of(Time.seconds(<span class=\"number\">10</span>)))</span><br><span class=\"line\">    <span class=\"comment\">//4.设置最大延迟时间，1分钟</span></span><br><span class=\"line\">.allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>5.创建标签，开启侧输出流</p>\n<ul>\n<li><strong>注意</strong>：由于泛型擦除，要把标签定义成匿名内部类的形式。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class=\"line\">    OutputTag&lt;Event&gt; outputTag = <span class=\"keyword\">new</span> <span class=\"title class_\">OutputTag</span>&lt;Event&gt;(<span class=\"string\">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class=\"line\">.allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\">//5.开启侧输出流</span></span><br><span class=\"line\">.sideOutputLateData(outputTag)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .sideOutputLateData(outputTag)</span><br><span class=\"line\">    <span class=\"comment\">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class=\"line\">.aggregate(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAggregateFunction</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">MyProcessWindowFunction</span>());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>7.获取侧输出流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//7.获取侧输出流</span></span><br><span class=\"line\">streamAggregate.getSideOutput(outputTag);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>完整代码</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">package</span> finkDemo.Watermark_Windows;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//导入自定义POJO类：Event、UrlViewCount</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.Case.UrlViewCount;</span><br><span class=\"line\"><span class=\"keyword\">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.IncrementalAggregateFunction.Event;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.util.Collector;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> org.apache.flink.util.OutputTag;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 实际应用中Flink处理迟到数据，就相当于实现了Lambda架构的流程</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 案例：统计每个url访问量</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessLaterData</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">          <span class=\"type\">StreamExecutionEnvironment</span> <span class=\"variable\">env</span> <span class=\"operator\">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class=\"line\">          env.setParallelism(<span class=\"number\">1</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//设置水位线生成周期:100ms</span></span><br><span class=\"line\">          env.getConfig().setAutoWatermarkInterval(<span class=\"number\">100</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//1.首先添加Socket数据源，实现乱序流的输入</span></span><br><span class=\"line\">          <span class=\"comment\">//nc端输入：Marry ./pid=1 2000等</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;Event&gt; streamSource = env.socketTextStream(<span class=\"string\">&quot;master&quot;</span>, <span class=\"number\">7777</span>)</span><br><span class=\"line\">                  <span class=\"comment\">//转换数据结构为Event</span></span><br><span class=\"line\">                  .map(<span class=\"keyword\">new</span> <span class=\"title class_\">MapFunction</span>&lt;String, Event&gt;() &#123;</span><br><span class=\"line\">                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                      <span class=\"keyword\">public</span> Event <span class=\"title function_\">map</span><span class=\"params\">(String value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                          <span class=\"comment\">//切分nc端输入的字符串</span></span><br><span class=\"line\">                          String[] split = value.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                          <span class=\"comment\">//返回Event</span></span><br><span class=\"line\">                          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Event</span>(split[<span class=\"number\">0</span>].trim(), split[<span class=\"number\">1</span>].trim(), Long.valueOf(split[<span class=\"number\">2</span>].trim()));</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//2.实现乱序流水位线生成策略，延迟时间设为2秒</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;Event&gt; streamWatermark = streamSource</span><br><span class=\"line\">                  .assignTimestampsAndWatermarks(</span><br><span class=\"line\">                          <span class=\"comment\">//创建乱序流水位线生成器，延迟时间为 2秒</span></span><br><span class=\"line\">                          WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class=\"number\">2</span>))</span><br><span class=\"line\">                                  <span class=\"comment\">//提取、分配时间戳</span></span><br><span class=\"line\">                                  .withTimestampAssigner(<span class=\"keyword\">new</span> <span class=\"title class_\">SerializableTimestampAssigner</span>&lt;Event&gt;() &#123;</span><br><span class=\"line\">                                      <span class=\"meta\">@Override</span></span><br><span class=\"line\">                                      <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">extractTimestamp</span><span class=\"params\">(Event element, <span class=\"type\">long</span> recordTimestamp)</span> &#123;</span><br><span class=\"line\">                                          <span class=\"comment\">//提取时间戳</span></span><br><span class=\"line\">                                          <span class=\"keyword\">return</span> element.timestamps;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125;)</span><br><span class=\"line\">                  );</span><br><span class=\"line\">  </span><br><span class=\"line\">          streamWatermark.print(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class=\"line\">          OutputTag&lt;Event&gt; outputTag = <span class=\"keyword\">new</span> <span class=\"title class_\">OutputTag</span>&lt;Event&gt;(<span class=\"string\">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class=\"line\">          <span class=\"comment\">//3.分区、开窗</span></span><br><span class=\"line\">          SingleOutputStreamOperator&lt;UrlViewCount&gt; streamAggregate = streamWatermark</span><br><span class=\"line\">                  <span class=\"comment\">//分区</span></span><br><span class=\"line\">                  .keyBy(data -&gt; data.url)</span><br><span class=\"line\">                  <span class=\"comment\">//滑动事件时间窗口，大小为10秒</span></span><br><span class=\"line\">                  .window(TumblingEventTimeWindows.of(Time.seconds(<span class=\"number\">10</span>)))</span><br><span class=\"line\">                  <span class=\"comment\">//4.设置最大延迟时间，1分钟</span></span><br><span class=\"line\">                  .allowedLateness(Time.minutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">                  <span class=\"comment\">//5.开启侧输出流</span></span><br><span class=\"line\">                  .sideOutputLateData(outputTag)</span><br><span class=\"line\">                  <span class=\"comment\">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class=\"line\">                  .aggregate(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAggregateFunction</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">MyProcessWindowFunction</span>());</span><br><span class=\"line\">  </span><br><span class=\"line\">          streamAggregate.print(<span class=\"string\">&quot;result&quot;</span>);</span><br><span class=\"line\">          <span class=\"comment\">//7.获取侧输出流</span></span><br><span class=\"line\">          DataStream&lt;Event&gt; streamSideOutput = streamAggregate.getSideOutput(outputTag);</span><br><span class=\"line\">          streamSideOutput.print(<span class=\"string\">&quot;later&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">          env.execute();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">//自定义AggregateFunction</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAggregateFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AggregateFunction</span>&lt;Event,Long,Long&gt;&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">createAccumulator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">add</span><span class=\"params\">(Event value, Long accumulator)</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> accumulator+<span class=\"number\">1L</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">getResult</span><span class=\"params\">(Long accumulator)</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//返回url的访问量</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">          <span class=\"comment\">//由于不是会话窗口，可以不用写merge方法</span></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> Long <span class=\"title function_\">merge</span><span class=\"params\">(Long a, Long b)</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">//自定义ProcessWindowFunction</span></span><br><span class=\"line\">      <span class=\"comment\">//由于这里的IN是getResult方法的返回值，所以IN类型为Long</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyProcessWindowFunction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ProcessWindowFunction</span>&lt;Long, UrlViewCount,String, TimeWindow&gt;&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(String url, ProcessWindowFunction&lt;Long, UrlViewCount, String, TimeWindow&gt;.Context context, Iterable&lt;Long&gt; elements, Collector&lt;UrlViewCount&gt; out)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">              <span class=\"comment\">//窗口开启时间</span></span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> context.window().getStart();</span><br><span class=\"line\">              <span class=\"comment\">//窗口关闭时间</span></span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> context.window().getEnd();</span><br><span class=\"line\">              <span class=\"comment\">//获取每个url的访问量</span></span><br><span class=\"line\">              <span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> elements.iterator().next();</span><br><span class=\"line\">  </span><br><span class=\"line\">              <span class=\"comment\">//分装为UrlViewCount类型输出</span></span><br><span class=\"line\">              out.collect(<span class=\"keyword\">new</span> <span class=\"title class_\">UrlViewCount</span>(url,count,start,end));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果分析<img src=\"/posts/51e65fa8/29667c7b2c474359bdcea93d920fb133.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>第一个result结果输出，count &#x3D; 3</p>\n<ul>\n<li>第一个窗口的范围为[0 , 10000)。<strong>因为窗口默认右边值为 end-1，由于窗口大小为10000，所以end-1&#x3D;9999</strong></li>\n<li>前面的数据，只有三条数据的时间戳，在[0 , 10000)之内，所以count&#x3D;3</li>\n<li>由于数据时间戳为12000</li>\n<li>延迟时间为2秒</li>\n<li>水位线的时间戳为10000</li>\n<li>水位线推动窗口，触发结果输出。<strong>由于最大延迟时间，此时第一个窗口没有关闭。</strong></li>\n</ul>\n</li>\n<li><p>第二个result结果输出，count &#x3D; 4</p>\n<ul>\n<li>由于最大延迟时间为，1分钟，也就是60000毫秒，所以<strong>第一个窗口延迟关闭60000毫秒</strong></li>\n<li>由于前面一条数据的时间戳为4000，在第一个窗口范围之内，所以被第一个窗口收集，并更新输出的结果，为count&#x3D;4</li>\n</ul>\n</li>\n<li><p>第三个result结果，count &#x3D; 2</p>\n<ul>\n<li>第二个窗口范围为[ 10000, 20000)</li>\n<li>前面数据的时间戳，在[10000 , 20000)之内的数据共有两条，所以count&#x3D;2</li>\n</ul>\n</li>\n<li><p>第一个later，count&#x3D;1</p>\n<ul>\n<li>在时间戳为72000的数据的推动下，水位线为70000&#x3D;最大延迟时间+end1，推动了第一个窗口的关闭、销毁。</li>\n<li>最后一条数据的时间戳为2000，但是第一个窗口已经关闭，所以该数据会流入侧输出流，并输出。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"linux笔记","cover":"/images/linux笔记.jpg","abbrlink":"638d4d8a","date":"2023-08-16T03:42:52.000Z","_content":"\n# Linux介绍\n\n- Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的\n- Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。\n\n![](Linux笔记/image-20230726141327993.png)\n\n![](Linux笔记/image-20230726141424420.png)\n\n- 2020 年 12 月，CentOS 社区宣布 CentOS 服务器操作系统 8 和 7 系列分别于 2021 年底和 2024 年 6 月底停止服务。\n  - 龙蜥操作系统（Anolis OS）100% 兼容 RHEL/CentOS Linux 8；支持 x86_64 和 aarch64 架构及飞腾、海光、兆芯、鲲鹏等芯片，适配 x86 及 arm64 主流服务器硬件；提供 CentOS Linux 到 Anolis OS 迁移工具，帮助系统及应用的顺滑迁移\n\n# Linux虚拟机安装与配置\n\n## 1、安装VMware\n\n- 取消检查更新，下一步即可\n\n![](Linux笔记/image-20230725190639601.png)\n\n- 安装完成后，输入产品密钥\n\n![](Linux笔记/image-20230725164332151.png)\n\n- 查看网络适配器，检查是否安装成功\n\n![](Linux笔记/image-20230725190743350.png)\n\n## 2、配置虚拟机\n\n- 新建虚拟机\n\n- 选择典型模式\n\n![](Linux笔记/image-20230725164534031.png)\n\n- 配置CentOS-7.ios镜像\n  \n\n![](Linux笔记/image-20230725190147422.png)\n\n- 选择虚拟机位置和名称\n\n![](Linux笔记/image-20230725190958440.png)\n\n- 分配内存，并选中磁盘存储为单个文件\n\n![](Linux笔记/image-20230725191041627.png)\n\n- 进入到虚拟机界面，回车即可\n\n- 等待加载\n\n![](Linux笔记/image-20230725191430990.png)\n\n## 3、虚拟机中的软件配置\n\n- 虚拟机配置完成后，会进入到可视化界面中\n- 选择语言\n- 选中安装位置，点击完成\n\n![](Linux笔记/image-20230725191757477.png)\n\n- 下载GHOME桌面\n\n![](Linux笔记/image-20230725191831967.png)\n\n- 打开网络和主机名中的以太网，并记住当前主机ip\n  - 192.168.175.128\n\n![](Linux笔记/image-20230725192038917.png)\n\n- 开始安装\n- 设置root密码，可以创建普通用户，可以不创建\n\n![](Linux笔记/image-20230725192233909.png)\n\n![image-20230725192317190](Linux笔记/image-20230725192317190.png)\n\n![](Linux笔记/image-20230725192330984.png)\n\n- 重启虚拟机\n\n![](Linux笔记/image-20230725193756322.png)\n\n- 重启完成后，进行初始化设置，接收许可证\n\n![](Linux笔记/image-20230725193917275.png)\n\n- 在用户登录时，选择未列出中的root用户进行登录\n\n![](Linux笔记/image-20230725194021377.png)\n\n- 跳过登录后的选项\n\n![](Linux笔记/image-20230725194117040.png)\n\n- 点击应用软件中的Firefox，访问百度，测试网络是否连接\n\n![](Linux笔记/image-20230725194432819.png)\n\n- 网络连接成功，记得连接前关闭VPN\n\n![](Linux笔记/image-20230725194536832.png)\n\n## 4、虚拟机设置\n\n- 进入到虚拟机设置中\n- 指定内存和处理器核数\n- 如果没有指定镜像文件，可以在这里指定\n- 网络适配器选择NAT模式\n- 删除声卡和打印机\n\n![](Linux笔记/image-20230725195157685.png)\n\n- 如果关机后重新启动打不开或者打开出现错误，在进入到master文件夹，删除前三个文件夹，重新打开即可\n\n![](Linux笔记/image-20230725195717493.png)\n\n## 5、家目录\n\n### 5.1 root用户的家目录\n\n- 桌面上的主文件就是root用户的家目录\n\n![image-20230725200304363](Linux笔记/image-20230725200304363.png)\n\n- 在其他位置选项中，点击计算机位置，也可以看到root文件夹上也有个房子标志，表明root文件夹也是root用户的家目录\n\n![](Linux笔记/image-20230725200621688.png)\n\n### 5.2 普通用户的家目录\n\n- 切换到普通用户的登录\n\n- 和root用户一样，桌面上的目录是普通用户的家目录\n\n- 在计算机中普通用户的家目录，在home文件夹中\n\n![](Linux笔记/image-20230725201026739.png)\n\n![](Linux笔记/image-20230725201051683.png)\n\n- 并且，普通用户对root文件的访问需要root密码\n\n## 6、静态网络配置\n\n- 通过网络管理工具进行配置\n  -   这个**网络管理工具就是NetworkManager**\n  -  关闭NetworkManager后，会发现图形化界面中的网络管理工具也会消失\n  \n  ![](Linux笔记/image-20230726210518731.png)\n  \n  - 开启NetworkManager后，就会重新启动，说明两者是同一个东西\n  \n  ![](Linux笔记/image-20230726210638937.png)\n  \n  - 关闭，在开启NetworkManager后，如果连接不上xshell，可以重启虚拟机试一下\n  \n  -  在这里配置的静态网络设置的地址，可以在ifcfg-ens33 文件中找到\n\n#### 6.1 查看各个地址\n\n- 在图中的有线设置中找到，网络的设置\n\n![](Linux笔记/image-20230725201613953.png)\n\n- 点击齿轮，可以查看DNS和路由地址\n\n![](Linux笔记/image-20230725201655502.png)\n\n- 在次设置中可以看到主机的**路由地址**和**DNS地址**\n  - 后面配置网关时，可以把路由地址当作网关地址\n    - 网关和路由虽然是两个不同的概念。有时候网关实际上就是一个路由器，负责将本地网络和外部网络连接起来**。在这种情况下，网关的IP地址也充当着路由器的IP地址**。\n\n![](Linux笔记/image-20230725201748442.png)\n\n- 点击虚拟网络编辑器中，**更改设置**选项\n\n![](Linux笔记/image-20230725192937089.png)\n\n- 可以选择DHCP选项，查看**广播地址**\n  - 192.175.168.255\n- **DHCP**（Dynamic Host Configuration Protocol），即动态主机配置协议\n  - DHCP服务器会从预先设置的IP地址池（在起始ip和结束ip之间的地址中选择）中选择一个可用的IP地址分配给虚拟机，然后将其他相关配置信息一并发送给虚拟机，使虚拟机能够正确地连接到网络。\n  - 后面会配置静态的主机ip地址\n  - 动态的ip会导致连接xhell的时候，需要重新配置主机ip地址\n\n![](Linux笔记/image-20230725193304333.png)\n\n- 可以查看window的VMware8的ipv4地址\n  - 192.168.175.1\n\n![](Linux笔记/image-20230725193128431.png)\n\n- 点击编辑中的虚拟网络编辑器，查看**VMware8的子网和子网掩码**\n  - 网络适配器中VM8子网\n    - 192.168.175.0\n  - 网络适配器中VM8的子网掩码\n    -  255.255.255.0\n\n![](Linux笔记/image-20230725192651359.png)\n\n#### 6.2 静态网络配置\n\n- 在图中的有线设置中找到，网络管理工具\n\n![](Linux笔记/image-20230725201613953-1692155153717.png)\n\n- 点击齿轮，可以进行静态网络的配置\n\n![](Linux笔记/image-20230725201655502-1692155155569.png)\n\n- 由于0、1、2、255已经被占用，所以配置主机的静态ip时要避开这几个地址\n- 进行静态网络配置：**ipv4地址、子网掩码、网关（路由）、DNS**\n  -  **在此配置的各个地址，都会记录到ifcfg-ens33文件中**\n    -  192.168.175.100、255.255.255.0、192.168.175.2、192.168.175.2\n\n![](Linux笔记/image-20230725202522782.png)\n\n- **关闭网络管理工具，并重新连接有线设置，使配置生效**\n  - 关闭后三个点消失，在同位置可以开启\n\n![](Linux笔记/image-20230725202727704.png)\n\n- 打开终端，输入ifconfig命令查看主机ip\n\n![](Linux笔记/image-20230725202853702.png)\n\n- 测试网络连接，打开应用程序中Firefox，访问baidu\n\n![](Linux笔记/image-20230725203045211.png)\n\n- 配置完成后，可以在此终端配置ifcfg-ens33文件，这里配置完成后，后面就不需要对网络配置文件进行修改了\n  - BOOTPROTO=static\n  - PERFIX=24  -->  NETMASK=255.255.255.0 \n\n## 7、连接xshell\n\n- 安装xshell5\n\n- 配置主机地址\n\n![](Linux笔记/image-20230725204854629.png)\n\n- 配置root用户和密码\n\n![](Linux笔记/image-20230725205030096.png)\n\n- 接收并保存密钥\n\n![](Linux笔记/image-20230725204949968.png)\n\n- xshell平替\n  - electerm\n  - FinalShell\n\n## 8、关闭CentOS图形化界面\n\n- 关闭图形化界面，节省内存\n\n- 命令解释\n  - `multi-user.target` 是 Linux 系统的一个目标单元（target unit），表示系统默认运行级别为多用户模式，即只启动多用户命令行界面，不启动图形界面。\n\n```python\n# 在终端输入下面命令\n# system control \nsystemctl set-default multi-user.target\n# 重启\nreboot\n```\n\n- 查看centOS 7的默认启动模式（命令行模式显示：multi-user.target）\n- 修改centOS 7的默认启动模式（图形化界面显示：graphical.target）\n\n## 9、网络文件配置以及关闭防火墙\n\n- 配置网络连接文件\n  - PREFIX=24 改为 NETMASK=255.255.255.0\n    - PREFIX=24 表示子网掩码二进制1的个数\n    - 中文意思：前缀\n  - BOOTPROTO=static\n    - BOOTPROTO是Boot Protocol的缩写，表示引导协议。\n    - 常见的BOOTPROTO值包括：\n      1. DHCP：动态主机配置协议 (Dynamic Host Configuration Protocol)。使用DHCP时，网络接口会向网络中的DHCP服务器请求IP地址、子网掩码、网关、DNS等配置信息，并自动获取适配的网络配置。\n      2. Static：**静态配置**。设置网络接口的IP地址、子网掩码、网关等信息为手动配置，不通过DHCP获取。\n      3. None：无协议。不进行网络接口的自动配置，需要手动设置IP地址等信息。\n  - IPADDR=192.168.175.100  \n    - ip address\n    - ip地址\n  - NETMASK=255.255.255.0   \n    - network mask\n    - 子网掩码\n  - GATEWAY=192.168.175.2    \n    - 它是一个网络设备（通常是路由器）的IP地址，用于将数据包从本地网络转发到其他网络。\n    - 网关的IP地址可能和路由器的IP地址是一样的。这可能是因为网关实际上就是一个路由器，负责将本地网络和外部网络连接起来。在这种情况下，网关的IP地址也充当着路由器的IP地址。\n    - 网关\n  - DNS1=192.168.175.2\n    - \"Domain Name System\"，即域名系统\n    - 它是互联网上用于将域名（例如www.example.com）转换为IP地址（例如192.0.2.1）的一种系统。\n\n```python\n# 修改的内容\nBOOTPROTO=static\nIPADDR=192.168.175.100\nNETMASK=255.255.255.0  \nGATEWAY=192.169.175.2\nDNS1=192.169.175.2\n# 进入网络连接文件中\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n- 没改之前\n\n![](Linux笔记/image-20230725222708447.png)\n\n- 改之后\n\n![](Linux笔记/image-20230725223150054.png)\n\n- 为什么要关闭NetworkManager\n\n  - 对应图形化界面中的三个点\n\n  ![](Linux笔记/image-20230725201613953-1692155175847.png)\n\n  - NetworkManager是一个在Linux系统中管理网络连接的工具。\n    - 避免冲突\n      - 在某些情况下，可能会与其他网络管理工具或服务产生冲突，导致网络连接问题。关闭NetworkManager可能是为了避免这些潜在的冲突。\n    - 提高性能\n      - 在一些资源有限的系统中，关闭不需要的服务可以节省系统资源，从而**提高系统性能**。\n    - 关闭图形化界面后，就不能使用此工具，需要手动在ifcfg-ens33文件中进行网络配置，关闭NetworkManager服务可以节省系统资源\n  - 关闭后通过手动配置网络连接的文件\n\n- 关闭NetworkManager\n\n```python\n# 显示NetworkManager的状态\nsystemctl status NetworkManager\n# 关闭NetworkManager\nsystemctl stop NetworkManager\n# 关闭NetworkManager的开机自启\nsystemctl disble NetworkManager\n```\n\n![](Linux笔记/image-20230725221833744.png)\n\n\n\n![](Linux笔记/image-20230725222004113.png)\n\n- 启动network服务\n  - network\"通常指计算机网络\"\n\n```python\n# 查看network状态\nsystemctl status network\n# 修改ifcfg-ens33文件后重启network服务\nsystemctl restart network\n# 设置network开机自启\n# 在ifcfg-ens33文件中的ONBOOT设置里\nONBOOT=yes\n```\n\n![](Linux笔记/image-20230726212127488.png)\n\n- 关闭防火墙\n  - 关闭防火墙，以便软件可以正常连接到网络或下载所需的文件、以便特定的网络通信。\n\n```python\n# 查看防火墙状态\nsystemctl status firewalld\n# 关闭防火墙\nsystemctl stop firewalld\n# 关闭防火墙开机自启\nsystemctl disable firewalld\n```\n\n## 10、修改主机名\n\n- 主机名\n  - 主机的名字\n\n![](Linux笔记/image-20230725224604750.png)\n\n```python\n# 进入到hostaname文件中修改\nvim /etc/hostname\n```\n\n![](Linux笔记/image-20230725224740961.png)\n\n```python\n# 通过命令修改\nhostnamectl --help   # 查看命令参数\n\nhostnamectl set-hostname master\n```\n\n![](Linux笔记/image-20230725225041772.png)\n\n- 重启生效\n\n```python\n# 重启\nreboot\n```\n\n## 11、映射\n\n- 虚拟机映射\n  - ip地址映射为一个名字\n\n```python\n# 进入映射文件\nvim /etc/hosts\n```\n\n![](Linux笔记/image-20230725225334022.png)\n\n- 映射后可以通过别名访问该地址\n\n```python\n# 测试是否映射成功\nping master\n```\n\n- window本机映射\n  - 映射文件路径：C:\\Windows\\System32\\drivers\\etc\n  - 同样的如果在此文件配置虚拟机的映射，在window系统中的浏览器（或连接时）可以通过master访问虚拟机或连接虚拟机\n  - **因为xshell是安装在windows中的软件，所以配置windows本机映射，可以用映射连接xshell**\n\n![](Linux笔记/image-20230725225905638.png)\n\n\n\n![](Linux笔记/image-20230725230129222.png)\n\n## 12、解决异常退出文件时，再进入会出现下图情况\n\n- 下图为，异常退出文件会出现的情况\n\n![](Linux笔记/image-20230726212412260.png)\n\n- 删除下图中的文件即可解决\n\n```python\n# 删除该文件\nrm -rf  /etc/sysconfig/network-scripts/.ifcfg-ens33.swp\n```\n\n![](Linux笔记/image-20230726212756839.png)\n\n# Linux基本功能\n\n## 1、根目录下的文件夹\n\n- linux本质上就是一个文件系统，所有的东西都以文件的形式保存\n\n- 根目录下的各个文件夹，及其作用\n\n![](Linux笔记/image-20230725212127382.png)\n\n- bin\n  - 存放二进制可执行文件（就是命令，如：ls、cat、mkdir）\n- boot\n  - 存放用于系统引导（启动）时使用的各种文件\n- dev（devices）\n  - 存放设备文件\n- etc（etcetera）\n  - 存放所有系统配置文件\n- hom\n  - 存放所有用户文件的根目录\n- lib\n  - 存放跟文件系统中的程序运行所需要的共享库及内核模块\n- proc  \n  - 虚拟文件系统，存放当前内存的映射\n- usr  \n  - 存放系统应用程序，比较重要的目录/usr/local 管理员软件安装目录\n- var  \n  - 存放运行时需要改变数据的文件*\n- mnt  \n  - 挂载目录\n- sbin  \n  - 存储管理级别的二进制执行文件\n- root  \n  - 超级用户主目录（家目录）\n- opt \n  - 额外安装的可选应用程序包安装位置\n\n## 2、文件权限\n\n- Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定\n\n![](Linux笔记/image-20230725213809973.png)\n\n- 对应权限划分如下\n  - d表示文件夹\n  - 后面9个字母，每3个对应一个身份的权限\n    - r表示读，w表示写，x(execute)表示执行，如果命令文件中，该用户有x权限，则可以调用该命令\n      - 如果加了rw后，还是没有权限，可以加上x\n    - **owner**对应的当前用户，**group**对应的是用户组，**other users**对应的是其他普通用户\n      -  第一个root表示root用户，第个root表示root用户组\n\n![](Linux笔记/image-20230725214040146.png)\n\n![](Linux笔记/image-20230725213825941.png)\n\n- 使用 u, g, o 来代表三种身份的权限，此外还有a，代表all，即所有用户\n- chmod（change mode）\n  - 修改文件权限\n\n![](Linux笔记/image-20230725214239212.png)\n\n```python\n# 修改文件的root用户的读权限\nchmod u+r 文件名\nchmod u-r 文件名\nchmod u+rx 文件名\nchmod u-rx 文件名\n# 修改文件的root用户的写权限\nchmod u+w 文件名\nchmod u-w 文件名\nchmod u+wx 文件名\nchmod u-wx 文件名\n# 修改文件的root用户的读写权限\nchmod u+rw 文件名\nchmod u-rw 文件名\nchmod u+rwx 文件名\nchmod u-rwx 文件名\n# 修改文件的用户组的读写权限\nchmod g+r 文件名\nchmod g-r 文件名\n# 修改文件的普通用户的读写权限\nchmod o+r 文件名\nchmod o-r 文件名\n```\n\n- 如果用户相对文件进行读写操作，除了文件本身的权限，文件所处文件夹的读写权限也要有\n\n- chmod   xxx   文件夹\n  - xxx可以用数字代替\n  - rwx  r-x    r-x\n  - 111 101   101\n  - 7        5       5\n  - chmod 755 文件名  会赋予文件rwx  r-x    r-x的权限\n\n- chmod --help  查看命令的帮助文档\n  - chmod -R 755  文件夹，此命令会递归的把指定文件夹里所有的文件和文件夹都赋予 755的权限\n\n![](Linux笔记/image-20230725220926475.png)\n\n- chmod命令的匹配方式其实是正则表达式\n\n![](Linux笔记/image-20230725221157481.png)\n\n- 通过chown命令可以修改文件所有者和文件关联组，进而也能影响权限\n  - 命令格式：chown [-cfhvR] [--help] [--version] user[:group] file\n\n## 3、用户和用户组\n\n- Linux系统是一个多用户多任务的分时操作系统\n- 可以创建一个有一定权限的组，然后把普通用户放入进入\n\n- 添加的用户所在文件 /etc/passwd\n  - `djx`：用户名\n  - `x`：加密后的密码，通常是 'x' 或 '*' 表示密码以加密形式存储在 `/etc/shadow` 文件中\n  - `1000`：用户 ID (UID)，用于标识用户的唯一标识符\n  - `1000`：组 ID (GID)，用于标识用户所属的主要用户组\n  - `djx`：用户的全名或描述\n  - `/home/djx`：用户的主目录路径\n  - `/bin/bash`：用户的默认 shell，这里指定为 Bash 解释器。\n\n![image-20230727213145890](Linux笔记/image-20230727213145890.png)\n\n- 添加的用户组所在文件 /etc/group\n- 新创建的用户和用户组的，uid和gid默认从1000开始\n\n## 4、添加用户\n\n- 使用useradd即可增加一个用户\n\n- 命令格式：**useradd** 选项 用户名\n\n- 选项:\n\n  -c comment 指定一段注释性描述。\n\n  -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n\n  -g 用户组 指定用户所属的用户组。\n\n  -G 用户组，用户组 指定用户所属的附加组。\n\n  -s Shell文件 指定用户的登录Shell。\n\n  -u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\n```python\n# 创建用户\nuseradd lg\n# 设置密码\npasswd lg\n# -m 将家目录内容移至新位置 (仅于 -d 一起使用)\nusermod -m -d /home/lg3 lg\n```\n\n## 5、修改或删除用户\n\n### 5.1修改用户\n\n- 命令格式：usermod 选项 用户名\n- 选项与useradd命令中的选项一样\n\n```python\n# 修改sam用户的shell文件为/bin/ksh，主目录为/home/z，用户组为developer\nusermod -s /bin/ksh -d /home/z -g developer sam\n```\n\n### 5.2删除用户\n\n- 命令格式：userdel 选项 用户名\n- 常用的选项是 -r，它的作用是把用户的主目录一起删除\n\n## 6、修改密码\n\n- 命令格式：：**passwd** 选项 用户名\n- 一般passwd 用户名即可\n\n## 7、增加用户组\n\n- 其格式：groupadd 选项 用户组\n- 选项\n  - -g GID 指定新用户组的组标识号（GID）\n  - -o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同\n\n## 8、删除或修改用户组\n\n### 8.1删除用户组\n\n- 其格式：groupdel 用户组\n\n### 8.2修改用户组\n\n- 格式：groupmod 选项 用户组\n- 常用的选项有：\n  - -g GID 为用户组指定新的组标识号\n  - -o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。\n  - -n 新用户组 将用户组的名字改为新名字\n- 例如：groupmod –g 10000 -n group3 group2\n  - 此命令将组group2的标识号改为10000，组名修改为group3\n\n# Linux基础命令\n\n## 1、清空显示内容\n\n### clear\n\n- 清除全屏内容\n\n## 2、查看路径\n\n### pwd\n\n- Print Working Directory  打印工作目录\n- 显示当前文件的路径\n\n## 3、显示文件\n\n### ls   (list)\n\n- 列出当前目录所有文件夹和文件\n\n![](Linux笔记/image-20230725210604931.png)\n\n### ll    (list long)\n\n- 列出当前目录所有文件和文件夹的详细信息\n\n### ls -a   (list all)\n\n- 列出当前目录所有的文件包括隐藏文件\n\n### ll - a\n\n-  (列出当前目录所有的文件包括隐藏文件得详细信息)\n\n- 前面带 . 的为隐藏文件\n\n![](Linux笔记/image-20230725210839326.png)\n\n### ls --help\n\n- ls --help\" 是用于查看 ls 命令的**帮助文档**。在 Linux 终端中，这个命令可以显示 ls 命令的使用方法、选项和参数说明，以及其他相关的信息。\n\n### stat\n\n- 统计\n\n- 查看文件信息\n\n![](Linux笔记/image-20230727184316885.png)\n\n### 不同的文件，有不同的颜色\n\n![](Linux笔记/image-20230727184609219.png)\n\n## 4、文件及目录操作\n\n- 创建、切换路径、复制粘贴、剪切、重命名、显示文件内容、显示文件大小\n\n### touch\n\n- 创建空文件\n\n```\ntouch newfile\n```\n\n### mkdir\n\n- make directory  创建文件夹\n- mkdir -p 可以创建多级文件夹\n  - p\t--parents，递归创建目录\n\n```python\n# 创建目录\nmkdir aa\n# 创建多级目录\nmkdir aa/bb/cc/dd\n```\n\n### cd   \n\n- change directory   切换目录\n\n- 切换目录\n\n```python\n# 切换到root用户的家目录\ncd\ncd /root\ncd ~\n# 切换到普通用户的家目录\ncd /home/普通用户\n# 切换到根目录\ncd /\n# 切换到上一级\ncd ..\n# 切换到上一级的上一级\ncd ../../\n# 绝对路径切换\ncd /user/local\n# 相对路径\ncd ../文件夹\n# 进入当前文件夹下的其他文件夹\ncd ./文件夹\ncd 文件夹\n# 返回上一次所处文件夹\ncd -\n```\n\n### rm \n\n- remove  移除\n\n- 删除文件\\文件夹\n- 使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它\n\n```python\n# 删除文件\nrm 文件名\n# 强制删除文件\n# force\nrm -f 文件名\n# 删除目录（递归删除），需要确认\n# recursive\nrm -r  aa/bb/cc\n# 强制删除目录\nrm -rf aa/bb/cc\n```\n\n### cp\n\n- copy\n\n- 复制粘贴\n\n```python\n# 复制粘贴文件到aa目录中\ncp a.txt aa/\n# 复制粘贴aa文件夹到bb中\n# -r  recursive\ncp -r aa bb/\n```\n\n### mv\n\n- move \n- 剪切的意思，如果指定新的文件名，则移动过去，并会重命名\n\n```python\n# 如果path2/newname不存在，则会创建出来\nmv  <path1/oldname>    <path2/newname>\n```\n\n### scp\n\n- Secure Copy Protocol 安全复制协议\n- 远程复制\n- 它是一个用于在本地主机和远程主机之间进行安全复制文件的命令行工具。scp 命令使用 SSH 协议进行数据传输，因此文件在传输过程中是被加密的，提供了更高的安全性。\n\n```python\n# 从本地复制到远程 \nscp /home/test/*.sh    root@172.19.2.75:/home/root \n# 从远程复制到本地 \nscp root@/172.19.2.75:/home/root/*.txt   /home/test\n# 从远程到远程 \nscp root@192.168.21.1:/root/test/*.sh root@192.168.31.1:/root/test\n# 显示进度在scp后添加-v； verbose 冗长的\n# 复制目录在scp后添加-r： recursive \n```\n\n### cat\n\n- concatenate  连接\n- 显示文本文件的内容\n- 也可以用于将多个文件内容合并输出，或者将内容重定向到其他文件中。\n  - 重定向\n    - \">\"  ：覆盖重写\n    -  \">>\"：追加写\n\n```python\n# 显示文件内容\ncat 文件名\n# 将a.txt和b.txt的内容覆盖写到/追加到c.txt中\ncat a.txt b.txt > c.txt\ncat a.txt b.txt >> c.txt\n# 显示行号\n# number\ncat -b a.txt\n```\n\n### tac\n\n- 显示文本内容（cat的倒序输出）\n\n### tail\n\n- tail 尾巴\n- 显示末尾文本内容\n- 显示完成后并不会停止，需要终止程序运行\n\n```python\n# 显示末尾10行\ntail -10f a.txt\n```\n\n### tailf\n\n- 和tail一样的作用，只不过表达不一样\n\n```python\n# 显示末尾10行\ntailf 10 a.txt\n```\n\n### more/less\n\n- 回车一次显示一部分\n\n```python\nmore a.txt\nless a.txt\n```\n\n![](Linux笔记/image-20230727193418935.png)\n\n### du\n\n- disk usage 磁盘使用情况\n- 显示文件大小\n  - 模4k，达不到4k大小的文件，也会占用4k的空间\n\n```python\n# 统计全部目录及其子目录下的每个档案所占的磁盘空间\n# -h   human；以人们习惯的方式进行展示\ndu -h\n# 统计对应文件的磁盘空间\ndu -h directory\n```\n\n### df\n\n- disk free 空闲磁盘\n- 显示文件系统的磁盘空间使用情况。df 命令会列出文件系统的挂载点、总大小、已使用空间、可用空间以及文件系统类型等\n\n![](Linux笔记/image-20230727193920519.png)\n\n### vi/vim\n\n- 进行文本编辑\n- vi和vim的区别是，vim进入文件，会显示颜色\n- vim总共有三种模式：命令模式、插入模式、末行模式\n  - 通过vim命令打开文件即进入**命令模式**，命令模式下可以进行复制粘贴删除等功能\n  - 在命令模式按i，可以进入**插入模式**，插入模式可以进行文件编辑\n  - 在插入模式按ESC键\n  - 命令模式按:冒号，可以进入**末行模式**，末行模式主要进行文件保存、退出或查找替换\n\n### who\n\n- `who` 是一个用于显示当前登录到系统的用户信息的命令。在 Linux/Unix 系统中，`who` 命令通常用于查看当前登录用户的详细列表，包括用户名、终端、登录时间等信息。\n\n![](Linux笔记/image-20230729145832928.png)\n\n### wc\n\n- wordcount\n\n- `wc` 是一个用于统计文件中行数、单词数和字符数的命令。在 Linux/Unix 系统中，`wc` 命令通常用于查看文件的文本统计信息。\n\n  常用的选项包括：\n\n  - `-l`：统计行数。\n  - `-w`：统计单词数。\n  - `-c`：统计字符数。\n\n# Linux常用工具\n\n## 1、vim\n\n- Vim（Vi IMproved）文本编辑器\n\n- nohlsearch 关闭文本搜索后的黄色光标\n\n  - no highlight search  关闭突出搜索\n  - 在末行模式下输入\n\n  ```\n  :nohlsearch\n  ```\n\n  \n\n![](Linux笔记/image-20230727194724286-1692155590711.png)\n\n\n\n![](Linux笔记/image-20230727194425502-1692155580085.png)\n\n\n\n![](Linux笔记/image-20230727194517260.png)\n\n\n\n![](Linux笔记/image-20230727200849580.png)\n\n\n\n![](Linux笔记/image-20230727200919785.png)\n\n\n\n![](Linux笔记/image-20230727200934622.png)\n\n\n\n![](Linux笔记/image-20230727201038649.png)\n\n\n\n![image-20230731090649262](Linux笔记/image-20230731090649262.png)\n\n- Home行首\n- End行尾\n\n#### 文件中永久显示行号\n\n- 创建 .vimrc文件（隐藏文件）\n- \"vimrc\" 的全称是 \"Vim Run Commands\"。\n- 用户可以在 vimrc 文件中设置各种选项，例如设置缩进、语法高亮、键盘映射、颜色方案等\n\n```python\n# 步骤\ncd ~\nvim .vimrc\n# 在其中添加\nset nu\n```\n\n## 2、压缩解压\n\n- 命令：tar  [选项]  文件/目录\n\n#### 2.1 打包\n\n- 选项 \"-cvf\" 一般是习惯用法\n- 打包时需要指定打包之后的文件名，而且要用 \".tar\" 作为扩展名\n\n- 注意 f 后面一定要跟包名\n\n![](Linux笔记/image-20230727201607999.png)\n\n```python\n# 打包\ntar -cvf 包名 文件1/目录1 文件2/目录\n```\n\n#### 2.2 压缩\n\n- **gzip压缩命令不能直接压缩目录**，必须先用 tar 命令将目录打包，然后才能用 gzip 命令对打包文件进行压缩\n\n```python\n# 压缩\ngzip aa.tar\n```\n\n- tar -zcvf xxx.tar.gz  目录 ，这种格式可以直接压缩目录\n\n```python\n# 打包目录\ntar -zcvf ee.tar.gz aa\n```\n\n#### 2.3 解打包操作\n\n- 对 tar 包做解打包操作\n\n- 打包和打包相比，只是把打包选项 \"-cvf\" 更换为 \"-xvf\"\n- 想要指定解压位置，则需要使用 \"-C(大写)\" 选项\n\n```python\n# 解打包操作\ntar -xvf aa.tar -C /temp\n```\n\n#### 2.4解压缩操作\n\n- -z：压缩和解压缩 \".tar.gz\" 格式；\n\n  -j：压缩和解压缩 \".tar.bz2\"格式。\n\n- 常用 tar -zxvf 包名 -C  解压路径\n\n```\n# 解压到当前目录的aa目录下\ntar -zxvf bb.tar.gz ./aa\n```\n\n## 3、netstat\n\n- netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。\n- 常用选项：-nplt\n  - `-n`: numeric，以数值形式显示 IP 地址和端口号。\n  - `-p`: process，显示对应的进程信息，即查看占用端口的进程名称。\n  - `-l`: listen，只显示监听状态的端口。\n  - `-t`: TCP，只显示 TCP 协议相关的连接。\n  - `-u`: UDP，只显示 UDP 协议相关的连接。\n\n![](Linux笔记/image-20230727205255514.png)\n\n## 4、ps\n\n- process status  进程状态\n\n- 用于显示当前进程的状态，类似于 windows 的任务管理器。\n\n- 常用参数：\n\n  - -aux 显示所有包含其他使用者的进程\n\n    - `a`: all processes，显示所有用户的所有进程，包括其他用户的进程。\n\n      `u`: user-oriented format，以用户为导向的格式显示进程信息。\n\n      `x`: no controlling terminal，显示无控制终端的进程，通常用于显示后台进程。\n\n  - -ef \n\n    -  `-e`: 显示所有进程，包括其他用户的进程。\n    -  `-f`: 显示完整的进程信息，包括进程的详细信息，如进程号、父进程号、用户、CPU 使用率、内存占用等。\n\n- `ps`是用来查看当前进程状态的命令\n\n![](Linux笔记/image-20230728101020819.png)\n\n- 在 `ps -ef` 中，显示所有进程，包括其他用户的进程，并且不显示与终端无关的进程。\n\n![image-20230728100939773](Linux笔记/image-20230728100939773.png)\n\n- `ps -aux` 中，除了显示所有进程和完整的进程信息外，还显示与终端无关的进程。\n\n![image-20230728101006301](Linux笔记/image-20230728101006301.png)\n\n## 5、find\n\n- 命令用于在指定目录下查找文件和目录。\n- 格式：find  路径  -name 文件名\n\n```python\n# 在root搜索名字中含有txt的文件\nfind /root -name a.txt\n```\n\n## 6、whereis\n\n- `whereis`是一个在Linux和Unix系统中用来查找二进制程序（可执行文件）、源代码以及帮助文档的命令。它的作用是快速定位特定命令、程序或文件在系统中的位置。\n- 可以用来查找命令的位置\n- 注意：whereis会查找位于环境变量中的二进制文件\n  - `pwd`命令的可执行文件位于`/usr/bin/pwd`。\n  - 帮助文档位于`/usr/share/man/man1/pwd.1p.gz`。\n\n![](Linux笔记/image-20230727211150030.png)\n\n# Linux 常用操作\n\n- 查看centos版本信息\n\n```\ncat /etc/centos-release\n```\n\n![](Linux笔记/image-20230730171241699.png)\n\n## 1、yum\n\n- `yum`可以帮助用户搜索、安装、更新和删除软件包，并管理系统的软件包依赖关系。通过 `yum`，用户可以方便地从软件源中获取所需的软件包，并在系统中安装它们。\n\n#### 1.1 基本使用\n\n- 安装：`yum install 包名`\n- 卸载：`yum remove 包名`\n- 更新：`yum update 包名`\n- 显示已配置的源：`yum repolist`\n- 列出安装的包：`yum list`\n  - `yum list |grep \"关键字\"`\n\n![image-20230730163321077](Linux笔记/image-20230730163321077.png)\n\n- 查看软件包的详细信息:`yum info 包名`: 。\n- 查看帮助文档：yum --help\n\n- `yum` 会自动从配置好的软件源中下载并安装软件包，因此在使用之前，请确保系统已正确配置了可用的**软件源**。\n\n- 安装telnet\n\n  - telnet ：和ssh差不多，用来远程连接，但是安全性不高，可以用来做端口测试\n\n  - ```sh\n    # 测试指定ip的端口是否被占用\n    # 如果被占用则会卡住，反之输出拒绝连接\n    telnet 192.168.175.100 22  \n    ```\n\n  - 卡住，指定端口被占用\n    \n  -  master的22端口被xshell占用\n  \n\n![](Linux笔记/image-20230730164249051.png)\n\n- 没卡住，指定端口没被占用\n  \n  ![](Linux笔记/image-20230730164334687.png)\n  \n- 首先会下载一个rpm包\n  \n\n![](Linux笔记/image-20230730172211211.png)\n\n  - 可以通过yum和rpm卸载软件包\n  - yum是基于 rpm的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 yum来管理软件包。\n\n\n\n#### 1.2 换源\n\n- 由于原网站在外网，所以换到阿里的镜像网站，提升下载速度\n\n  - ```\n    https://mirrors.aliyun.com\n    ```\n\n- 备份原有的软件源配置文件\n  \n  - yum.repos.d   yum.repositories directory   yum的仓库目录\n\n```\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n- 从阿里官方网站下载对应系统版本的源配置文件\n  -  \"wget\" 是一个用于从网络上下载文件的命令行工具。\n  -  \"-O\" 是 \"wget\" 命令的选项之一，用于指定保存下载文件的本地文件名。\n\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n- 由于我们是非ECS（内部）用户，所以源配置文件中包含aliyuncs.com地址访问不了\n\n![image-20230730164816754](Linux笔记/image-20230730164816754.png)\n\n- 故移除url : aliyuncs.com\n  - \"sed\" 是 Stream Editor（流编辑器）的缩写，用于在文本流中进行查找、替换和编辑操作。\n  - \"sed -i -e\" 是用于在文件中进行替换操作的 sed 命令的组合。\n\n```\nsed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\n```\n\n![image-20230730165344441](Linux笔记/image-20230730165344441.png)\n\n- 重新构建本地缓存\n\n```\nyum makecache\n```\n\n- YUM 是基于 RPM 的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 YUM 来管理软件包。\n\n## 2、systemctl\n\n- system control系统控制\n\n- 管理系统以及用户的服务\n\n  - 网络管理工具：NetworkManager\n\n    网络服务：network\n\n    防火墙：firewalld\n\n- 系统服务都在：/usr/lib/systemd/system该目录中\n\n  都是以xxx.service形式存在\n\n![image-20230730170533372](Linux笔记/image-20230730170533372.png)\n\n- `lib`文件夹存放的是库文件（Library Files）\n- 常用操作\n  * 启动：```systemctl start firewalld```\n  * 停止：```systemctl stop firewalld```\n  * 重启：```systemctl restart firewalld```\n  * 查看状态：```systemctl status firewalld```\n  * 开机自启：```systemctl enable firewalld```\n  * 取消开机自启：```systemctl disable firewalld```\n\n## 3、更换主机名\n\n- 通过文件\n\n```\nvim /etc/hostname\n```\n\n- 通过工具\n\n```\nhostnamectl set-hostname master\n```\n\n## 4、映射\n\n- linux修改映射\n\n```\nvim /etc/hosts\n```\n\n- windows修改映射\n\n```\nC:\\Windows\\System32\\drivers\\etc\\hosts\n```\n\n## 5、修改环境变量\n\n- 环境变量：本质上是很多路径\n\n  当系统执行命令时，会去环境变量中的路径里查找有无该命令，有即执行，没有就会提示命令找不到\n\n  配置环境变量就是告诉系统去哪些位置找我们需要的命令\n\n```shell\n# 进入管理环境变量的文件\nvim /etc/profile\n\n# 一般配置在文件的尾部 先配置一个XXX_HOME，然后再将其HOME下的bin目录配置在环境变量PATH中\nXXX_HOME=/x/xx\nYYY_HOME=/y/yy\nexport PATH=$XXX_HOME/bin:$YYY_HOME/bin:$PATH\n\n# 配置完之后 source 生效\nsource /etc/profile\n```\n\n## 6、安装JDK\n\n- 上传安装包到虚拟机\n\n  - rz -E\n\n    ```\n    # 没有rz命令可以下载\n    yum install lrzsz\n    rz 是接收文件\n    sz 是发送文件\n    ```\n\n  - xftp\n\n- 创建问价夹存放压缩包和解压后的文件\n\n```\nmkdir /usr/local/package\nmkdir /usr/local/soft\n```\n\n- 解压\n\n```\ntar -zxvf /usr/local/package/jdk-8u171-linux-x64.tar.gz -C /usr/local/soft\n```\n\n- 修改环境变量\n\n```shell\n# 进入管理环境变量的文件\nvim /etc/profile\n\n# 在文件尾部加入以下内容\nJAVA_HOME=/usr/local/soft/jdk1.8.0_171\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# 保存退出之后 source 生效\nsource /etc/profile\n```\n\n- 修改配置文件（省略）\n- 进行初始化工作（省略）\n- 测试是否安装成功\n\n```sh\n# 查看当前系统中运行了哪些JAVA进程\njps  #  java process status 查看java进程\n\n# 查看JAVA的版本号 \njava -version\n```\n\n![](Linux笔记/image-20230730174650797.png)\n\n## 7、后台运行nohup\n\n- no hang up 不挂起\n- 将进程放在后台执行 不直接打印东西在控制台  一般带上重定向\n\n```\nnohup sh test.sh > xxx.log 2>&1\n```\n\n## 8、定时调度crontab\n\n- `crontab` 是用于管理和设置定时任务的命令。\n- 具体的选项如下\n  - `crontab -e`：编辑当前用户的定时任务列表。\n  - `crontab -l`：列出当前用户的定时任务列表。\n  - `crontab -r`：删除当前用户的定时任务列表。\n  - `crontab -u <user>`：指定要操作的用户，用于以其他用户的身份管理定时任务。\n- ctontab在线工具\n\n```\nhttps://tool.lu/crontab/\n```\n\n- 定时调度格式\n\n```shell\n* * * * * command\n #f1 第一个 * 分钟 (0 - 59)\n #f2 第二个 * 小时 (0 - 23)\n #第三个 * 一个月中的第几天 (1 - 31)\n #第四个 * 月份 (1 - 12) \n #第五个 * 星期中星期几 (0 - 6) (星期天 为0)\n \n #当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推\n \n 0 6-12/3 * 12 *   #表示 12月6点到12点 每隔三个小时的0分钟执行一次\n```\n\n- 进入页面写定时任务\n\n```shell\n # 进入后和vim界面一样的操作\n crontab -e\n```\n\n- 查看已有的定时任务\n\n```shell\ncrontab -l\n```\n\n- 删除所有的定时任务\n\n```shell\ncrontab -r\n```\n\n- 定时执行脚本\n\n```shell\ncrontab -e\n# 写入定时任务\n# 每分钟将date输出重定向到time.txt文件\n* * * * * date > /root/time.txt\n```\n\n## 9、ssh\n\n## 10、免密登录\n\n## 11、时区配置\n\n* 查看当前时间：`date`\n\n* 查看当前时区：`timedatectl`\n\n* 查看所有时区：\n\n  * `/usr/share` 是 Linux 系统中的一个常见目录，它主要用于存放与应用程序无关的数据文件，例如共享资源、帮助文档、图标、主题等等\n\n  ```shell\n  # 进入存放时区的文件夹\n  cd /usr/share/zoneinfo/\n  # 展示\n  ls\n  ```\n\n* 修改时区\n\n  ```sh\n  timedatectl set-timezone Asia/Shanghai\n  ```\n\n* 同步时间\n\n  ```shell\n  # 基于阿里云NTP服务器同步时间\n  ntpdate ntp.aliyun.com\n  # 将时间写入硬件，避免重启失效\n  clock -w\n  ```\n\n## 12、关键字抓取\n\n- 格式：命令 | grep 关键字\n  - 命令 \t 表示要执行的命令，\n  - |           表示管道，抓取的信息，会放入管道中\n  - grep     表示抓取\n  - 关键字  表示要抓取信息的关键字\n\n- ps -ef | grep 进程关键字\n  - 抓取进程关键字\n- ls | grep 文件关键字\n- 等\n\n# Linux扩展知识\n\n## 1、子网掩码\n\n- 三类地址\n\n```python\n# ip地址共 4个字节 32位\n\n# A类地址，第一个字节开头为0：十进制范围在0-127\n0 _ _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n\n# B类地址，第一个字节的前两位为10：十进制范围128-191\n1 0 _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n\n# C类地址，第一个字节的前三位为110：十进制范围192-223\n1 1 0 _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n```\n\n- 子网掩码用来划分网络号和主机号\n  - ip地址分为网络号和主机号\n  - 数据包发送时，通过网络号找到对应的地区，再通过主机号找到对应主机接收数据\n\n```python\n# A类地址的子网掩码\n# 一个A类地址可以分配255*225*225个主机号，所以一个A类地址可以划分255*225*225个ip地址\n255.0.0.0\n11111111.00000000.00000000.00000000\n\n# B类地址的子网掩码\n# 一个B类地址可以分配255*225个主机号，所以一个B类地址可以划分255*225个ip地址\n255.255.0.0\n11111111.11111111.00000000.00000000\n\n# C类地址的子网掩码\n# 一个C类地址可以分配255*225个主机号，所以一个C类地址可以划分255个ip地址\n255.255.255.0\n11111111.11111111.11111111.00000000\n```\n\n- 子网掩码划分ip的列子\n\n```python\n# 假如一个子网掩码为\n11111111.11111111.11111111.11111100\n# 那么它可以划分4个ip地址\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 0 0  十进制：0\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 0 1  十进制：1\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 1 0  十进制：2\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 1 1  十进制：3\n# 由此子网掩码可以看出\n# 以下四个ip同属于一个网络号\n十进制：192.168.175.\n二进制：11000000.10101000.10101111.000000_ _\n# 分别有.0 .1 .2 .3四个主机号\n192.168.175.0\n192.168.175.1\n192.168.175.2\n192.168.175.3\n# 子网掩码与ip地址进行与操作，就能判断网络号和主机号了\n11111111.11111111.11111111.11111100\n# 与操作\n11000000.10101000.10101111.00000011\n# 结果如下\n# 通过结果可以看出，子网掩码中的1会将与ip地址对应的每一位都进行锁定（不变）\n11000000.10101000.10101111.00000000\n# 所以网络号为\n11000000.10101000.10101111.000000\n# 主机号为\n# 00\n# 01\n# 10\n# 11\n# 可以根据1的个数表示此网络号\n192.168.175.0/30\n```\n\n## 2、SSH\n\n- 全称是 \"Secure Shell\"，它是一种网络协议，用于在不安全的网络中建立安全的连接，通常用于远程登录到服务器或计算机，并进行安全的数据传输和远程操作。通过 `ssh`，用户可以远程执行命令、上传和下载文件，以及进行其他安全的网络操作。它提供了一种加密的方式，确保通信过程中数据的机密性和完整性，防止被中间人攻击和窃听。\n\n## 3、xshell\n\n- Xshell是一款Windows平台上的SSH（Secure Shell）客户端软件。它允许用户通过SSH协议连接到远程计算机或服务器，并进行命令行操作、文件传输和远程管理等任务。Xshell提供了丰富的功能和工具，如多会话管理、自动登录、端口转发、多种认证方式、会话管理、脚本支持等，使得用户能够更加方便和高效地进行远程操作和管理。Xshell广泛用于系统管理员、开发人员和网络工程师等领域，是一款功能强大的远程连接工具。\n\n## 4、更改xshell复制粘贴方式\n\n![](Linux笔记/image-20230727151820522.png)\n\n## 5、usr/bin和/bin中有什么区别\n\n首先注意 **usr 指 Unix System Resource**，而不是user\n\n- /usr/bin\n  系统预装的一些可执行程序，随系统升级会改变\n\n- /usr/local/bin\n  用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到/usr/local目录下\n\n- 如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响\n\n  - 举个栗子：echo $PATH查看当前 PATH 环境变量\n\n    ```python\n    /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n    ```\n\n  - 这里 /usr/local/git/bin 优先于 /usr/bin/git/bin\n\n- /bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 /usr 目录时就可以使用）\n\n- /sbin 存放超级用户才能使用的系统程序\n\n- /usr/bin 存放所有用户都可用的应用程序\n\n- /usr/sbin 存放超级用户才能使用的应用程序\n\n- /usr/local/bin 存放所有用户都可用的与本地机器无关的程序\n\n- /usr/local/sbin 存放超级用户才能使用的与本地机器无关的程序\n\n## 6、挂载\n\n- 指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。\n\n  Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 inux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统（文件目录结构）。\n\n  因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将Linux本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一的过程称为“挂载”。\n\n  如果不挂载，通过Linux系统中的图形界面系统可以查看找到硬件设备，但命令行方式无法找到。\n\n  并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。\n\n- mount命令可以查看系统中已经挂载的文件系统\n  \n  - sysfs on /sys type sysfs (rw)<--含义是，将 sysfs 分区挂载到了/sys 目录上，文件系统是 sysfs ，具有读写权限\n\n![image-20230727183225209](Linux笔记/image-20230727183225209.png)\n\n## 7、.bashrc\n\n- 位于/etc/bashrc\n- `.bashrc` 是 Bash Shell 的配置文件，用于配置用户在登录时所用的 Bash 环境。每个用户都可以在自己的主目录下创建一个名为 `.bashrc` 的文件，该文件中包含了一系列命令、别名、环境变量和其他设置，这些设置将在每次用户登录时自动加载。\n- 如下图中，[root@master ~]#的显示，也是.bashrc文件中shell命令执行后的结果\n\n![image-20230727214739399](Linux笔记/image-20230727214739399.png)\n\n- 用户可以编辑 `.bashrc` 文件来定制自己的 Shell 环境，然后重新登录或执行 `source ~/.bashrc` 命令使配置生效。这样，每次用户登录时，Bash 将加载该文件并执行其中的命令，从而为用户提供定制化的 Shell 环境。\n\n## 8、网络适配器\n\n- 网络适配器（Network Adapter）是计算机中用于连接计算机与网络之间的设备。它也被称为网络接口卡（Network Interface Card，NIC）、网络接口控制器（Network Interface Controller，NIC）或以太网卡（Ethernet Card）。\n\n- 网络适配器允许计算机与局域网（LAN）或广域网（WAN）进行通信，它负责将计算机内部的数据包转换为网络可以识别和传输的格式，并将从网络接收的数据包转换为计算机可以理解的格式。\n\n- 在现代计算机中，网络适配器通常是一个物理设备，可以是插入到计算机主板上的扩展卡，也可以是集成在主板上的芯片组。此外，一些计算机还支持无线网络适配器，允许计算机通过无线连接与网络通信。\n\n## 9、为什么重新构建本地缓存\n\n重新构建本地缓存通常是指重新生成或重建系统或应用程序使用的缓存文件，这样可以确保缓存数据是最新的、准确的，并可能提高系统或应用程序的性能。常见的场景包括：\n\n1. 缓存文件损坏：如果本地缓存文件损坏或出现问题，可能导致应用程序无法正常工作。重新构建缓存可以解决这个问题。\n2. 缓存过期：缓存通常是为了提高性能而创建的，但有时缓存的数据可能过期或不再准确。重新构建缓存可以更新数据并保持缓存的有效性。\n3. 更改数据源：如果数据源发生了更改，例如数据库中的数据有更新，那么本地缓存可能不再反映最新的数据。重新构建缓存可以从新数据源获取最新的数据。\n4. 清理旧数据：在某些情况下，应用程序可能会保留过多的缓存数据，导致占用过多的磁盘空间。重新构建缓存可以清理旧的、不再使用的数据。\n\n需要注意的是，在重新构建本地缓存时，可能会导致一定的性能损失，因为系统或应用程序需要重新生成缓存。因此，通常需要在适当的时间进行重新构建，以避免对系统性能造成过多影响。","source":"_posts/Linux笔记.md","raw":"---\ntitle: linux笔记\ntags: Linux\ncover: /images/linux笔记.jpg\ncategories: Linux\nabbrlink: 638d4d8a\ndate: 2023-08-16 11:42:52\n---\n\n# Linux介绍\n\n- Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的\n- Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。\n\n![](Linux笔记/image-20230726141327993.png)\n\n![](Linux笔记/image-20230726141424420.png)\n\n- 2020 年 12 月，CentOS 社区宣布 CentOS 服务器操作系统 8 和 7 系列分别于 2021 年底和 2024 年 6 月底停止服务。\n  - 龙蜥操作系统（Anolis OS）100% 兼容 RHEL/CentOS Linux 8；支持 x86_64 和 aarch64 架构及飞腾、海光、兆芯、鲲鹏等芯片，适配 x86 及 arm64 主流服务器硬件；提供 CentOS Linux 到 Anolis OS 迁移工具，帮助系统及应用的顺滑迁移\n\n# Linux虚拟机安装与配置\n\n## 1、安装VMware\n\n- 取消检查更新，下一步即可\n\n![](Linux笔记/image-20230725190639601.png)\n\n- 安装完成后，输入产品密钥\n\n![](Linux笔记/image-20230725164332151.png)\n\n- 查看网络适配器，检查是否安装成功\n\n![](Linux笔记/image-20230725190743350.png)\n\n## 2、配置虚拟机\n\n- 新建虚拟机\n\n- 选择典型模式\n\n![](Linux笔记/image-20230725164534031.png)\n\n- 配置CentOS-7.ios镜像\n  \n\n![](Linux笔记/image-20230725190147422.png)\n\n- 选择虚拟机位置和名称\n\n![](Linux笔记/image-20230725190958440.png)\n\n- 分配内存，并选中磁盘存储为单个文件\n\n![](Linux笔记/image-20230725191041627.png)\n\n- 进入到虚拟机界面，回车即可\n\n- 等待加载\n\n![](Linux笔记/image-20230725191430990.png)\n\n## 3、虚拟机中的软件配置\n\n- 虚拟机配置完成后，会进入到可视化界面中\n- 选择语言\n- 选中安装位置，点击完成\n\n![](Linux笔记/image-20230725191757477.png)\n\n- 下载GHOME桌面\n\n![](Linux笔记/image-20230725191831967.png)\n\n- 打开网络和主机名中的以太网，并记住当前主机ip\n  - 192.168.175.128\n\n![](Linux笔记/image-20230725192038917.png)\n\n- 开始安装\n- 设置root密码，可以创建普通用户，可以不创建\n\n![](Linux笔记/image-20230725192233909.png)\n\n![image-20230725192317190](Linux笔记/image-20230725192317190.png)\n\n![](Linux笔记/image-20230725192330984.png)\n\n- 重启虚拟机\n\n![](Linux笔记/image-20230725193756322.png)\n\n- 重启完成后，进行初始化设置，接收许可证\n\n![](Linux笔记/image-20230725193917275.png)\n\n- 在用户登录时，选择未列出中的root用户进行登录\n\n![](Linux笔记/image-20230725194021377.png)\n\n- 跳过登录后的选项\n\n![](Linux笔记/image-20230725194117040.png)\n\n- 点击应用软件中的Firefox，访问百度，测试网络是否连接\n\n![](Linux笔记/image-20230725194432819.png)\n\n- 网络连接成功，记得连接前关闭VPN\n\n![](Linux笔记/image-20230725194536832.png)\n\n## 4、虚拟机设置\n\n- 进入到虚拟机设置中\n- 指定内存和处理器核数\n- 如果没有指定镜像文件，可以在这里指定\n- 网络适配器选择NAT模式\n- 删除声卡和打印机\n\n![](Linux笔记/image-20230725195157685.png)\n\n- 如果关机后重新启动打不开或者打开出现错误，在进入到master文件夹，删除前三个文件夹，重新打开即可\n\n![](Linux笔记/image-20230725195717493.png)\n\n## 5、家目录\n\n### 5.1 root用户的家目录\n\n- 桌面上的主文件就是root用户的家目录\n\n![image-20230725200304363](Linux笔记/image-20230725200304363.png)\n\n- 在其他位置选项中，点击计算机位置，也可以看到root文件夹上也有个房子标志，表明root文件夹也是root用户的家目录\n\n![](Linux笔记/image-20230725200621688.png)\n\n### 5.2 普通用户的家目录\n\n- 切换到普通用户的登录\n\n- 和root用户一样，桌面上的目录是普通用户的家目录\n\n- 在计算机中普通用户的家目录，在home文件夹中\n\n![](Linux笔记/image-20230725201026739.png)\n\n![](Linux笔记/image-20230725201051683.png)\n\n- 并且，普通用户对root文件的访问需要root密码\n\n## 6、静态网络配置\n\n- 通过网络管理工具进行配置\n  -   这个**网络管理工具就是NetworkManager**\n  -  关闭NetworkManager后，会发现图形化界面中的网络管理工具也会消失\n  \n  ![](Linux笔记/image-20230726210518731.png)\n  \n  - 开启NetworkManager后，就会重新启动，说明两者是同一个东西\n  \n  ![](Linux笔记/image-20230726210638937.png)\n  \n  - 关闭，在开启NetworkManager后，如果连接不上xshell，可以重启虚拟机试一下\n  \n  -  在这里配置的静态网络设置的地址，可以在ifcfg-ens33 文件中找到\n\n#### 6.1 查看各个地址\n\n- 在图中的有线设置中找到，网络的设置\n\n![](Linux笔记/image-20230725201613953.png)\n\n- 点击齿轮，可以查看DNS和路由地址\n\n![](Linux笔记/image-20230725201655502.png)\n\n- 在次设置中可以看到主机的**路由地址**和**DNS地址**\n  - 后面配置网关时，可以把路由地址当作网关地址\n    - 网关和路由虽然是两个不同的概念。有时候网关实际上就是一个路由器，负责将本地网络和外部网络连接起来**。在这种情况下，网关的IP地址也充当着路由器的IP地址**。\n\n![](Linux笔记/image-20230725201748442.png)\n\n- 点击虚拟网络编辑器中，**更改设置**选项\n\n![](Linux笔记/image-20230725192937089.png)\n\n- 可以选择DHCP选项，查看**广播地址**\n  - 192.175.168.255\n- **DHCP**（Dynamic Host Configuration Protocol），即动态主机配置协议\n  - DHCP服务器会从预先设置的IP地址池（在起始ip和结束ip之间的地址中选择）中选择一个可用的IP地址分配给虚拟机，然后将其他相关配置信息一并发送给虚拟机，使虚拟机能够正确地连接到网络。\n  - 后面会配置静态的主机ip地址\n  - 动态的ip会导致连接xhell的时候，需要重新配置主机ip地址\n\n![](Linux笔记/image-20230725193304333.png)\n\n- 可以查看window的VMware8的ipv4地址\n  - 192.168.175.1\n\n![](Linux笔记/image-20230725193128431.png)\n\n- 点击编辑中的虚拟网络编辑器，查看**VMware8的子网和子网掩码**\n  - 网络适配器中VM8子网\n    - 192.168.175.0\n  - 网络适配器中VM8的子网掩码\n    -  255.255.255.0\n\n![](Linux笔记/image-20230725192651359.png)\n\n#### 6.2 静态网络配置\n\n- 在图中的有线设置中找到，网络管理工具\n\n![](Linux笔记/image-20230725201613953-1692155153717.png)\n\n- 点击齿轮，可以进行静态网络的配置\n\n![](Linux笔记/image-20230725201655502-1692155155569.png)\n\n- 由于0、1、2、255已经被占用，所以配置主机的静态ip时要避开这几个地址\n- 进行静态网络配置：**ipv4地址、子网掩码、网关（路由）、DNS**\n  -  **在此配置的各个地址，都会记录到ifcfg-ens33文件中**\n    -  192.168.175.100、255.255.255.0、192.168.175.2、192.168.175.2\n\n![](Linux笔记/image-20230725202522782.png)\n\n- **关闭网络管理工具，并重新连接有线设置，使配置生效**\n  - 关闭后三个点消失，在同位置可以开启\n\n![](Linux笔记/image-20230725202727704.png)\n\n- 打开终端，输入ifconfig命令查看主机ip\n\n![](Linux笔记/image-20230725202853702.png)\n\n- 测试网络连接，打开应用程序中Firefox，访问baidu\n\n![](Linux笔记/image-20230725203045211.png)\n\n- 配置完成后，可以在此终端配置ifcfg-ens33文件，这里配置完成后，后面就不需要对网络配置文件进行修改了\n  - BOOTPROTO=static\n  - PERFIX=24  -->  NETMASK=255.255.255.0 \n\n## 7、连接xshell\n\n- 安装xshell5\n\n- 配置主机地址\n\n![](Linux笔记/image-20230725204854629.png)\n\n- 配置root用户和密码\n\n![](Linux笔记/image-20230725205030096.png)\n\n- 接收并保存密钥\n\n![](Linux笔记/image-20230725204949968.png)\n\n- xshell平替\n  - electerm\n  - FinalShell\n\n## 8、关闭CentOS图形化界面\n\n- 关闭图形化界面，节省内存\n\n- 命令解释\n  - `multi-user.target` 是 Linux 系统的一个目标单元（target unit），表示系统默认运行级别为多用户模式，即只启动多用户命令行界面，不启动图形界面。\n\n```python\n# 在终端输入下面命令\n# system control \nsystemctl set-default multi-user.target\n# 重启\nreboot\n```\n\n- 查看centOS 7的默认启动模式（命令行模式显示：multi-user.target）\n- 修改centOS 7的默认启动模式（图形化界面显示：graphical.target）\n\n## 9、网络文件配置以及关闭防火墙\n\n- 配置网络连接文件\n  - PREFIX=24 改为 NETMASK=255.255.255.0\n    - PREFIX=24 表示子网掩码二进制1的个数\n    - 中文意思：前缀\n  - BOOTPROTO=static\n    - BOOTPROTO是Boot Protocol的缩写，表示引导协议。\n    - 常见的BOOTPROTO值包括：\n      1. DHCP：动态主机配置协议 (Dynamic Host Configuration Protocol)。使用DHCP时，网络接口会向网络中的DHCP服务器请求IP地址、子网掩码、网关、DNS等配置信息，并自动获取适配的网络配置。\n      2. Static：**静态配置**。设置网络接口的IP地址、子网掩码、网关等信息为手动配置，不通过DHCP获取。\n      3. None：无协议。不进行网络接口的自动配置，需要手动设置IP地址等信息。\n  - IPADDR=192.168.175.100  \n    - ip address\n    - ip地址\n  - NETMASK=255.255.255.0   \n    - network mask\n    - 子网掩码\n  - GATEWAY=192.168.175.2    \n    - 它是一个网络设备（通常是路由器）的IP地址，用于将数据包从本地网络转发到其他网络。\n    - 网关的IP地址可能和路由器的IP地址是一样的。这可能是因为网关实际上就是一个路由器，负责将本地网络和外部网络连接起来。在这种情况下，网关的IP地址也充当着路由器的IP地址。\n    - 网关\n  - DNS1=192.168.175.2\n    - \"Domain Name System\"，即域名系统\n    - 它是互联网上用于将域名（例如www.example.com）转换为IP地址（例如192.0.2.1）的一种系统。\n\n```python\n# 修改的内容\nBOOTPROTO=static\nIPADDR=192.168.175.100\nNETMASK=255.255.255.0  \nGATEWAY=192.169.175.2\nDNS1=192.169.175.2\n# 进入网络连接文件中\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n- 没改之前\n\n![](Linux笔记/image-20230725222708447.png)\n\n- 改之后\n\n![](Linux笔记/image-20230725223150054.png)\n\n- 为什么要关闭NetworkManager\n\n  - 对应图形化界面中的三个点\n\n  ![](Linux笔记/image-20230725201613953-1692155175847.png)\n\n  - NetworkManager是一个在Linux系统中管理网络连接的工具。\n    - 避免冲突\n      - 在某些情况下，可能会与其他网络管理工具或服务产生冲突，导致网络连接问题。关闭NetworkManager可能是为了避免这些潜在的冲突。\n    - 提高性能\n      - 在一些资源有限的系统中，关闭不需要的服务可以节省系统资源，从而**提高系统性能**。\n    - 关闭图形化界面后，就不能使用此工具，需要手动在ifcfg-ens33文件中进行网络配置，关闭NetworkManager服务可以节省系统资源\n  - 关闭后通过手动配置网络连接的文件\n\n- 关闭NetworkManager\n\n```python\n# 显示NetworkManager的状态\nsystemctl status NetworkManager\n# 关闭NetworkManager\nsystemctl stop NetworkManager\n# 关闭NetworkManager的开机自启\nsystemctl disble NetworkManager\n```\n\n![](Linux笔记/image-20230725221833744.png)\n\n\n\n![](Linux笔记/image-20230725222004113.png)\n\n- 启动network服务\n  - network\"通常指计算机网络\"\n\n```python\n# 查看network状态\nsystemctl status network\n# 修改ifcfg-ens33文件后重启network服务\nsystemctl restart network\n# 设置network开机自启\n# 在ifcfg-ens33文件中的ONBOOT设置里\nONBOOT=yes\n```\n\n![](Linux笔记/image-20230726212127488.png)\n\n- 关闭防火墙\n  - 关闭防火墙，以便软件可以正常连接到网络或下载所需的文件、以便特定的网络通信。\n\n```python\n# 查看防火墙状态\nsystemctl status firewalld\n# 关闭防火墙\nsystemctl stop firewalld\n# 关闭防火墙开机自启\nsystemctl disable firewalld\n```\n\n## 10、修改主机名\n\n- 主机名\n  - 主机的名字\n\n![](Linux笔记/image-20230725224604750.png)\n\n```python\n# 进入到hostaname文件中修改\nvim /etc/hostname\n```\n\n![](Linux笔记/image-20230725224740961.png)\n\n```python\n# 通过命令修改\nhostnamectl --help   # 查看命令参数\n\nhostnamectl set-hostname master\n```\n\n![](Linux笔记/image-20230725225041772.png)\n\n- 重启生效\n\n```python\n# 重启\nreboot\n```\n\n## 11、映射\n\n- 虚拟机映射\n  - ip地址映射为一个名字\n\n```python\n# 进入映射文件\nvim /etc/hosts\n```\n\n![](Linux笔记/image-20230725225334022.png)\n\n- 映射后可以通过别名访问该地址\n\n```python\n# 测试是否映射成功\nping master\n```\n\n- window本机映射\n  - 映射文件路径：C:\\Windows\\System32\\drivers\\etc\n  - 同样的如果在此文件配置虚拟机的映射，在window系统中的浏览器（或连接时）可以通过master访问虚拟机或连接虚拟机\n  - **因为xshell是安装在windows中的软件，所以配置windows本机映射，可以用映射连接xshell**\n\n![](Linux笔记/image-20230725225905638.png)\n\n\n\n![](Linux笔记/image-20230725230129222.png)\n\n## 12、解决异常退出文件时，再进入会出现下图情况\n\n- 下图为，异常退出文件会出现的情况\n\n![](Linux笔记/image-20230726212412260.png)\n\n- 删除下图中的文件即可解决\n\n```python\n# 删除该文件\nrm -rf  /etc/sysconfig/network-scripts/.ifcfg-ens33.swp\n```\n\n![](Linux笔记/image-20230726212756839.png)\n\n# Linux基本功能\n\n## 1、根目录下的文件夹\n\n- linux本质上就是一个文件系统，所有的东西都以文件的形式保存\n\n- 根目录下的各个文件夹，及其作用\n\n![](Linux笔记/image-20230725212127382.png)\n\n- bin\n  - 存放二进制可执行文件（就是命令，如：ls、cat、mkdir）\n- boot\n  - 存放用于系统引导（启动）时使用的各种文件\n- dev（devices）\n  - 存放设备文件\n- etc（etcetera）\n  - 存放所有系统配置文件\n- hom\n  - 存放所有用户文件的根目录\n- lib\n  - 存放跟文件系统中的程序运行所需要的共享库及内核模块\n- proc  \n  - 虚拟文件系统，存放当前内存的映射\n- usr  \n  - 存放系统应用程序，比较重要的目录/usr/local 管理员软件安装目录\n- var  \n  - 存放运行时需要改变数据的文件*\n- mnt  \n  - 挂载目录\n- sbin  \n  - 存储管理级别的二进制执行文件\n- root  \n  - 超级用户主目录（家目录）\n- opt \n  - 额外安装的可选应用程序包安装位置\n\n## 2、文件权限\n\n- Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定\n\n![](Linux笔记/image-20230725213809973.png)\n\n- 对应权限划分如下\n  - d表示文件夹\n  - 后面9个字母，每3个对应一个身份的权限\n    - r表示读，w表示写，x(execute)表示执行，如果命令文件中，该用户有x权限，则可以调用该命令\n      - 如果加了rw后，还是没有权限，可以加上x\n    - **owner**对应的当前用户，**group**对应的是用户组，**other users**对应的是其他普通用户\n      -  第一个root表示root用户，第个root表示root用户组\n\n![](Linux笔记/image-20230725214040146.png)\n\n![](Linux笔记/image-20230725213825941.png)\n\n- 使用 u, g, o 来代表三种身份的权限，此外还有a，代表all，即所有用户\n- chmod（change mode）\n  - 修改文件权限\n\n![](Linux笔记/image-20230725214239212.png)\n\n```python\n# 修改文件的root用户的读权限\nchmod u+r 文件名\nchmod u-r 文件名\nchmod u+rx 文件名\nchmod u-rx 文件名\n# 修改文件的root用户的写权限\nchmod u+w 文件名\nchmod u-w 文件名\nchmod u+wx 文件名\nchmod u-wx 文件名\n# 修改文件的root用户的读写权限\nchmod u+rw 文件名\nchmod u-rw 文件名\nchmod u+rwx 文件名\nchmod u-rwx 文件名\n# 修改文件的用户组的读写权限\nchmod g+r 文件名\nchmod g-r 文件名\n# 修改文件的普通用户的读写权限\nchmod o+r 文件名\nchmod o-r 文件名\n```\n\n- 如果用户相对文件进行读写操作，除了文件本身的权限，文件所处文件夹的读写权限也要有\n\n- chmod   xxx   文件夹\n  - xxx可以用数字代替\n  - rwx  r-x    r-x\n  - 111 101   101\n  - 7        5       5\n  - chmod 755 文件名  会赋予文件rwx  r-x    r-x的权限\n\n- chmod --help  查看命令的帮助文档\n  - chmod -R 755  文件夹，此命令会递归的把指定文件夹里所有的文件和文件夹都赋予 755的权限\n\n![](Linux笔记/image-20230725220926475.png)\n\n- chmod命令的匹配方式其实是正则表达式\n\n![](Linux笔记/image-20230725221157481.png)\n\n- 通过chown命令可以修改文件所有者和文件关联组，进而也能影响权限\n  - 命令格式：chown [-cfhvR] [--help] [--version] user[:group] file\n\n## 3、用户和用户组\n\n- Linux系统是一个多用户多任务的分时操作系统\n- 可以创建一个有一定权限的组，然后把普通用户放入进入\n\n- 添加的用户所在文件 /etc/passwd\n  - `djx`：用户名\n  - `x`：加密后的密码，通常是 'x' 或 '*' 表示密码以加密形式存储在 `/etc/shadow` 文件中\n  - `1000`：用户 ID (UID)，用于标识用户的唯一标识符\n  - `1000`：组 ID (GID)，用于标识用户所属的主要用户组\n  - `djx`：用户的全名或描述\n  - `/home/djx`：用户的主目录路径\n  - `/bin/bash`：用户的默认 shell，这里指定为 Bash 解释器。\n\n![image-20230727213145890](Linux笔记/image-20230727213145890.png)\n\n- 添加的用户组所在文件 /etc/group\n- 新创建的用户和用户组的，uid和gid默认从1000开始\n\n## 4、添加用户\n\n- 使用useradd即可增加一个用户\n\n- 命令格式：**useradd** 选项 用户名\n\n- 选项:\n\n  -c comment 指定一段注释性描述。\n\n  -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n\n  -g 用户组 指定用户所属的用户组。\n\n  -G 用户组，用户组 指定用户所属的附加组。\n\n  -s Shell文件 指定用户的登录Shell。\n\n  -u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\n```python\n# 创建用户\nuseradd lg\n# 设置密码\npasswd lg\n# -m 将家目录内容移至新位置 (仅于 -d 一起使用)\nusermod -m -d /home/lg3 lg\n```\n\n## 5、修改或删除用户\n\n### 5.1修改用户\n\n- 命令格式：usermod 选项 用户名\n- 选项与useradd命令中的选项一样\n\n```python\n# 修改sam用户的shell文件为/bin/ksh，主目录为/home/z，用户组为developer\nusermod -s /bin/ksh -d /home/z -g developer sam\n```\n\n### 5.2删除用户\n\n- 命令格式：userdel 选项 用户名\n- 常用的选项是 -r，它的作用是把用户的主目录一起删除\n\n## 6、修改密码\n\n- 命令格式：：**passwd** 选项 用户名\n- 一般passwd 用户名即可\n\n## 7、增加用户组\n\n- 其格式：groupadd 选项 用户组\n- 选项\n  - -g GID 指定新用户组的组标识号（GID）\n  - -o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同\n\n## 8、删除或修改用户组\n\n### 8.1删除用户组\n\n- 其格式：groupdel 用户组\n\n### 8.2修改用户组\n\n- 格式：groupmod 选项 用户组\n- 常用的选项有：\n  - -g GID 为用户组指定新的组标识号\n  - -o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。\n  - -n 新用户组 将用户组的名字改为新名字\n- 例如：groupmod –g 10000 -n group3 group2\n  - 此命令将组group2的标识号改为10000，组名修改为group3\n\n# Linux基础命令\n\n## 1、清空显示内容\n\n### clear\n\n- 清除全屏内容\n\n## 2、查看路径\n\n### pwd\n\n- Print Working Directory  打印工作目录\n- 显示当前文件的路径\n\n## 3、显示文件\n\n### ls   (list)\n\n- 列出当前目录所有文件夹和文件\n\n![](Linux笔记/image-20230725210604931.png)\n\n### ll    (list long)\n\n- 列出当前目录所有文件和文件夹的详细信息\n\n### ls -a   (list all)\n\n- 列出当前目录所有的文件包括隐藏文件\n\n### ll - a\n\n-  (列出当前目录所有的文件包括隐藏文件得详细信息)\n\n- 前面带 . 的为隐藏文件\n\n![](Linux笔记/image-20230725210839326.png)\n\n### ls --help\n\n- ls --help\" 是用于查看 ls 命令的**帮助文档**。在 Linux 终端中，这个命令可以显示 ls 命令的使用方法、选项和参数说明，以及其他相关的信息。\n\n### stat\n\n- 统计\n\n- 查看文件信息\n\n![](Linux笔记/image-20230727184316885.png)\n\n### 不同的文件，有不同的颜色\n\n![](Linux笔记/image-20230727184609219.png)\n\n## 4、文件及目录操作\n\n- 创建、切换路径、复制粘贴、剪切、重命名、显示文件内容、显示文件大小\n\n### touch\n\n- 创建空文件\n\n```\ntouch newfile\n```\n\n### mkdir\n\n- make directory  创建文件夹\n- mkdir -p 可以创建多级文件夹\n  - p\t--parents，递归创建目录\n\n```python\n# 创建目录\nmkdir aa\n# 创建多级目录\nmkdir aa/bb/cc/dd\n```\n\n### cd   \n\n- change directory   切换目录\n\n- 切换目录\n\n```python\n# 切换到root用户的家目录\ncd\ncd /root\ncd ~\n# 切换到普通用户的家目录\ncd /home/普通用户\n# 切换到根目录\ncd /\n# 切换到上一级\ncd ..\n# 切换到上一级的上一级\ncd ../../\n# 绝对路径切换\ncd /user/local\n# 相对路径\ncd ../文件夹\n# 进入当前文件夹下的其他文件夹\ncd ./文件夹\ncd 文件夹\n# 返回上一次所处文件夹\ncd -\n```\n\n### rm \n\n- remove  移除\n\n- 删除文件\\文件夹\n- 使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它\n\n```python\n# 删除文件\nrm 文件名\n# 强制删除文件\n# force\nrm -f 文件名\n# 删除目录（递归删除），需要确认\n# recursive\nrm -r  aa/bb/cc\n# 强制删除目录\nrm -rf aa/bb/cc\n```\n\n### cp\n\n- copy\n\n- 复制粘贴\n\n```python\n# 复制粘贴文件到aa目录中\ncp a.txt aa/\n# 复制粘贴aa文件夹到bb中\n# -r  recursive\ncp -r aa bb/\n```\n\n### mv\n\n- move \n- 剪切的意思，如果指定新的文件名，则移动过去，并会重命名\n\n```python\n# 如果path2/newname不存在，则会创建出来\nmv  <path1/oldname>    <path2/newname>\n```\n\n### scp\n\n- Secure Copy Protocol 安全复制协议\n- 远程复制\n- 它是一个用于在本地主机和远程主机之间进行安全复制文件的命令行工具。scp 命令使用 SSH 协议进行数据传输，因此文件在传输过程中是被加密的，提供了更高的安全性。\n\n```python\n# 从本地复制到远程 \nscp /home/test/*.sh    root@172.19.2.75:/home/root \n# 从远程复制到本地 \nscp root@/172.19.2.75:/home/root/*.txt   /home/test\n# 从远程到远程 \nscp root@192.168.21.1:/root/test/*.sh root@192.168.31.1:/root/test\n# 显示进度在scp后添加-v； verbose 冗长的\n# 复制目录在scp后添加-r： recursive \n```\n\n### cat\n\n- concatenate  连接\n- 显示文本文件的内容\n- 也可以用于将多个文件内容合并输出，或者将内容重定向到其他文件中。\n  - 重定向\n    - \">\"  ：覆盖重写\n    -  \">>\"：追加写\n\n```python\n# 显示文件内容\ncat 文件名\n# 将a.txt和b.txt的内容覆盖写到/追加到c.txt中\ncat a.txt b.txt > c.txt\ncat a.txt b.txt >> c.txt\n# 显示行号\n# number\ncat -b a.txt\n```\n\n### tac\n\n- 显示文本内容（cat的倒序输出）\n\n### tail\n\n- tail 尾巴\n- 显示末尾文本内容\n- 显示完成后并不会停止，需要终止程序运行\n\n```python\n# 显示末尾10行\ntail -10f a.txt\n```\n\n### tailf\n\n- 和tail一样的作用，只不过表达不一样\n\n```python\n# 显示末尾10行\ntailf 10 a.txt\n```\n\n### more/less\n\n- 回车一次显示一部分\n\n```python\nmore a.txt\nless a.txt\n```\n\n![](Linux笔记/image-20230727193418935.png)\n\n### du\n\n- disk usage 磁盘使用情况\n- 显示文件大小\n  - 模4k，达不到4k大小的文件，也会占用4k的空间\n\n```python\n# 统计全部目录及其子目录下的每个档案所占的磁盘空间\n# -h   human；以人们习惯的方式进行展示\ndu -h\n# 统计对应文件的磁盘空间\ndu -h directory\n```\n\n### df\n\n- disk free 空闲磁盘\n- 显示文件系统的磁盘空间使用情况。df 命令会列出文件系统的挂载点、总大小、已使用空间、可用空间以及文件系统类型等\n\n![](Linux笔记/image-20230727193920519.png)\n\n### vi/vim\n\n- 进行文本编辑\n- vi和vim的区别是，vim进入文件，会显示颜色\n- vim总共有三种模式：命令模式、插入模式、末行模式\n  - 通过vim命令打开文件即进入**命令模式**，命令模式下可以进行复制粘贴删除等功能\n  - 在命令模式按i，可以进入**插入模式**，插入模式可以进行文件编辑\n  - 在插入模式按ESC键\n  - 命令模式按:冒号，可以进入**末行模式**，末行模式主要进行文件保存、退出或查找替换\n\n### who\n\n- `who` 是一个用于显示当前登录到系统的用户信息的命令。在 Linux/Unix 系统中，`who` 命令通常用于查看当前登录用户的详细列表，包括用户名、终端、登录时间等信息。\n\n![](Linux笔记/image-20230729145832928.png)\n\n### wc\n\n- wordcount\n\n- `wc` 是一个用于统计文件中行数、单词数和字符数的命令。在 Linux/Unix 系统中，`wc` 命令通常用于查看文件的文本统计信息。\n\n  常用的选项包括：\n\n  - `-l`：统计行数。\n  - `-w`：统计单词数。\n  - `-c`：统计字符数。\n\n# Linux常用工具\n\n## 1、vim\n\n- Vim（Vi IMproved）文本编辑器\n\n- nohlsearch 关闭文本搜索后的黄色光标\n\n  - no highlight search  关闭突出搜索\n  - 在末行模式下输入\n\n  ```\n  :nohlsearch\n  ```\n\n  \n\n![](Linux笔记/image-20230727194724286-1692155590711.png)\n\n\n\n![](Linux笔记/image-20230727194425502-1692155580085.png)\n\n\n\n![](Linux笔记/image-20230727194517260.png)\n\n\n\n![](Linux笔记/image-20230727200849580.png)\n\n\n\n![](Linux笔记/image-20230727200919785.png)\n\n\n\n![](Linux笔记/image-20230727200934622.png)\n\n\n\n![](Linux笔记/image-20230727201038649.png)\n\n\n\n![image-20230731090649262](Linux笔记/image-20230731090649262.png)\n\n- Home行首\n- End行尾\n\n#### 文件中永久显示行号\n\n- 创建 .vimrc文件（隐藏文件）\n- \"vimrc\" 的全称是 \"Vim Run Commands\"。\n- 用户可以在 vimrc 文件中设置各种选项，例如设置缩进、语法高亮、键盘映射、颜色方案等\n\n```python\n# 步骤\ncd ~\nvim .vimrc\n# 在其中添加\nset nu\n```\n\n## 2、压缩解压\n\n- 命令：tar  [选项]  文件/目录\n\n#### 2.1 打包\n\n- 选项 \"-cvf\" 一般是习惯用法\n- 打包时需要指定打包之后的文件名，而且要用 \".tar\" 作为扩展名\n\n- 注意 f 后面一定要跟包名\n\n![](Linux笔记/image-20230727201607999.png)\n\n```python\n# 打包\ntar -cvf 包名 文件1/目录1 文件2/目录\n```\n\n#### 2.2 压缩\n\n- **gzip压缩命令不能直接压缩目录**，必须先用 tar 命令将目录打包，然后才能用 gzip 命令对打包文件进行压缩\n\n```python\n# 压缩\ngzip aa.tar\n```\n\n- tar -zcvf xxx.tar.gz  目录 ，这种格式可以直接压缩目录\n\n```python\n# 打包目录\ntar -zcvf ee.tar.gz aa\n```\n\n#### 2.3 解打包操作\n\n- 对 tar 包做解打包操作\n\n- 打包和打包相比，只是把打包选项 \"-cvf\" 更换为 \"-xvf\"\n- 想要指定解压位置，则需要使用 \"-C(大写)\" 选项\n\n```python\n# 解打包操作\ntar -xvf aa.tar -C /temp\n```\n\n#### 2.4解压缩操作\n\n- -z：压缩和解压缩 \".tar.gz\" 格式；\n\n  -j：压缩和解压缩 \".tar.bz2\"格式。\n\n- 常用 tar -zxvf 包名 -C  解压路径\n\n```\n# 解压到当前目录的aa目录下\ntar -zxvf bb.tar.gz ./aa\n```\n\n## 3、netstat\n\n- netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。\n- 常用选项：-nplt\n  - `-n`: numeric，以数值形式显示 IP 地址和端口号。\n  - `-p`: process，显示对应的进程信息，即查看占用端口的进程名称。\n  - `-l`: listen，只显示监听状态的端口。\n  - `-t`: TCP，只显示 TCP 协议相关的连接。\n  - `-u`: UDP，只显示 UDP 协议相关的连接。\n\n![](Linux笔记/image-20230727205255514.png)\n\n## 4、ps\n\n- process status  进程状态\n\n- 用于显示当前进程的状态，类似于 windows 的任务管理器。\n\n- 常用参数：\n\n  - -aux 显示所有包含其他使用者的进程\n\n    - `a`: all processes，显示所有用户的所有进程，包括其他用户的进程。\n\n      `u`: user-oriented format，以用户为导向的格式显示进程信息。\n\n      `x`: no controlling terminal，显示无控制终端的进程，通常用于显示后台进程。\n\n  - -ef \n\n    -  `-e`: 显示所有进程，包括其他用户的进程。\n    -  `-f`: 显示完整的进程信息，包括进程的详细信息，如进程号、父进程号、用户、CPU 使用率、内存占用等。\n\n- `ps`是用来查看当前进程状态的命令\n\n![](Linux笔记/image-20230728101020819.png)\n\n- 在 `ps -ef` 中，显示所有进程，包括其他用户的进程，并且不显示与终端无关的进程。\n\n![image-20230728100939773](Linux笔记/image-20230728100939773.png)\n\n- `ps -aux` 中，除了显示所有进程和完整的进程信息外，还显示与终端无关的进程。\n\n![image-20230728101006301](Linux笔记/image-20230728101006301.png)\n\n## 5、find\n\n- 命令用于在指定目录下查找文件和目录。\n- 格式：find  路径  -name 文件名\n\n```python\n# 在root搜索名字中含有txt的文件\nfind /root -name a.txt\n```\n\n## 6、whereis\n\n- `whereis`是一个在Linux和Unix系统中用来查找二进制程序（可执行文件）、源代码以及帮助文档的命令。它的作用是快速定位特定命令、程序或文件在系统中的位置。\n- 可以用来查找命令的位置\n- 注意：whereis会查找位于环境变量中的二进制文件\n  - `pwd`命令的可执行文件位于`/usr/bin/pwd`。\n  - 帮助文档位于`/usr/share/man/man1/pwd.1p.gz`。\n\n![](Linux笔记/image-20230727211150030.png)\n\n# Linux 常用操作\n\n- 查看centos版本信息\n\n```\ncat /etc/centos-release\n```\n\n![](Linux笔记/image-20230730171241699.png)\n\n## 1、yum\n\n- `yum`可以帮助用户搜索、安装、更新和删除软件包，并管理系统的软件包依赖关系。通过 `yum`，用户可以方便地从软件源中获取所需的软件包，并在系统中安装它们。\n\n#### 1.1 基本使用\n\n- 安装：`yum install 包名`\n- 卸载：`yum remove 包名`\n- 更新：`yum update 包名`\n- 显示已配置的源：`yum repolist`\n- 列出安装的包：`yum list`\n  - `yum list |grep \"关键字\"`\n\n![image-20230730163321077](Linux笔记/image-20230730163321077.png)\n\n- 查看软件包的详细信息:`yum info 包名`: 。\n- 查看帮助文档：yum --help\n\n- `yum` 会自动从配置好的软件源中下载并安装软件包，因此在使用之前，请确保系统已正确配置了可用的**软件源**。\n\n- 安装telnet\n\n  - telnet ：和ssh差不多，用来远程连接，但是安全性不高，可以用来做端口测试\n\n  - ```sh\n    # 测试指定ip的端口是否被占用\n    # 如果被占用则会卡住，反之输出拒绝连接\n    telnet 192.168.175.100 22  \n    ```\n\n  - 卡住，指定端口被占用\n    \n  -  master的22端口被xshell占用\n  \n\n![](Linux笔记/image-20230730164249051.png)\n\n- 没卡住，指定端口没被占用\n  \n  ![](Linux笔记/image-20230730164334687.png)\n  \n- 首先会下载一个rpm包\n  \n\n![](Linux笔记/image-20230730172211211.png)\n\n  - 可以通过yum和rpm卸载软件包\n  - yum是基于 rpm的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 yum来管理软件包。\n\n\n\n#### 1.2 换源\n\n- 由于原网站在外网，所以换到阿里的镜像网站，提升下载速度\n\n  - ```\n    https://mirrors.aliyun.com\n    ```\n\n- 备份原有的软件源配置文件\n  \n  - yum.repos.d   yum.repositories directory   yum的仓库目录\n\n```\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n- 从阿里官方网站下载对应系统版本的源配置文件\n  -  \"wget\" 是一个用于从网络上下载文件的命令行工具。\n  -  \"-O\" 是 \"wget\" 命令的选项之一，用于指定保存下载文件的本地文件名。\n\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n- 由于我们是非ECS（内部）用户，所以源配置文件中包含aliyuncs.com地址访问不了\n\n![image-20230730164816754](Linux笔记/image-20230730164816754.png)\n\n- 故移除url : aliyuncs.com\n  - \"sed\" 是 Stream Editor（流编辑器）的缩写，用于在文本流中进行查找、替换和编辑操作。\n  - \"sed -i -e\" 是用于在文件中进行替换操作的 sed 命令的组合。\n\n```\nsed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo\n```\n\n![image-20230730165344441](Linux笔记/image-20230730165344441.png)\n\n- 重新构建本地缓存\n\n```\nyum makecache\n```\n\n- YUM 是基于 RPM 的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 YUM 来管理软件包。\n\n## 2、systemctl\n\n- system control系统控制\n\n- 管理系统以及用户的服务\n\n  - 网络管理工具：NetworkManager\n\n    网络服务：network\n\n    防火墙：firewalld\n\n- 系统服务都在：/usr/lib/systemd/system该目录中\n\n  都是以xxx.service形式存在\n\n![image-20230730170533372](Linux笔记/image-20230730170533372.png)\n\n- `lib`文件夹存放的是库文件（Library Files）\n- 常用操作\n  * 启动：```systemctl start firewalld```\n  * 停止：```systemctl stop firewalld```\n  * 重启：```systemctl restart firewalld```\n  * 查看状态：```systemctl status firewalld```\n  * 开机自启：```systemctl enable firewalld```\n  * 取消开机自启：```systemctl disable firewalld```\n\n## 3、更换主机名\n\n- 通过文件\n\n```\nvim /etc/hostname\n```\n\n- 通过工具\n\n```\nhostnamectl set-hostname master\n```\n\n## 4、映射\n\n- linux修改映射\n\n```\nvim /etc/hosts\n```\n\n- windows修改映射\n\n```\nC:\\Windows\\System32\\drivers\\etc\\hosts\n```\n\n## 5、修改环境变量\n\n- 环境变量：本质上是很多路径\n\n  当系统执行命令时，会去环境变量中的路径里查找有无该命令，有即执行，没有就会提示命令找不到\n\n  配置环境变量就是告诉系统去哪些位置找我们需要的命令\n\n```shell\n# 进入管理环境变量的文件\nvim /etc/profile\n\n# 一般配置在文件的尾部 先配置一个XXX_HOME，然后再将其HOME下的bin目录配置在环境变量PATH中\nXXX_HOME=/x/xx\nYYY_HOME=/y/yy\nexport PATH=$XXX_HOME/bin:$YYY_HOME/bin:$PATH\n\n# 配置完之后 source 生效\nsource /etc/profile\n```\n\n## 6、安装JDK\n\n- 上传安装包到虚拟机\n\n  - rz -E\n\n    ```\n    # 没有rz命令可以下载\n    yum install lrzsz\n    rz 是接收文件\n    sz 是发送文件\n    ```\n\n  - xftp\n\n- 创建问价夹存放压缩包和解压后的文件\n\n```\nmkdir /usr/local/package\nmkdir /usr/local/soft\n```\n\n- 解压\n\n```\ntar -zxvf /usr/local/package/jdk-8u171-linux-x64.tar.gz -C /usr/local/soft\n```\n\n- 修改环境变量\n\n```shell\n# 进入管理环境变量的文件\nvim /etc/profile\n\n# 在文件尾部加入以下内容\nJAVA_HOME=/usr/local/soft/jdk1.8.0_171\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# 保存退出之后 source 生效\nsource /etc/profile\n```\n\n- 修改配置文件（省略）\n- 进行初始化工作（省略）\n- 测试是否安装成功\n\n```sh\n# 查看当前系统中运行了哪些JAVA进程\njps  #  java process status 查看java进程\n\n# 查看JAVA的版本号 \njava -version\n```\n\n![](Linux笔记/image-20230730174650797.png)\n\n## 7、后台运行nohup\n\n- no hang up 不挂起\n- 将进程放在后台执行 不直接打印东西在控制台  一般带上重定向\n\n```\nnohup sh test.sh > xxx.log 2>&1\n```\n\n## 8、定时调度crontab\n\n- `crontab` 是用于管理和设置定时任务的命令。\n- 具体的选项如下\n  - `crontab -e`：编辑当前用户的定时任务列表。\n  - `crontab -l`：列出当前用户的定时任务列表。\n  - `crontab -r`：删除当前用户的定时任务列表。\n  - `crontab -u <user>`：指定要操作的用户，用于以其他用户的身份管理定时任务。\n- ctontab在线工具\n\n```\nhttps://tool.lu/crontab/\n```\n\n- 定时调度格式\n\n```shell\n* * * * * command\n #f1 第一个 * 分钟 (0 - 59)\n #f2 第二个 * 小时 (0 - 23)\n #第三个 * 一个月中的第几天 (1 - 31)\n #第四个 * 月份 (1 - 12) \n #第五个 * 星期中星期几 (0 - 6) (星期天 为0)\n \n #当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推\n \n 0 6-12/3 * 12 *   #表示 12月6点到12点 每隔三个小时的0分钟执行一次\n```\n\n- 进入页面写定时任务\n\n```shell\n # 进入后和vim界面一样的操作\n crontab -e\n```\n\n- 查看已有的定时任务\n\n```shell\ncrontab -l\n```\n\n- 删除所有的定时任务\n\n```shell\ncrontab -r\n```\n\n- 定时执行脚本\n\n```shell\ncrontab -e\n# 写入定时任务\n# 每分钟将date输出重定向到time.txt文件\n* * * * * date > /root/time.txt\n```\n\n## 9、ssh\n\n## 10、免密登录\n\n## 11、时区配置\n\n* 查看当前时间：`date`\n\n* 查看当前时区：`timedatectl`\n\n* 查看所有时区：\n\n  * `/usr/share` 是 Linux 系统中的一个常见目录，它主要用于存放与应用程序无关的数据文件，例如共享资源、帮助文档、图标、主题等等\n\n  ```shell\n  # 进入存放时区的文件夹\n  cd /usr/share/zoneinfo/\n  # 展示\n  ls\n  ```\n\n* 修改时区\n\n  ```sh\n  timedatectl set-timezone Asia/Shanghai\n  ```\n\n* 同步时间\n\n  ```shell\n  # 基于阿里云NTP服务器同步时间\n  ntpdate ntp.aliyun.com\n  # 将时间写入硬件，避免重启失效\n  clock -w\n  ```\n\n## 12、关键字抓取\n\n- 格式：命令 | grep 关键字\n  - 命令 \t 表示要执行的命令，\n  - |           表示管道，抓取的信息，会放入管道中\n  - grep     表示抓取\n  - 关键字  表示要抓取信息的关键字\n\n- ps -ef | grep 进程关键字\n  - 抓取进程关键字\n- ls | grep 文件关键字\n- 等\n\n# Linux扩展知识\n\n## 1、子网掩码\n\n- 三类地址\n\n```python\n# ip地址共 4个字节 32位\n\n# A类地址，第一个字节开头为0：十进制范围在0-127\n0 _ _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n\n# B类地址，第一个字节的前两位为10：十进制范围128-191\n1 0 _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n\n# C类地址，第一个字节的前三位为110：十进制范围192-223\n1 1 0 _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _\n```\n\n- 子网掩码用来划分网络号和主机号\n  - ip地址分为网络号和主机号\n  - 数据包发送时，通过网络号找到对应的地区，再通过主机号找到对应主机接收数据\n\n```python\n# A类地址的子网掩码\n# 一个A类地址可以分配255*225*225个主机号，所以一个A类地址可以划分255*225*225个ip地址\n255.0.0.0\n11111111.00000000.00000000.00000000\n\n# B类地址的子网掩码\n# 一个B类地址可以分配255*225个主机号，所以一个B类地址可以划分255*225个ip地址\n255.255.0.0\n11111111.11111111.00000000.00000000\n\n# C类地址的子网掩码\n# 一个C类地址可以分配255*225个主机号，所以一个C类地址可以划分255个ip地址\n255.255.255.0\n11111111.11111111.11111111.00000000\n```\n\n- 子网掩码划分ip的列子\n\n```python\n# 假如一个子网掩码为\n11111111.11111111.11111111.11111100\n# 那么它可以划分4个ip地址\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 0 0  十进制：0\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 0 1  十进制：1\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 1 0  十进制：2\n_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ 1 1  十进制：3\n# 由此子网掩码可以看出\n# 以下四个ip同属于一个网络号\n十进制：192.168.175.\n二进制：11000000.10101000.10101111.000000_ _\n# 分别有.0 .1 .2 .3四个主机号\n192.168.175.0\n192.168.175.1\n192.168.175.2\n192.168.175.3\n# 子网掩码与ip地址进行与操作，就能判断网络号和主机号了\n11111111.11111111.11111111.11111100\n# 与操作\n11000000.10101000.10101111.00000011\n# 结果如下\n# 通过结果可以看出，子网掩码中的1会将与ip地址对应的每一位都进行锁定（不变）\n11000000.10101000.10101111.00000000\n# 所以网络号为\n11000000.10101000.10101111.000000\n# 主机号为\n# 00\n# 01\n# 10\n# 11\n# 可以根据1的个数表示此网络号\n192.168.175.0/30\n```\n\n## 2、SSH\n\n- 全称是 \"Secure Shell\"，它是一种网络协议，用于在不安全的网络中建立安全的连接，通常用于远程登录到服务器或计算机，并进行安全的数据传输和远程操作。通过 `ssh`，用户可以远程执行命令、上传和下载文件，以及进行其他安全的网络操作。它提供了一种加密的方式，确保通信过程中数据的机密性和完整性，防止被中间人攻击和窃听。\n\n## 3、xshell\n\n- Xshell是一款Windows平台上的SSH（Secure Shell）客户端软件。它允许用户通过SSH协议连接到远程计算机或服务器，并进行命令行操作、文件传输和远程管理等任务。Xshell提供了丰富的功能和工具，如多会话管理、自动登录、端口转发、多种认证方式、会话管理、脚本支持等，使得用户能够更加方便和高效地进行远程操作和管理。Xshell广泛用于系统管理员、开发人员和网络工程师等领域，是一款功能强大的远程连接工具。\n\n## 4、更改xshell复制粘贴方式\n\n![](Linux笔记/image-20230727151820522.png)\n\n## 5、usr/bin和/bin中有什么区别\n\n首先注意 **usr 指 Unix System Resource**，而不是user\n\n- /usr/bin\n  系统预装的一些可执行程序，随系统升级会改变\n\n- /usr/local/bin\n  用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到/usr/local目录下\n\n- 如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响\n\n  - 举个栗子：echo $PATH查看当前 PATH 环境变量\n\n    ```python\n    /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n    ```\n\n  - 这里 /usr/local/git/bin 优先于 /usr/bin/git/bin\n\n- /bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 /usr 目录时就可以使用）\n\n- /sbin 存放超级用户才能使用的系统程序\n\n- /usr/bin 存放所有用户都可用的应用程序\n\n- /usr/sbin 存放超级用户才能使用的应用程序\n\n- /usr/local/bin 存放所有用户都可用的与本地机器无关的程序\n\n- /usr/local/sbin 存放超级用户才能使用的与本地机器无关的程序\n\n## 6、挂载\n\n- 指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。\n\n  Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 inux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统（文件目录结构）。\n\n  因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将Linux本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一的过程称为“挂载”。\n\n  如果不挂载，通过Linux系统中的图形界面系统可以查看找到硬件设备，但命令行方式无法找到。\n\n  并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。\n\n- mount命令可以查看系统中已经挂载的文件系统\n  \n  - sysfs on /sys type sysfs (rw)<--含义是，将 sysfs 分区挂载到了/sys 目录上，文件系统是 sysfs ，具有读写权限\n\n![image-20230727183225209](Linux笔记/image-20230727183225209.png)\n\n## 7、.bashrc\n\n- 位于/etc/bashrc\n- `.bashrc` 是 Bash Shell 的配置文件，用于配置用户在登录时所用的 Bash 环境。每个用户都可以在自己的主目录下创建一个名为 `.bashrc` 的文件，该文件中包含了一系列命令、别名、环境变量和其他设置，这些设置将在每次用户登录时自动加载。\n- 如下图中，[root@master ~]#的显示，也是.bashrc文件中shell命令执行后的结果\n\n![image-20230727214739399](Linux笔记/image-20230727214739399.png)\n\n- 用户可以编辑 `.bashrc` 文件来定制自己的 Shell 环境，然后重新登录或执行 `source ~/.bashrc` 命令使配置生效。这样，每次用户登录时，Bash 将加载该文件并执行其中的命令，从而为用户提供定制化的 Shell 环境。\n\n## 8、网络适配器\n\n- 网络适配器（Network Adapter）是计算机中用于连接计算机与网络之间的设备。它也被称为网络接口卡（Network Interface Card，NIC）、网络接口控制器（Network Interface Controller，NIC）或以太网卡（Ethernet Card）。\n\n- 网络适配器允许计算机与局域网（LAN）或广域网（WAN）进行通信，它负责将计算机内部的数据包转换为网络可以识别和传输的格式，并将从网络接收的数据包转换为计算机可以理解的格式。\n\n- 在现代计算机中，网络适配器通常是一个物理设备，可以是插入到计算机主板上的扩展卡，也可以是集成在主板上的芯片组。此外，一些计算机还支持无线网络适配器，允许计算机通过无线连接与网络通信。\n\n## 9、为什么重新构建本地缓存\n\n重新构建本地缓存通常是指重新生成或重建系统或应用程序使用的缓存文件，这样可以确保缓存数据是最新的、准确的，并可能提高系统或应用程序的性能。常见的场景包括：\n\n1. 缓存文件损坏：如果本地缓存文件损坏或出现问题，可能导致应用程序无法正常工作。重新构建缓存可以解决这个问题。\n2. 缓存过期：缓存通常是为了提高性能而创建的，但有时缓存的数据可能过期或不再准确。重新构建缓存可以更新数据并保持缓存的有效性。\n3. 更改数据源：如果数据源发生了更改，例如数据库中的数据有更新，那么本地缓存可能不再反映最新的数据。重新构建缓存可以从新数据源获取最新的数据。\n4. 清理旧数据：在某些情况下，应用程序可能会保留过多的缓存数据，导致占用过多的磁盘空间。重新构建缓存可以清理旧的、不再使用的数据。\n\n需要注意的是，在重新构建本地缓存时，可能会导致一定的性能损失，因为系统或应用程序需要重新生成缓存。因此，通常需要在适当的时间进行重新构建，以避免对系统性能造成过多影响。","slug":"Linux笔记","published":1,"updated":"2023-08-17T01:48:40.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbziu000bmcux3m5j3n5n","content":"<h1 id=\"Linux介绍\"><a href=\"#Linux介绍\" class=\"headerlink\" title=\"Linux介绍\"></a>Linux介绍</h1><ul>\n<li>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的</li>\n<li>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726141327993.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230726141424420.png\" class=\"\">\n\n<ul>\n<li>2020 年 12 月，CentOS 社区宣布 CentOS 服务器操作系统 8 和 7 系列分别于 2021 年底和 2024 年 6 月底停止服务。<ul>\n<li>龙蜥操作系统（Anolis OS）100% 兼容 RHEL&#x2F;CentOS Linux 8；支持 x86_64 和 aarch64 架构及飞腾、海光、兆芯、鲲鹏等芯片，适配 x86 及 arm64 主流服务器硬件；提供 CentOS Linux 到 Anolis OS 迁移工具，帮助系统及应用的顺滑迁移</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux虚拟机安装与配置\"><a href=\"#Linux虚拟机安装与配置\" class=\"headerlink\" title=\"Linux虚拟机安装与配置\"></a>Linux虚拟机安装与配置</h1><h2 id=\"1、安装VMware\"><a href=\"#1、安装VMware\" class=\"headerlink\" title=\"1、安装VMware\"></a>1、安装VMware</h2><ul>\n<li>取消检查更新，下一步即可</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190639601.png\" class=\"\">\n\n<ul>\n<li>安装完成后，输入产品密钥</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725164332151.png\" class=\"\">\n\n<ul>\n<li>查看网络适配器，检查是否安装成功</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190743350.png\" class=\"\">\n\n<h2 id=\"2、配置虚拟机\"><a href=\"#2、配置虚拟机\" class=\"headerlink\" title=\"2、配置虚拟机\"></a>2、配置虚拟机</h2><ul>\n<li><p>新建虚拟机</p>\n</li>\n<li><p>选择典型模式</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725164534031.png\" class=\"\">\n\n<ul>\n<li>配置CentOS-7.ios镜像</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190147422.png\" class=\"\">\n\n<ul>\n<li>选择虚拟机位置和名称</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190958440.png\" class=\"\">\n\n<ul>\n<li>分配内存，并选中磁盘存储为单个文件</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191041627.png\" class=\"\">\n\n<ul>\n<li><p>进入到虚拟机界面，回车即可</p>\n</li>\n<li><p>等待加载</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191430990.png\" class=\"\">\n\n<h2 id=\"3、虚拟机中的软件配置\"><a href=\"#3、虚拟机中的软件配置\" class=\"headerlink\" title=\"3、虚拟机中的软件配置\"></a>3、虚拟机中的软件配置</h2><ul>\n<li>虚拟机配置完成后，会进入到可视化界面中</li>\n<li>选择语言</li>\n<li>选中安装位置，点击完成</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191757477.png\" class=\"\">\n\n<ul>\n<li>下载GHOME桌面</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191831967.png\" class=\"\">\n\n<ul>\n<li>打开网络和主机名中的以太网，并记住当前主机ip<ul>\n<li>192.168.175.128</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192038917.png\" class=\"\">\n\n<ul>\n<li>开始安装</li>\n<li>设置root密码，可以创建普通用户，可以不创建</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192233909.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725192317190.png\" class=\"\" title=\"image-20230725192317190\">\n\n<img src=\"/posts/638d4d8a/image-20230725192330984.png\" class=\"\">\n\n<ul>\n<li>重启虚拟机</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193756322.png\" class=\"\">\n\n<ul>\n<li>重启完成后，进行初始化设置，接收许可证</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193917275.png\" class=\"\">\n\n<ul>\n<li>在用户登录时，选择未列出中的root用户进行登录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194021377.png\" class=\"\">\n\n<ul>\n<li>跳过登录后的选项</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194117040.png\" class=\"\">\n\n<ul>\n<li>点击应用软件中的Firefox，访问百度，测试网络是否连接</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194432819.png\" class=\"\">\n\n<ul>\n<li>网络连接成功，记得连接前关闭VPN</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194536832.png\" class=\"\">\n\n<h2 id=\"4、虚拟机设置\"><a href=\"#4、虚拟机设置\" class=\"headerlink\" title=\"4、虚拟机设置\"></a>4、虚拟机设置</h2><ul>\n<li>进入到虚拟机设置中</li>\n<li>指定内存和处理器核数</li>\n<li>如果没有指定镜像文件，可以在这里指定</li>\n<li>网络适配器选择NAT模式</li>\n<li>删除声卡和打印机</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725195157685.png\" class=\"\">\n\n<ul>\n<li>如果关机后重新启动打不开或者打开出现错误，在进入到master文件夹，删除前三个文件夹，重新打开即可</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725195717493.png\" class=\"\">\n\n<h2 id=\"5、家目录\"><a href=\"#5、家目录\" class=\"headerlink\" title=\"5、家目录\"></a>5、家目录</h2><h3 id=\"5-1-root用户的家目录\"><a href=\"#5-1-root用户的家目录\" class=\"headerlink\" title=\"5.1 root用户的家目录\"></a>5.1 root用户的家目录</h3><ul>\n<li>桌面上的主文件就是root用户的家目录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725200304363.png\" class=\"\" title=\"image-20230725200304363\">\n\n<ul>\n<li>在其他位置选项中，点击计算机位置，也可以看到root文件夹上也有个房子标志，表明root文件夹也是root用户的家目录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725200621688.png\" class=\"\">\n\n<h3 id=\"5-2-普通用户的家目录\"><a href=\"#5-2-普通用户的家目录\" class=\"headerlink\" title=\"5.2 普通用户的家目录\"></a>5.2 普通用户的家目录</h3><ul>\n<li><p>切换到普通用户的登录</p>\n</li>\n<li><p>和root用户一样，桌面上的目录是普通用户的家目录</p>\n</li>\n<li><p>在计算机中普通用户的家目录，在home文件夹中</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201026739.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725201051683.png\" class=\"\">\n\n<ul>\n<li>并且，普通用户对root文件的访问需要root密码</li>\n</ul>\n<h2 id=\"6、静态网络配置\"><a href=\"#6、静态网络配置\" class=\"headerlink\" title=\"6、静态网络配置\"></a>6、静态网络配置</h2><ul>\n<li><p>通过网络管理工具进行配置</p>\n<ul>\n<li>这个<strong>网络管理工具就是NetworkManager</strong></li>\n<li>关闭NetworkManager后，会发现图形化界面中的网络管理工具也会消失</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726210518731.png\" class=\"\">\n\n<ul>\n<li>开启NetworkManager后，就会重新启动，说明两者是同一个东西</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726210638937.png\" class=\"\">\n\n<ul>\n<li><p>关闭，在开启NetworkManager后，如果连接不上xshell，可以重启虚拟机试一下</p>\n</li>\n<li><p>在这里配置的静态网络设置的地址，可以在ifcfg-ens33 文件中找到</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-1-查看各个地址\"><a href=\"#6-1-查看各个地址\" class=\"headerlink\" title=\"6.1 查看各个地址\"></a>6.1 查看各个地址</h4><ul>\n<li>在图中的有线设置中找到，网络的设置</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953.png\" class=\"\">\n\n<ul>\n<li>点击齿轮，可以查看DNS和路由地址</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201655502.png\" class=\"\">\n\n<ul>\n<li>在次设置中可以看到主机的<strong>路由地址</strong>和<strong>DNS地址</strong><ul>\n<li>后面配置网关时，可以把路由地址当作网关地址<ul>\n<li>网关和路由虽然是两个不同的概念。有时候网关实际上就是一个路由器，负责将本地网络和外部网络连接起来<strong>。在这种情况下，网关的IP地址也充当着路由器的IP地址</strong>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201748442.png\" class=\"\">\n\n<ul>\n<li>点击虚拟网络编辑器中，<strong>更改设置</strong>选项</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192937089.png\" class=\"\">\n\n<ul>\n<li>可以选择DHCP选项，查看<strong>广播地址</strong><ul>\n<li>192.175.168.255</li>\n</ul>\n</li>\n<li><strong>DHCP</strong>（Dynamic Host Configuration Protocol），即动态主机配置协议<ul>\n<li>DHCP服务器会从预先设置的IP地址池（在起始ip和结束ip之间的地址中选择）中选择一个可用的IP地址分配给虚拟机，然后将其他相关配置信息一并发送给虚拟机，使虚拟机能够正确地连接到网络。</li>\n<li>后面会配置静态的主机ip地址</li>\n<li>动态的ip会导致连接xhell的时候，需要重新配置主机ip地址</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193304333.png\" class=\"\">\n\n<ul>\n<li>可以查看window的VMware8的ipv4地址<ul>\n<li>192.168.175.1</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193128431.png\" class=\"\">\n\n<ul>\n<li>点击编辑中的虚拟网络编辑器，查看<strong>VMware8的子网和子网掩码</strong><ul>\n<li>网络适配器中VM8子网<ul>\n<li>192.168.175.0</li>\n</ul>\n</li>\n<li>网络适配器中VM8的子网掩码<ul>\n<li>255.255.255.0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192651359.png\" class=\"\">\n\n<h4 id=\"6-2-静态网络配置\"><a href=\"#6-2-静态网络配置\" class=\"headerlink\" title=\"6.2 静态网络配置\"></a>6.2 静态网络配置</h4><ul>\n<li>在图中的有线设置中找到，网络管理工具</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953-1692155153717.png\" class=\"\">\n\n<ul>\n<li>点击齿轮，可以进行静态网络的配置</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201655502-1692155155569.png\" class=\"\">\n\n<ul>\n<li>由于0、1、2、255已经被占用，所以配置主机的静态ip时要避开这几个地址</li>\n<li>进行静态网络配置：<strong>ipv4地址、子网掩码、网关（路由）、DNS</strong><ul>\n<li><strong>在此配置的各个地址，都会记录到ifcfg-ens33文件中</strong></li>\n<li>192.168.175.100、255.255.255.0、192.168.175.2、192.168.175.2</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202522782.png\" class=\"\">\n\n<ul>\n<li><strong>关闭网络管理工具，并重新连接有线设置，使配置生效</strong><ul>\n<li>关闭后三个点消失，在同位置可以开启</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202727704.png\" class=\"\">\n\n<ul>\n<li>打开终端，输入ifconfig命令查看主机ip</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202853702.png\" class=\"\">\n\n<ul>\n<li>测试网络连接，打开应用程序中Firefox，访问baidu</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725203045211.png\" class=\"\">\n\n<ul>\n<li>配置完成后，可以在此终端配置ifcfg-ens33文件，这里配置完成后，后面就不需要对网络配置文件进行修改了<ul>\n<li>BOOTPROTO&#x3D;static</li>\n<li>PERFIX&#x3D;24  –&gt;  NETMASK&#x3D;255.255.255.0</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7、连接xshell\"><a href=\"#7、连接xshell\" class=\"headerlink\" title=\"7、连接xshell\"></a>7、连接xshell</h2><ul>\n<li><p>安装xshell5</p>\n</li>\n<li><p>配置主机地址</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725204854629.png\" class=\"\">\n\n<ul>\n<li>配置root用户和密码</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725205030096.png\" class=\"\">\n\n<ul>\n<li>接收并保存密钥</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725204949968.png\" class=\"\">\n\n<ul>\n<li>xshell平替<ul>\n<li>electerm</li>\n<li>FinalShell</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8、关闭CentOS图形化界面\"><a href=\"#8、关闭CentOS图形化界面\" class=\"headerlink\" title=\"8、关闭CentOS图形化界面\"></a>8、关闭CentOS图形化界面</h2><ul>\n<li><p>关闭图形化界面，节省内存</p>\n</li>\n<li><p>命令解释</p>\n<ul>\n<li><code>multi-user.target</code> 是 Linux 系统的一个目标单元（target unit），表示系统默认运行级别为多用户模式，即只启动多用户命令行界面，不启动图形界面。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在终端输入下面命令</span></span><br><span class=\"line\"><span class=\"comment\"># system control </span></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看centOS 7的默认启动模式（命令行模式显示：multi-user.target）</li>\n<li>修改centOS 7的默认启动模式（图形化界面显示：graphical.target）</li>\n</ul>\n<h2 id=\"9、网络文件配置以及关闭防火墙\"><a href=\"#9、网络文件配置以及关闭防火墙\" class=\"headerlink\" title=\"9、网络文件配置以及关闭防火墙\"></a>9、网络文件配置以及关闭防火墙</h2><ul>\n<li>配置网络连接文件<ul>\n<li>PREFIX&#x3D;24 改为 NETMASK&#x3D;255.255.255.0<ul>\n<li>PREFIX&#x3D;24 表示子网掩码二进制1的个数</li>\n<li>中文意思：前缀</li>\n</ul>\n</li>\n<li>BOOTPROTO&#x3D;static<ul>\n<li>BOOTPROTO是Boot Protocol的缩写，表示引导协议。</li>\n<li>常见的BOOTPROTO值包括：<ol>\n<li>DHCP：动态主机配置协议 (Dynamic Host Configuration Protocol)。使用DHCP时，网络接口会向网络中的DHCP服务器请求IP地址、子网掩码、网关、DNS等配置信息，并自动获取适配的网络配置。</li>\n<li>Static：<strong>静态配置</strong>。设置网络接口的IP地址、子网掩码、网关等信息为手动配置，不通过DHCP获取。</li>\n<li>None：无协议。不进行网络接口的自动配置，需要手动设置IP地址等信息。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>IPADDR&#x3D;192.168.175.100  <ul>\n<li>ip address</li>\n<li>ip地址</li>\n</ul>\n</li>\n<li>NETMASK&#x3D;255.255.255.0   <ul>\n<li>network mask</li>\n<li>子网掩码</li>\n</ul>\n</li>\n<li>GATEWAY&#x3D;192.168.175.2    <ul>\n<li>它是一个网络设备（通常是路由器）的IP地址，用于将数据包从本地网络转发到其他网络。</li>\n<li>网关的IP地址可能和路由器的IP地址是一样的。这可能是因为网关实际上就是一个路由器，负责将本地网络和外部网络连接起来。在这种情况下，网关的IP地址也充当着路由器的IP地址。</li>\n<li>网关</li>\n</ul>\n</li>\n<li>DNS1&#x3D;192.168.175.2<ul>\n<li>“Domain Name System”，即域名系统</li>\n<li>它是互联网上用于将域名（例如<a href=\"http://www.example.com)转换为ip地址(例如192.0.2.1)的一种系统./\">www.example.com）转换为IP地址（例如192.0.2.1）的一种系统。</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改的内容</span></span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=<span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.100</span></span><br><span class=\"line\">NETMASK=<span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>  </span><br><span class=\"line\">GATEWAY=<span class=\"number\">192.169</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\">DNS1=<span class=\"number\">192.169</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"comment\"># 进入网络连接文件中</span></span><br><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没改之前</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725222708447.png\" class=\"\">\n\n<ul>\n<li>改之后</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725223150054.png\" class=\"\">\n\n<ul>\n<li><p>为什么要关闭NetworkManager</p>\n<ul>\n<li>对应图形化界面中的三个点</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953-1692155175847.png\" class=\"\">\n\n<ul>\n<li>NetworkManager是一个在Linux系统中管理网络连接的工具。<ul>\n<li>避免冲突<ul>\n<li>在某些情况下，可能会与其他网络管理工具或服务产生冲突，导致网络连接问题。关闭NetworkManager可能是为了避免这些潜在的冲突。</li>\n</ul>\n</li>\n<li>提高性能<ul>\n<li>在一些资源有限的系统中，关闭不需要的服务可以节省系统资源，从而<strong>提高系统性能</strong>。</li>\n</ul>\n</li>\n<li>关闭图形化界面后，就不能使用此工具，需要手动在ifcfg-ens33文件中进行网络配置，关闭NetworkManager服务可以节省系统资源</li>\n</ul>\n</li>\n<li>关闭后通过手动配置网络连接的文件</li>\n</ul>\n</li>\n<li><p>关闭NetworkManager</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示NetworkManager的状态</span></span><br><span class=\"line\">systemctl status NetworkManager</span><br><span class=\"line\"><span class=\"comment\"># 关闭NetworkManager</span></span><br><span class=\"line\">systemctl stop NetworkManager</span><br><span class=\"line\"><span class=\"comment\"># 关闭NetworkManager的开机自启</span></span><br><span class=\"line\">systemctl disble NetworkManager</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725221833744.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230725222004113.png\" class=\"\">\n\n<ul>\n<li>启动network服务<ul>\n<li>network”通常指计算机网络”</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看network状态</span></span><br><span class=\"line\">systemctl status network</span><br><span class=\"line\"><span class=\"comment\"># 修改ifcfg-ens33文件后重启network服务</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\"><span class=\"comment\"># 设置network开机自启</span></span><br><span class=\"line\"><span class=\"comment\"># 在ifcfg-ens33文件中的ONBOOT设置里</span></span><br><span class=\"line\">ONBOOT=yes</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230726212127488.png\" class=\"\">\n\n<ul>\n<li>关闭防火墙<ul>\n<li>关闭防火墙，以便软件可以正常连接到网络或下载所需的文件、以便特定的网络通信。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙开机自启</span></span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10、修改主机名\"><a href=\"#10、修改主机名\" class=\"headerlink\" title=\"10、修改主机名\"></a>10、修改主机名</h2><ul>\n<li>主机名<ul>\n<li>主机的名字</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725224604750.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入到hostaname文件中修改</span></span><br><span class=\"line\">vim /etc/hostname</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725224740961.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过命令修改</span></span><br><span class=\"line\">hostnamectl --<span class=\"built_in\">help</span>   <span class=\"comment\"># 查看命令参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl <span class=\"built_in\">set</span>-hostname master</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725225041772.png\" class=\"\">\n\n<ul>\n<li>重启生效</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11、映射\"><a href=\"#11、映射\" class=\"headerlink\" title=\"11、映射\"></a>11、映射</h2><ul>\n<li>虚拟机映射<ul>\n<li>ip地址映射为一个名字</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入映射文件</span></span><br><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725225334022.png\" class=\"\">\n\n<ul>\n<li>映射后可以通过别名访问该地址</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否映射成功</span></span><br><span class=\"line\">ping master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>window本机映射<ul>\n<li>映射文件路径：C:\\Windows\\System32\\drivers\\etc</li>\n<li>同样的如果在此文件配置虚拟机的映射，在window系统中的浏览器（或连接时）可以通过master访问虚拟机或连接虚拟机</li>\n<li><strong>因为xshell是安装在windows中的软件，所以配置windows本机映射，可以用映射连接xshell</strong></li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725225905638.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230725230129222.png\" class=\"\">\n\n<h2 id=\"12、解决异常退出文件时，再进入会出现下图情况\"><a href=\"#12、解决异常退出文件时，再进入会出现下图情况\" class=\"headerlink\" title=\"12、解决异常退出文件时，再进入会出现下图情况\"></a>12、解决异常退出文件时，再进入会出现下图情况</h2><ul>\n<li>下图为，异常退出文件会出现的情况</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726212412260.png\" class=\"\">\n\n<ul>\n<li>删除下图中的文件即可解决</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除该文件</span></span><br><span class=\"line\">rm -rf  /etc/sysconfig/network-scripts/.ifcfg-ens33.swp</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230726212756839.png\" class=\"\">\n\n<h1 id=\"Linux基本功能\"><a href=\"#Linux基本功能\" class=\"headerlink\" title=\"Linux基本功能\"></a>Linux基本功能</h1><h2 id=\"1、根目录下的文件夹\"><a href=\"#1、根目录下的文件夹\" class=\"headerlink\" title=\"1、根目录下的文件夹\"></a>1、根目录下的文件夹</h2><ul>\n<li><p>linux本质上就是一个文件系统，所有的东西都以文件的形式保存</p>\n</li>\n<li><p>根目录下的各个文件夹，及其作用</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725212127382.png\" class=\"\">\n\n<ul>\n<li>bin<ul>\n<li>存放二进制可执行文件（就是命令，如：ls、cat、mkdir）</li>\n</ul>\n</li>\n<li>boot<ul>\n<li>存放用于系统引导（启动）时使用的各种文件</li>\n</ul>\n</li>\n<li>dev（devices）<ul>\n<li>存放设备文件</li>\n</ul>\n</li>\n<li>etc（etcetera）<ul>\n<li>存放所有系统配置文件</li>\n</ul>\n</li>\n<li>hom<ul>\n<li>存放所有用户文件的根目录</li>\n</ul>\n</li>\n<li>lib<ul>\n<li>存放跟文件系统中的程序运行所需要的共享库及内核模块</li>\n</ul>\n</li>\n<li>proc  <ul>\n<li>虚拟文件系统，存放当前内存的映射</li>\n</ul>\n</li>\n<li>usr  <ul>\n<li>存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 管理员软件安装目录</li>\n</ul>\n</li>\n<li>var  <ul>\n<li>存放运行时需要改变数据的文件*</li>\n</ul>\n</li>\n<li>mnt  <ul>\n<li>挂载目录</li>\n</ul>\n</li>\n<li>sbin  <ul>\n<li>存储管理级别的二进制执行文件</li>\n</ul>\n</li>\n<li>root  <ul>\n<li>超级用户主目录（家目录）</li>\n</ul>\n</li>\n<li>opt <ul>\n<li>额外安装的可选应用程序包安装位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、文件权限\"><a href=\"#2、文件权限\" class=\"headerlink\" title=\"2、文件权限\"></a>2、文件权限</h2><ul>\n<li>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725213809973.png\" class=\"\">\n\n<ul>\n<li>对应权限划分如下<ul>\n<li>d表示文件夹</li>\n<li>后面9个字母，每3个对应一个身份的权限<ul>\n<li>r表示读，w表示写，x(execute)表示执行，如果命令文件中，该用户有x权限，则可以调用该命令<ul>\n<li>如果加了rw后，还是没有权限，可以加上x</li>\n</ul>\n</li>\n<li><strong>owner</strong>对应的当前用户，<strong>group</strong>对应的是用户组，<strong>other users</strong>对应的是其他普通用户<ul>\n<li>第一个root表示root用户，第个root表示root用户组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725214040146.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725213825941.png\" class=\"\">\n\n<ul>\n<li>使用 u, g, o 来代表三种身份的权限，此外还有a，代表all，即所有用户</li>\n<li>chmod（change mode）<ul>\n<li>修改文件权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725214239212.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的读权限</span></span><br><span class=\"line\">chmod u+r 文件名</span><br><span class=\"line\">chmod u-r 文件名</span><br><span class=\"line\">chmod u+rx 文件名</span><br><span class=\"line\">chmod u-rx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的写权限</span></span><br><span class=\"line\">chmod u+w 文件名</span><br><span class=\"line\">chmod u-w 文件名</span><br><span class=\"line\">chmod u+wx 文件名</span><br><span class=\"line\">chmod u-wx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的读写权限</span></span><br><span class=\"line\">chmod u+rw 文件名</span><br><span class=\"line\">chmod u-rw 文件名</span><br><span class=\"line\">chmod u+rwx 文件名</span><br><span class=\"line\">chmod u-rwx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的用户组的读写权限</span></span><br><span class=\"line\">chmod g+r 文件名</span><br><span class=\"line\">chmod g-r 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的普通用户的读写权限</span></span><br><span class=\"line\">chmod o+r 文件名</span><br><span class=\"line\">chmod o-r 文件名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果用户相对文件进行读写操作，除了文件本身的权限，文件所处文件夹的读写权限也要有</p>\n</li>\n<li><p>chmod   xxx   文件夹</p>\n<ul>\n<li>xxx可以用数字代替</li>\n<li>rwx  r-x    r-x</li>\n<li>111 101   101</li>\n<li>7        5       5</li>\n<li>chmod 755 文件名  会赋予文件rwx  r-x    r-x的权限</li>\n</ul>\n</li>\n<li><p>chmod –help  查看命令的帮助文档</p>\n<ul>\n<li>chmod -R 755  文件夹，此命令会递归的把指定文件夹里所有的文件和文件夹都赋予 755的权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725220926475.png\" class=\"\">\n\n<ul>\n<li>chmod命令的匹配方式其实是正则表达式</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725221157481.png\" class=\"\">\n\n<ul>\n<li>通过chown命令可以修改文件所有者和文件关联组，进而也能影响权限<ul>\n<li>命令格式：chown [-cfhvR] [–help] [–version] user[:group] file</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、用户和用户组\"><a href=\"#3、用户和用户组\" class=\"headerlink\" title=\"3、用户和用户组\"></a>3、用户和用户组</h2><ul>\n<li><p>Linux系统是一个多用户多任务的分时操作系统</p>\n</li>\n<li><p>可以创建一个有一定权限的组，然后把普通用户放入进入</p>\n</li>\n<li><p>添加的用户所在文件 &#x2F;etc&#x2F;passwd</p>\n<ul>\n<li><code>djx</code>：用户名</li>\n<li><code>x</code>：加密后的密码，通常是 ‘x’ 或 ‘*’ 表示密码以加密形式存储在 <code>/etc/shadow</code> 文件中</li>\n<li><code>1000</code>：用户 ID (UID)，用于标识用户的唯一标识符</li>\n<li><code>1000</code>：组 ID (GID)，用于标识用户所属的主要用户组</li>\n<li><code>djx</code>：用户的全名或描述</li>\n<li><code>/home/djx</code>：用户的主目录路径</li>\n<li><code>/bin/bash</code>：用户的默认 shell，这里指定为 Bash 解释器。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727213145890.png\" class=\"\" title=\"image-20230727213145890\">\n\n<ul>\n<li>添加的用户组所在文件 &#x2F;etc&#x2F;group</li>\n<li>新创建的用户和用户组的，uid和gid默认从1000开始</li>\n</ul>\n<h2 id=\"4、添加用户\"><a href=\"#4、添加用户\" class=\"headerlink\" title=\"4、添加用户\"></a>4、添加用户</h2><ul>\n<li><p>使用useradd即可增加一个用户</p>\n</li>\n<li><p>命令格式：<strong>useradd</strong> 选项 用户名</p>\n</li>\n<li><p>选项:</p>\n<p>-c comment 指定一段注释性描述。</p>\n<p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p>\n<p>-g 用户组 指定用户所属的用户组。</p>\n<p>-G 用户组，用户组 指定用户所属的附加组。</p>\n<p>-s Shell文件 指定用户的登录Shell。</p>\n<p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd lg</span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">passwd lg</span><br><span class=\"line\"><span class=\"comment\"># -m 将家目录内容移至新位置 (仅于 -d 一起使用)</span></span><br><span class=\"line\">usermod -m -d /home/lg3 lg</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、修改或删除用户\"><a href=\"#5、修改或删除用户\" class=\"headerlink\" title=\"5、修改或删除用户\"></a>5、修改或删除用户</h2><h3 id=\"5-1修改用户\"><a href=\"#5-1修改用户\" class=\"headerlink\" title=\"5.1修改用户\"></a>5.1修改用户</h3><ul>\n<li>命令格式：usermod 选项 用户名</li>\n<li>选项与useradd命令中的选项一样</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改sam用户的shell文件为/bin/ksh，主目录为/home/z，用户组为developer</span></span><br><span class=\"line\">usermod -s /<span class=\"built_in\">bin</span>/ksh -d /home/z -g developer sam</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2删除用户\"><a href=\"#5-2删除用户\" class=\"headerlink\" title=\"5.2删除用户\"></a>5.2删除用户</h3><ul>\n<li>命令格式：userdel 选项 用户名</li>\n<li>常用的选项是 -r，它的作用是把用户的主目录一起删除</li>\n</ul>\n<h2 id=\"6、修改密码\"><a href=\"#6、修改密码\" class=\"headerlink\" title=\"6、修改密码\"></a>6、修改密码</h2><ul>\n<li>命令格式：：<strong>passwd</strong> 选项 用户名</li>\n<li>一般passwd 用户名即可</li>\n</ul>\n<h2 id=\"7、增加用户组\"><a href=\"#7、增加用户组\" class=\"headerlink\" title=\"7、增加用户组\"></a>7、增加用户组</h2><ul>\n<li>其格式：groupadd 选项 用户组</li>\n<li>选项<ul>\n<li>-g GID 指定新用户组的组标识号（GID）</li>\n<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8、删除或修改用户组\"><a href=\"#8、删除或修改用户组\" class=\"headerlink\" title=\"8、删除或修改用户组\"></a>8、删除或修改用户组</h2><h3 id=\"8-1删除用户组\"><a href=\"#8-1删除用户组\" class=\"headerlink\" title=\"8.1删除用户组\"></a>8.1删除用户组</h3><ul>\n<li>其格式：groupdel 用户组</li>\n</ul>\n<h3 id=\"8-2修改用户组\"><a href=\"#8-2修改用户组\" class=\"headerlink\" title=\"8.2修改用户组\"></a>8.2修改用户组</h3><ul>\n<li>格式：groupmod 选项 用户组</li>\n<li>常用的选项有：<ul>\n<li>-g GID 为用户组指定新的组标识号</li>\n<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>\n<li>-n 新用户组 将用户组的名字改为新名字</li>\n</ul>\n</li>\n<li>例如：groupmod –g 10000 -n group3 group2<ul>\n<li>此命令将组group2的标识号改为10000，组名修改为group3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux基础命令\"><a href=\"#Linux基础命令\" class=\"headerlink\" title=\"Linux基础命令\"></a>Linux基础命令</h1><h2 id=\"1、清空显示内容\"><a href=\"#1、清空显示内容\" class=\"headerlink\" title=\"1、清空显示内容\"></a>1、清空显示内容</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h3><ul>\n<li>清除全屏内容</li>\n</ul>\n<h2 id=\"2、查看路径\"><a href=\"#2、查看路径\" class=\"headerlink\" title=\"2、查看路径\"></a>2、查看路径</h2><h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><ul>\n<li>Print Working Directory  打印工作目录</li>\n<li>显示当前文件的路径</li>\n</ul>\n<h2 id=\"3、显示文件\"><a href=\"#3、显示文件\" class=\"headerlink\" title=\"3、显示文件\"></a>3、显示文件</h2><h3 id=\"ls-list\"><a href=\"#ls-list\" class=\"headerlink\" title=\"ls   (list)\"></a>ls   (list)</h3><ul>\n<li>列出当前目录所有文件夹和文件</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725210604931.png\" class=\"\">\n\n<h3 id=\"ll-list-long\"><a href=\"#ll-list-long\" class=\"headerlink\" title=\"ll    (list long)\"></a>ll    (list long)</h3><ul>\n<li>列出当前目录所有文件和文件夹的详细信息</li>\n</ul>\n<h3 id=\"ls-a-list-all\"><a href=\"#ls-a-list-all\" class=\"headerlink\" title=\"ls -a   (list all)\"></a>ls -a   (list all)</h3><ul>\n<li>列出当前目录所有的文件包括隐藏文件</li>\n</ul>\n<h3 id=\"ll-a\"><a href=\"#ll-a\" class=\"headerlink\" title=\"ll - a\"></a>ll - a</h3><ul>\n<li><p>(列出当前目录所有的文件包括隐藏文件得详细信息)</p>\n</li>\n<li><p>前面带 . 的为隐藏文件</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725210839326.png\" class=\"\">\n\n<h3 id=\"ls-–help\"><a href=\"#ls-–help\" class=\"headerlink\" title=\"ls –help\"></a>ls –help</h3><ul>\n<li>ls –help” 是用于查看 ls 命令的<strong>帮助文档</strong>。在 Linux 终端中，这个命令可以显示 ls 命令的使用方法、选项和参数说明，以及其他相关的信息。</li>\n</ul>\n<h3 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h3><ul>\n<li><p>统计</p>\n</li>\n<li><p>查看文件信息</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727184316885.png\" class=\"\">\n\n<h3 id=\"不同的文件，有不同的颜色\"><a href=\"#不同的文件，有不同的颜色\" class=\"headerlink\" title=\"不同的文件，有不同的颜色\"></a>不同的文件，有不同的颜色</h3><img src=\"/posts/638d4d8a/image-20230727184609219.png\" class=\"\">\n\n<h2 id=\"4、文件及目录操作\"><a href=\"#4、文件及目录操作\" class=\"headerlink\" title=\"4、文件及目录操作\"></a>4、文件及目录操作</h2><ul>\n<li>创建、切换路径、复制粘贴、剪切、重命名、显示文件内容、显示文件大小</li>\n</ul>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><ul>\n<li>创建空文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch newfile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><ul>\n<li>make directory  创建文件夹</li>\n<li>mkdir -p 可以创建多级文件夹<ul>\n<li>p\t–parents，递归创建目录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">mkdir aa</span><br><span class=\"line\"><span class=\"comment\"># 创建多级目录</span></span><br><span class=\"line\">mkdir aa/bb/cc/dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><ul>\n<li><p>change directory   切换目录</p>\n</li>\n<li><p>切换目录</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到root用户的家目录</span></span><br><span class=\"line\">cd</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">cd ~</span><br><span class=\"line\"><span class=\"comment\"># 切换到普通用户的家目录</span></span><br><span class=\"line\">cd /home/普通用户</span><br><span class=\"line\"><span class=\"comment\"># 切换到根目录</span></span><br><span class=\"line\">cd /</span><br><span class=\"line\"><span class=\"comment\"># 切换到上一级</span></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"><span class=\"comment\"># 切换到上一级的上一级</span></span><br><span class=\"line\">cd ../../</span><br><span class=\"line\"><span class=\"comment\"># 绝对路径切换</span></span><br><span class=\"line\">cd /user/local</span><br><span class=\"line\"><span class=\"comment\"># 相对路径</span></span><br><span class=\"line\">cd ../文件夹</span><br><span class=\"line\"><span class=\"comment\"># 进入当前文件夹下的其他文件夹</span></span><br><span class=\"line\">cd ./文件夹</span><br><span class=\"line\">cd 文件夹</span><br><span class=\"line\"><span class=\"comment\"># 返回上一次所处文件夹</span></span><br><span class=\"line\">cd -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><ul>\n<li><p>remove  移除</p>\n</li>\n<li><p>删除文件\\文件夹</p>\n</li>\n<li><p>使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">rm 文件名</span><br><span class=\"line\"><span class=\"comment\"># 强制删除文件</span></span><br><span class=\"line\"><span class=\"comment\"># force</span></span><br><span class=\"line\">rm -f 文件名</span><br><span class=\"line\"><span class=\"comment\"># 删除目录（递归删除），需要确认</span></span><br><span class=\"line\"><span class=\"comment\"># recursive</span></span><br><span class=\"line\">rm -r  aa/bb/cc</span><br><span class=\"line\"><span class=\"comment\"># 强制删除目录</span></span><br><span class=\"line\">rm -rf aa/bb/cc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><ul>\n<li><p>copy</p>\n</li>\n<li><p>复制粘贴</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制粘贴文件到aa目录中</span></span><br><span class=\"line\">cp a.txt aa/</span><br><span class=\"line\"><span class=\"comment\"># 复制粘贴aa文件夹到bb中</span></span><br><span class=\"line\"><span class=\"comment\"># -r  recursive</span></span><br><span class=\"line\">cp -r aa bb/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><ul>\n<li>move </li>\n<li>剪切的意思，如果指定新的文件名，则移动过去，并会重命名</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果path2/newname不存在，则会创建出来</span></span><br><span class=\"line\">mv  &lt;path1/oldname&gt;    &lt;path2/newname&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h3><ul>\n<li>Secure Copy Protocol 安全复制协议</li>\n<li>远程复制</li>\n<li>它是一个用于在本地主机和远程主机之间进行安全复制文件的命令行工具。scp 命令使用 SSH 协议进行数据传输，因此文件在传输过程中是被加密的，提供了更高的安全性。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从本地复制到远程 </span></span><br><span class=\"line\">scp /home/test/*.sh    root@<span class=\"number\">172.19</span><span class=\"number\">.2</span><span class=\"number\">.75</span>:/home/root </span><br><span class=\"line\"><span class=\"comment\"># 从远程复制到本地 </span></span><br><span class=\"line\">scp root@/<span class=\"number\">172.19</span><span class=\"number\">.2</span><span class=\"number\">.75</span>:/home/root/*.txt   /home/test</span><br><span class=\"line\"><span class=\"comment\"># 从远程到远程 </span></span><br><span class=\"line\">scp root@<span class=\"number\">192.168</span><span class=\"number\">.21</span><span class=\"number\">.1</span>:/root/test/*.sh root@<span class=\"number\">192.168</span><span class=\"number\">.31</span><span class=\"number\">.1</span>:/root/test</span><br><span class=\"line\"><span class=\"comment\"># 显示进度在scp后添加-v； verbose 冗长的</span></span><br><span class=\"line\"><span class=\"comment\"># 复制目录在scp后添加-r： recursive </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>concatenate  连接</li>\n<li>显示文本文件的内容</li>\n<li>也可以用于将多个文件内容合并输出，或者将内容重定向到其他文件中。<ul>\n<li>重定向<ul>\n<li>“&gt;”  ：覆盖重写</li>\n<li>“&gt;&gt;”：追加写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示文件内容</span></span><br><span class=\"line\">cat 文件名</span><br><span class=\"line\"><span class=\"comment\"># 将a.txt和b.txt的内容覆盖写到/追加到c.txt中</span></span><br><span class=\"line\">cat a.txt b.txt &gt; c.txt</span><br><span class=\"line\">cat a.txt b.txt &gt;&gt; c.txt</span><br><span class=\"line\"><span class=\"comment\"># 显示行号</span></span><br><span class=\"line\"><span class=\"comment\"># number</span></span><br><span class=\"line\">cat -b a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tac\"><a href=\"#tac\" class=\"headerlink\" title=\"tac\"></a>tac</h3><ul>\n<li>显示文本内容（cat的倒序输出）</li>\n</ul>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><ul>\n<li>tail 尾巴</li>\n<li>显示末尾文本内容</li>\n<li>显示完成后并不会停止，需要终止程序运行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示末尾10行</span></span><br><span class=\"line\">tail -10f a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tailf\"><a href=\"#tailf\" class=\"headerlink\" title=\"tailf\"></a>tailf</h3><ul>\n<li>和tail一样的作用，只不过表达不一样</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示末尾10行</span></span><br><span class=\"line\">tailf <span class=\"number\">10</span> a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"more-less\"><a href=\"#more-less\" class=\"headerlink\" title=\"more&#x2F;less\"></a>more&#x2F;less</h3><ul>\n<li>回车一次显示一部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more a.txt</span><br><span class=\"line\">less a.txt</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230727193418935.png\" class=\"\">\n\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><ul>\n<li>disk usage 磁盘使用情况</li>\n<li>显示文件大小<ul>\n<li>模4k，达不到4k大小的文件，也会占用4k的空间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计全部目录及其子目录下的每个档案所占的磁盘空间</span></span><br><span class=\"line\"><span class=\"comment\"># -h   human；以人们习惯的方式进行展示</span></span><br><span class=\"line\">du -h</span><br><span class=\"line\"><span class=\"comment\"># 统计对应文件的磁盘空间</span></span><br><span class=\"line\">du -h directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><ul>\n<li>disk free 空闲磁盘</li>\n<li>显示文件系统的磁盘空间使用情况。df 命令会列出文件系统的挂载点、总大小、已使用空间、可用空间以及文件系统类型等</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727193920519.png\" class=\"\">\n\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi&#x2F;vim\"></a>vi&#x2F;vim</h3><ul>\n<li>进行文本编辑</li>\n<li>vi和vim的区别是，vim进入文件，会显示颜色</li>\n<li>vim总共有三种模式：命令模式、插入模式、末行模式<ul>\n<li>通过vim命令打开文件即进入<strong>命令模式</strong>，命令模式下可以进行复制粘贴删除等功能</li>\n<li>在命令模式按i，可以进入<strong>插入模式</strong>，插入模式可以进行文件编辑</li>\n<li>在插入模式按ESC键</li>\n<li>命令模式按:冒号，可以进入<strong>末行模式</strong>，末行模式主要进行文件保存、退出或查找替换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><ul>\n<li><code>who</code> 是一个用于显示当前登录到系统的用户信息的命令。在 Linux&#x2F;Unix 系统中，<code>who</code> 命令通常用于查看当前登录用户的详细列表，包括用户名、终端、登录时间等信息。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230729145832928.png\" class=\"\">\n\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><ul>\n<li><p>wordcount</p>\n</li>\n<li><p><code>wc</code> 是一个用于统计文件中行数、单词数和字符数的命令。在 Linux&#x2F;Unix 系统中，<code>wc</code> 命令通常用于查看文件的文本统计信息。</p>\n<p>常用的选项包括：</p>\n<ul>\n<li><code>-l</code>：统计行数。</li>\n<li><code>-w</code>：统计单词数。</li>\n<li><code>-c</code>：统计字符数。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux常用工具\"><a href=\"#Linux常用工具\" class=\"headerlink\" title=\"Linux常用工具\"></a>Linux常用工具</h1><h2 id=\"1、vim\"><a href=\"#1、vim\" class=\"headerlink\" title=\"1、vim\"></a>1、vim</h2><ul>\n<li><p>Vim（Vi IMproved）文本编辑器</p>\n</li>\n<li><p>nohlsearch 关闭文本搜索后的黄色光标</p>\n<ul>\n<li>no highlight search  关闭突出搜索</li>\n<li>在末行模式下输入</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:nohlsearch</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727194724286-1692155590711.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727194425502-1692155580085.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727194517260.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200849580.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200919785.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200934622.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727201038649.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230731090649262.png\" class=\"\" title=\"image-20230731090649262\">\n\n<ul>\n<li>Home行首</li>\n<li>End行尾</li>\n</ul>\n<h4 id=\"文件中永久显示行号\"><a href=\"#文件中永久显示行号\" class=\"headerlink\" title=\"文件中永久显示行号\"></a>文件中永久显示行号</h4><ul>\n<li>创建 .vimrc文件（隐藏文件）</li>\n<li>“vimrc” 的全称是 “Vim Run Commands”。</li>\n<li>用户可以在 vimrc 文件中设置各种选项，例如设置缩进、语法高亮、键盘映射、颜色方案等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤</span></span><br><span class=\"line\">cd ~</span><br><span class=\"line\">vim .vimrc</span><br><span class=\"line\"><span class=\"comment\"># 在其中添加</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nu</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、压缩解压\"><a href=\"#2、压缩解压\" class=\"headerlink\" title=\"2、压缩解压\"></a>2、压缩解压</h2><ul>\n<li>命令：tar  [选项]  文件&#x2F;目录</li>\n</ul>\n<h4 id=\"2-1-打包\"><a href=\"#2-1-打包\" class=\"headerlink\" title=\"2.1 打包\"></a>2.1 打包</h4><ul>\n<li><p>选项 “-cvf” 一般是习惯用法</p>\n</li>\n<li><p>打包时需要指定打包之后的文件名，而且要用 “.tar” 作为扩展名</p>\n</li>\n<li><p>注意 f 后面一定要跟包名</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727201607999.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf 包名 文件<span class=\"number\">1</span>/目录<span class=\"number\">1</span> 文件<span class=\"number\">2</span>/目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-压缩\"><a href=\"#2-2-压缩\" class=\"headerlink\" title=\"2.2 压缩\"></a>2.2 压缩</h4><ul>\n<li><strong>gzip压缩命令不能直接压缩目录</strong>，必须先用 tar 命令将目录打包，然后才能用 gzip 命令对打包文件进行压缩</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip aa.tar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tar -zcvf xxx.tar.gz  目录 ，这种格式可以直接压缩目录</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包目录</span></span><br><span class=\"line\">tar -zcvf ee.tar.gz aa</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-解打包操作\"><a href=\"#2-3-解打包操作\" class=\"headerlink\" title=\"2.3 解打包操作\"></a>2.3 解打包操作</h4><ul>\n<li><p>对 tar 包做解打包操作</p>\n</li>\n<li><p>打包和打包相比，只是把打包选项 “-cvf” 更换为 “-xvf”</p>\n</li>\n<li><p>想要指定解压位置，则需要使用 “-C(大写)” 选项</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解打包操作</span></span><br><span class=\"line\">tar -xvf aa.tar -C /temp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4解压缩操作\"><a href=\"#2-4解压缩操作\" class=\"headerlink\" title=\"2.4解压缩操作\"></a>2.4解压缩操作</h4><ul>\n<li><p>-z：压缩和解压缩 “.tar.gz” 格式；</p>\n<p>-j：压缩和解压缩 “.tar.bz2”格式。</p>\n</li>\n<li><p>常用 tar -zxvf 包名 -C  解压路径</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压到当前目录的aa目录下</span><br><span class=\"line\">tar -zxvf bb.tar.gz ./aa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、netstat\"><a href=\"#3、netstat\" class=\"headerlink\" title=\"3、netstat\"></a>3、netstat</h2><ul>\n<li>netstat命令是一个监控TCP&#x2F;IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。</li>\n<li>常用选项：-nplt<ul>\n<li><code>-n</code>: numeric，以数值形式显示 IP 地址和端口号。</li>\n<li><code>-p</code>: process，显示对应的进程信息，即查看占用端口的进程名称。</li>\n<li><code>-l</code>: listen，只显示监听状态的端口。</li>\n<li><code>-t</code>: TCP，只显示 TCP 协议相关的连接。</li>\n<li><code>-u</code>: UDP，只显示 UDP 协议相关的连接。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727205255514.png\" class=\"\">\n\n<h2 id=\"4、ps\"><a href=\"#4、ps\" class=\"headerlink\" title=\"4、ps\"></a>4、ps</h2><ul>\n<li><p>process status  进程状态</p>\n</li>\n<li><p>用于显示当前进程的状态，类似于 windows 的任务管理器。</p>\n</li>\n<li><p>常用参数：</p>\n<ul>\n<li><p>-aux 显示所有包含其他使用者的进程</p>\n<ul>\n<li><p><code>a</code>: all processes，显示所有用户的所有进程，包括其他用户的进程。</p>\n<p><code>u</code>: user-oriented format，以用户为导向的格式显示进程信息。</p>\n<p><code>x</code>: no controlling terminal，显示无控制终端的进程，通常用于显示后台进程。</p>\n</li>\n</ul>\n</li>\n<li><p>-ef </p>\n<ul>\n<li><code>-e</code>: 显示所有进程，包括其他用户的进程。</li>\n<li><code>-f</code>: 显示完整的进程信息，包括进程的详细信息，如进程号、父进程号、用户、CPU 使用率、内存占用等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ps</code>是用来查看当前进程状态的命令</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728101020819.png\" class=\"\">\n\n<ul>\n<li>在 <code>ps -ef</code> 中，显示所有进程，包括其他用户的进程，并且不显示与终端无关的进程。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728100939773.png\" class=\"\" title=\"image-20230728100939773\">\n\n<ul>\n<li><code>ps -aux</code> 中，除了显示所有进程和完整的进程信息外，还显示与终端无关的进程。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728101006301.png\" class=\"\" title=\"image-20230728101006301\">\n\n<h2 id=\"5、find\"><a href=\"#5、find\" class=\"headerlink\" title=\"5、find\"></a>5、find</h2><ul>\n<li>命令用于在指定目录下查找文件和目录。</li>\n<li>格式：find  路径  -name 文件名</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在root搜索名字中含有txt的文件</span></span><br><span class=\"line\">find /root -name a.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、whereis\"><a href=\"#6、whereis\" class=\"headerlink\" title=\"6、whereis\"></a>6、whereis</h2><ul>\n<li><code>whereis</code>是一个在Linux和Unix系统中用来查找二进制程序（可执行文件）、源代码以及帮助文档的命令。它的作用是快速定位特定命令、程序或文件在系统中的位置。</li>\n<li>可以用来查找命令的位置</li>\n<li>注意：whereis会查找位于环境变量中的二进制文件<ul>\n<li><code>pwd</code>命令的可执行文件位于<code>/usr/bin/pwd</code>。</li>\n<li>帮助文档位于<code>/usr/share/man/man1/pwd.1p.gz</code>。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727211150030.png\" class=\"\">\n\n<h1 id=\"Linux-常用操作\"><a href=\"#Linux-常用操作\" class=\"headerlink\" title=\"Linux 常用操作\"></a>Linux 常用操作</h1><ul>\n<li>查看centos版本信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/centos-release</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730171241699.png\" class=\"\">\n\n<h2 id=\"1、yum\"><a href=\"#1、yum\" class=\"headerlink\" title=\"1、yum\"></a>1、yum</h2><ul>\n<li><code>yum</code>可以帮助用户搜索、安装、更新和删除软件包，并管理系统的软件包依赖关系。通过 <code>yum</code>，用户可以方便地从软件源中获取所需的软件包，并在系统中安装它们。</li>\n</ul>\n<h4 id=\"1-1-基本使用\"><a href=\"#1-1-基本使用\" class=\"headerlink\" title=\"1.1 基本使用\"></a>1.1 基本使用</h4><ul>\n<li>安装：<code>yum install 包名</code></li>\n<li>卸载：<code>yum remove 包名</code></li>\n<li>更新：<code>yum update 包名</code></li>\n<li>显示已配置的源：<code>yum repolist</code></li>\n<li>列出安装的包：<code>yum list</code><ul>\n<li><code>yum list |grep &quot;关键字&quot;</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730163321077.png\" class=\"\" title=\"image-20230730163321077\">\n\n<ul>\n<li><p>查看软件包的详细信息:<code>yum info 包名</code>: 。</p>\n</li>\n<li><p>查看帮助文档：yum –help</p>\n</li>\n<li><p><code>yum</code> 会自动从配置好的软件源中下载并安装软件包，因此在使用之前，请确保系统已正确配置了可用的<strong>软件源</strong>。</p>\n</li>\n<li><p>安装telnet</p>\n<ul>\n<li><p>telnet ：和ssh差不多，用来远程连接，但是安全性不高，可以用来做端口测试</p>\n</li>\n<li><pre><code class=\"sh\"># 测试指定ip的端口是否被占用\n# 如果被占用则会卡住，反之输出拒绝连接\ntelnet 192.168.175.100 22  \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 卡住，指定端口被占用</span><br><span class=\"line\">    </span><br><span class=\"line\">  -  master的22端口被xshell占用</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">![](Linux笔记/image-20230730164249051.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 没卡住，指定端口没被占用</span><br><span class=\"line\">  </span><br><span class=\"line\">  ![](Linux笔记/image-20230730164334687.png)</span><br><span class=\"line\">  </span><br><span class=\"line\">- 首先会下载一个rpm包</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">![](Linux笔记/image-20230730172211211.png)</span><br><span class=\"line\"></span><br><span class=\"line\">  - 可以通过yum和rpm卸载软件包</span><br><span class=\"line\">  - yum是基于 rpm的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 yum来管理软件包。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.2 换源</span><br><span class=\"line\"></span><br><span class=\"line\">- 由于原网站在外网，所以换到阿里的镜像网站，提升下载速度</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```</span><br><span class=\"line\">    https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>备份原有的软件源配置文件</p>\n<ul>\n<li>yum.repos.d   yum.repositories directory   yum的仓库目录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从阿里官方网站下载对应系统版本的源配置文件<ul>\n<li>“wget” 是一个用于从网络上下载文件的命令行工具。</li>\n<li>“-O” 是 “wget” 命令的选项之一，用于指定保存下载文件的本地文件名。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>由于我们是非ECS（内部）用户，所以源配置文件中包含aliyuncs.com地址访问不了</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730164816754.png\" class=\"\" title=\"image-20230730164816754\">\n\n<ul>\n<li>故移除url : aliyuncs.com<ul>\n<li>“sed” 是 Stream Editor（流编辑器）的缩写，用于在文本流中进行查找、替换和编辑操作。</li>\n<li>“sed -i -e” 是用于在文件中进行替换操作的 sed 命令的组合。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730165344441.png\" class=\"\" title=\"image-20230730165344441\">\n\n<ul>\n<li>重新构建本地缓存</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>YUM 是基于 RPM 的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 YUM 来管理软件包。</li>\n</ul>\n<h2 id=\"2、systemctl\"><a href=\"#2、systemctl\" class=\"headerlink\" title=\"2、systemctl\"></a>2、systemctl</h2><ul>\n<li><p>system control系统控制</p>\n</li>\n<li><p>管理系统以及用户的服务</p>\n<ul>\n<li><p>网络管理工具：NetworkManager</p>\n<p>网络服务：network</p>\n<p>防火墙：firewalld</p>\n</li>\n</ul>\n</li>\n<li><p>系统服务都在：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system该目录中</p>\n<p>都是以xxx.service形式存在</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730170533372.png\" class=\"\" title=\"image-20230730170533372\">\n\n<ul>\n<li><code>lib</code>文件夹存放的是库文件（Library Files）</li>\n<li>常用操作<ul>\n<li>启动：<code>systemctl start firewalld</code></li>\n<li>停止：<code>systemctl stop firewalld</code></li>\n<li>重启：<code>systemctl restart firewalld</code></li>\n<li>查看状态：<code>systemctl status firewalld</code></li>\n<li>开机自启：<code>systemctl enable firewalld</code></li>\n<li>取消开机自启：<code>systemctl disable firewalld</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、更换主机名\"><a href=\"#3、更换主机名\" class=\"headerlink\" title=\"3、更换主机名\"></a>3、更换主机名</h2><ul>\n<li>通过文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hostname</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过工具</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、映射\"><a href=\"#4、映射\" class=\"headerlink\" title=\"4、映射\"></a>4、映射</h2><ul>\n<li>linux修改映射</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>windows修改映射</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\drivers\\etc\\hosts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、修改环境变量\"><a href=\"#5、修改环境变量\" class=\"headerlink\" title=\"5、修改环境变量\"></a>5、修改环境变量</h2><ul>\n<li><p>环境变量：本质上是很多路径</p>\n<p>当系统执行命令时，会去环境变量中的路径里查找有无该命令，有即执行，没有就会提示命令找不到</p>\n<p>配置环境变量就是告诉系统去哪些位置找我们需要的命令</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入管理环境变量的文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一般配置在文件的尾部 先配置一个XXX_HOME，然后再将其HOME下的bin目录配置在环境变量PATH中</span></span><br><span class=\"line\">XXX_HOME=/x/xx</span><br><span class=\"line\">YYY_HOME=/y/yy</span><br><span class=\"line\">export PATH=$XXX_HOME/bin:$YYY_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置完之后 <span class=\"built_in\">source</span> 生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、安装JDK\"><a href=\"#6、安装JDK\" class=\"headerlink\" title=\"6、安装JDK\"></a>6、安装JDK</h2><ul>\n<li><p>上传安装包到虚拟机</p>\n<ul>\n<li><p>rz -E</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 没有rz命令可以下载</span><br><span class=\"line\">yum install lrzsz</span><br><span class=\"line\">rz 是接收文件</span><br><span class=\"line\">sz 是发送文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xftp</p>\n</li>\n</ul>\n</li>\n<li><p>创建问价夹存放压缩包和解压后的文件</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/package</span><br><span class=\"line\">mkdir /usr/local/soft</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /usr/local/package/jdk-8u171-linux-x64.tar.gz -C /usr/local/soft</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入管理环境变量的文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件尾部加入以下内容</span></span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_171</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存退出之后 <span class=\"built_in\">source</span> 生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改配置文件（省略）</li>\n<li>进行初始化工作（省略）</li>\n<li>测试是否安装成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前系统中运行了哪些JAVA进程</span></span><br><span class=\"line\">jps  <span class=\"comment\">#  java process status 查看java进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看JAVA的版本号 </span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730174650797.png\" class=\"\">\n\n<h2 id=\"7、后台运行nohup\"><a href=\"#7、后台运行nohup\" class=\"headerlink\" title=\"7、后台运行nohup\"></a>7、后台运行nohup</h2><ul>\n<li>no hang up 不挂起</li>\n<li>将进程放在后台执行 不直接打印东西在控制台  一般带上重定向</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh test.sh &gt; xxx.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、定时调度crontab\"><a href=\"#8、定时调度crontab\" class=\"headerlink\" title=\"8、定时调度crontab\"></a>8、定时调度crontab</h2><ul>\n<li><code>crontab</code> 是用于管理和设置定时任务的命令。</li>\n<li>具体的选项如下<ul>\n<li><code>crontab -e</code>：编辑当前用户的定时任务列表。</li>\n<li><code>crontab -l</code>：列出当前用户的定时任务列表。</li>\n<li><code>crontab -r</code>：删除当前用户的定时任务列表。</li>\n<li><code>crontab -u &lt;user&gt;</code>：指定要操作的用户，用于以其他用户的身份管理定时任务。</li>\n</ul>\n</li>\n<li>ctontab在线工具</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/crontab/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定时调度格式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * command</span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">f1 第一个 * 分钟 (0 - 59)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">f2 第二个 * 小时 (0 - 23)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第三个 * 一个月中的第几天 (1 - 31)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第四个 * 月份 (1 - 12)</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第五个 * 星期中星期几 (0 - 6) (星期天 为0)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> 0 6-12/3 * 12 *   #表示 12月6点到12点 每隔三个小时的0分钟执行一次</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入页面写定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入后和vim界面一样的操作</span></span><br><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看已有的定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除所有的定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -r</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定时执行脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入定时任务</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">每分钟将<span class=\"built_in\">date</span>输出重定向到time.txt文件</span></span><br><span class=\"line\">* * * * * date &gt; /root/time.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、ssh\"><a href=\"#9、ssh\" class=\"headerlink\" title=\"9、ssh\"></a>9、ssh</h2><h2 id=\"10、免密登录\"><a href=\"#10、免密登录\" class=\"headerlink\" title=\"10、免密登录\"></a>10、免密登录</h2><h2 id=\"11、时区配置\"><a href=\"#11、时区配置\" class=\"headerlink\" title=\"11、时区配置\"></a>11、时区配置</h2><ul>\n<li><p>查看当前时间：<code>date</code></p>\n</li>\n<li><p>查看当前时区：<code>timedatectl</code></p>\n</li>\n<li><p>查看所有时区：</p>\n<ul>\n<li><code>/usr/share</code> 是 Linux 系统中的一个常见目录，它主要用于存放与应用程序无关的数据文件，例如共享资源、帮助文档、图标、主题等等</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入存放时区的文件夹</span></span><br><span class=\"line\">cd /usr/share/zoneinfo/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">展示</span></span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改时区</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步时间</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基于阿里云NTP服务器同步时间</span></span><br><span class=\"line\">ntpdate ntp.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将时间写入硬件，避免重启失效</span></span><br><span class=\"line\">clock -w</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"12、关键字抓取\"><a href=\"#12、关键字抓取\" class=\"headerlink\" title=\"12、关键字抓取\"></a>12、关键字抓取</h2><ul>\n<li><p>格式：命令 | grep 关键字</p>\n<ul>\n<li>命令 \t 表示要执行的命令，</li>\n<li>|           表示管道，抓取的信息，会放入管道中</li>\n<li>grep     表示抓取</li>\n<li>关键字  表示要抓取信息的关键字</li>\n</ul>\n</li>\n<li><p>ps -ef | grep 进程关键字</p>\n<ul>\n<li>抓取进程关键字</li>\n</ul>\n</li>\n<li><p>ls | grep 文件关键字</p>\n</li>\n<li><p>等</p>\n</li>\n</ul>\n<h1 id=\"Linux扩展知识\"><a href=\"#Linux扩展知识\" class=\"headerlink\" title=\"Linux扩展知识\"></a>Linux扩展知识</h1><h2 id=\"1、子网掩码\"><a href=\"#1、子网掩码\" class=\"headerlink\" title=\"1、子网掩码\"></a>1、子网掩码</h2><ul>\n<li>三类地址</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ip地址共 4个字节 32位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A类地址，第一个字节开头为0：十进制范围在0-127</span></span><br><span class=\"line\"><span class=\"number\">0</span> _ _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># B类地址，第一个字节的前两位为10：十进制范围128-191</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C类地址，第一个字节的前三位为110：十进制范围192-223</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子网掩码用来划分网络号和主机号<ul>\n<li>ip地址分为网络号和主机号</li>\n<li>数据包发送时，通过网络号找到对应的地区，再通过主机号找到对应主机接收数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个A类地址可以分配255*225*225个主机号，所以一个A类地址可以划分255*225*225个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.00000000</span><span class=\"number\">.00000000</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># B类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个B类地址可以分配255*225个主机号，所以一个B类地址可以划分255*225个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.255</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.00000000</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个C类地址可以分配255*225个主机号，所以一个C类地址可以划分255个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.00000000</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子网掩码划分ip的列子</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假如一个子网掩码为</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.11111100</span></span><br><span class=\"line\"><span class=\"comment\"># 那么它可以划分4个ip地址</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">0</span> <span class=\"number\">0</span>  十进制：<span class=\"number\">0</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">0</span> <span class=\"number\">1</span>  十进制：<span class=\"number\">1</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">1</span> <span class=\"number\">0</span>  十进制：<span class=\"number\">2</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">1</span> <span class=\"number\">1</span>  十进制：<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 由此子网掩码可以看出</span></span><br><span class=\"line\"><span class=\"comment\"># 以下四个ip同属于一个网络号</span></span><br><span class=\"line\">十进制：<span class=\"number\">192.168</span><span class=\"number\">.175</span>.</span><br><span class=\"line\">二进制：<span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.000000</span>_ _</span><br><span class=\"line\"><span class=\"comment\"># 分别有.0 .1 .2 .3四个主机号</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"comment\"># 子网掩码与ip地址进行与操作，就能判断网络号和主机号了</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.11111100</span></span><br><span class=\"line\"><span class=\"comment\"># 与操作</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.00000011</span></span><br><span class=\"line\"><span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"><span class=\"comment\"># 通过结果可以看出，子网掩码中的1会将与ip地址对应的每一位都进行锁定（不变）</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"><span class=\"comment\"># 所以网络号为</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.000000</span></span><br><span class=\"line\"><span class=\"comment\"># 主机号为</span></span><br><span class=\"line\"><span class=\"comment\"># 00</span></span><br><span class=\"line\"><span class=\"comment\"># 01</span></span><br><span class=\"line\"><span class=\"comment\"># 10</span></span><br><span class=\"line\"><span class=\"comment\"># 11</span></span><br><span class=\"line\"><span class=\"comment\"># 可以根据1的个数表示此网络号</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.0</span>/<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、SSH\"><a href=\"#2、SSH\" class=\"headerlink\" title=\"2、SSH\"></a>2、SSH</h2><ul>\n<li>全称是 “Secure Shell”，它是一种网络协议，用于在不安全的网络中建立安全的连接，通常用于远程登录到服务器或计算机，并进行安全的数据传输和远程操作。通过 <code>ssh</code>，用户可以远程执行命令、上传和下载文件，以及进行其他安全的网络操作。它提供了一种加密的方式，确保通信过程中数据的机密性和完整性，防止被中间人攻击和窃听。</li>\n</ul>\n<h2 id=\"3、xshell\"><a href=\"#3、xshell\" class=\"headerlink\" title=\"3、xshell\"></a>3、xshell</h2><ul>\n<li>Xshell是一款Windows平台上的SSH（Secure Shell）客户端软件。它允许用户通过SSH协议连接到远程计算机或服务器，并进行命令行操作、文件传输和远程管理等任务。Xshell提供了丰富的功能和工具，如多会话管理、自动登录、端口转发、多种认证方式、会话管理、脚本支持等，使得用户能够更加方便和高效地进行远程操作和管理。Xshell广泛用于系统管理员、开发人员和网络工程师等领域，是一款功能强大的远程连接工具。</li>\n</ul>\n<h2 id=\"4、更改xshell复制粘贴方式\"><a href=\"#4、更改xshell复制粘贴方式\" class=\"headerlink\" title=\"4、更改xshell复制粘贴方式\"></a>4、更改xshell复制粘贴方式</h2><img src=\"/posts/638d4d8a/image-20230727151820522.png\" class=\"\">\n\n<h2 id=\"5、usr-bin和-bin中有什么区别\"><a href=\"#5、usr-bin和-bin中有什么区别\" class=\"headerlink\" title=\"5、usr&#x2F;bin和&#x2F;bin中有什么区别\"></a>5、usr&#x2F;bin和&#x2F;bin中有什么区别</h2><p>首先注意 <strong>usr 指 Unix System Resource</strong>，而不是user</p>\n<ul>\n<li><p>&#x2F;usr&#x2F;bin<br>系统预装的一些可执行程序，随系统升级会改变</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;bin<br>用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到&#x2F;usr&#x2F;local目录下</p>\n</li>\n<li><p>如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响</p>\n<ul>\n<li><p>举个栗子：echo $PATH查看当前 PATH 环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/sbin:/usr/local/<span class=\"built_in\">bin</span>:/usr/sbin:/usr/<span class=\"built_in\">bin</span>:/root/<span class=\"built_in\">bin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里 &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin 优先于 &#x2F;usr&#x2F;bin&#x2F;git&#x2F;bin</p>\n</li>\n</ul>\n</li>\n<li><p>&#x2F;bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 &#x2F;usr 目录时就可以使用）</p>\n</li>\n<li><p>&#x2F;sbin 存放超级用户才能使用的系统程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;bin 存放所有用户都可用的应用程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;sbin 存放超级用户才能使用的应用程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;bin 存放所有用户都可用的与本地机器无关的程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;sbin 存放超级用户才能使用的与本地机器无关的程序</p>\n</li>\n</ul>\n<h2 id=\"6、挂载\"><a href=\"#6、挂载\" class=\"headerlink\" title=\"6、挂载\"></a>6、挂载</h2><ul>\n<li><p>指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。</p>\n<p>Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 inux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统（文件目录结构）。</p>\n<p>因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将Linux本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一的过程称为“挂载”。</p>\n<p>如果不挂载，通过Linux系统中的图形界面系统可以查看找到硬件设备，但命令行方式无法找到。</p>\n<p>并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。</p>\n</li>\n<li><p>mount命令可以查看系统中已经挂载的文件系统</p>\n<ul>\n<li>sysfs on &#x2F;sys type sysfs (rw)&lt;–含义是，将 sysfs 分区挂载到了&#x2F;sys 目录上，文件系统是 sysfs ，具有读写权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727183225209.png\" class=\"\" title=\"image-20230727183225209\">\n\n<h2 id=\"7、-bashrc\"><a href=\"#7、-bashrc\" class=\"headerlink\" title=\"7、.bashrc\"></a>7、.bashrc</h2><ul>\n<li>位于&#x2F;etc&#x2F;bashrc</li>\n<li><code>.bashrc</code> 是 Bash Shell 的配置文件，用于配置用户在登录时所用的 Bash 环境。每个用户都可以在自己的主目录下创建一个名为 <code>.bashrc</code> 的文件，该文件中包含了一系列命令、别名、环境变量和其他设置，这些设置将在每次用户登录时自动加载。</li>\n<li>如下图中，[root@master ~]#的显示，也是.bashrc文件中shell命令执行后的结果</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727214739399.png\" class=\"\" title=\"image-20230727214739399\">\n\n<ul>\n<li>用户可以编辑 <code>.bashrc</code> 文件来定制自己的 Shell 环境，然后重新登录或执行 <code>source ~/.bashrc</code> 命令使配置生效。这样，每次用户登录时，Bash 将加载该文件并执行其中的命令，从而为用户提供定制化的 Shell 环境。</li>\n</ul>\n<h2 id=\"8、网络适配器\"><a href=\"#8、网络适配器\" class=\"headerlink\" title=\"8、网络适配器\"></a>8、网络适配器</h2><ul>\n<li><p>网络适配器（Network Adapter）是计算机中用于连接计算机与网络之间的设备。它也被称为网络接口卡（Network Interface Card，NIC）、网络接口控制器（Network Interface Controller，NIC）或以太网卡（Ethernet Card）。</p>\n</li>\n<li><p>网络适配器允许计算机与局域网（LAN）或广域网（WAN）进行通信，它负责将计算机内部的数据包转换为网络可以识别和传输的格式，并将从网络接收的数据包转换为计算机可以理解的格式。</p>\n</li>\n<li><p>在现代计算机中，网络适配器通常是一个物理设备，可以是插入到计算机主板上的扩展卡，也可以是集成在主板上的芯片组。此外，一些计算机还支持无线网络适配器，允许计算机通过无线连接与网络通信。</p>\n</li>\n</ul>\n<h2 id=\"9、为什么重新构建本地缓存\"><a href=\"#9、为什么重新构建本地缓存\" class=\"headerlink\" title=\"9、为什么重新构建本地缓存\"></a>9、为什么重新构建本地缓存</h2><p>重新构建本地缓存通常是指重新生成或重建系统或应用程序使用的缓存文件，这样可以确保缓存数据是最新的、准确的，并可能提高系统或应用程序的性能。常见的场景包括：</p>\n<ol>\n<li>缓存文件损坏：如果本地缓存文件损坏或出现问题，可能导致应用程序无法正常工作。重新构建缓存可以解决这个问题。</li>\n<li>缓存过期：缓存通常是为了提高性能而创建的，但有时缓存的数据可能过期或不再准确。重新构建缓存可以更新数据并保持缓存的有效性。</li>\n<li>更改数据源：如果数据源发生了更改，例如数据库中的数据有更新，那么本地缓存可能不再反映最新的数据。重新构建缓存可以从新数据源获取最新的数据。</li>\n<li>清理旧数据：在某些情况下，应用程序可能会保留过多的缓存数据，导致占用过多的磁盘空间。重新构建缓存可以清理旧的、不再使用的数据。</li>\n</ol>\n<p>需要注意的是，在重新构建本地缓存时，可能会导致一定的性能损失，因为系统或应用程序需要重新生成缓存。因此，通常需要在适当的时间进行重新构建，以避免对系统性能造成过多影响。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Linux介绍\"><a href=\"#Linux介绍\" class=\"headerlink\" title=\"Linux介绍\"></a>Linux介绍</h1><ul>\n<li>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的</li>\n<li>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726141327993.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230726141424420.png\" class=\"\">\n\n<ul>\n<li>2020 年 12 月，CentOS 社区宣布 CentOS 服务器操作系统 8 和 7 系列分别于 2021 年底和 2024 年 6 月底停止服务。<ul>\n<li>龙蜥操作系统（Anolis OS）100% 兼容 RHEL&#x2F;CentOS Linux 8；支持 x86_64 和 aarch64 架构及飞腾、海光、兆芯、鲲鹏等芯片，适配 x86 及 arm64 主流服务器硬件；提供 CentOS Linux 到 Anolis OS 迁移工具，帮助系统及应用的顺滑迁移</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux虚拟机安装与配置\"><a href=\"#Linux虚拟机安装与配置\" class=\"headerlink\" title=\"Linux虚拟机安装与配置\"></a>Linux虚拟机安装与配置</h1><h2 id=\"1、安装VMware\"><a href=\"#1、安装VMware\" class=\"headerlink\" title=\"1、安装VMware\"></a>1、安装VMware</h2><ul>\n<li>取消检查更新，下一步即可</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190639601.png\" class=\"\">\n\n<ul>\n<li>安装完成后，输入产品密钥</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725164332151.png\" class=\"\">\n\n<ul>\n<li>查看网络适配器，检查是否安装成功</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190743350.png\" class=\"\">\n\n<h2 id=\"2、配置虚拟机\"><a href=\"#2、配置虚拟机\" class=\"headerlink\" title=\"2、配置虚拟机\"></a>2、配置虚拟机</h2><ul>\n<li><p>新建虚拟机</p>\n</li>\n<li><p>选择典型模式</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725164534031.png\" class=\"\">\n\n<ul>\n<li>配置CentOS-7.ios镜像</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190147422.png\" class=\"\">\n\n<ul>\n<li>选择虚拟机位置和名称</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725190958440.png\" class=\"\">\n\n<ul>\n<li>分配内存，并选中磁盘存储为单个文件</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191041627.png\" class=\"\">\n\n<ul>\n<li><p>进入到虚拟机界面，回车即可</p>\n</li>\n<li><p>等待加载</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191430990.png\" class=\"\">\n\n<h2 id=\"3、虚拟机中的软件配置\"><a href=\"#3、虚拟机中的软件配置\" class=\"headerlink\" title=\"3、虚拟机中的软件配置\"></a>3、虚拟机中的软件配置</h2><ul>\n<li>虚拟机配置完成后，会进入到可视化界面中</li>\n<li>选择语言</li>\n<li>选中安装位置，点击完成</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191757477.png\" class=\"\">\n\n<ul>\n<li>下载GHOME桌面</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725191831967.png\" class=\"\">\n\n<ul>\n<li>打开网络和主机名中的以太网，并记住当前主机ip<ul>\n<li>192.168.175.128</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192038917.png\" class=\"\">\n\n<ul>\n<li>开始安装</li>\n<li>设置root密码，可以创建普通用户，可以不创建</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192233909.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725192317190.png\" class=\"\" title=\"image-20230725192317190\">\n\n<img src=\"/posts/638d4d8a/image-20230725192330984.png\" class=\"\">\n\n<ul>\n<li>重启虚拟机</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193756322.png\" class=\"\">\n\n<ul>\n<li>重启完成后，进行初始化设置，接收许可证</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193917275.png\" class=\"\">\n\n<ul>\n<li>在用户登录时，选择未列出中的root用户进行登录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194021377.png\" class=\"\">\n\n<ul>\n<li>跳过登录后的选项</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194117040.png\" class=\"\">\n\n<ul>\n<li>点击应用软件中的Firefox，访问百度，测试网络是否连接</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194432819.png\" class=\"\">\n\n<ul>\n<li>网络连接成功，记得连接前关闭VPN</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725194536832.png\" class=\"\">\n\n<h2 id=\"4、虚拟机设置\"><a href=\"#4、虚拟机设置\" class=\"headerlink\" title=\"4、虚拟机设置\"></a>4、虚拟机设置</h2><ul>\n<li>进入到虚拟机设置中</li>\n<li>指定内存和处理器核数</li>\n<li>如果没有指定镜像文件，可以在这里指定</li>\n<li>网络适配器选择NAT模式</li>\n<li>删除声卡和打印机</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725195157685.png\" class=\"\">\n\n<ul>\n<li>如果关机后重新启动打不开或者打开出现错误，在进入到master文件夹，删除前三个文件夹，重新打开即可</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725195717493.png\" class=\"\">\n\n<h2 id=\"5、家目录\"><a href=\"#5、家目录\" class=\"headerlink\" title=\"5、家目录\"></a>5、家目录</h2><h3 id=\"5-1-root用户的家目录\"><a href=\"#5-1-root用户的家目录\" class=\"headerlink\" title=\"5.1 root用户的家目录\"></a>5.1 root用户的家目录</h3><ul>\n<li>桌面上的主文件就是root用户的家目录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725200304363.png\" class=\"\" title=\"image-20230725200304363\">\n\n<ul>\n<li>在其他位置选项中，点击计算机位置，也可以看到root文件夹上也有个房子标志，表明root文件夹也是root用户的家目录</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725200621688.png\" class=\"\">\n\n<h3 id=\"5-2-普通用户的家目录\"><a href=\"#5-2-普通用户的家目录\" class=\"headerlink\" title=\"5.2 普通用户的家目录\"></a>5.2 普通用户的家目录</h3><ul>\n<li><p>切换到普通用户的登录</p>\n</li>\n<li><p>和root用户一样，桌面上的目录是普通用户的家目录</p>\n</li>\n<li><p>在计算机中普通用户的家目录，在home文件夹中</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201026739.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725201051683.png\" class=\"\">\n\n<ul>\n<li>并且，普通用户对root文件的访问需要root密码</li>\n</ul>\n<h2 id=\"6、静态网络配置\"><a href=\"#6、静态网络配置\" class=\"headerlink\" title=\"6、静态网络配置\"></a>6、静态网络配置</h2><ul>\n<li><p>通过网络管理工具进行配置</p>\n<ul>\n<li>这个<strong>网络管理工具就是NetworkManager</strong></li>\n<li>关闭NetworkManager后，会发现图形化界面中的网络管理工具也会消失</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726210518731.png\" class=\"\">\n\n<ul>\n<li>开启NetworkManager后，就会重新启动，说明两者是同一个东西</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726210638937.png\" class=\"\">\n\n<ul>\n<li><p>关闭，在开启NetworkManager后，如果连接不上xshell，可以重启虚拟机试一下</p>\n</li>\n<li><p>在这里配置的静态网络设置的地址，可以在ifcfg-ens33 文件中找到</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-1-查看各个地址\"><a href=\"#6-1-查看各个地址\" class=\"headerlink\" title=\"6.1 查看各个地址\"></a>6.1 查看各个地址</h4><ul>\n<li>在图中的有线设置中找到，网络的设置</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953.png\" class=\"\">\n\n<ul>\n<li>点击齿轮，可以查看DNS和路由地址</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201655502.png\" class=\"\">\n\n<ul>\n<li>在次设置中可以看到主机的<strong>路由地址</strong>和<strong>DNS地址</strong><ul>\n<li>后面配置网关时，可以把路由地址当作网关地址<ul>\n<li>网关和路由虽然是两个不同的概念。有时候网关实际上就是一个路由器，负责将本地网络和外部网络连接起来<strong>。在这种情况下，网关的IP地址也充当着路由器的IP地址</strong>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201748442.png\" class=\"\">\n\n<ul>\n<li>点击虚拟网络编辑器中，<strong>更改设置</strong>选项</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192937089.png\" class=\"\">\n\n<ul>\n<li>可以选择DHCP选项，查看<strong>广播地址</strong><ul>\n<li>192.175.168.255</li>\n</ul>\n</li>\n<li><strong>DHCP</strong>（Dynamic Host Configuration Protocol），即动态主机配置协议<ul>\n<li>DHCP服务器会从预先设置的IP地址池（在起始ip和结束ip之间的地址中选择）中选择一个可用的IP地址分配给虚拟机，然后将其他相关配置信息一并发送给虚拟机，使虚拟机能够正确地连接到网络。</li>\n<li>后面会配置静态的主机ip地址</li>\n<li>动态的ip会导致连接xhell的时候，需要重新配置主机ip地址</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193304333.png\" class=\"\">\n\n<ul>\n<li>可以查看window的VMware8的ipv4地址<ul>\n<li>192.168.175.1</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725193128431.png\" class=\"\">\n\n<ul>\n<li>点击编辑中的虚拟网络编辑器，查看<strong>VMware8的子网和子网掩码</strong><ul>\n<li>网络适配器中VM8子网<ul>\n<li>192.168.175.0</li>\n</ul>\n</li>\n<li>网络适配器中VM8的子网掩码<ul>\n<li>255.255.255.0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725192651359.png\" class=\"\">\n\n<h4 id=\"6-2-静态网络配置\"><a href=\"#6-2-静态网络配置\" class=\"headerlink\" title=\"6.2 静态网络配置\"></a>6.2 静态网络配置</h4><ul>\n<li>在图中的有线设置中找到，网络管理工具</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953-1692155153717.png\" class=\"\">\n\n<ul>\n<li>点击齿轮，可以进行静态网络的配置</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201655502-1692155155569.png\" class=\"\">\n\n<ul>\n<li>由于0、1、2、255已经被占用，所以配置主机的静态ip时要避开这几个地址</li>\n<li>进行静态网络配置：<strong>ipv4地址、子网掩码、网关（路由）、DNS</strong><ul>\n<li><strong>在此配置的各个地址，都会记录到ifcfg-ens33文件中</strong></li>\n<li>192.168.175.100、255.255.255.0、192.168.175.2、192.168.175.2</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202522782.png\" class=\"\">\n\n<ul>\n<li><strong>关闭网络管理工具，并重新连接有线设置，使配置生效</strong><ul>\n<li>关闭后三个点消失，在同位置可以开启</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202727704.png\" class=\"\">\n\n<ul>\n<li>打开终端，输入ifconfig命令查看主机ip</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725202853702.png\" class=\"\">\n\n<ul>\n<li>测试网络连接，打开应用程序中Firefox，访问baidu</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725203045211.png\" class=\"\">\n\n<ul>\n<li>配置完成后，可以在此终端配置ifcfg-ens33文件，这里配置完成后，后面就不需要对网络配置文件进行修改了<ul>\n<li>BOOTPROTO&#x3D;static</li>\n<li>PERFIX&#x3D;24  –&gt;  NETMASK&#x3D;255.255.255.0</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7、连接xshell\"><a href=\"#7、连接xshell\" class=\"headerlink\" title=\"7、连接xshell\"></a>7、连接xshell</h2><ul>\n<li><p>安装xshell5</p>\n</li>\n<li><p>配置主机地址</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725204854629.png\" class=\"\">\n\n<ul>\n<li>配置root用户和密码</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725205030096.png\" class=\"\">\n\n<ul>\n<li>接收并保存密钥</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725204949968.png\" class=\"\">\n\n<ul>\n<li>xshell平替<ul>\n<li>electerm</li>\n<li>FinalShell</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8、关闭CentOS图形化界面\"><a href=\"#8、关闭CentOS图形化界面\" class=\"headerlink\" title=\"8、关闭CentOS图形化界面\"></a>8、关闭CentOS图形化界面</h2><ul>\n<li><p>关闭图形化界面，节省内存</p>\n</li>\n<li><p>命令解释</p>\n<ul>\n<li><code>multi-user.target</code> 是 Linux 系统的一个目标单元（target unit），表示系统默认运行级别为多用户模式，即只启动多用户命令行界面，不启动图形界面。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在终端输入下面命令</span></span><br><span class=\"line\"><span class=\"comment\"># system control </span></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看centOS 7的默认启动模式（命令行模式显示：multi-user.target）</li>\n<li>修改centOS 7的默认启动模式（图形化界面显示：graphical.target）</li>\n</ul>\n<h2 id=\"9、网络文件配置以及关闭防火墙\"><a href=\"#9、网络文件配置以及关闭防火墙\" class=\"headerlink\" title=\"9、网络文件配置以及关闭防火墙\"></a>9、网络文件配置以及关闭防火墙</h2><ul>\n<li>配置网络连接文件<ul>\n<li>PREFIX&#x3D;24 改为 NETMASK&#x3D;255.255.255.0<ul>\n<li>PREFIX&#x3D;24 表示子网掩码二进制1的个数</li>\n<li>中文意思：前缀</li>\n</ul>\n</li>\n<li>BOOTPROTO&#x3D;static<ul>\n<li>BOOTPROTO是Boot Protocol的缩写，表示引导协议。</li>\n<li>常见的BOOTPROTO值包括：<ol>\n<li>DHCP：动态主机配置协议 (Dynamic Host Configuration Protocol)。使用DHCP时，网络接口会向网络中的DHCP服务器请求IP地址、子网掩码、网关、DNS等配置信息，并自动获取适配的网络配置。</li>\n<li>Static：<strong>静态配置</strong>。设置网络接口的IP地址、子网掩码、网关等信息为手动配置，不通过DHCP获取。</li>\n<li>None：无协议。不进行网络接口的自动配置，需要手动设置IP地址等信息。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>IPADDR&#x3D;192.168.175.100  <ul>\n<li>ip address</li>\n<li>ip地址</li>\n</ul>\n</li>\n<li>NETMASK&#x3D;255.255.255.0   <ul>\n<li>network mask</li>\n<li>子网掩码</li>\n</ul>\n</li>\n<li>GATEWAY&#x3D;192.168.175.2    <ul>\n<li>它是一个网络设备（通常是路由器）的IP地址，用于将数据包从本地网络转发到其他网络。</li>\n<li>网关的IP地址可能和路由器的IP地址是一样的。这可能是因为网关实际上就是一个路由器，负责将本地网络和外部网络连接起来。在这种情况下，网关的IP地址也充当着路由器的IP地址。</li>\n<li>网关</li>\n</ul>\n</li>\n<li>DNS1&#x3D;192.168.175.2<ul>\n<li>“Domain Name System”，即域名系统</li>\n<li>它是互联网上用于将域名（例如<a href=\"http://www.example.com)转换为ip地址(例如192.0.2.1)的一种系统./\">www.example.com）转换为IP地址（例如192.0.2.1）的一种系统。</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改的内容</span></span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=<span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.100</span></span><br><span class=\"line\">NETMASK=<span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span>  </span><br><span class=\"line\">GATEWAY=<span class=\"number\">192.169</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\">DNS1=<span class=\"number\">192.169</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"comment\"># 进入网络连接文件中</span></span><br><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没改之前</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725222708447.png\" class=\"\">\n\n<ul>\n<li>改之后</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725223150054.png\" class=\"\">\n\n<ul>\n<li><p>为什么要关闭NetworkManager</p>\n<ul>\n<li>对应图形化界面中的三个点</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725201613953-1692155175847.png\" class=\"\">\n\n<ul>\n<li>NetworkManager是一个在Linux系统中管理网络连接的工具。<ul>\n<li>避免冲突<ul>\n<li>在某些情况下，可能会与其他网络管理工具或服务产生冲突，导致网络连接问题。关闭NetworkManager可能是为了避免这些潜在的冲突。</li>\n</ul>\n</li>\n<li>提高性能<ul>\n<li>在一些资源有限的系统中，关闭不需要的服务可以节省系统资源，从而<strong>提高系统性能</strong>。</li>\n</ul>\n</li>\n<li>关闭图形化界面后，就不能使用此工具，需要手动在ifcfg-ens33文件中进行网络配置，关闭NetworkManager服务可以节省系统资源</li>\n</ul>\n</li>\n<li>关闭后通过手动配置网络连接的文件</li>\n</ul>\n</li>\n<li><p>关闭NetworkManager</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示NetworkManager的状态</span></span><br><span class=\"line\">systemctl status NetworkManager</span><br><span class=\"line\"><span class=\"comment\"># 关闭NetworkManager</span></span><br><span class=\"line\">systemctl stop NetworkManager</span><br><span class=\"line\"><span class=\"comment\"># 关闭NetworkManager的开机自启</span></span><br><span class=\"line\">systemctl disble NetworkManager</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725221833744.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230725222004113.png\" class=\"\">\n\n<ul>\n<li>启动network服务<ul>\n<li>network”通常指计算机网络”</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看network状态</span></span><br><span class=\"line\">systemctl status network</span><br><span class=\"line\"><span class=\"comment\"># 修改ifcfg-ens33文件后重启network服务</span></span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\"><span class=\"comment\"># 设置network开机自启</span></span><br><span class=\"line\"><span class=\"comment\"># 在ifcfg-ens33文件中的ONBOOT设置里</span></span><br><span class=\"line\">ONBOOT=yes</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230726212127488.png\" class=\"\">\n\n<ul>\n<li>关闭防火墙<ul>\n<li>关闭防火墙，以便软件可以正常连接到网络或下载所需的文件、以便特定的网络通信。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙开机自启</span></span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10、修改主机名\"><a href=\"#10、修改主机名\" class=\"headerlink\" title=\"10、修改主机名\"></a>10、修改主机名</h2><ul>\n<li>主机名<ul>\n<li>主机的名字</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725224604750.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入到hostaname文件中修改</span></span><br><span class=\"line\">vim /etc/hostname</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725224740961.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过命令修改</span></span><br><span class=\"line\">hostnamectl --<span class=\"built_in\">help</span>   <span class=\"comment\"># 查看命令参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl <span class=\"built_in\">set</span>-hostname master</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725225041772.png\" class=\"\">\n\n<ul>\n<li>重启生效</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11、映射\"><a href=\"#11、映射\" class=\"headerlink\" title=\"11、映射\"></a>11、映射</h2><ul>\n<li>虚拟机映射<ul>\n<li>ip地址映射为一个名字</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入映射文件</span></span><br><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230725225334022.png\" class=\"\">\n\n<ul>\n<li>映射后可以通过别名访问该地址</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否映射成功</span></span><br><span class=\"line\">ping master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>window本机映射<ul>\n<li>映射文件路径：C:\\Windows\\System32\\drivers\\etc</li>\n<li>同样的如果在此文件配置虚拟机的映射，在window系统中的浏览器（或连接时）可以通过master访问虚拟机或连接虚拟机</li>\n<li><strong>因为xshell是安装在windows中的软件，所以配置windows本机映射，可以用映射连接xshell</strong></li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725225905638.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230725230129222.png\" class=\"\">\n\n<h2 id=\"12、解决异常退出文件时，再进入会出现下图情况\"><a href=\"#12、解决异常退出文件时，再进入会出现下图情况\" class=\"headerlink\" title=\"12、解决异常退出文件时，再进入会出现下图情况\"></a>12、解决异常退出文件时，再进入会出现下图情况</h2><ul>\n<li>下图为，异常退出文件会出现的情况</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230726212412260.png\" class=\"\">\n\n<ul>\n<li>删除下图中的文件即可解决</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除该文件</span></span><br><span class=\"line\">rm -rf  /etc/sysconfig/network-scripts/.ifcfg-ens33.swp</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230726212756839.png\" class=\"\">\n\n<h1 id=\"Linux基本功能\"><a href=\"#Linux基本功能\" class=\"headerlink\" title=\"Linux基本功能\"></a>Linux基本功能</h1><h2 id=\"1、根目录下的文件夹\"><a href=\"#1、根目录下的文件夹\" class=\"headerlink\" title=\"1、根目录下的文件夹\"></a>1、根目录下的文件夹</h2><ul>\n<li><p>linux本质上就是一个文件系统，所有的东西都以文件的形式保存</p>\n</li>\n<li><p>根目录下的各个文件夹，及其作用</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725212127382.png\" class=\"\">\n\n<ul>\n<li>bin<ul>\n<li>存放二进制可执行文件（就是命令，如：ls、cat、mkdir）</li>\n</ul>\n</li>\n<li>boot<ul>\n<li>存放用于系统引导（启动）时使用的各种文件</li>\n</ul>\n</li>\n<li>dev（devices）<ul>\n<li>存放设备文件</li>\n</ul>\n</li>\n<li>etc（etcetera）<ul>\n<li>存放所有系统配置文件</li>\n</ul>\n</li>\n<li>hom<ul>\n<li>存放所有用户文件的根目录</li>\n</ul>\n</li>\n<li>lib<ul>\n<li>存放跟文件系统中的程序运行所需要的共享库及内核模块</li>\n</ul>\n</li>\n<li>proc  <ul>\n<li>虚拟文件系统，存放当前内存的映射</li>\n</ul>\n</li>\n<li>usr  <ul>\n<li>存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 管理员软件安装目录</li>\n</ul>\n</li>\n<li>var  <ul>\n<li>存放运行时需要改变数据的文件*</li>\n</ul>\n</li>\n<li>mnt  <ul>\n<li>挂载目录</li>\n</ul>\n</li>\n<li>sbin  <ul>\n<li>存储管理级别的二进制执行文件</li>\n</ul>\n</li>\n<li>root  <ul>\n<li>超级用户主目录（家目录）</li>\n</ul>\n</li>\n<li>opt <ul>\n<li>额外安装的可选应用程序包安装位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、文件权限\"><a href=\"#2、文件权限\" class=\"headerlink\" title=\"2、文件权限\"></a>2、文件权限</h2><ul>\n<li>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725213809973.png\" class=\"\">\n\n<ul>\n<li>对应权限划分如下<ul>\n<li>d表示文件夹</li>\n<li>后面9个字母，每3个对应一个身份的权限<ul>\n<li>r表示读，w表示写，x(execute)表示执行，如果命令文件中，该用户有x权限，则可以调用该命令<ul>\n<li>如果加了rw后，还是没有权限，可以加上x</li>\n</ul>\n</li>\n<li><strong>owner</strong>对应的当前用户，<strong>group</strong>对应的是用户组，<strong>other users</strong>对应的是其他普通用户<ul>\n<li>第一个root表示root用户，第个root表示root用户组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725214040146.png\" class=\"\">\n\n<img src=\"/posts/638d4d8a/image-20230725213825941.png\" class=\"\">\n\n<ul>\n<li>使用 u, g, o 来代表三种身份的权限，此外还有a，代表all，即所有用户</li>\n<li>chmod（change mode）<ul>\n<li>修改文件权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725214239212.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的读权限</span></span><br><span class=\"line\">chmod u+r 文件名</span><br><span class=\"line\">chmod u-r 文件名</span><br><span class=\"line\">chmod u+rx 文件名</span><br><span class=\"line\">chmod u-rx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的写权限</span></span><br><span class=\"line\">chmod u+w 文件名</span><br><span class=\"line\">chmod u-w 文件名</span><br><span class=\"line\">chmod u+wx 文件名</span><br><span class=\"line\">chmod u-wx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的root用户的读写权限</span></span><br><span class=\"line\">chmod u+rw 文件名</span><br><span class=\"line\">chmod u-rw 文件名</span><br><span class=\"line\">chmod u+rwx 文件名</span><br><span class=\"line\">chmod u-rwx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的用户组的读写权限</span></span><br><span class=\"line\">chmod g+r 文件名</span><br><span class=\"line\">chmod g-r 文件名</span><br><span class=\"line\"><span class=\"comment\"># 修改文件的普通用户的读写权限</span></span><br><span class=\"line\">chmod o+r 文件名</span><br><span class=\"line\">chmod o-r 文件名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果用户相对文件进行读写操作，除了文件本身的权限，文件所处文件夹的读写权限也要有</p>\n</li>\n<li><p>chmod   xxx   文件夹</p>\n<ul>\n<li>xxx可以用数字代替</li>\n<li>rwx  r-x    r-x</li>\n<li>111 101   101</li>\n<li>7        5       5</li>\n<li>chmod 755 文件名  会赋予文件rwx  r-x    r-x的权限</li>\n</ul>\n</li>\n<li><p>chmod –help  查看命令的帮助文档</p>\n<ul>\n<li>chmod -R 755  文件夹，此命令会递归的把指定文件夹里所有的文件和文件夹都赋予 755的权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725220926475.png\" class=\"\">\n\n<ul>\n<li>chmod命令的匹配方式其实是正则表达式</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725221157481.png\" class=\"\">\n\n<ul>\n<li>通过chown命令可以修改文件所有者和文件关联组，进而也能影响权限<ul>\n<li>命令格式：chown [-cfhvR] [–help] [–version] user[:group] file</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、用户和用户组\"><a href=\"#3、用户和用户组\" class=\"headerlink\" title=\"3、用户和用户组\"></a>3、用户和用户组</h2><ul>\n<li><p>Linux系统是一个多用户多任务的分时操作系统</p>\n</li>\n<li><p>可以创建一个有一定权限的组，然后把普通用户放入进入</p>\n</li>\n<li><p>添加的用户所在文件 &#x2F;etc&#x2F;passwd</p>\n<ul>\n<li><code>djx</code>：用户名</li>\n<li><code>x</code>：加密后的密码，通常是 ‘x’ 或 ‘*’ 表示密码以加密形式存储在 <code>/etc/shadow</code> 文件中</li>\n<li><code>1000</code>：用户 ID (UID)，用于标识用户的唯一标识符</li>\n<li><code>1000</code>：组 ID (GID)，用于标识用户所属的主要用户组</li>\n<li><code>djx</code>：用户的全名或描述</li>\n<li><code>/home/djx</code>：用户的主目录路径</li>\n<li><code>/bin/bash</code>：用户的默认 shell，这里指定为 Bash 解释器。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727213145890.png\" class=\"\" title=\"image-20230727213145890\">\n\n<ul>\n<li>添加的用户组所在文件 &#x2F;etc&#x2F;group</li>\n<li>新创建的用户和用户组的，uid和gid默认从1000开始</li>\n</ul>\n<h2 id=\"4、添加用户\"><a href=\"#4、添加用户\" class=\"headerlink\" title=\"4、添加用户\"></a>4、添加用户</h2><ul>\n<li><p>使用useradd即可增加一个用户</p>\n</li>\n<li><p>命令格式：<strong>useradd</strong> 选项 用户名</p>\n</li>\n<li><p>选项:</p>\n<p>-c comment 指定一段注释性描述。</p>\n<p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p>\n<p>-g 用户组 指定用户所属的用户组。</p>\n<p>-G 用户组，用户组 指定用户所属的附加组。</p>\n<p>-s Shell文件 指定用户的登录Shell。</p>\n<p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd lg</span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">passwd lg</span><br><span class=\"line\"><span class=\"comment\"># -m 将家目录内容移至新位置 (仅于 -d 一起使用)</span></span><br><span class=\"line\">usermod -m -d /home/lg3 lg</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、修改或删除用户\"><a href=\"#5、修改或删除用户\" class=\"headerlink\" title=\"5、修改或删除用户\"></a>5、修改或删除用户</h2><h3 id=\"5-1修改用户\"><a href=\"#5-1修改用户\" class=\"headerlink\" title=\"5.1修改用户\"></a>5.1修改用户</h3><ul>\n<li>命令格式：usermod 选项 用户名</li>\n<li>选项与useradd命令中的选项一样</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改sam用户的shell文件为/bin/ksh，主目录为/home/z，用户组为developer</span></span><br><span class=\"line\">usermod -s /<span class=\"built_in\">bin</span>/ksh -d /home/z -g developer sam</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2删除用户\"><a href=\"#5-2删除用户\" class=\"headerlink\" title=\"5.2删除用户\"></a>5.2删除用户</h3><ul>\n<li>命令格式：userdel 选项 用户名</li>\n<li>常用的选项是 -r，它的作用是把用户的主目录一起删除</li>\n</ul>\n<h2 id=\"6、修改密码\"><a href=\"#6、修改密码\" class=\"headerlink\" title=\"6、修改密码\"></a>6、修改密码</h2><ul>\n<li>命令格式：：<strong>passwd</strong> 选项 用户名</li>\n<li>一般passwd 用户名即可</li>\n</ul>\n<h2 id=\"7、增加用户组\"><a href=\"#7、增加用户组\" class=\"headerlink\" title=\"7、增加用户组\"></a>7、增加用户组</h2><ul>\n<li>其格式：groupadd 选项 用户组</li>\n<li>选项<ul>\n<li>-g GID 指定新用户组的组标识号（GID）</li>\n<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8、删除或修改用户组\"><a href=\"#8、删除或修改用户组\" class=\"headerlink\" title=\"8、删除或修改用户组\"></a>8、删除或修改用户组</h2><h3 id=\"8-1删除用户组\"><a href=\"#8-1删除用户组\" class=\"headerlink\" title=\"8.1删除用户组\"></a>8.1删除用户组</h3><ul>\n<li>其格式：groupdel 用户组</li>\n</ul>\n<h3 id=\"8-2修改用户组\"><a href=\"#8-2修改用户组\" class=\"headerlink\" title=\"8.2修改用户组\"></a>8.2修改用户组</h3><ul>\n<li>格式：groupmod 选项 用户组</li>\n<li>常用的选项有：<ul>\n<li>-g GID 为用户组指定新的组标识号</li>\n<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>\n<li>-n 新用户组 将用户组的名字改为新名字</li>\n</ul>\n</li>\n<li>例如：groupmod –g 10000 -n group3 group2<ul>\n<li>此命令将组group2的标识号改为10000，组名修改为group3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux基础命令\"><a href=\"#Linux基础命令\" class=\"headerlink\" title=\"Linux基础命令\"></a>Linux基础命令</h1><h2 id=\"1、清空显示内容\"><a href=\"#1、清空显示内容\" class=\"headerlink\" title=\"1、清空显示内容\"></a>1、清空显示内容</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h3><ul>\n<li>清除全屏内容</li>\n</ul>\n<h2 id=\"2、查看路径\"><a href=\"#2、查看路径\" class=\"headerlink\" title=\"2、查看路径\"></a>2、查看路径</h2><h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><ul>\n<li>Print Working Directory  打印工作目录</li>\n<li>显示当前文件的路径</li>\n</ul>\n<h2 id=\"3、显示文件\"><a href=\"#3、显示文件\" class=\"headerlink\" title=\"3、显示文件\"></a>3、显示文件</h2><h3 id=\"ls-list\"><a href=\"#ls-list\" class=\"headerlink\" title=\"ls   (list)\"></a>ls   (list)</h3><ul>\n<li>列出当前目录所有文件夹和文件</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725210604931.png\" class=\"\">\n\n<h3 id=\"ll-list-long\"><a href=\"#ll-list-long\" class=\"headerlink\" title=\"ll    (list long)\"></a>ll    (list long)</h3><ul>\n<li>列出当前目录所有文件和文件夹的详细信息</li>\n</ul>\n<h3 id=\"ls-a-list-all\"><a href=\"#ls-a-list-all\" class=\"headerlink\" title=\"ls -a   (list all)\"></a>ls -a   (list all)</h3><ul>\n<li>列出当前目录所有的文件包括隐藏文件</li>\n</ul>\n<h3 id=\"ll-a\"><a href=\"#ll-a\" class=\"headerlink\" title=\"ll - a\"></a>ll - a</h3><ul>\n<li><p>(列出当前目录所有的文件包括隐藏文件得详细信息)</p>\n</li>\n<li><p>前面带 . 的为隐藏文件</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230725210839326.png\" class=\"\">\n\n<h3 id=\"ls-–help\"><a href=\"#ls-–help\" class=\"headerlink\" title=\"ls –help\"></a>ls –help</h3><ul>\n<li>ls –help” 是用于查看 ls 命令的<strong>帮助文档</strong>。在 Linux 终端中，这个命令可以显示 ls 命令的使用方法、选项和参数说明，以及其他相关的信息。</li>\n</ul>\n<h3 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h3><ul>\n<li><p>统计</p>\n</li>\n<li><p>查看文件信息</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727184316885.png\" class=\"\">\n\n<h3 id=\"不同的文件，有不同的颜色\"><a href=\"#不同的文件，有不同的颜色\" class=\"headerlink\" title=\"不同的文件，有不同的颜色\"></a>不同的文件，有不同的颜色</h3><img src=\"/posts/638d4d8a/image-20230727184609219.png\" class=\"\">\n\n<h2 id=\"4、文件及目录操作\"><a href=\"#4、文件及目录操作\" class=\"headerlink\" title=\"4、文件及目录操作\"></a>4、文件及目录操作</h2><ul>\n<li>创建、切换路径、复制粘贴、剪切、重命名、显示文件内容、显示文件大小</li>\n</ul>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><ul>\n<li>创建空文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch newfile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><ul>\n<li>make directory  创建文件夹</li>\n<li>mkdir -p 可以创建多级文件夹<ul>\n<li>p\t–parents，递归创建目录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">mkdir aa</span><br><span class=\"line\"><span class=\"comment\"># 创建多级目录</span></span><br><span class=\"line\">mkdir aa/bb/cc/dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><ul>\n<li><p>change directory   切换目录</p>\n</li>\n<li><p>切换目录</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到root用户的家目录</span></span><br><span class=\"line\">cd</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">cd ~</span><br><span class=\"line\"><span class=\"comment\"># 切换到普通用户的家目录</span></span><br><span class=\"line\">cd /home/普通用户</span><br><span class=\"line\"><span class=\"comment\"># 切换到根目录</span></span><br><span class=\"line\">cd /</span><br><span class=\"line\"><span class=\"comment\"># 切换到上一级</span></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"><span class=\"comment\"># 切换到上一级的上一级</span></span><br><span class=\"line\">cd ../../</span><br><span class=\"line\"><span class=\"comment\"># 绝对路径切换</span></span><br><span class=\"line\">cd /user/local</span><br><span class=\"line\"><span class=\"comment\"># 相对路径</span></span><br><span class=\"line\">cd ../文件夹</span><br><span class=\"line\"><span class=\"comment\"># 进入当前文件夹下的其他文件夹</span></span><br><span class=\"line\">cd ./文件夹</span><br><span class=\"line\">cd 文件夹</span><br><span class=\"line\"><span class=\"comment\"># 返回上一次所处文件夹</span></span><br><span class=\"line\">cd -</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><ul>\n<li><p>remove  移除</p>\n</li>\n<li><p>删除文件\\文件夹</p>\n</li>\n<li><p>使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">rm 文件名</span><br><span class=\"line\"><span class=\"comment\"># 强制删除文件</span></span><br><span class=\"line\"><span class=\"comment\"># force</span></span><br><span class=\"line\">rm -f 文件名</span><br><span class=\"line\"><span class=\"comment\"># 删除目录（递归删除），需要确认</span></span><br><span class=\"line\"><span class=\"comment\"># recursive</span></span><br><span class=\"line\">rm -r  aa/bb/cc</span><br><span class=\"line\"><span class=\"comment\"># 强制删除目录</span></span><br><span class=\"line\">rm -rf aa/bb/cc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><ul>\n<li><p>copy</p>\n</li>\n<li><p>复制粘贴</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制粘贴文件到aa目录中</span></span><br><span class=\"line\">cp a.txt aa/</span><br><span class=\"line\"><span class=\"comment\"># 复制粘贴aa文件夹到bb中</span></span><br><span class=\"line\"><span class=\"comment\"># -r  recursive</span></span><br><span class=\"line\">cp -r aa bb/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><ul>\n<li>move </li>\n<li>剪切的意思，如果指定新的文件名，则移动过去，并会重命名</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果path2/newname不存在，则会创建出来</span></span><br><span class=\"line\">mv  &lt;path1/oldname&gt;    &lt;path2/newname&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h3><ul>\n<li>Secure Copy Protocol 安全复制协议</li>\n<li>远程复制</li>\n<li>它是一个用于在本地主机和远程主机之间进行安全复制文件的命令行工具。scp 命令使用 SSH 协议进行数据传输，因此文件在传输过程中是被加密的，提供了更高的安全性。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从本地复制到远程 </span></span><br><span class=\"line\">scp /home/test/*.sh    root@<span class=\"number\">172.19</span><span class=\"number\">.2</span><span class=\"number\">.75</span>:/home/root </span><br><span class=\"line\"><span class=\"comment\"># 从远程复制到本地 </span></span><br><span class=\"line\">scp root@/<span class=\"number\">172.19</span><span class=\"number\">.2</span><span class=\"number\">.75</span>:/home/root/*.txt   /home/test</span><br><span class=\"line\"><span class=\"comment\"># 从远程到远程 </span></span><br><span class=\"line\">scp root@<span class=\"number\">192.168</span><span class=\"number\">.21</span><span class=\"number\">.1</span>:/root/test/*.sh root@<span class=\"number\">192.168</span><span class=\"number\">.31</span><span class=\"number\">.1</span>:/root/test</span><br><span class=\"line\"><span class=\"comment\"># 显示进度在scp后添加-v； verbose 冗长的</span></span><br><span class=\"line\"><span class=\"comment\"># 复制目录在scp后添加-r： recursive </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>concatenate  连接</li>\n<li>显示文本文件的内容</li>\n<li>也可以用于将多个文件内容合并输出，或者将内容重定向到其他文件中。<ul>\n<li>重定向<ul>\n<li>“&gt;”  ：覆盖重写</li>\n<li>“&gt;&gt;”：追加写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示文件内容</span></span><br><span class=\"line\">cat 文件名</span><br><span class=\"line\"><span class=\"comment\"># 将a.txt和b.txt的内容覆盖写到/追加到c.txt中</span></span><br><span class=\"line\">cat a.txt b.txt &gt; c.txt</span><br><span class=\"line\">cat a.txt b.txt &gt;&gt; c.txt</span><br><span class=\"line\"><span class=\"comment\"># 显示行号</span></span><br><span class=\"line\"><span class=\"comment\"># number</span></span><br><span class=\"line\">cat -b a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tac\"><a href=\"#tac\" class=\"headerlink\" title=\"tac\"></a>tac</h3><ul>\n<li>显示文本内容（cat的倒序输出）</li>\n</ul>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><ul>\n<li>tail 尾巴</li>\n<li>显示末尾文本内容</li>\n<li>显示完成后并不会停止，需要终止程序运行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示末尾10行</span></span><br><span class=\"line\">tail -10f a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tailf\"><a href=\"#tailf\" class=\"headerlink\" title=\"tailf\"></a>tailf</h3><ul>\n<li>和tail一样的作用，只不过表达不一样</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示末尾10行</span></span><br><span class=\"line\">tailf <span class=\"number\">10</span> a.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"more-less\"><a href=\"#more-less\" class=\"headerlink\" title=\"more&#x2F;less\"></a>more&#x2F;less</h3><ul>\n<li>回车一次显示一部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more a.txt</span><br><span class=\"line\">less a.txt</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230727193418935.png\" class=\"\">\n\n<h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><ul>\n<li>disk usage 磁盘使用情况</li>\n<li>显示文件大小<ul>\n<li>模4k，达不到4k大小的文件，也会占用4k的空间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计全部目录及其子目录下的每个档案所占的磁盘空间</span></span><br><span class=\"line\"><span class=\"comment\"># -h   human；以人们习惯的方式进行展示</span></span><br><span class=\"line\">du -h</span><br><span class=\"line\"><span class=\"comment\"># 统计对应文件的磁盘空间</span></span><br><span class=\"line\">du -h directory</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><ul>\n<li>disk free 空闲磁盘</li>\n<li>显示文件系统的磁盘空间使用情况。df 命令会列出文件系统的挂载点、总大小、已使用空间、可用空间以及文件系统类型等</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727193920519.png\" class=\"\">\n\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi&#x2F;vim\"></a>vi&#x2F;vim</h3><ul>\n<li>进行文本编辑</li>\n<li>vi和vim的区别是，vim进入文件，会显示颜色</li>\n<li>vim总共有三种模式：命令模式、插入模式、末行模式<ul>\n<li>通过vim命令打开文件即进入<strong>命令模式</strong>，命令模式下可以进行复制粘贴删除等功能</li>\n<li>在命令模式按i，可以进入<strong>插入模式</strong>，插入模式可以进行文件编辑</li>\n<li>在插入模式按ESC键</li>\n<li>命令模式按:冒号，可以进入<strong>末行模式</strong>，末行模式主要进行文件保存、退出或查找替换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><ul>\n<li><code>who</code> 是一个用于显示当前登录到系统的用户信息的命令。在 Linux&#x2F;Unix 系统中，<code>who</code> 命令通常用于查看当前登录用户的详细列表，包括用户名、终端、登录时间等信息。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230729145832928.png\" class=\"\">\n\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><ul>\n<li><p>wordcount</p>\n</li>\n<li><p><code>wc</code> 是一个用于统计文件中行数、单词数和字符数的命令。在 Linux&#x2F;Unix 系统中，<code>wc</code> 命令通常用于查看文件的文本统计信息。</p>\n<p>常用的选项包括：</p>\n<ul>\n<li><code>-l</code>：统计行数。</li>\n<li><code>-w</code>：统计单词数。</li>\n<li><code>-c</code>：统计字符数。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux常用工具\"><a href=\"#Linux常用工具\" class=\"headerlink\" title=\"Linux常用工具\"></a>Linux常用工具</h1><h2 id=\"1、vim\"><a href=\"#1、vim\" class=\"headerlink\" title=\"1、vim\"></a>1、vim</h2><ul>\n<li><p>Vim（Vi IMproved）文本编辑器</p>\n</li>\n<li><p>nohlsearch 关闭文本搜索后的黄色光标</p>\n<ul>\n<li>no highlight search  关闭突出搜索</li>\n<li>在末行模式下输入</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:nohlsearch</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727194724286-1692155590711.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727194425502-1692155580085.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727194517260.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200849580.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200919785.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727200934622.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230727201038649.png\" class=\"\">\n\n\n\n<img src=\"/posts/638d4d8a/image-20230731090649262.png\" class=\"\" title=\"image-20230731090649262\">\n\n<ul>\n<li>Home行首</li>\n<li>End行尾</li>\n</ul>\n<h4 id=\"文件中永久显示行号\"><a href=\"#文件中永久显示行号\" class=\"headerlink\" title=\"文件中永久显示行号\"></a>文件中永久显示行号</h4><ul>\n<li>创建 .vimrc文件（隐藏文件）</li>\n<li>“vimrc” 的全称是 “Vim Run Commands”。</li>\n<li>用户可以在 vimrc 文件中设置各种选项，例如设置缩进、语法高亮、键盘映射、颜色方案等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤</span></span><br><span class=\"line\">cd ~</span><br><span class=\"line\">vim .vimrc</span><br><span class=\"line\"><span class=\"comment\"># 在其中添加</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> nu</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、压缩解压\"><a href=\"#2、压缩解压\" class=\"headerlink\" title=\"2、压缩解压\"></a>2、压缩解压</h2><ul>\n<li>命令：tar  [选项]  文件&#x2F;目录</li>\n</ul>\n<h4 id=\"2-1-打包\"><a href=\"#2-1-打包\" class=\"headerlink\" title=\"2.1 打包\"></a>2.1 打包</h4><ul>\n<li><p>选项 “-cvf” 一般是习惯用法</p>\n</li>\n<li><p>打包时需要指定打包之后的文件名，而且要用 “.tar” 作为扩展名</p>\n</li>\n<li><p>注意 f 后面一定要跟包名</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727201607999.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf 包名 文件<span class=\"number\">1</span>/目录<span class=\"number\">1</span> 文件<span class=\"number\">2</span>/目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-压缩\"><a href=\"#2-2-压缩\" class=\"headerlink\" title=\"2.2 压缩\"></a>2.2 压缩</h4><ul>\n<li><strong>gzip压缩命令不能直接压缩目录</strong>，必须先用 tar 命令将目录打包，然后才能用 gzip 命令对打包文件进行压缩</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip aa.tar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tar -zcvf xxx.tar.gz  目录 ，这种格式可以直接压缩目录</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包目录</span></span><br><span class=\"line\">tar -zcvf ee.tar.gz aa</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-解打包操作\"><a href=\"#2-3-解打包操作\" class=\"headerlink\" title=\"2.3 解打包操作\"></a>2.3 解打包操作</h4><ul>\n<li><p>对 tar 包做解打包操作</p>\n</li>\n<li><p>打包和打包相比，只是把打包选项 “-cvf” 更换为 “-xvf”</p>\n</li>\n<li><p>想要指定解压位置，则需要使用 “-C(大写)” 选项</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解打包操作</span></span><br><span class=\"line\">tar -xvf aa.tar -C /temp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4解压缩操作\"><a href=\"#2-4解压缩操作\" class=\"headerlink\" title=\"2.4解压缩操作\"></a>2.4解压缩操作</h4><ul>\n<li><p>-z：压缩和解压缩 “.tar.gz” 格式；</p>\n<p>-j：压缩和解压缩 “.tar.bz2”格式。</p>\n</li>\n<li><p>常用 tar -zxvf 包名 -C  解压路径</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压到当前目录的aa目录下</span><br><span class=\"line\">tar -zxvf bb.tar.gz ./aa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、netstat\"><a href=\"#3、netstat\" class=\"headerlink\" title=\"3、netstat\"></a>3、netstat</h2><ul>\n<li>netstat命令是一个监控TCP&#x2F;IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。</li>\n<li>常用选项：-nplt<ul>\n<li><code>-n</code>: numeric，以数值形式显示 IP 地址和端口号。</li>\n<li><code>-p</code>: process，显示对应的进程信息，即查看占用端口的进程名称。</li>\n<li><code>-l</code>: listen，只显示监听状态的端口。</li>\n<li><code>-t</code>: TCP，只显示 TCP 协议相关的连接。</li>\n<li><code>-u</code>: UDP，只显示 UDP 协议相关的连接。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727205255514.png\" class=\"\">\n\n<h2 id=\"4、ps\"><a href=\"#4、ps\" class=\"headerlink\" title=\"4、ps\"></a>4、ps</h2><ul>\n<li><p>process status  进程状态</p>\n</li>\n<li><p>用于显示当前进程的状态，类似于 windows 的任务管理器。</p>\n</li>\n<li><p>常用参数：</p>\n<ul>\n<li><p>-aux 显示所有包含其他使用者的进程</p>\n<ul>\n<li><p><code>a</code>: all processes，显示所有用户的所有进程，包括其他用户的进程。</p>\n<p><code>u</code>: user-oriented format，以用户为导向的格式显示进程信息。</p>\n<p><code>x</code>: no controlling terminal，显示无控制终端的进程，通常用于显示后台进程。</p>\n</li>\n</ul>\n</li>\n<li><p>-ef </p>\n<ul>\n<li><code>-e</code>: 显示所有进程，包括其他用户的进程。</li>\n<li><code>-f</code>: 显示完整的进程信息，包括进程的详细信息，如进程号、父进程号、用户、CPU 使用率、内存占用等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ps</code>是用来查看当前进程状态的命令</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728101020819.png\" class=\"\">\n\n<ul>\n<li>在 <code>ps -ef</code> 中，显示所有进程，包括其他用户的进程，并且不显示与终端无关的进程。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728100939773.png\" class=\"\" title=\"image-20230728100939773\">\n\n<ul>\n<li><code>ps -aux</code> 中，除了显示所有进程和完整的进程信息外，还显示与终端无关的进程。</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230728101006301.png\" class=\"\" title=\"image-20230728101006301\">\n\n<h2 id=\"5、find\"><a href=\"#5、find\" class=\"headerlink\" title=\"5、find\"></a>5、find</h2><ul>\n<li>命令用于在指定目录下查找文件和目录。</li>\n<li>格式：find  路径  -name 文件名</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在root搜索名字中含有txt的文件</span></span><br><span class=\"line\">find /root -name a.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、whereis\"><a href=\"#6、whereis\" class=\"headerlink\" title=\"6、whereis\"></a>6、whereis</h2><ul>\n<li><code>whereis</code>是一个在Linux和Unix系统中用来查找二进制程序（可执行文件）、源代码以及帮助文档的命令。它的作用是快速定位特定命令、程序或文件在系统中的位置。</li>\n<li>可以用来查找命令的位置</li>\n<li>注意：whereis会查找位于环境变量中的二进制文件<ul>\n<li><code>pwd</code>命令的可执行文件位于<code>/usr/bin/pwd</code>。</li>\n<li>帮助文档位于<code>/usr/share/man/man1/pwd.1p.gz</code>。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727211150030.png\" class=\"\">\n\n<h1 id=\"Linux-常用操作\"><a href=\"#Linux-常用操作\" class=\"headerlink\" title=\"Linux 常用操作\"></a>Linux 常用操作</h1><ul>\n<li>查看centos版本信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/centos-release</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730171241699.png\" class=\"\">\n\n<h2 id=\"1、yum\"><a href=\"#1、yum\" class=\"headerlink\" title=\"1、yum\"></a>1、yum</h2><ul>\n<li><code>yum</code>可以帮助用户搜索、安装、更新和删除软件包，并管理系统的软件包依赖关系。通过 <code>yum</code>，用户可以方便地从软件源中获取所需的软件包，并在系统中安装它们。</li>\n</ul>\n<h4 id=\"1-1-基本使用\"><a href=\"#1-1-基本使用\" class=\"headerlink\" title=\"1.1 基本使用\"></a>1.1 基本使用</h4><ul>\n<li>安装：<code>yum install 包名</code></li>\n<li>卸载：<code>yum remove 包名</code></li>\n<li>更新：<code>yum update 包名</code></li>\n<li>显示已配置的源：<code>yum repolist</code></li>\n<li>列出安装的包：<code>yum list</code><ul>\n<li><code>yum list |grep &quot;关键字&quot;</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730163321077.png\" class=\"\" title=\"image-20230730163321077\">\n\n<ul>\n<li><p>查看软件包的详细信息:<code>yum info 包名</code>: 。</p>\n</li>\n<li><p>查看帮助文档：yum –help</p>\n</li>\n<li><p><code>yum</code> 会自动从配置好的软件源中下载并安装软件包，因此在使用之前，请确保系统已正确配置了可用的<strong>软件源</strong>。</p>\n</li>\n<li><p>安装telnet</p>\n<ul>\n<li><p>telnet ：和ssh差不多，用来远程连接，但是安全性不高，可以用来做端口测试</p>\n</li>\n<li><pre><code class=\"sh\"># 测试指定ip的端口是否被占用\n# 如果被占用则会卡住，反之输出拒绝连接\ntelnet 192.168.175.100 22  \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 卡住，指定端口被占用</span><br><span class=\"line\">    </span><br><span class=\"line\">  -  master的22端口被xshell占用</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">![](Linux笔记/image-20230730164249051.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 没卡住，指定端口没被占用</span><br><span class=\"line\">  </span><br><span class=\"line\">  ![](Linux笔记/image-20230730164334687.png)</span><br><span class=\"line\">  </span><br><span class=\"line\">- 首先会下载一个rpm包</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">![](Linux笔记/image-20230730172211211.png)</span><br><span class=\"line\"></span><br><span class=\"line\">  - 可以通过yum和rpm卸载软件包</span><br><span class=\"line\">  - yum是基于 rpm的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 yum来管理软件包。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.2 换源</span><br><span class=\"line\"></span><br><span class=\"line\">- 由于原网站在外网，所以换到阿里的镜像网站，提升下载速度</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```</span><br><span class=\"line\">    https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>备份原有的软件源配置文件</p>\n<ul>\n<li>yum.repos.d   yum.repositories directory   yum的仓库目录</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从阿里官方网站下载对应系统版本的源配置文件<ul>\n<li>“wget” 是一个用于从网络上下载文件的命令行工具。</li>\n<li>“-O” 是 “wget” 命令的选项之一，用于指定保存下载文件的本地文件名。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>由于我们是非ECS（内部）用户，所以源配置文件中包含aliyuncs.com地址访问不了</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730164816754.png\" class=\"\" title=\"image-20230730164816754\">\n\n<ul>\n<li>故移除url : aliyuncs.com<ul>\n<li>“sed” 是 Stream Editor（流编辑器）的缩写，用于在文本流中进行查找、替换和编辑操作。</li>\n<li>“sed -i -e” 是用于在文件中进行替换操作的 sed 命令的组合。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730165344441.png\" class=\"\" title=\"image-20230730165344441\">\n\n<ul>\n<li>重新构建本地缓存</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>YUM 是基于 RPM 的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 YUM 来管理软件包。</li>\n</ul>\n<h2 id=\"2、systemctl\"><a href=\"#2、systemctl\" class=\"headerlink\" title=\"2、systemctl\"></a>2、systemctl</h2><ul>\n<li><p>system control系统控制</p>\n</li>\n<li><p>管理系统以及用户的服务</p>\n<ul>\n<li><p>网络管理工具：NetworkManager</p>\n<p>网络服务：network</p>\n<p>防火墙：firewalld</p>\n</li>\n</ul>\n</li>\n<li><p>系统服务都在：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system该目录中</p>\n<p>都是以xxx.service形式存在</p>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230730170533372.png\" class=\"\" title=\"image-20230730170533372\">\n\n<ul>\n<li><code>lib</code>文件夹存放的是库文件（Library Files）</li>\n<li>常用操作<ul>\n<li>启动：<code>systemctl start firewalld</code></li>\n<li>停止：<code>systemctl stop firewalld</code></li>\n<li>重启：<code>systemctl restart firewalld</code></li>\n<li>查看状态：<code>systemctl status firewalld</code></li>\n<li>开机自启：<code>systemctl enable firewalld</code></li>\n<li>取消开机自启：<code>systemctl disable firewalld</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、更换主机名\"><a href=\"#3、更换主机名\" class=\"headerlink\" title=\"3、更换主机名\"></a>3、更换主机名</h2><ul>\n<li>通过文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hostname</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过工具</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、映射\"><a href=\"#4、映射\" class=\"headerlink\" title=\"4、映射\"></a>4、映射</h2><ul>\n<li>linux修改映射</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>windows修改映射</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\drivers\\etc\\hosts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、修改环境变量\"><a href=\"#5、修改环境变量\" class=\"headerlink\" title=\"5、修改环境变量\"></a>5、修改环境变量</h2><ul>\n<li><p>环境变量：本质上是很多路径</p>\n<p>当系统执行命令时，会去环境变量中的路径里查找有无该命令，有即执行，没有就会提示命令找不到</p>\n<p>配置环境变量就是告诉系统去哪些位置找我们需要的命令</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入管理环境变量的文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一般配置在文件的尾部 先配置一个XXX_HOME，然后再将其HOME下的bin目录配置在环境变量PATH中</span></span><br><span class=\"line\">XXX_HOME=/x/xx</span><br><span class=\"line\">YYY_HOME=/y/yy</span><br><span class=\"line\">export PATH=$XXX_HOME/bin:$YYY_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置完之后 <span class=\"built_in\">source</span> 生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、安装JDK\"><a href=\"#6、安装JDK\" class=\"headerlink\" title=\"6、安装JDK\"></a>6、安装JDK</h2><ul>\n<li><p>上传安装包到虚拟机</p>\n<ul>\n<li><p>rz -E</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 没有rz命令可以下载</span><br><span class=\"line\">yum install lrzsz</span><br><span class=\"line\">rz 是接收文件</span><br><span class=\"line\">sz 是发送文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xftp</p>\n</li>\n</ul>\n</li>\n<li><p>创建问价夹存放压缩包和解压后的文件</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/package</span><br><span class=\"line\">mkdir /usr/local/soft</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /usr/local/package/jdk-8u171-linux-x64.tar.gz -C /usr/local/soft</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改环境变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入管理环境变量的文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件尾部加入以下内容</span></span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_171</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存退出之后 <span class=\"built_in\">source</span> 生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改配置文件（省略）</li>\n<li>进行初始化工作（省略）</li>\n<li>测试是否安装成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前系统中运行了哪些JAVA进程</span></span><br><span class=\"line\">jps  <span class=\"comment\">#  java process status 查看java进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看JAVA的版本号 </span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/638d4d8a/image-20230730174650797.png\" class=\"\">\n\n<h2 id=\"7、后台运行nohup\"><a href=\"#7、后台运行nohup\" class=\"headerlink\" title=\"7、后台运行nohup\"></a>7、后台运行nohup</h2><ul>\n<li>no hang up 不挂起</li>\n<li>将进程放在后台执行 不直接打印东西在控制台  一般带上重定向</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh test.sh &gt; xxx.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8、定时调度crontab\"><a href=\"#8、定时调度crontab\" class=\"headerlink\" title=\"8、定时调度crontab\"></a>8、定时调度crontab</h2><ul>\n<li><code>crontab</code> 是用于管理和设置定时任务的命令。</li>\n<li>具体的选项如下<ul>\n<li><code>crontab -e</code>：编辑当前用户的定时任务列表。</li>\n<li><code>crontab -l</code>：列出当前用户的定时任务列表。</li>\n<li><code>crontab -r</code>：删除当前用户的定时任务列表。</li>\n<li><code>crontab -u &lt;user&gt;</code>：指定要操作的用户，用于以其他用户的身份管理定时任务。</li>\n</ul>\n</li>\n<li>ctontab在线工具</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://tool.lu/crontab/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定时调度格式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * command</span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">f1 第一个 * 分钟 (0 - 59)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">f2 第二个 * 小时 (0 - 23)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第三个 * 一个月中的第几天 (1 - 31)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第四个 * 月份 (1 - 12)</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">第五个 * 星期中星期几 (0 - 6) (星期天 为0)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> 0 6-12/3 * 12 *   #表示 12月6点到12点 每隔三个小时的0分钟执行一次</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入页面写定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入后和vim界面一样的操作</span></span><br><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看已有的定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除所有的定时任务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -r</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定时执行脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入定时任务</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">每分钟将<span class=\"built_in\">date</span>输出重定向到time.txt文件</span></span><br><span class=\"line\">* * * * * date &gt; /root/time.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9、ssh\"><a href=\"#9、ssh\" class=\"headerlink\" title=\"9、ssh\"></a>9、ssh</h2><h2 id=\"10、免密登录\"><a href=\"#10、免密登录\" class=\"headerlink\" title=\"10、免密登录\"></a>10、免密登录</h2><h2 id=\"11、时区配置\"><a href=\"#11、时区配置\" class=\"headerlink\" title=\"11、时区配置\"></a>11、时区配置</h2><ul>\n<li><p>查看当前时间：<code>date</code></p>\n</li>\n<li><p>查看当前时区：<code>timedatectl</code></p>\n</li>\n<li><p>查看所有时区：</p>\n<ul>\n<li><code>/usr/share</code> 是 Linux 系统中的一个常见目录，它主要用于存放与应用程序无关的数据文件，例如共享资源、帮助文档、图标、主题等等</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入存放时区的文件夹</span></span><br><span class=\"line\">cd /usr/share/zoneinfo/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">展示</span></span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改时区</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步时间</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基于阿里云NTP服务器同步时间</span></span><br><span class=\"line\">ntpdate ntp.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将时间写入硬件，避免重启失效</span></span><br><span class=\"line\">clock -w</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"12、关键字抓取\"><a href=\"#12、关键字抓取\" class=\"headerlink\" title=\"12、关键字抓取\"></a>12、关键字抓取</h2><ul>\n<li><p>格式：命令 | grep 关键字</p>\n<ul>\n<li>命令 \t 表示要执行的命令，</li>\n<li>|           表示管道，抓取的信息，会放入管道中</li>\n<li>grep     表示抓取</li>\n<li>关键字  表示要抓取信息的关键字</li>\n</ul>\n</li>\n<li><p>ps -ef | grep 进程关键字</p>\n<ul>\n<li>抓取进程关键字</li>\n</ul>\n</li>\n<li><p>ls | grep 文件关键字</p>\n</li>\n<li><p>等</p>\n</li>\n</ul>\n<h1 id=\"Linux扩展知识\"><a href=\"#Linux扩展知识\" class=\"headerlink\" title=\"Linux扩展知识\"></a>Linux扩展知识</h1><h2 id=\"1、子网掩码\"><a href=\"#1、子网掩码\" class=\"headerlink\" title=\"1、子网掩码\"></a>1、子网掩码</h2><ul>\n<li>三类地址</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ip地址共 4个字节 32位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A类地址，第一个字节开头为0：十进制范围在0-127</span></span><br><span class=\"line\"><span class=\"number\">0</span> _ _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># B类地址，第一个字节的前两位为10：十进制范围128-191</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C类地址，第一个字节的前三位为110：十进制范围192-223</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子网掩码用来划分网络号和主机号<ul>\n<li>ip地址分为网络号和主机号</li>\n<li>数据包发送时，通过网络号找到对应的地区，再通过主机号找到对应主机接收数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个A类地址可以分配255*225*225个主机号，所以一个A类地址可以划分255*225*225个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.00000000</span><span class=\"number\">.00000000</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># B类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个B类地址可以分配255*225个主机号，所以一个B类地址可以划分255*225个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.255</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.00000000</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># C类地址的子网掩码</span></span><br><span class=\"line\"><span class=\"comment\"># 一个C类地址可以分配255*225个主机号，所以一个C类地址可以划分255个ip地址</span></span><br><span class=\"line\"><span class=\"number\">255.255</span><span class=\"number\">.255</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.00000000</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子网掩码划分ip的列子</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假如一个子网掩码为</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.11111100</span></span><br><span class=\"line\"><span class=\"comment\"># 那么它可以划分4个ip地址</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">0</span> <span class=\"number\">0</span>  十进制：<span class=\"number\">0</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">0</span> <span class=\"number\">1</span>  十进制：<span class=\"number\">1</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">1</span> <span class=\"number\">0</span>  十进制：<span class=\"number\">2</span></span><br><span class=\"line\">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class=\"number\">1</span> <span class=\"number\">1</span>  十进制：<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 由此子网掩码可以看出</span></span><br><span class=\"line\"><span class=\"comment\"># 以下四个ip同属于一个网络号</span></span><br><span class=\"line\">十进制：<span class=\"number\">192.168</span><span class=\"number\">.175</span>.</span><br><span class=\"line\">二进制：<span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.000000</span>_ _</span><br><span class=\"line\"><span class=\"comment\"># 分别有.0 .1 .2 .3四个主机号</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"comment\"># 子网掩码与ip地址进行与操作，就能判断网络号和主机号了</span></span><br><span class=\"line\"><span class=\"number\">11111111.11111111</span><span class=\"number\">.11111111</span><span class=\"number\">.11111100</span></span><br><span class=\"line\"><span class=\"comment\"># 与操作</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.00000011</span></span><br><span class=\"line\"><span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"><span class=\"comment\"># 通过结果可以看出，子网掩码中的1会将与ip地址对应的每一位都进行锁定（不变）</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.00000000</span></span><br><span class=\"line\"><span class=\"comment\"># 所以网络号为</span></span><br><span class=\"line\"><span class=\"number\">11000000.10101000</span><span class=\"number\">.10101111</span><span class=\"number\">.000000</span></span><br><span class=\"line\"><span class=\"comment\"># 主机号为</span></span><br><span class=\"line\"><span class=\"comment\"># 00</span></span><br><span class=\"line\"><span class=\"comment\"># 01</span></span><br><span class=\"line\"><span class=\"comment\"># 10</span></span><br><span class=\"line\"><span class=\"comment\"># 11</span></span><br><span class=\"line\"><span class=\"comment\"># 可以根据1的个数表示此网络号</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.175</span><span class=\"number\">.0</span>/<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、SSH\"><a href=\"#2、SSH\" class=\"headerlink\" title=\"2、SSH\"></a>2、SSH</h2><ul>\n<li>全称是 “Secure Shell”，它是一种网络协议，用于在不安全的网络中建立安全的连接，通常用于远程登录到服务器或计算机，并进行安全的数据传输和远程操作。通过 <code>ssh</code>，用户可以远程执行命令、上传和下载文件，以及进行其他安全的网络操作。它提供了一种加密的方式，确保通信过程中数据的机密性和完整性，防止被中间人攻击和窃听。</li>\n</ul>\n<h2 id=\"3、xshell\"><a href=\"#3、xshell\" class=\"headerlink\" title=\"3、xshell\"></a>3、xshell</h2><ul>\n<li>Xshell是一款Windows平台上的SSH（Secure Shell）客户端软件。它允许用户通过SSH协议连接到远程计算机或服务器，并进行命令行操作、文件传输和远程管理等任务。Xshell提供了丰富的功能和工具，如多会话管理、自动登录、端口转发、多种认证方式、会话管理、脚本支持等，使得用户能够更加方便和高效地进行远程操作和管理。Xshell广泛用于系统管理员、开发人员和网络工程师等领域，是一款功能强大的远程连接工具。</li>\n</ul>\n<h2 id=\"4、更改xshell复制粘贴方式\"><a href=\"#4、更改xshell复制粘贴方式\" class=\"headerlink\" title=\"4、更改xshell复制粘贴方式\"></a>4、更改xshell复制粘贴方式</h2><img src=\"/posts/638d4d8a/image-20230727151820522.png\" class=\"\">\n\n<h2 id=\"5、usr-bin和-bin中有什么区别\"><a href=\"#5、usr-bin和-bin中有什么区别\" class=\"headerlink\" title=\"5、usr&#x2F;bin和&#x2F;bin中有什么区别\"></a>5、usr&#x2F;bin和&#x2F;bin中有什么区别</h2><p>首先注意 <strong>usr 指 Unix System Resource</strong>，而不是user</p>\n<ul>\n<li><p>&#x2F;usr&#x2F;bin<br>系统预装的一些可执行程序，随系统升级会改变</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;bin<br>用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到&#x2F;usr&#x2F;local目录下</p>\n</li>\n<li><p>如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响</p>\n<ul>\n<li><p>举个栗子：echo $PATH查看当前 PATH 环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/sbin:/usr/local/<span class=\"built_in\">bin</span>:/usr/sbin:/usr/<span class=\"built_in\">bin</span>:/root/<span class=\"built_in\">bin</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里 &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin 优先于 &#x2F;usr&#x2F;bin&#x2F;git&#x2F;bin</p>\n</li>\n</ul>\n</li>\n<li><p>&#x2F;bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 &#x2F;usr 目录时就可以使用）</p>\n</li>\n<li><p>&#x2F;sbin 存放超级用户才能使用的系统程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;bin 存放所有用户都可用的应用程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;sbin 存放超级用户才能使用的应用程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;bin 存放所有用户都可用的与本地机器无关的程序</p>\n</li>\n<li><p>&#x2F;usr&#x2F;local&#x2F;sbin 存放超级用户才能使用的与本地机器无关的程序</p>\n</li>\n</ul>\n<h2 id=\"6、挂载\"><a href=\"#6、挂载\" class=\"headerlink\" title=\"6、挂载\"></a>6、挂载</h2><ul>\n<li><p>指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。</p>\n<p>Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 inux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统（文件目录结构）。</p>\n<p>因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将Linux本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一的过程称为“挂载”。</p>\n<p>如果不挂载，通过Linux系统中的图形界面系统可以查看找到硬件设备，但命令行方式无法找到。</p>\n<p>并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。</p>\n</li>\n<li><p>mount命令可以查看系统中已经挂载的文件系统</p>\n<ul>\n<li>sysfs on &#x2F;sys type sysfs (rw)&lt;–含义是，将 sysfs 分区挂载到了&#x2F;sys 目录上，文件系统是 sysfs ，具有读写权限</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727183225209.png\" class=\"\" title=\"image-20230727183225209\">\n\n<h2 id=\"7、-bashrc\"><a href=\"#7、-bashrc\" class=\"headerlink\" title=\"7、.bashrc\"></a>7、.bashrc</h2><ul>\n<li>位于&#x2F;etc&#x2F;bashrc</li>\n<li><code>.bashrc</code> 是 Bash Shell 的配置文件，用于配置用户在登录时所用的 Bash 环境。每个用户都可以在自己的主目录下创建一个名为 <code>.bashrc</code> 的文件，该文件中包含了一系列命令、别名、环境变量和其他设置，这些设置将在每次用户登录时自动加载。</li>\n<li>如下图中，[root@master ~]#的显示，也是.bashrc文件中shell命令执行后的结果</li>\n</ul>\n<img src=\"/posts/638d4d8a/image-20230727214739399.png\" class=\"\" title=\"image-20230727214739399\">\n\n<ul>\n<li>用户可以编辑 <code>.bashrc</code> 文件来定制自己的 Shell 环境，然后重新登录或执行 <code>source ~/.bashrc</code> 命令使配置生效。这样，每次用户登录时，Bash 将加载该文件并执行其中的命令，从而为用户提供定制化的 Shell 环境。</li>\n</ul>\n<h2 id=\"8、网络适配器\"><a href=\"#8、网络适配器\" class=\"headerlink\" title=\"8、网络适配器\"></a>8、网络适配器</h2><ul>\n<li><p>网络适配器（Network Adapter）是计算机中用于连接计算机与网络之间的设备。它也被称为网络接口卡（Network Interface Card，NIC）、网络接口控制器（Network Interface Controller，NIC）或以太网卡（Ethernet Card）。</p>\n</li>\n<li><p>网络适配器允许计算机与局域网（LAN）或广域网（WAN）进行通信，它负责将计算机内部的数据包转换为网络可以识别和传输的格式，并将从网络接收的数据包转换为计算机可以理解的格式。</p>\n</li>\n<li><p>在现代计算机中，网络适配器通常是一个物理设备，可以是插入到计算机主板上的扩展卡，也可以是集成在主板上的芯片组。此外，一些计算机还支持无线网络适配器，允许计算机通过无线连接与网络通信。</p>\n</li>\n</ul>\n<h2 id=\"9、为什么重新构建本地缓存\"><a href=\"#9、为什么重新构建本地缓存\" class=\"headerlink\" title=\"9、为什么重新构建本地缓存\"></a>9、为什么重新构建本地缓存</h2><p>重新构建本地缓存通常是指重新生成或重建系统或应用程序使用的缓存文件，这样可以确保缓存数据是最新的、准确的，并可能提高系统或应用程序的性能。常见的场景包括：</p>\n<ol>\n<li>缓存文件损坏：如果本地缓存文件损坏或出现问题，可能导致应用程序无法正常工作。重新构建缓存可以解决这个问题。</li>\n<li>缓存过期：缓存通常是为了提高性能而创建的，但有时缓存的数据可能过期或不再准确。重新构建缓存可以更新数据并保持缓存的有效性。</li>\n<li>更改数据源：如果数据源发生了更改，例如数据库中的数据有更新，那么本地缓存可能不再反映最新的数据。重新构建缓存可以从新数据源获取最新的数据。</li>\n<li>清理旧数据：在某些情况下，应用程序可能会保留过多的缓存数据，导致占用过多的磁盘空间。重新构建缓存可以清理旧的、不再使用的数据。</li>\n</ol>\n<p>需要注意的是，在重新构建本地缓存时，可能会导致一定的性能损失，因为系统或应用程序需要重新生成缓存。因此，通常需要在适当的时间进行重新构建，以避免对系统性能造成过多影响。</p>\n"},{"title":"Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries","cover":"/images/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.jpg","abbrlink":"bc5825f3","date":"2023-08-18T07:13:52.000Z","_content":"\n\n\n#  本地IDEA上运行Spark的WordCount时报错\n\n# 报错原因：缺少winutils.exe编译器\n# 解决方案：.\n- ### 1.下载解压hadoop\n   - 下载链接：https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4 \n提取码：hes4\n\t- 官网上下载的hadoop中缺少winutils.exe这里我已经添加进去\n- ### 2.解压后复制解压路径，进去hadoop文件后再复制路径\n- ### 3.进入到IDEA中\n- ![在这里插入图片描述](Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/2ea6f2e3bd9047b5b492e25b1ade73dd.png)\n![在这里插入图片描述](Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/11841aceda8e43e8adfbeac278967917.png)\n\n  \n","source":"_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries.md","raw":"---\ntitle: >-\n  Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe\n  in the Hadoop binaries\ntags:\n  - Spark\n  - Bug\ncover: >-\n  /images/Spark报错java.io.IOException_ Could not locate executable\n  null_bin_winutils.exe in the Hadoop binaries.jpg\ncategories: Bug\nabbrlink: bc5825f3\ndate: 2023-08-18 15:13:52\n---\n\n\n\n#  本地IDEA上运行Spark的WordCount时报错\n\n# 报错原因：缺少winutils.exe编译器\n# 解决方案：.\n- ### 1.下载解压hadoop\n   - 下载链接：https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4 \n提取码：hes4\n\t- 官网上下载的hadoop中缺少winutils.exe这里我已经添加进去\n- ### 2.解压后复制解压路径，进去hadoop文件后再复制路径\n- ### 3.进入到IDEA中\n- ![在这里插入图片描述](Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/2ea6f2e3bd9047b5b492e25b1ade73dd.png)\n![在这里插入图片描述](Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/11841aceda8e43e8adfbeac278967917.png)\n\n  \n","slug":"Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries","published":1,"updated":"2023-08-18T07:18:00.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbziy000fmcux5ztd02z5","content":"<h1 id=\"本地IDEA上运行Spark的WordCount时报错\"><a href=\"#本地IDEA上运行Spark的WordCount时报错\" class=\"headerlink\" title=\"本地IDEA上运行Spark的WordCount时报错\"></a>本地IDEA上运行Spark的WordCount时报错</h1><h1 id=\"报错原因：缺少winutils-exe编译器\"><a href=\"#报错原因：缺少winutils-exe编译器\" class=\"headerlink\" title=\"报错原因：缺少winutils.exe编译器\"></a>报错原因：缺少winutils.exe编译器</h1><h1 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：.\"></a>解决方案：.</h1><ul>\n<li><h3 id=\"1-下载解压hadoop\"><a href=\"#1-下载解压hadoop\" class=\"headerlink\" title=\"1.下载解压hadoop\"></a>1.下载解压hadoop</h3><ul>\n<li>下载链接：<a href=\"https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4\">https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4</a><br>提取码：hes4</li>\n<li>官网上下载的hadoop中缺少winutils.exe这里我已经添加进去</li>\n</ul>\n</li>\n<li><h3 id=\"2-解压后复制解压路径，进去hadoop文件后再复制路径\"><a href=\"#2-解压后复制解压路径，进去hadoop文件后再复制路径\" class=\"headerlink\" title=\"2.解压后复制解压路径，进去hadoop文件后再复制路径\"></a>2.解压后复制解压路径，进去hadoop文件后再复制路径</h3></li>\n<li><h3 id=\"3-进入到IDEA中\"><a href=\"#3-进入到IDEA中\" class=\"headerlink\" title=\"3.进入到IDEA中\"></a>3.进入到IDEA中</h3></li>\n<li><img src=\"/posts/bc5825f3/2ea6f2e3bd9047b5b492e25b1ade73dd.png\" class=\"\" title=\"在这里插入图片描述\">\n<img src=\"/posts/bc5825f3/11841aceda8e43e8adfbeac278967917.png\" class=\"\" title=\"在这里插入图片描述\"></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"本地IDEA上运行Spark的WordCount时报错\"><a href=\"#本地IDEA上运行Spark的WordCount时报错\" class=\"headerlink\" title=\"本地IDEA上运行Spark的WordCount时报错\"></a>本地IDEA上运行Spark的WordCount时报错</h1><h1 id=\"报错原因：缺少winutils-exe编译器\"><a href=\"#报错原因：缺少winutils-exe编译器\" class=\"headerlink\" title=\"报错原因：缺少winutils.exe编译器\"></a>报错原因：缺少winutils.exe编译器</h1><h1 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：.\"></a>解决方案：.</h1><ul>\n<li><h3 id=\"1-下载解压hadoop\"><a href=\"#1-下载解压hadoop\" class=\"headerlink\" title=\"1.下载解压hadoop\"></a>1.下载解压hadoop</h3><ul>\n<li>下载链接：<a href=\"https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4\">https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4</a><br>提取码：hes4</li>\n<li>官网上下载的hadoop中缺少winutils.exe这里我已经添加进去</li>\n</ul>\n</li>\n<li><h3 id=\"2-解压后复制解压路径，进去hadoop文件后再复制路径\"><a href=\"#2-解压后复制解压路径，进去hadoop文件后再复制路径\" class=\"headerlink\" title=\"2.解压后复制解压路径，进去hadoop文件后再复制路径\"></a>2.解压后复制解压路径，进去hadoop文件后再复制路径</h3></li>\n<li><h3 id=\"3-进入到IDEA中\"><a href=\"#3-进入到IDEA中\" class=\"headerlink\" title=\"3.进入到IDEA中\"></a>3.进入到IDEA中</h3></li>\n<li><img src=\"/posts/bc5825f3/2ea6f2e3bd9047b5b492e25b1ade73dd.png\" class=\"\" title=\"在这里插入图片描述\">\n<img src=\"/posts/bc5825f3/11841aceda8e43e8adfbeac278967917.png\" class=\"\" title=\"在这里插入图片描述\"></li>\n</ul>\n"},{"title":"shell笔记","cover":"/images/shell笔记.jpg","abbrlink":"c3711ab9","date":"2023-08-16T03:42:52.000Z","_content":"\n\n\n# Shell编程\n\n## 第一部分 Shell简介\n\n- Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。\n\n  Shell 既是一种命令语言，又是一种程序设计语言。\n\n  Shell和Python类似也是一门解释性语言\n\n### 1、脚本开头\n\n- 指定脚本文件的Shell程序（解释器）\n\n```\n#!/bin/bash\n或\n#!/bin/sh\n```\n\n### 2、执行脚本\n\n- sh aaa.sh\n  - 常用\n- ./ aaa.sh\n  - 脚本文件需要可执行权限，并且需要在当前文件夹中\n- aaa.sh\n  - 脚本文件需要放入环境变量中\n\n## 第二部分 基础语法\n\n### 1、变量\n\n- Shell中每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。\n- 在默认情况下，不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串\n\n#### 1.1 定义变量\n\n- 定义变量的三种方式\n  - **注意等号两边不能有空格**\n  - 单引号中，即使是特殊字符也会识别成字符串，其作用如python中的 r\"\"\n\n```python\n# 不带引号\nvariable=value\n# 带双引号\nvariable=\"value\"\n# 带单引号\nvariable='value'\n```\n\n- 命名规范\n  - 变量名由数字、字母、下划线组成；\n  - 必须以字母或者下划线开头；\n  - 不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。\n\n#### 1.2 引用变量\n\n- 可以通过:$变量名、${变量名}。一般最好要加上{}\n\n```python\na=10\nb=${a}\necho ${b}\n# 输出10\n```\n\n- 不加{}，可能带来的影响\n\n```python\n# 加{}\nskill=\"java\"\necho \"I am good at ${skill}web\"\n输出:\"I am good at javaweb\"\n# 不加{}\nskill=\"java\"\necho \"I am good at $skillweb\"\n输出：I am good at \n# 变量名被识别为skillweb，由于无此变量，对应位置为空\n```\n\n#### 1.3 单引号和双引号的区别\n\n- 单引号' '包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。\n- 双引号\" \"包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。\n- 输出也可以不带引号，和双引号一样的作用\n\n```python\nskill=\"java\"\n# 双引号\necho \"I am good at ${skill}\"\n输出：I am good at java\n# 单引号\necho 'I am good at ${skill}'\n输出：I am good at ${skill}\n```\n\n#### 1.4 将命令执行结果赋值给变量\n\n- Shell 支持将命令的执行结果赋值给变量\n  - ``的方式\n  - $()的方式\n\n```python\n# 第一种\nvariable=`pwd`\n# 第二种\nvariable=$()\n```\n\n```python\n# 命令运行结果赋值给变量\necho `pwd`  # /root/shell_code\necho $(pwd)  # /root/shell_code\n# 删除变量，但是不能删除readonly关键字限制的变量（只读变量）\nunset age\necho ${age}\n输出为空\n```\n\n#### 1.5 传递参数\n\n- 在指定脚本的时候，可以在文件名后面跟上一些参数，以空格隔开\n- 获取参数\n  - ${0}：获取文件名（包含路径）\n  - ${1}：获取文件名后面第一个参数\n  - ${n}：获取文件名后面第n个参数\n\n```python\necho ${0}\necho ${1}\necho ${2}\necho ${3}\n# 执行命令：sh variable.sh name age weight\n# 输出如下\nvariable.sh\nname\nage\nweight\n```\n\n- 特殊字符处理参数说明\n\n  - $#获取参数的个数，但是不包括文件名\n  - $*获取的是一个参数拼接的字符串\n\n  - $@获取的是各个参数的字符串\n\n![](Shell笔记/image-20230728194954237.png)\n\n```python\necho $#\necho $*\necho $@\necho $$\n# 指定命令：sh variable.sh name age weight\n# 输出如下\n3\nname age weight\nname age weight\n15905\n```\n\n- $*和$@的区别\n  - 假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n```python\nfor i in \"$*\"\ndo\n echo ${i}\ndone\necho \"========\"\nfor i in \"$@\"\ndo\n echo ${i}\n# 输出如下\nname age weight\n========\nname\nage\nweight\n\n# 如果不带双引号，则$*和$@的结果一样\n# 因为为 for i in item1 item2 item3，i会分别为item1 item2 item3\nfor i in $*\ndo\n echo ${i}\ndone\necho \"========\"\nfor i in $@\ndo\n echo ${i}\ndone\n# 输出如下\nname\nage\nweight\n========\nname\nage\nweight\n```\n\n### 2、字符串\n\n- 字符串是 Shell 编程中最常用的数据类型之一\n\n  除了数字和字符串，也没有其他类型了\n\n#### 2.1 获取字符串长度\n\n- 格式：${#name}\n\n```python\n# 获取字符串的长度\nstr_1=\"I'm a good man\"\n输出：14\n```\n\n#### 2.2 字符串拼接\n\n- 将两个字符串并排放在一起就能实现拼接\n  - 注意：如果不加双引号，变量直接的多个空格会被识别为一个空格\n\n```python\nname=\"djx\"\nage=\"18\"\necho $name  $age\necho \"$name  $age\"\necho ${name}aaa${age}bbb\n# 输出\ndjx 18\ndjx  18\ndjxaaa18bbb\n```\n\n#### 2.3 字符串截取\n\n- Shell 截取字符串通常有两种方式：从指定位置开始截取和从指定字符（子字符串）开始截取。\n\n- 从**指定位置**开始截取\n\n  - 从左边开始计数 命令格式：`${name:start:length}`\n  - 从右边开始计数 命令格式：`${name:0-start:length}`\n\n  - **注意无论是从左开始计数还是从右开始计数，都会向右截取指定字符个数**\n  - 如果，指定字符个数超出，会返回从指定开始位置，到右边的所有字符\n\n```python\nurl=\"http://www.xxx.com/index.html\"\n# 从左开始向右截取\necho ${url:2:5}\necho ${url:2:100}\necho ${url:2}\n# 从右开始向右截取\necho ${url:0-2}\necho ${url:0-1:10}\necho ${url:0-5:2}\n# 输出结果：\ntp://\ntp://www.xxx.com/index.html\ntp://www.xxx.com/index.html\n\nml\nl\n.h\n```\n\n- 从指定的子字符串开始截取\n  - 截取子字符串的右边，命令格式：${name#*charts}\n    - *相当于正则中作用\n    - 不加*，会把指定的子字符也返回\n    - ##会匹配到最右边的charts\n    - 如果不需要忽略 chars 左边的字符，那么也可以不写*，\n      - 会返回父字符串\n\n  ```python\n  ${url#*/}\n  ${url##*/}\n  ${url#/}\n  # 输出\n  /www.xxx.com/index.html\n  index.html\n  http://www.xxx.com/index.html\n  ```\n\n  - 截取子字符串的左边，命令格式：`${name%charts*}`\n    - %%会匹配到最左边的charts\n\n  ```python\n  cho ${url%/*}\n  cho ${url%%/*}\n  cho ${url%%/}\n  \n  # 输出\n  http://www.xxx.com\n  http:\n  http://www.xxx.com/index.html\n  ```\n\n  - 可以如果想返回指定内容可以，多加一点匹配字符\n\n  ```python\n  cho ${url#*m/}\n  # 输出\n  index.html\n  ```\n\n![](Shell笔记/image-20230728204933405.png)\n\n### 3、数组\n\n- 定义数组的一般格式：arr=(1 2 3 4 \"a\" b c)\n  - 以空格隔开，元素都是字符串，带不带引号都可以\n  - 一般访问方式：${arr[0]}\n  - 获取全部的数组元素：${arr[*]}或${arr[@]}\n  - 数组切片：`${arr[*]:0:3}`\n  - 注意：${arr}，返回的也是第一个元素\n\n```python\n# 数组\narr=(1 2 3 4 5 \"c\" b a)\necho ${arr[0]} \necho ${arr[1]} \necho ${arr[2]} \necho ${arr[3]} \n# 切割数组\necho ${arr[*]:0:3}\n# 循环遍历数组\nfor i in ${arr[*]}\ndo\n echo $i\ndone\n\n#输出\n1\n2\n3\n4\n\n1 2 3\n\n1\n2\n3\n4\n5\nc\nb\na\n```\n\n- 获取数组的长度：`${#arr[*]}`\n  - 和字符串的方法一样\n\n### 4、关联数组\n\n- Shell支持关联数组，可以使用任意的字符串、或者整数作为下标来访问数组元素。\n\n  关联数组使用 declare 命令来声明\n\n- 语法格式1：`declare -A site=([\"google\"]=1 [\"taobao\"]=2)`\n  - 以键值对的形式存储\n  - 不同元素要用空格隔开\n- 语法格式2\n\n```python\ndeclare -A site\nsite[\"google\"]=1\nsite[\"google\"]=2\n```\n\n- 访问元素\n\n```python\necho ${site[\"google\"]}\n# 输出\n1\n```\n\n### 5、运算符\n\n- 注意：**条件表达式要放在方括号之间，并且与==等符号和[]之间要有空格**\n\n#### 5.1 算数运算符\n\n- 命令格式\n\n```python\n`expr $a + $b`\n# 或\n$((a+b))\n# 或\n$[a+b]\n```\n\n- 假定变量 a 为 10，变量 b 为 20\n\n  - *要加转义字符\n\n  - 注意：**条件表达式要放在方括号之间，并且与==和[]要有空格**，\n\n    例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\n![](Shell笔记/image-20230728211130724.png)\n\n- 反引号中：* 需要转义一下，不然会有正则中通配符的作用\n\n```python\na=10\nb=20\necho \"a*b=`expr $a \\* $b`\"\n#输出\n200\n```\n\n- ==、!=，结合if语句使用\n\n```python\n# == !=\nif [ $a == $b ];then\n echo \"a==b\"\nelif [ $a != $b ];then echo \"a!=b\"\nelse\n echo \"error\"\nfi\n# 输出\na!=b\n```\n\n#### 5.2 关系运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n\n![](Shell笔记/image-20230728213352217.png)\n\n- 使用 ((...)) 作为判断语句，大于和小于可以直接使用 > 、<、<=、>=等\n\n```\nif (($a>$b))\n```\n\n#### 5.3 布尔运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n\n![](Shell笔记/image-20230728213452920.png)\n\n#### 5.3 逻辑运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n  - 注意这里是  [[]]，两个中括号\n\n![](Shell笔记/image-20230728213715198.png)\n\n#### 5.4 字符串运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 \"abc\"，变量 b 为 \"efg\"\n\n![](Shell笔记/image-20230728214023978.png)\n\n### 6、echo命令\n\n- echo命令用于字符串的输出\n- 显示普通字符\n\n```\necho \"这是一个字符串\"\necho 这是一个字符串\n```\n\n- read，作用相当于python中的input\n  - 从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\n\n```python\nread name\necho \"${name} is test\"\n```\n\n- 不换行\n  - 用 -e 开启转义字符 \\c不换行的作用\n    - enable，开启\n  - 使用选项 -n\n    - no newline ，不换行\n\n```python\necho -e \"java shell python\\c\"\necho \"这是下一行\"\n\necho -n \"java shell python\"\necho \"这是下一行\"\n\n# 输出\njava shell python这是下一行\n```\n\n- 将显示内容重定向至文件\n\n```shell\necho \"This is a test\" > file\necho \"This is a test\" >> file\n```\n\n- help echo ，查看echo命令的帮助文档\n\n### 7、read命令\n\n- read命令：读取从键盘输入的数据\n\n- 命令格式：`read [-options] [variable]`\n  - options表示选项，如下表所示；variables表示用来存储数据的变量，可以有一个，也可以有多个。\n    - 多个变量值，默认空格间隔\n  - 注意：如果接收多个变量，要在一行内输入所有的变量值，不能换行，否则只能给第一个变量赋值\n  \n- read支持的选项\n\n  - -p prompt 提示\n\n  ```shell\n  read -p \"please input a variable\" varibale\n  ```\n\n  - -s silent 静默输入\n    - 不会把输入内容显示出来\n\n  ```\n  read -s password\n  ```\n\n  - -n number 指定读取字符的个数\n\n  ```shell\n  read -n 1 variable\n  # 输入：1234\n  # 输出：1\n  ```\n\n  - -t timeout 指定时间内输入\n\n  ```shell\n  read -t 10 variable\n  ```\n\n![](Shell笔记/image-20230729100834110.png)\n\n- 综合使用\n\n```shell\n#!/bin/sh\n\nif \n   # 第一次输入密码\n   read -s -t 20 -p \"please input your password: \" password1 && printf \"\\n\" &&   \n   # 第二次输入密码\n   read -s -t 20 -p \"please inout your password: \" password2 && printf \"\\n\" &&   \n   # 判断两次密码是否相同\n   [ ${password1} == ${password2} ]\nthen\n   echo \"valid password\"\nelse\n   echo \"invalid password\"\nfi\n```\n\n### 8、printf命令\n\n- 打印输出\n- 命令格式：`printf  format-string  [arguments]`\n  - format-string : 格式控制字符串\n  - arguments : 占位符参数\n  - %s 对应字符串参数，%c 对应字符参数，%d 对应整数参数，%f 对应浮点型参数\n  - printf内的特殊字符可以发挥作用\n\n```shell\n#!/bin/sh\nname=\"djx\"\nage=18\ngender=m\nprintf \"I'am %s,age is %d,gender is %c \\n\" $name $age $gender\n# 输出\nI'am djx,age is 18,gender is m\n```\n\n- 控制宽度，并保留指定位数的小数\n  - -10s：指定的该字符宽度为10，少则全部输出，多则空格补齐\n    - 任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n  - 带-表示左对齐\n  - 不带-表示右对齐\n  - %-10.2f: 表示保留两位小数，宽度为10，并左对齐\n\n```shell\nname=\"djx\"\nweight=102.22222\nprintf \"%-10s is %-10.2f!\\n\" $name $weight\nprintf \"%10s is %10.2f!\\n\" $name $weight\n# 输出\ndjx        is 102.22     !\n       djx is     102.22!\n```\n\n- printf转义序列\n\n![](Shell笔记/image-20230730151025266.png)\n\n### 9、test命令\n\n- test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n- 作为判断条件condition\n\n#### 9.1 数值判断\n\n![](Shell笔记/image-20230730151208807.png)\n\n```shell\nnum1=10\nnum2=20\nif test $num1 -eq $num2  \n# 或 if [ $num1 == $num2 ] 或 if (($num1==$num2)) 或 if [ $num1 -eq $num2 ]\nthen\n echo \"num1=num2\"\nelse\n echo \"num1!=num2\"\nfi\n# 输出\nnum1!=num2\n```\n\n#### 9.2 字符串判断\n\n![](Shell笔记/image-20230730151543568.png)\n\n```shell\n#!/bin/sh\nstr1=\"abc\"\nstr2=\"abca\"\nif test $str1 = $ str2 && -z $str1\n# 或 if [ -z $str1]\nthen \n ehco \"str1=str2 and str1 not is zore\"\nelse\n echo \"str1!=str2 or str1 is zore\"\nfi\n# 输出\nstr1!=str2 and str1 is zore\n```\n\n#### 9.3 文件判断\n\n![](Shell笔记/image-20230730152240408.png)\n\n```shell\nif test -e \"/root/shell_code/test.sh\"\n# 或 if [ -e \"/root/shell_code/test.sh\"]\nthen\n echo \"file is exist\"\nelse\n echo \"file not is exist\"\nfi\n# 输出\nfile is exist\n```\n\n\n\n## 第三部分 流程控制\n\n### 1、if-else\n\n- 格式\n\n![](Shell笔记/image-20230728215607642.png)\n\n- if [] ，可以使用 -gt，-lt，-ge，-le\n\n![](Shell笔记/image-20230728220325735.png)\n\n- if (())，可以使用 >，<， >=，<=，==，(())，不需要在意空格\n\n![](Shell笔记/image-20230728220333688.png)\n\n- 写成一行（适用于终端命令提示符）\n\n![](Shell笔记/image-20230728221059362.png)\n\n### 2、for循环\n\n- 可以结合数组使用\n\n- 格式\n\n![](Shell笔记/image-20230728220405690.png)\n\n#### 2.2 sep生成序列\n\n- `seq 1 1 10` 中，各个参数的含义如下：\n  - `1`：起始值，表示序列的开始值为 1。\n  - `1`：递增步长，表示每次递增 1，即生成的序列为连续的整数。\n  - `10`：结束值，表示序列的结束值为 10。\n\n```sh\nfor i in `seq 1 10`\ndo\n for j in `seq 1 $i`\n do\n  echo -ne \"$j * $i = `expr $i \\* $j`\\t\"\n done\n  echo\ndone\n```\n\n### 3、while循环\n\n- while 循环用于不断执行一系列命令，也用于从输入文件中读取数据\n\n- 格式\n\n![](Shell笔记/image-20230728220459641.png)\n\n- 下例，使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n![](Shell笔记/image-20230728220538400.png)\n\n```python\n#!/bin/bash\nnum=1\nwhile (($num <= 5))\ndo\n echo $num\n let \"num++\"\ndone\n```\n\n- 循环输入\n\n```shell\necho \"按下CTRL+D停止\"\nwhile read item\ndo\n echo \"你输入的是：$item\"\ndone\n# 输出\n按下CTRL+D停止\nw\n你输入的是：w\nd\n你输入的是：d\nc\n你输入的是：c\nd\n你输入的是：d\n```\n\n- 无限循环\n\n```shell\nwhile :\ndo\ndone\n# or\nwhile ture\ndo\ndone\n# or\nfor ((;;))\n```\n\n### 4、until循环\n\n- until 循环执行一系列命令直至条件为 true 时停止\n\n- 语法格式\n  - condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，为true跳出循环\n\n![](Shell笔记/image-20230730153053695.png)\n\n### 5、多分枝选择结构case...esac\n\n- 与 switch ... case 语句类似，只不过每个 case 分支用右圆括号开始，;;表示执行结束\n- 语法格式\n\n![](Shell笔记/image-20230730153345945.png)\n\n```shell\nwhile read item\ndo\n case $item in\n  1)\n  echo \"输出的是：1\"  ;;\n  2)\n  echo \"输入的是：2\"  ;;\n esac\ndone\n# 输出\n输入的是：2\n2\n输入的是：2\n1\n输出的是：1\n```\n\n### 6、break、continue\n\n- break，跳出循环\n- continue，跳过本次循环，进入下一次循环\n\n### 7、99乘法表\n\n#### 7.1 使用seq命令\n\n```sh\nfor i in `seq`\ndo\n for\n do\n  multi=`expr ${j} \\* ${i}`\n  echo -e \"${j}*${i}=${multi}\\t\\c\"\n done\n echo\ndone\n```\n\n#### 7.2 使用数组\n\n```shell\narr=(1 2 3 4 5 6 7 8 9)\n\nfor i in ${arr[*]}\ndo\n  for j in ${arr[*]:0:${i}}\n  do\n    multi=`expr ${j} \\* ${i}`\n    echo -e \"${j}*${i}=${multi}\\t\\c\"  \n  done\n  echo \"\"\ndone\n```\n\n#### 7.3 使用((;;))\n\n```sh\nfor ((i=1;i<=9;i++))\ndo\n  for ((j=1;j<=i;j++))\n  do\n    multi=`expr ${j} \\* ${i}`\n    echo -e \"${j}*${i}=${multi}\\t\\c\"  \n  done\n  echo \"\"\ndone\n```\n\n## 第四部分 Shell函数\n\n### 1、定义格式\n\n-  参数说明：\n  - 1、可以带function funname() 定义，也可以直接funname() 定义,不带任何参数。\n  - 2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后只能跟数值n(0-255)\n\n![](Shell笔记/image-20230730153913576.png)\n\n### 2、调用函数\n\n- funname\n\n![](Shell笔记/image-20230730154054651.png)\n\n### 3、获取返回值\n\n- 在调用函数后，`$？`可以获取该函数的返回值\n\n```shell\ndemo(){\n\n echo \"函数执行\"\n num1=2\n num2=3\n return $[num1+num2]}\ndemo\necho $?\n# 输出\n5\n```\n\n### 4、函数参数\n\n- 和脚本传参一样，只不过获取参数时 $0 还是文件名\n  - 注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数\n\n```shell\ndemo2(){\n\n echo \"demo2函数执行\"\n echo \"第一个参数$0\"\n echo \"第二个参数$1\"\n echo \"第10个参数${10}\"\n echo \"参数个数：$#\"\n}\ndemo2 1 2 3 4 5 6 7 8 9 10\n# 输出\ndemo2函数执行\n第一个参数func.sh\n第二个参数1\n第10个参数10\n参数个数：10\n```\n\n## 第五部分 输入/输出重定向\n\n- 一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。\n- **文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输（STDERR）。**\n\n- 重定向命令列表如下\n\n![](Shell笔记/image-20230730160038334.png)\n\n### 1、输入重定向\n\n-  输入重定向 \n  -  注意：**输入重定向不会输出文件名，因为它仅仅知道从标准输入读取内容**\n\n```shell\n[root@master shell_code]# wc -l < while.sh \n13  \n[root@master shell_code]# wc -l while.sh \n13 while.sh\n```\n\n### 2、输出重定向\n\n- 会把原本输出在显示端的信息，写入指定文件中\n  - `>` 覆盖重写\n  - `>>` 追加写\n\n### 3、输入重定向和输出重定向连用\n\n- 把 while.sh 的行数，写入file2\n\n```shell\nwc -l < while.sh > output\n# 文件内容\n13\n\nwc -l while.sh >> output\n# 文件内容\n13 while.sh\n```\n\n### 4、深入重定向\n\n- 标准(standard)输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n\n  标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n\n  标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。\n\n- stderr 重定向到 file\n\n  -  错误信息写入file文件\n\n```sh\ncommand 2> file\ncommand 2>> file\n```\n\n-  stdout 和 stderr 合并后重定向到 file\n\n```\ncommend > file 2>&1\ncommend >> file 2>&1\n```\n\n- stdin 和 stdout 都重定向\n  - 把file1的行数，写入file2\n\n```\nwc -l < file1 > file2\nwc -l < file1 >> file2\n```\n\n### 5、/dev/null文件\n\n- 如果希望执行某个命令，但又不希望在屏幕上显示输出结果，\n\n  那么可以将输出重定向到 /dev/null\n\n```\ncommand > /dev/null\n```\n\n- /dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到\"禁止输出\"的效果。\n- 屏蔽 stdout 和 stderr\n\n```\ncommand > /dev/null 2>$1\n```\n\n","source":"_posts/Shell笔记.md","raw":"---\ntitle: shell笔记\ntags: Linux\ncover: /images/shell笔记.jpg\ncategories: Linux\nabbrlink: c3711ab9\ndate: 2023-08-16 11:42:52\n---\n\n\n\n# Shell编程\n\n## 第一部分 Shell简介\n\n- Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。\n\n  Shell 既是一种命令语言，又是一种程序设计语言。\n\n  Shell和Python类似也是一门解释性语言\n\n### 1、脚本开头\n\n- 指定脚本文件的Shell程序（解释器）\n\n```\n#!/bin/bash\n或\n#!/bin/sh\n```\n\n### 2、执行脚本\n\n- sh aaa.sh\n  - 常用\n- ./ aaa.sh\n  - 脚本文件需要可执行权限，并且需要在当前文件夹中\n- aaa.sh\n  - 脚本文件需要放入环境变量中\n\n## 第二部分 基础语法\n\n### 1、变量\n\n- Shell中每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。\n- 在默认情况下，不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串\n\n#### 1.1 定义变量\n\n- 定义变量的三种方式\n  - **注意等号两边不能有空格**\n  - 单引号中，即使是特殊字符也会识别成字符串，其作用如python中的 r\"\"\n\n```python\n# 不带引号\nvariable=value\n# 带双引号\nvariable=\"value\"\n# 带单引号\nvariable='value'\n```\n\n- 命名规范\n  - 变量名由数字、字母、下划线组成；\n  - 必须以字母或者下划线开头；\n  - 不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。\n\n#### 1.2 引用变量\n\n- 可以通过:$变量名、${变量名}。一般最好要加上{}\n\n```python\na=10\nb=${a}\necho ${b}\n# 输出10\n```\n\n- 不加{}，可能带来的影响\n\n```python\n# 加{}\nskill=\"java\"\necho \"I am good at ${skill}web\"\n输出:\"I am good at javaweb\"\n# 不加{}\nskill=\"java\"\necho \"I am good at $skillweb\"\n输出：I am good at \n# 变量名被识别为skillweb，由于无此变量，对应位置为空\n```\n\n#### 1.3 单引号和双引号的区别\n\n- 单引号' '包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。\n- 双引号\" \"包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。\n- 输出也可以不带引号，和双引号一样的作用\n\n```python\nskill=\"java\"\n# 双引号\necho \"I am good at ${skill}\"\n输出：I am good at java\n# 单引号\necho 'I am good at ${skill}'\n输出：I am good at ${skill}\n```\n\n#### 1.4 将命令执行结果赋值给变量\n\n- Shell 支持将命令的执行结果赋值给变量\n  - ``的方式\n  - $()的方式\n\n```python\n# 第一种\nvariable=`pwd`\n# 第二种\nvariable=$()\n```\n\n```python\n# 命令运行结果赋值给变量\necho `pwd`  # /root/shell_code\necho $(pwd)  # /root/shell_code\n# 删除变量，但是不能删除readonly关键字限制的变量（只读变量）\nunset age\necho ${age}\n输出为空\n```\n\n#### 1.5 传递参数\n\n- 在指定脚本的时候，可以在文件名后面跟上一些参数，以空格隔开\n- 获取参数\n  - ${0}：获取文件名（包含路径）\n  - ${1}：获取文件名后面第一个参数\n  - ${n}：获取文件名后面第n个参数\n\n```python\necho ${0}\necho ${1}\necho ${2}\necho ${3}\n# 执行命令：sh variable.sh name age weight\n# 输出如下\nvariable.sh\nname\nage\nweight\n```\n\n- 特殊字符处理参数说明\n\n  - $#获取参数的个数，但是不包括文件名\n  - $*获取的是一个参数拼接的字符串\n\n  - $@获取的是各个参数的字符串\n\n![](Shell笔记/image-20230728194954237.png)\n\n```python\necho $#\necho $*\necho $@\necho $$\n# 指定命令：sh variable.sh name age weight\n# 输出如下\n3\nname age weight\nname age weight\n15905\n```\n\n- $*和$@的区别\n  - 假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n```python\nfor i in \"$*\"\ndo\n echo ${i}\ndone\necho \"========\"\nfor i in \"$@\"\ndo\n echo ${i}\n# 输出如下\nname age weight\n========\nname\nage\nweight\n\n# 如果不带双引号，则$*和$@的结果一样\n# 因为为 for i in item1 item2 item3，i会分别为item1 item2 item3\nfor i in $*\ndo\n echo ${i}\ndone\necho \"========\"\nfor i in $@\ndo\n echo ${i}\ndone\n# 输出如下\nname\nage\nweight\n========\nname\nage\nweight\n```\n\n### 2、字符串\n\n- 字符串是 Shell 编程中最常用的数据类型之一\n\n  除了数字和字符串，也没有其他类型了\n\n#### 2.1 获取字符串长度\n\n- 格式：${#name}\n\n```python\n# 获取字符串的长度\nstr_1=\"I'm a good man\"\n输出：14\n```\n\n#### 2.2 字符串拼接\n\n- 将两个字符串并排放在一起就能实现拼接\n  - 注意：如果不加双引号，变量直接的多个空格会被识别为一个空格\n\n```python\nname=\"djx\"\nage=\"18\"\necho $name  $age\necho \"$name  $age\"\necho ${name}aaa${age}bbb\n# 输出\ndjx 18\ndjx  18\ndjxaaa18bbb\n```\n\n#### 2.3 字符串截取\n\n- Shell 截取字符串通常有两种方式：从指定位置开始截取和从指定字符（子字符串）开始截取。\n\n- 从**指定位置**开始截取\n\n  - 从左边开始计数 命令格式：`${name:start:length}`\n  - 从右边开始计数 命令格式：`${name:0-start:length}`\n\n  - **注意无论是从左开始计数还是从右开始计数，都会向右截取指定字符个数**\n  - 如果，指定字符个数超出，会返回从指定开始位置，到右边的所有字符\n\n```python\nurl=\"http://www.xxx.com/index.html\"\n# 从左开始向右截取\necho ${url:2:5}\necho ${url:2:100}\necho ${url:2}\n# 从右开始向右截取\necho ${url:0-2}\necho ${url:0-1:10}\necho ${url:0-5:2}\n# 输出结果：\ntp://\ntp://www.xxx.com/index.html\ntp://www.xxx.com/index.html\n\nml\nl\n.h\n```\n\n- 从指定的子字符串开始截取\n  - 截取子字符串的右边，命令格式：${name#*charts}\n    - *相当于正则中作用\n    - 不加*，会把指定的子字符也返回\n    - ##会匹配到最右边的charts\n    - 如果不需要忽略 chars 左边的字符，那么也可以不写*，\n      - 会返回父字符串\n\n  ```python\n  ${url#*/}\n  ${url##*/}\n  ${url#/}\n  # 输出\n  /www.xxx.com/index.html\n  index.html\n  http://www.xxx.com/index.html\n  ```\n\n  - 截取子字符串的左边，命令格式：`${name%charts*}`\n    - %%会匹配到最左边的charts\n\n  ```python\n  cho ${url%/*}\n  cho ${url%%/*}\n  cho ${url%%/}\n  \n  # 输出\n  http://www.xxx.com\n  http:\n  http://www.xxx.com/index.html\n  ```\n\n  - 可以如果想返回指定内容可以，多加一点匹配字符\n\n  ```python\n  cho ${url#*m/}\n  # 输出\n  index.html\n  ```\n\n![](Shell笔记/image-20230728204933405.png)\n\n### 3、数组\n\n- 定义数组的一般格式：arr=(1 2 3 4 \"a\" b c)\n  - 以空格隔开，元素都是字符串，带不带引号都可以\n  - 一般访问方式：${arr[0]}\n  - 获取全部的数组元素：${arr[*]}或${arr[@]}\n  - 数组切片：`${arr[*]:0:3}`\n  - 注意：${arr}，返回的也是第一个元素\n\n```python\n# 数组\narr=(1 2 3 4 5 \"c\" b a)\necho ${arr[0]} \necho ${arr[1]} \necho ${arr[2]} \necho ${arr[3]} \n# 切割数组\necho ${arr[*]:0:3}\n# 循环遍历数组\nfor i in ${arr[*]}\ndo\n echo $i\ndone\n\n#输出\n1\n2\n3\n4\n\n1 2 3\n\n1\n2\n3\n4\n5\nc\nb\na\n```\n\n- 获取数组的长度：`${#arr[*]}`\n  - 和字符串的方法一样\n\n### 4、关联数组\n\n- Shell支持关联数组，可以使用任意的字符串、或者整数作为下标来访问数组元素。\n\n  关联数组使用 declare 命令来声明\n\n- 语法格式1：`declare -A site=([\"google\"]=1 [\"taobao\"]=2)`\n  - 以键值对的形式存储\n  - 不同元素要用空格隔开\n- 语法格式2\n\n```python\ndeclare -A site\nsite[\"google\"]=1\nsite[\"google\"]=2\n```\n\n- 访问元素\n\n```python\necho ${site[\"google\"]}\n# 输出\n1\n```\n\n### 5、运算符\n\n- 注意：**条件表达式要放在方括号之间，并且与==等符号和[]之间要有空格**\n\n#### 5.1 算数运算符\n\n- 命令格式\n\n```python\n`expr $a + $b`\n# 或\n$((a+b))\n# 或\n$[a+b]\n```\n\n- 假定变量 a 为 10，变量 b 为 20\n\n  - *要加转义字符\n\n  - 注意：**条件表达式要放在方括号之间，并且与==和[]要有空格**，\n\n    例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\n![](Shell笔记/image-20230728211130724.png)\n\n- 反引号中：* 需要转义一下，不然会有正则中通配符的作用\n\n```python\na=10\nb=20\necho \"a*b=`expr $a \\* $b`\"\n#输出\n200\n```\n\n- ==、!=，结合if语句使用\n\n```python\n# == !=\nif [ $a == $b ];then\n echo \"a==b\"\nelif [ $a != $b ];then echo \"a!=b\"\nelse\n echo \"error\"\nfi\n# 输出\na!=b\n```\n\n#### 5.2 关系运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n\n![](Shell笔记/image-20230728213352217.png)\n\n- 使用 ((...)) 作为判断语句，大于和小于可以直接使用 > 、<、<=、>=等\n\n```\nif (($a>$b))\n```\n\n#### 5.3 布尔运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n\n![](Shell笔记/image-20230728213452920.png)\n\n#### 5.3 逻辑运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 10，变量 b 为 20\n  - 注意这里是  [[]]，两个中括号\n\n![](Shell笔记/image-20230728213715198.png)\n\n#### 5.4 字符串运算符\n\n- 一般与if语句连用\n\n- 假定变量 a 为 \"abc\"，变量 b 为 \"efg\"\n\n![](Shell笔记/image-20230728214023978.png)\n\n### 6、echo命令\n\n- echo命令用于字符串的输出\n- 显示普通字符\n\n```\necho \"这是一个字符串\"\necho 这是一个字符串\n```\n\n- read，作用相当于python中的input\n  - 从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\n\n```python\nread name\necho \"${name} is test\"\n```\n\n- 不换行\n  - 用 -e 开启转义字符 \\c不换行的作用\n    - enable，开启\n  - 使用选项 -n\n    - no newline ，不换行\n\n```python\necho -e \"java shell python\\c\"\necho \"这是下一行\"\n\necho -n \"java shell python\"\necho \"这是下一行\"\n\n# 输出\njava shell python这是下一行\n```\n\n- 将显示内容重定向至文件\n\n```shell\necho \"This is a test\" > file\necho \"This is a test\" >> file\n```\n\n- help echo ，查看echo命令的帮助文档\n\n### 7、read命令\n\n- read命令：读取从键盘输入的数据\n\n- 命令格式：`read [-options] [variable]`\n  - options表示选项，如下表所示；variables表示用来存储数据的变量，可以有一个，也可以有多个。\n    - 多个变量值，默认空格间隔\n  - 注意：如果接收多个变量，要在一行内输入所有的变量值，不能换行，否则只能给第一个变量赋值\n  \n- read支持的选项\n\n  - -p prompt 提示\n\n  ```shell\n  read -p \"please input a variable\" varibale\n  ```\n\n  - -s silent 静默输入\n    - 不会把输入内容显示出来\n\n  ```\n  read -s password\n  ```\n\n  - -n number 指定读取字符的个数\n\n  ```shell\n  read -n 1 variable\n  # 输入：1234\n  # 输出：1\n  ```\n\n  - -t timeout 指定时间内输入\n\n  ```shell\n  read -t 10 variable\n  ```\n\n![](Shell笔记/image-20230729100834110.png)\n\n- 综合使用\n\n```shell\n#!/bin/sh\n\nif \n   # 第一次输入密码\n   read -s -t 20 -p \"please input your password: \" password1 && printf \"\\n\" &&   \n   # 第二次输入密码\n   read -s -t 20 -p \"please inout your password: \" password2 && printf \"\\n\" &&   \n   # 判断两次密码是否相同\n   [ ${password1} == ${password2} ]\nthen\n   echo \"valid password\"\nelse\n   echo \"invalid password\"\nfi\n```\n\n### 8、printf命令\n\n- 打印输出\n- 命令格式：`printf  format-string  [arguments]`\n  - format-string : 格式控制字符串\n  - arguments : 占位符参数\n  - %s 对应字符串参数，%c 对应字符参数，%d 对应整数参数，%f 对应浮点型参数\n  - printf内的特殊字符可以发挥作用\n\n```shell\n#!/bin/sh\nname=\"djx\"\nage=18\ngender=m\nprintf \"I'am %s,age is %d,gender is %c \\n\" $name $age $gender\n# 输出\nI'am djx,age is 18,gender is m\n```\n\n- 控制宽度，并保留指定位数的小数\n  - -10s：指定的该字符宽度为10，少则全部输出，多则空格补齐\n    - 任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n  - 带-表示左对齐\n  - 不带-表示右对齐\n  - %-10.2f: 表示保留两位小数，宽度为10，并左对齐\n\n```shell\nname=\"djx\"\nweight=102.22222\nprintf \"%-10s is %-10.2f!\\n\" $name $weight\nprintf \"%10s is %10.2f!\\n\" $name $weight\n# 输出\ndjx        is 102.22     !\n       djx is     102.22!\n```\n\n- printf转义序列\n\n![](Shell笔记/image-20230730151025266.png)\n\n### 9、test命令\n\n- test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n- 作为判断条件condition\n\n#### 9.1 数值判断\n\n![](Shell笔记/image-20230730151208807.png)\n\n```shell\nnum1=10\nnum2=20\nif test $num1 -eq $num2  \n# 或 if [ $num1 == $num2 ] 或 if (($num1==$num2)) 或 if [ $num1 -eq $num2 ]\nthen\n echo \"num1=num2\"\nelse\n echo \"num1!=num2\"\nfi\n# 输出\nnum1!=num2\n```\n\n#### 9.2 字符串判断\n\n![](Shell笔记/image-20230730151543568.png)\n\n```shell\n#!/bin/sh\nstr1=\"abc\"\nstr2=\"abca\"\nif test $str1 = $ str2 && -z $str1\n# 或 if [ -z $str1]\nthen \n ehco \"str1=str2 and str1 not is zore\"\nelse\n echo \"str1!=str2 or str1 is zore\"\nfi\n# 输出\nstr1!=str2 and str1 is zore\n```\n\n#### 9.3 文件判断\n\n![](Shell笔记/image-20230730152240408.png)\n\n```shell\nif test -e \"/root/shell_code/test.sh\"\n# 或 if [ -e \"/root/shell_code/test.sh\"]\nthen\n echo \"file is exist\"\nelse\n echo \"file not is exist\"\nfi\n# 输出\nfile is exist\n```\n\n\n\n## 第三部分 流程控制\n\n### 1、if-else\n\n- 格式\n\n![](Shell笔记/image-20230728215607642.png)\n\n- if [] ，可以使用 -gt，-lt，-ge，-le\n\n![](Shell笔记/image-20230728220325735.png)\n\n- if (())，可以使用 >，<， >=，<=，==，(())，不需要在意空格\n\n![](Shell笔记/image-20230728220333688.png)\n\n- 写成一行（适用于终端命令提示符）\n\n![](Shell笔记/image-20230728221059362.png)\n\n### 2、for循环\n\n- 可以结合数组使用\n\n- 格式\n\n![](Shell笔记/image-20230728220405690.png)\n\n#### 2.2 sep生成序列\n\n- `seq 1 1 10` 中，各个参数的含义如下：\n  - `1`：起始值，表示序列的开始值为 1。\n  - `1`：递增步长，表示每次递增 1，即生成的序列为连续的整数。\n  - `10`：结束值，表示序列的结束值为 10。\n\n```sh\nfor i in `seq 1 10`\ndo\n for j in `seq 1 $i`\n do\n  echo -ne \"$j * $i = `expr $i \\* $j`\\t\"\n done\n  echo\ndone\n```\n\n### 3、while循环\n\n- while 循环用于不断执行一系列命令，也用于从输入文件中读取数据\n\n- 格式\n\n![](Shell笔记/image-20230728220459641.png)\n\n- 下例，使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n![](Shell笔记/image-20230728220538400.png)\n\n```python\n#!/bin/bash\nnum=1\nwhile (($num <= 5))\ndo\n echo $num\n let \"num++\"\ndone\n```\n\n- 循环输入\n\n```shell\necho \"按下CTRL+D停止\"\nwhile read item\ndo\n echo \"你输入的是：$item\"\ndone\n# 输出\n按下CTRL+D停止\nw\n你输入的是：w\nd\n你输入的是：d\nc\n你输入的是：c\nd\n你输入的是：d\n```\n\n- 无限循环\n\n```shell\nwhile :\ndo\ndone\n# or\nwhile ture\ndo\ndone\n# or\nfor ((;;))\n```\n\n### 4、until循环\n\n- until 循环执行一系列命令直至条件为 true 时停止\n\n- 语法格式\n  - condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，为true跳出循环\n\n![](Shell笔记/image-20230730153053695.png)\n\n### 5、多分枝选择结构case...esac\n\n- 与 switch ... case 语句类似，只不过每个 case 分支用右圆括号开始，;;表示执行结束\n- 语法格式\n\n![](Shell笔记/image-20230730153345945.png)\n\n```shell\nwhile read item\ndo\n case $item in\n  1)\n  echo \"输出的是：1\"  ;;\n  2)\n  echo \"输入的是：2\"  ;;\n esac\ndone\n# 输出\n输入的是：2\n2\n输入的是：2\n1\n输出的是：1\n```\n\n### 6、break、continue\n\n- break，跳出循环\n- continue，跳过本次循环，进入下一次循环\n\n### 7、99乘法表\n\n#### 7.1 使用seq命令\n\n```sh\nfor i in `seq`\ndo\n for\n do\n  multi=`expr ${j} \\* ${i}`\n  echo -e \"${j}*${i}=${multi}\\t\\c\"\n done\n echo\ndone\n```\n\n#### 7.2 使用数组\n\n```shell\narr=(1 2 3 4 5 6 7 8 9)\n\nfor i in ${arr[*]}\ndo\n  for j in ${arr[*]:0:${i}}\n  do\n    multi=`expr ${j} \\* ${i}`\n    echo -e \"${j}*${i}=${multi}\\t\\c\"  \n  done\n  echo \"\"\ndone\n```\n\n#### 7.3 使用((;;))\n\n```sh\nfor ((i=1;i<=9;i++))\ndo\n  for ((j=1;j<=i;j++))\n  do\n    multi=`expr ${j} \\* ${i}`\n    echo -e \"${j}*${i}=${multi}\\t\\c\"  \n  done\n  echo \"\"\ndone\n```\n\n## 第四部分 Shell函数\n\n### 1、定义格式\n\n-  参数说明：\n  - 1、可以带function funname() 定义，也可以直接funname() 定义,不带任何参数。\n  - 2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后只能跟数值n(0-255)\n\n![](Shell笔记/image-20230730153913576.png)\n\n### 2、调用函数\n\n- funname\n\n![](Shell笔记/image-20230730154054651.png)\n\n### 3、获取返回值\n\n- 在调用函数后，`$？`可以获取该函数的返回值\n\n```shell\ndemo(){\n\n echo \"函数执行\"\n num1=2\n num2=3\n return $[num1+num2]}\ndemo\necho $?\n# 输出\n5\n```\n\n### 4、函数参数\n\n- 和脚本传参一样，只不过获取参数时 $0 还是文件名\n  - 注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数\n\n```shell\ndemo2(){\n\n echo \"demo2函数执行\"\n echo \"第一个参数$0\"\n echo \"第二个参数$1\"\n echo \"第10个参数${10}\"\n echo \"参数个数：$#\"\n}\ndemo2 1 2 3 4 5 6 7 8 9 10\n# 输出\ndemo2函数执行\n第一个参数func.sh\n第二个参数1\n第10个参数10\n参数个数：10\n```\n\n## 第五部分 输入/输出重定向\n\n- 一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。\n- **文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输（STDERR）。**\n\n- 重定向命令列表如下\n\n![](Shell笔记/image-20230730160038334.png)\n\n### 1、输入重定向\n\n-  输入重定向 \n  -  注意：**输入重定向不会输出文件名，因为它仅仅知道从标准输入读取内容**\n\n```shell\n[root@master shell_code]# wc -l < while.sh \n13  \n[root@master shell_code]# wc -l while.sh \n13 while.sh\n```\n\n### 2、输出重定向\n\n- 会把原本输出在显示端的信息，写入指定文件中\n  - `>` 覆盖重写\n  - `>>` 追加写\n\n### 3、输入重定向和输出重定向连用\n\n- 把 while.sh 的行数，写入file2\n\n```shell\nwc -l < while.sh > output\n# 文件内容\n13\n\nwc -l while.sh >> output\n# 文件内容\n13 while.sh\n```\n\n### 4、深入重定向\n\n- 标准(standard)输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n\n  标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n\n  标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。\n\n- stderr 重定向到 file\n\n  -  错误信息写入file文件\n\n```sh\ncommand 2> file\ncommand 2>> file\n```\n\n-  stdout 和 stderr 合并后重定向到 file\n\n```\ncommend > file 2>&1\ncommend >> file 2>&1\n```\n\n- stdin 和 stdout 都重定向\n  - 把file1的行数，写入file2\n\n```\nwc -l < file1 > file2\nwc -l < file1 >> file2\n```\n\n### 5、/dev/null文件\n\n- 如果希望执行某个命令，但又不希望在屏幕上显示输出结果，\n\n  那么可以将输出重定向到 /dev/null\n\n```\ncommand > /dev/null\n```\n\n- /dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到\"禁止输出\"的效果。\n- 屏蔽 stdout 和 stderr\n\n```\ncommand > /dev/null 2>$1\n```\n\n","slug":"Shell笔记","published":1,"updated":"2023-08-17T01:48:40.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbziz000hmcux0l9shrid","content":"<h1 id=\"Shell编程\"><a href=\"#Shell编程\" class=\"headerlink\" title=\"Shell编程\"></a>Shell编程</h1><h2 id=\"第一部分-Shell简介\"><a href=\"#第一部分-Shell简介\" class=\"headerlink\" title=\"第一部分 Shell简介\"></a>第一部分 Shell简介</h2><ul>\n<li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</p>\n<p>Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell和Python类似也是一门解释性语言</p>\n</li>\n</ul>\n<h3 id=\"1、脚本开头\"><a href=\"#1、脚本开头\" class=\"headerlink\" title=\"1、脚本开头\"></a>1、脚本开头</h3><ul>\n<li>指定脚本文件的Shell程序（解释器）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">或</span><br><span class=\"line\">#!/bin/sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、执行脚本\"><a href=\"#2、执行脚本\" class=\"headerlink\" title=\"2、执行脚本\"></a>2、执行脚本</h3><ul>\n<li>sh aaa.sh<ul>\n<li>常用</li>\n</ul>\n</li>\n<li>.&#x2F; aaa.sh<ul>\n<li>脚本文件需要可执行权限，并且需要在当前文件夹中</li>\n</ul>\n</li>\n<li>aaa.sh<ul>\n<li>脚本文件需要放入环境变量中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二部分-基础语法\"><a href=\"#第二部分-基础语法\" class=\"headerlink\" title=\"第二部分 基础语法\"></a>第二部分 基础语法</h2><h3 id=\"1、变量\"><a href=\"#1、变量\" class=\"headerlink\" title=\"1、变量\"></a>1、变量</h3><ul>\n<li>Shell中每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。</li>\n<li>在默认情况下，不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串</li>\n</ul>\n<h4 id=\"1-1-定义变量\"><a href=\"#1-1-定义变量\" class=\"headerlink\" title=\"1.1 定义变量\"></a>1.1 定义变量</h4><ul>\n<li>定义变量的三种方式<ul>\n<li><strong>注意等号两边不能有空格</strong></li>\n<li>单引号中，即使是特殊字符也会识别成字符串，其作用如python中的 r””</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不带引号</span></span><br><span class=\"line\">variable=value</span><br><span class=\"line\"><span class=\"comment\"># 带双引号</span></span><br><span class=\"line\">variable=<span class=\"string\">&quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 带单引号</span></span><br><span class=\"line\">variable=<span class=\"string\">&#x27;value&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>命名规范<ul>\n<li>变量名由数字、字母、下划线组成；</li>\n<li>必须以字母或者下划线开头；</li>\n<li>不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-2-引用变量\"><a href=\"#1-2-引用变量\" class=\"headerlink\" title=\"1.2 引用变量\"></a>1.2 引用变量</h4><ul>\n<li>可以通过:$变量名、${变量名}。一般最好要加上{}</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">10</span></span><br><span class=\"line\">b=$&#123;a&#125;</span><br><span class=\"line\">echo $&#123;b&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不加{}，可能带来的影响</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加&#123;&#125;</span></span><br><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $&#123;skill&#125;web&quot;</span></span><br><span class=\"line\">输出:<span class=\"string\">&quot;I am good at javaweb&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 不加&#123;&#125;</span></span><br><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $skillweb&quot;</span></span><br><span class=\"line\">输出：I am good at </span><br><span class=\"line\"><span class=\"comment\"># 变量名被识别为skillweb，由于无此变量，对应位置为空</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-单引号和双引号的区别\"><a href=\"#1-3-单引号和双引号的区别\" class=\"headerlink\" title=\"1.3 单引号和双引号的区别\"></a>1.3 单引号和双引号的区别</h4><ul>\n<li>单引号’ ‘包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。</li>\n<li>双引号” “包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。</li>\n<li>输出也可以不带引号，和双引号一样的作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 双引号</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $&#123;skill&#125;&quot;</span></span><br><span class=\"line\">输出：I am good at java</span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\">echo <span class=\"string\">&#x27;I am good at $&#123;skill&#125;&#x27;</span></span><br><span class=\"line\">输出：I am good at $&#123;skill&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-将命令执行结果赋值给变量\"><a href=\"#1-4-将命令执行结果赋值给变量\" class=\"headerlink\" title=\"1.4 将命令执行结果赋值给变量\"></a>1.4 将命令执行结果赋值给变量</h4><ul>\n<li>Shell 支持将命令的执行结果赋值给变量<ul>\n<li>&#96;&#96;的方式</li>\n<li>$()的方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">variable=`pwd`</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">variable=$()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令运行结果赋值给变量</span></span><br><span class=\"line\">echo `pwd`  <span class=\"comment\"># /root/shell_code</span></span><br><span class=\"line\">echo $(pwd)  <span class=\"comment\"># /root/shell_code</span></span><br><span class=\"line\"><span class=\"comment\"># 删除变量，但是不能删除readonly关键字限制的变量（只读变量）</span></span><br><span class=\"line\">unset age</span><br><span class=\"line\">echo $&#123;age&#125;</span><br><span class=\"line\">输出为空</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-传递参数\"><a href=\"#1-5-传递参数\" class=\"headerlink\" title=\"1.5 传递参数\"></a>1.5 传递参数</h4><ul>\n<li>在指定脚本的时候，可以在文件名后面跟上一些参数，以空格隔开</li>\n<li>获取参数<ul>\n<li>${0}：获取文件名（包含路径）</li>\n<li>${1}：获取文件名后面第一个参数</li>\n<li>${n}：获取文件名后面第n个参数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 执行命令：sh variable.sh name age weight</span></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">variable.sh</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>特殊字符处理参数说明</p>\n<ul>\n<li><p>$#获取参数的个数，但是不包括文件名</p>\n</li>\n<li><p>$*获取的是一个参数拼接的字符串</p>\n</li>\n<li><p>$@获取的是各个参数的字符串</p>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/c3711ab9/image-20230728194954237.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $<span class=\"comment\">#</span></span><br><span class=\"line\">echo $*</span><br><span class=\"line\">echo $@</span><br><span class=\"line\">echo $$</span><br><span class=\"line\"><span class=\"comment\"># 指定命令：sh variable.sh name age weight</span></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">name age weight</span><br><span class=\"line\">name age weight</span><br><span class=\"line\"><span class=\"number\">15905</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>$*和$@的区别<ul>\n<li>假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;$*&quot;</span></span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\">echo <span class=\"string\">&quot;========&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;$@&quot;</span></span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">name age weight</span><br><span class=\"line\">========</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不带双引号，则$*和$@的结果一样</span></span><br><span class=\"line\"><span class=\"comment\"># 因为为 for i in item1 item2 item3，i会分别为item1 item2 item3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $*</span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\">echo <span class=\"string\">&quot;========&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $@</span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br><span class=\"line\">========</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、字符串\"><a href=\"#2、字符串\" class=\"headerlink\" title=\"2、字符串\"></a>2、字符串</h3><ul>\n<li><p>字符串是 Shell 编程中最常用的数据类型之一</p>\n<p>除了数字和字符串，也没有其他类型了</p>\n</li>\n</ul>\n<h4 id=\"2-1-获取字符串长度\"><a href=\"#2-1-获取字符串长度\" class=\"headerlink\" title=\"2.1 获取字符串长度\"></a>2.1 获取字符串长度</h4><ul>\n<li>格式：$</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Shell编程\"><a href=\"#Shell编程\" class=\"headerlink\" title=\"Shell编程\"></a>Shell编程</h1><h2 id=\"第一部分-Shell简介\"><a href=\"#第一部分-Shell简介\" class=\"headerlink\" title=\"第一部分 Shell简介\"></a>第一部分 Shell简介</h2><ul>\n<li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</p>\n<p>Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell和Python类似也是一门解释性语言</p>\n</li>\n</ul>\n<h3 id=\"1、脚本开头\"><a href=\"#1、脚本开头\" class=\"headerlink\" title=\"1、脚本开头\"></a>1、脚本开头</h3><ul>\n<li>指定脚本文件的Shell程序（解释器）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">或</span><br><span class=\"line\">#!/bin/sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、执行脚本\"><a href=\"#2、执行脚本\" class=\"headerlink\" title=\"2、执行脚本\"></a>2、执行脚本</h3><ul>\n<li>sh aaa.sh<ul>\n<li>常用</li>\n</ul>\n</li>\n<li>.&#x2F; aaa.sh<ul>\n<li>脚本文件需要可执行权限，并且需要在当前文件夹中</li>\n</ul>\n</li>\n<li>aaa.sh<ul>\n<li>脚本文件需要放入环境变量中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二部分-基础语法\"><a href=\"#第二部分-基础语法\" class=\"headerlink\" title=\"第二部分 基础语法\"></a>第二部分 基础语法</h2><h3 id=\"1、变量\"><a href=\"#1、变量\" class=\"headerlink\" title=\"1、变量\"></a>1、变量</h3><ul>\n<li>Shell中每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。</li>\n<li>在默认情况下，不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串</li>\n</ul>\n<h4 id=\"1-1-定义变量\"><a href=\"#1-1-定义变量\" class=\"headerlink\" title=\"1.1 定义变量\"></a>1.1 定义变量</h4><ul>\n<li>定义变量的三种方式<ul>\n<li><strong>注意等号两边不能有空格</strong></li>\n<li>单引号中，即使是特殊字符也会识别成字符串，其作用如python中的 r””</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不带引号</span></span><br><span class=\"line\">variable=value</span><br><span class=\"line\"><span class=\"comment\"># 带双引号</span></span><br><span class=\"line\">variable=<span class=\"string\">&quot;value&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 带单引号</span></span><br><span class=\"line\">variable=<span class=\"string\">&#x27;value&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>命名规范<ul>\n<li>变量名由数字、字母、下划线组成；</li>\n<li>必须以字母或者下划线开头；</li>\n<li>不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-2-引用变量\"><a href=\"#1-2-引用变量\" class=\"headerlink\" title=\"1.2 引用变量\"></a>1.2 引用变量</h4><ul>\n<li>可以通过:$变量名、${变量名}。一般最好要加上{}</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">10</span></span><br><span class=\"line\">b=$&#123;a&#125;</span><br><span class=\"line\">echo $&#123;b&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不加{}，可能带来的影响</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加&#123;&#125;</span></span><br><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $&#123;skill&#125;web&quot;</span></span><br><span class=\"line\">输出:<span class=\"string\">&quot;I am good at javaweb&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 不加&#123;&#125;</span></span><br><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $skillweb&quot;</span></span><br><span class=\"line\">输出：I am good at </span><br><span class=\"line\"><span class=\"comment\"># 变量名被识别为skillweb，由于无此变量，对应位置为空</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-单引号和双引号的区别\"><a href=\"#1-3-单引号和双引号的区别\" class=\"headerlink\" title=\"1.3 单引号和双引号的区别\"></a>1.3 单引号和双引号的区别</h4><ul>\n<li>单引号’ ‘包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。</li>\n<li>双引号” “包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。</li>\n<li>输出也可以不带引号，和双引号一样的作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skill=<span class=\"string\">&quot;java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 双引号</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;I am good at $&#123;skill&#125;&quot;</span></span><br><span class=\"line\">输出：I am good at java</span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\">echo <span class=\"string\">&#x27;I am good at $&#123;skill&#125;&#x27;</span></span><br><span class=\"line\">输出：I am good at $&#123;skill&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-将命令执行结果赋值给变量\"><a href=\"#1-4-将命令执行结果赋值给变量\" class=\"headerlink\" title=\"1.4 将命令执行结果赋值给变量\"></a>1.4 将命令执行结果赋值给变量</h4><ul>\n<li>Shell 支持将命令的执行结果赋值给变量<ul>\n<li>&#96;&#96;的方式</li>\n<li>$()的方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">variable=`pwd`</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">variable=$()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令运行结果赋值给变量</span></span><br><span class=\"line\">echo `pwd`  <span class=\"comment\"># /root/shell_code</span></span><br><span class=\"line\">echo $(pwd)  <span class=\"comment\"># /root/shell_code</span></span><br><span class=\"line\"><span class=\"comment\"># 删除变量，但是不能删除readonly关键字限制的变量（只读变量）</span></span><br><span class=\"line\">unset age</span><br><span class=\"line\">echo $&#123;age&#125;</span><br><span class=\"line\">输出为空</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-传递参数\"><a href=\"#1-5-传递参数\" class=\"headerlink\" title=\"1.5 传递参数\"></a>1.5 传递参数</h4><ul>\n<li>在指定脚本的时候，可以在文件名后面跟上一些参数，以空格隔开</li>\n<li>获取参数<ul>\n<li>${0}：获取文件名（包含路径）</li>\n<li>${1}：获取文件名后面第一个参数</li>\n<li>${n}：获取文件名后面第n个参数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">echo $&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 执行命令：sh variable.sh name age weight</span></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">variable.sh</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>特殊字符处理参数说明</p>\n<ul>\n<li><p>$#获取参数的个数，但是不包括文件名</p>\n</li>\n<li><p>$*获取的是一个参数拼接的字符串</p>\n</li>\n<li><p>$@获取的是各个参数的字符串</p>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/c3711ab9/image-20230728194954237.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $<span class=\"comment\">#</span></span><br><span class=\"line\">echo $*</span><br><span class=\"line\">echo $@</span><br><span class=\"line\">echo $$</span><br><span class=\"line\"><span class=\"comment\"># 指定命令：sh variable.sh name age weight</span></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">name age weight</span><br><span class=\"line\">name age weight</span><br><span class=\"line\"><span class=\"number\">15905</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>$*和$@的区别<ul>\n<li>假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;$*&quot;</span></span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\">echo <span class=\"string\">&quot;========&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;$@&quot;</span></span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">name age weight</span><br><span class=\"line\">========</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不带双引号，则$*和$@的结果一样</span></span><br><span class=\"line\"><span class=\"comment\"># 因为为 for i in item1 item2 item3，i会分别为item1 item2 item3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $*</span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\">echo <span class=\"string\">&quot;========&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $@</span><br><span class=\"line\">do</span><br><span class=\"line\"> echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br><span class=\"line\">========</span><br><span class=\"line\">name</span><br><span class=\"line\">age</span><br><span class=\"line\">weight</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、字符串\"><a href=\"#2、字符串\" class=\"headerlink\" title=\"2、字符串\"></a>2、字符串</h3><ul>\n<li><p>字符串是 Shell 编程中最常用的数据类型之一</p>\n<p>除了数字和字符串，也没有其他类型了</p>\n</li>\n</ul>\n<h4 id=\"2-1-获取字符串长度\"><a href=\"#2-1-获取字符串长度\" class=\"headerlink\" title=\"2.1 获取字符串长度\"></a>2.1 获取字符串长度</h4><ul>\n<li>格式：$</li>\n</ul>\n"},{"title":"mysql笔记","cover":"/images/mysql笔记.jpg","abbrlink":"cff900a3","date":"2023-08-10T13:46:52.000Z","_content":"\n# MySQL数据库\n\n- excel最多存104万行，1万列、\n\n## 第一部分 MySql介绍和安装\n\n### 1、MySQL介绍\n\n#### 1.1 数据库\n\n- 数据库是数据的仓库\n- 据库依据数据结构来组织数据,因为数据结构的存在,所以看到的数据是条理化的\n- 根据数据结构的不同,数据库分为关系型数据库和非关系型数据库\n\n#### 1.2 关系型数据库\n\n- 关系型数据库是依据关系模型创建数据库\n- 关系模型就是一对一,一对多,多对多等关系模型,关系模型就是存储格式是以行列组成的二维表格,所以一个关系型数据库就是由二维表之间的联系所组成的一个数据组织\n\n#### 1.3 非关系型数据库\n\n- 由于关系型太大和复杂,所以一般使用“非关系型数据”来表示其他类型的数据库\n  菲关系型的模型比如:\n  - 列模型:存储的数据是一列一列,关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录\n  - 键值对模型:存储的数据是一个个键值对,比如name:lisi\n  - 文档类模型:以一个个文档来存储数据,类似于键值对\n\n#### 1.4 MySQL概述\n\n- MySQL是一种开源关系型数据库管理系统，最初由瑞典MySQL AB公司的Michael Widenius和David Axmark于1995年创建。\n- MySQL以其速度、可靠性、灵活性和易用性而闻名，并广泛用于Web应用程序开发和其他需要高度可靠数据管理的应用程序中。\n\n### 2、MySQL安装\n\n#### 2.1 MySQL安装和配置\n\n##### 2.1.1 安装mysql5.7\n\n- 从网上下载`mysql`的`yum`存储库\n  -  -c，未下载完成则继续下载\n\n```\nwget -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n```\n\n- 安装`mysql`的`yum`存储库\n  - -y yes ，表示y/n选项执行yes\n  - 通过安装此 RPM 包，可以在系统中启用 `MySQL 5.7` 的官方存储库，然后使用 `yum` 命令来安装 `MySQL 5.7` 和其他相关的软件包\n  - 这个 RPM 包只是为了添加存储库，它本身并不包含 `MySQL 5.7` 的实际软件包。\n  - 这个存储库安装后，和yum的存储库在同一个文件夹里，也就是/etc/yum.repos.d/\n\n![image-20230731191501709](MySQL笔记/image-20230731191501709.png)\n\n![image-20230731192045754](MySQL笔记/image-20230731192045754.png)\n\n```\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n- 使用yum安装`mysql5.7`\n\n  - `nogpgcheck`，不检查软件包的`gpg`签名，也就是不进行安全验证\n  - 下图为mysql的依赖安装\n\n  ![image-20230731191806584.png](MySQL笔记/image-20230731191806584.png)\n  \n  \n\n```\nyum -y --nogpgcheck install mysql-community-server\n```\n\n- 卸载mysql的yum 存储库(repository)\n  - 防止yum操作都会自动更新，需要把这个卸载掉\n  - 卸载后/etc/yum.repos.d/文件夹中，mysql的yum存储库就会被删掉\n\n```\nyum -y remove mysql57-community-release-el7-10.noarch\n```\n\n##### 2.1.2 启动并配置mysql\n\n- 启动mysql服务\n  - mysql的服务在/usr/lib/systemd/system/中，所以sytemctl命令可以控制\n\n```shell\nsystemctl start mysql\n#or\nsystemctl start mysqld.service\n```\n\n- 设置开机自启\n\n```\nsystemctl enable mysqld\n```\n\n- 查看状态\n\n```\nsystemctl status mysqld\n```\n\n- 从mysqld.log文件中获取临时密码\n\n```\ngrep \"password\" /var/log/mysqld.log\n```\n\n![image-20230731192623335](MySQL笔记/image-20230731192623335.png)\n\n- 登录mysql\n  - -p后有空格会123456会被认为是数据库名\n\n```\nmysql -uroot -p\n请输入密码：7,>+0Od:XI<L\n```\n\n- 关闭密码复杂验证\n  - 进入mysql客户端再进行\n  - `validate_password_policy` 是 `MySQL` 数据库中的一个系统变量，用于设置密码策略的参数\n    * `0`：低强度。不执行密码强度检查，接受任何密码。\n  - 将 `validate_password_length` 设置为 `1` 是一个非常低的密码最小长度要求，它要求密码至少只需要一个字符\n\n```\nset global validate_password_policy=0;\nset global validate_password_length=1;\n```\n\n- 设置密码\n  - 修改当前登录用户的密码，其中：user() 方法将返回当前用户信息\n\n```\nalter user user() identified by \"123456\";\n```\n\n- 开放root用户远程登录\n  \n  - 赋予远程连接权限，可以用`navicat`连接操作数据库\n  - `GRANT ALL PRIVILEGES`：该命令表示授予所有权限，即允许用户执行数据库中的任何操作，包括 SELECT、INSERT、UPDATE、DELETE 等。\n  - `ON *.*`：这里的 `*.*` 表示该授权适用于所有数据库（所有库的所有表）。\n  - `TO 'root'@'%'`：这指定了接收权限的用户。在这里，'root' 是用户名，'%' 表示该用户可以从任何主机（IP 地址）连接到 MySQL 服务器。\n  - `IDENTIFIED BY '123456'`：这设置了用户 'root' 的密码为 '123456'。\n  - `WITH GRANT OPTION`：这个选项允许用户 'root' 授予其他用户与自己相同的权限。如果没有这个选项，用户 'root' 将无法将自己的权限授予其他用户。\n  \n  需要特别注意的是，将 'root' 用户的权限设置为 \"ALL PRIVILEGES\" 并允许从任何主机连接，是一个安全风险。\n\n```shell\n# 切换数据库\nuse mysql;\n# 修改权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n# 刷新权限\nflush privileges; \n# 退出\nexit;\n```\n\n##### 2.1.3 修改mysql编码\n\n- 修改编码防止中文乱码\n\n- 编辑配置文件：`vim  /etc/my.cnf`\n\n```\n[client]\ndefault-character-set = utf8mb4\n[mysqld]\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_general_ci\n```\n\n- 重启mysql\n\n```\nsystemctl restart mysqld\n```\n\n- 登录并查看mysql编码\n\n```shell\n# 123456需替换为自己的密码\nmysql -uroot -p123456\n\n# 需在MySQL的shell中执行\nshow variables like \"%char%\";\n```\n\n![](MySQL笔记/image-20230731194630101-1692105959933.png)\n\n##### 2.1.4 mysql的卸载方式\n\n- 删除依赖包\n  - -qa query all\n  - -i  insensitive  表示不区分大小写\n\n```shell\n# 查找mysql相关的安装包\nrpm -qa |grep -i mysql\n# 对mysql相关的包进行移除\n# yum会处理依赖，所以mysql-community-client-5.7.43-1.el7.x86_64即使不写上也会被删除\nyum remove mysql-community-server mysql-community-libs mysql-community-common\n```\n\n- 清理文件\n\n```\n# 查询残余mysql文件\nfind / -name mysql\n# 删除查找出来的问价\nrm -rf 文件名\n```\n\n#### 2.2 MySQL客户端的使用\n\n##### 2.2.1 linux进入客户端\n\n- 命令：`mysql -uroot -p123456`\n\n##### 2.2.2 连接navicat\n\n![](MySQL笔记/image-20230731195153935.png)\n\n## 第二部分 数据库、表、列基本概念\n\n### 1、MySQL数据库服务器、数据库和数据表的关系\n\n- 安装MySQL的C/S模式，Client/Service，用户端/服务端\n\n![](MySQL笔记/image-20230801190255233.png)\n\n### 2、DDL操作数据库\n\n- CRUD\n- 切换数据库\n\n```\nUSE db_name;\n```\n\n#### 2.1 C(create)：创建\n\n- 通过sql创建\n\n```sql\nCTREATE DATABASES [IF NOT EXISTS] students;\n```\n\n- 创建时指定字符集\n\n```\nCTREATE DATABASES [IF NOT EXISTS] students DEFAULT CHARSET=utf8mb4;\n```\n\n#### 2.2 R(retrieve)：查询\n\n- 显示所有数据库\n\n```\nSHOW DATABASES\n```\n\n- 显示数据库创建语句\n  - 可以查看字符集\n\n```\nSHOW CREATE DATABASE db_namae\n```\n\n- 显示当前数据库\n\n```\nselect database();\n```\n\n#### 2.3 U(update)：修改\n\n- 修改数据库的字符集\n\n```\nALTER DATABASE students CHARSET=utf8mb4;\n```\n\n#### 2.4 D(delete)：删除\n\n```\nDROP DATABASE  [IF EXISTS]  db_name\n```\n\n### 3、DDL操作数据表\n\n#### 3.1  C(create)：创建\n\n```sql\nCREATE TABLE [IF NOT EXISTS]  students(\n  id VARCHAR(255) PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  age INT,\n  gender VARCHAR(255),\n  clazz VARCHAR(255)\n);\n```\n\n- 指定数据表创建和修改的时间\n\n```sql\ncreated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n```\n\n- 复制表结构\n\n```sql\nCREATE TABLE student2 like student\n```\n\n- 复制表结构和表数据\n\n```sql\nCREATE TABLE student2 as SELECT * FROM student\n```\n\n#### 3.2 R(retrieve)：查询\n\n- 显示所有数据表\n\n```sql\nSHOW  tables;\n```\n\n- 显示建表语句\n\n```sql\nSHOW CREATE TABLE student;\n```\n\n- 显示表结构(discribe)\n\n```\nDESC student;\n```\n\n#### 3.3  U(update)：修改\n\n- 增加列，需要指定列的类型\n\n```sql\nalter table students add length float;\n```\n\n- 修改列类型,属性\n\n```sql\nalter table students modify length int not null;\n```\n\n- 删除列\n\n```sql\nalter table students drop length;\n```\n\n- 修改列名\n\n```sql\nalter table  student change id sid varchar(255);\n```\n\n- 修改字符集\n\n```sql\nalter table student character set utf8;\n```\n\n- 修改表名\n\n```sql\nrename table students to student;\n```\n\n#### 3.4 D(delete)：删除\n\n- 删除数据表\n\n```sql\nDROP TABLE [IF EXISTS ] students;\n```\n\n## 第三部分 数据类型和约束\n\n### 1、数据类型\n\n```sql\n-- 数值类型：INT、BIGINT、FLOAT、DOUBLE，DECIMAL等。\n-- 字符串类型：CHAR、VARCHAR、TEXT等。\n-- 日期和时间类型：DATE、DATETIME、TIMESTAMP等。\n-- 二进制类型：BLOB、LONGBLOB、VARBINARY等。\n-- 枚举类型：ENUM。\n-- 集合类型：SET。\n```\n\n#### 1.1 数值类型\n\n- DECIMAL(10,2)，表示小数，10为全部位数，2为小数位数\n\n![](MySQL笔记/image-20230801191635470.png)\n\n#### 1.2 字符类型\n\n- UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节\n- char是定长字符串，varchar为变长字符串\n  - VARCHAR(255)，表示最大长度，可以根据值的长度动态变化\n\n![](MySQL笔记/image-20230801191658112.png)\n\n#### 1.3日期和时间类型\n\n<img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230801191850098.png\" alt=\"image-20230801191850098\" style=\"zoom:80%;\" />\n\n### 2、约束\n\n#### 2.1 PRIMARY KEY （主键）\n\n- 用于唯一标识表中的每一行数据，通常使用整数类型的列。不能为空，且不能重复\n\n```sql\nid VARCHAR(255) PRIMARY KEY,\n```\n\n#### 2.2 FOREIGN KEY (外键)\n\n- 用于定义列与其他表的关系，保证引用完整性。\n- 用于建立表与表之间的关联关系。\n- 外键，关联的字段类型必须一样\n\n```sql\nCREATE TABLE customers (\n    id INT ,\n    customer_name VARCHAR(50)\n);\nCREATE TABLE orders (\n\torder_id INT,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)  -- customer_id设置为外键\n    \t\t\t\t\t\t\t\t\t\t\t\t\t-- id被引用字段\n);\n```\n\n- 外键的级联\n\n  - cascade\n\n  - 当设置为外键为级联方式，\n\n    删除或更新被引用的字段的某个值时，也会对设置为外键的字段的相同值，做出同样的删除或更新操作\n\n#### 2.3 UNIQUE （唯一键）\n\n- 保证列中的所有值都是唯一的，可以包含空值。\n\n```sql\nemail VARCHAR(100) UNIQUE\n```\n\n#### 2.4 AUTO_INCREMENT （自动增长）\n\n- 自动增长只能给整数类型的主键\n\n```sql\nid VARCHAR(255) PRIMARY KEY AUTO_INCREMENT\n```\n\n#### 2.5 NOT NULL （非空）\n\n- 确保列中不包含空值。\n\n```sql\nname VARCHAR(50) NOT NULL\n```\n\n#### 2.6 DEFUALT （默认值）\n\n- 在插入新行时，如果没有指定列的值，则使用默认值。\n\n```sql\nrole ENUM('admin', 'user') DEFAULT 'user'\n```\n\n#### 2.7 CEACK （检查）\n\n- 用于确保列中的值满足特定的条件，可以使用各种表达式和运算符来定义。\n\n```sql\nage INT CHECK(age >= 18)\n```\n\n## 第四部分 SQL语言基础\n\n### 1、SQL语言简介\n\n- Structured Query Language, 结构化查询语言\n- SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能\n\n### 2、SQL分类\n\n- DDL \n  数据定义语言 - Data Definition Language\n  是用于定义和管理数据库、表结构的语言，如数据表、视图、索引等\n- DML \n  数据处理语言 - Data Manipulation Language\n  在数据库表中更新，增加和删除记录\n  如 update， insert， delete\n- DCL\n  数据控制语言 – Data Control Language\n  指用于设置用户权限和控制事务语句\n  如 grant，revoke，if…else，while，begin transaction\n- DQL\n  数据查询语言 – Data Query Language\n  如 select\n\n```sql\nDDL：create、alter、drop、truncate\nDML：insert、update、delete\nDQL：select\nDCL：\n```\n\n### 3、SQL语言的基本操作\n\n### 3 DML\n\n#### 3.1 INSERT （增）\n\n- 一次插入一条\n\n```sql\nINSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n```\n\n- 一次插入多条\n\n  - 1)\n\n  ```sql\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100002,\"吕金鹏\",24,\"男\",\"文科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100003,\"单乐蕊\",22,\"女\",\"理科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100004,\"葛德曜\",24,\"男\",\"理科三班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100005,\"宣谷芹\",22,\"女\",\"理科五班\");\n  ```\n\n  - 2)\n\n  ```sql\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n  ,(1500100002,\"吕金鹏\",24,\"男\",\"文科六班\")\n  ,(1500100003,\"单乐蕊\",22,\"女\",\"理科六班\")\n  ,(1500100004,\"葛德曜\",24,\"男\",\"理科三班\")\n  ,(1500100005,\"宣谷芹\",22,\"女\",\"理科五班\");\n  ```\n\n- 入股插入的值对应字段名，字段名可以不写\n\n```sql\nINSERT INTO students VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n```\n\n- 自动递增的字段名和值不用给，但是其他字段的字段名不能缺少\n  - id设置了自动递增\n\n```sql\nINSERT INTO students (name,age,gender,clazz)VALUES (\"施笑槐\",22,\"女\",\"文科六班\")\n-- 不给字段名用0或null占位\ninsert into students VALUES(0 | null,\"施笑槐\",22,\"女\",\"文科六班\");\t\n```\n\n- 插入查询的数据\n  - 确保两个表的结构相同，以便可以正确执行插入操作。\n\n```sql\nINSTER INTO student  SELECT * FROM student2\n```\n\n#### 3.2 UPDATE （更新）\n\n```sql\nUPDATE table_name \nSET column1 = value1, column2 = value2, ...\nWHERE some_column = some_value;\n```\n\n#### 3.3 DELETE （删）\n\n```\nDELETE FROM table_name\nWHERE some_column = some_value;\n```\n\n### 4 DQL\n\n- select 1+null  返回 null\n- select  \"a\" +null 返回null\n- select * ,1 as new from score ，会新增一个新列，值都是1\n\n#### 查询所有\n\n```sql\nSELECT * \nFROM students;\n```\n\n#### dinstinct \n\n- 去重\n  - 去重指定列的重复值，会去除一行\n\n```sql\nSELECT DISTINCT column_name\n```\n\n#### IF function\n\n- IFNULL(cid, 值1 )如果column_name为空返回 值1\n\n```\nSELECT IFNULL(column_name, 值1 ) FROM table_name\n```\n\n- IF(condition,值1,值2)，如果condition成立，则返回值1，否则返回值2\n\n#### concat \n\n- 字符串拼接\n\n- select  concat (\"a\",\"-\",\"b\",null)  返回 null\n\n#### concat_ws\n\n- concat wiht separator 通过分隔符连接\n\n- select  concat_ws(\"-\",\"a\",\"b\",null) 返回 a-b\n\n#### LIMIT\n\n```sql\nSELECT * \nFROM students\nLIMIT 10;\n```\n\n#### where\n\n```sql\nSELECT *\nFROM students\nWHERE age>22;\n```\n\n#### LIKE\n\n```sql\nSELECT * \nFROM students\nWHERE clazz LIKE \"%文科六班%\";\n```\n\n#### ORDER BY \n\n- ASC 升序\n- DESC 降序\n\n```sql\nSELECT * \nFROM students\nWHERE age>22\nORDER BY age ASC;\n```\n\n#### GROUP BY\n\n- 分组的字段的必须带一个，不然报错\n- 没有分组的字段，并且没有聚合的字段也不能带，不然报错\n- 聚合函数\n  - max，min，avg，sum，count\n\n```sql\nSELECT   clazz\n        ,gender\n        ,MAX(age)\nFROM students\nGROUP BY clazz,gender;\n```\n\n#### JOIN\n\n-  join | inner join ：内连接\n-  left join ：左外连接， right join：右外连接，  full join：全外连接\n-  ON后面是一个condition ，表示满足该condition的时候进行关联\n   -  ON t1.score > t2.score  表示 当t1.score大于t2.score时，数据行进行关联\n\n```sql\nSELECT *\nFROM students \nJOIN score  ON students.id=score.id\nJOIN subject ON score.subject_id=subject.subject_id;\n```\n\n#### 嵌套查询\n\n```sql\nselect\tt1.*\n\t\t\t\t,t2.subject_id\n\t\t\t\t,t2.sco\n\t\t\t\t,t3.subject_name \nfrom (\n    (select\tid\n                    ,name\n                    ,age\n                    ,gender\n                    ,clazz\n    from students) as t1\n    join \n    (select\tid\n                    ,subject_id\n                    ,sco\n    from score) as t2\n    join \n    (select * from subject) as t3\n    on t1.id=t2.id and t2.subject_id=t3.subject_id\n);\n```\n\n### 5 DCL\n\n#### 5.1 管理用户\n\n- 用户所在位置   mysql.user\n\n* 添加用户：\n\n  * 可以用添加的用户，代替root进行登录\n\n  ![](MySQL笔记/image-20230803213442968.png)\n\n  * 关闭密码复杂验证\n\n    ```\n    set global validate_password_policy=0;\n    set global validate_password_length=1;\n    ```\n\n  * 语法：\n\n    * 主机名可用%代替，表示任何主机\n\n    ```\n    CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';\n    ```\n\n  * 例子：\n\n    ```\n    CREATE USER 'zhangsan'@'localhost' IDENTIFIED BY '123';\n    \n    CREATE USER 'lisi'@'%' IDENTIFIED BY '123';\n    ```\n\n* 删除用户：\n\n  * 语法：\n\n    ```\n    DROP USER '用户名'@'主机名';\n    ```\n\n  * 例子：\n\n    ```\n    DROP USER 'zhangsan'@'localhost';\n    ```\n\n* 修改用户密码：\n\n  * 语法：\n\n    ```sql\n    -- 老版本的写法 \n    -- UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';\n    \n    SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');\n    \n    ALTER USER '用户名'@'主机名' IDENTIFIED BY '新密码';\n    ```\n\n  * 例子：\n\n    ```sql\n    set password for 'lisi'@'%' = password('234567');\n    ```\n\n* 查询用户：\n\n  * 1.切换到mysql数据库\n\n    ```sql\n    USE mysql;\n    ```\n\n  * 2.查询user表\n\n    ```sql\n    select * from user;\n    ```\n\n    > 通配符： % 表示可以在任意主机使用用户登录数据库 \n\n    \n\n#### 5.2.权限管理\n\n- 权限列表\n\n```\nSELECT, INSERT, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE\n```\n\n* 查询权限：\n\n  * 语法：\n\n    ```sql\n     SHOW GRANTS FOR '用户名'@'主机名';\n    \n     SHOW GRANTS FOR 'lisi'@'%';\n    ```\n\n* 授予权限：\n\n  * 语法：\n\n    > with grant option 表示带上授权的功能\n\n    ```sql\n    grant 权限列表 on 数据库名.表名 to '用户名'@'主机名' [with grant option];\n    ```\n\n  * 例子：  \n\n    ```sql\n    -- 将表db3.account的SELECT ,DELETE, UPDATE权限授予用户'lisi'@'%'\n    GRANT SELECT ,DELETE, UPDATE  ON db3.account TO 'lisi'@'%';\n    \n    -- 给zhangsan用户所有权限  \n    \n    GRANT ALL  ON *.* TO 'zhangsan'@'localhost'\n    ```\n\n* 撤销权限：\n\n  * 语法：\n\n    ```\n    revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';\n    ```\n\n  * 例子：\n\n    ```sql\n    -- 将用户'lisi'@'%'对于表db3.account的更新权限撤销\n    REVOKE UPDATE ON db3.account FROM 'lisi'@'%';\n    \n    -- 给lisi用户撤销所有权限\n    REVOKE ALL ON *.* FROM 'lisi'@'%';\n    ```\n\n### 6、其他操作\n\n#### 6.1 LOAD\n\n- 加载数据文件（mysql shell中执行）\n  - 注意转义符号 `\\` ，可以换成`/`或 `\\\\`\n\n```\nLOAD DATA LOCAL INFILE 'G:/BigData26/MySQL/data/student.txt' INTO TABLE students FIELDS TERMINATED BY ',';\n```\n\n- linux执行LOAD命令时，如果文件来自windows，可以用pycharm把换行符设置为LF，也就是\\n\n\n  不然，会导致最后一列的值中有\\r\n\n  -  windows的换行符：\\r\\n  CRLF\n  - linux的换行符：\\n  LF\n\n#### 6.2 mysqldump\n\n- dump  转储\n\n- 把数据表对应的sql文件，从linux中导出\n\n![image-20230731161918891](MySQL笔记/image-20230731161918891.png)\n\n#### 6.3 source \n\n- 执行指定sql文件\n\n```\nmysql>  source /root/data/students.sql\n```\n\n#### 6.4 取整函数\n\n```\nround(98.99999,2) ，保留两位小数，并且四舍五入\n\nfloor(98.99999)  向下取整\n\nceil(98.99999)   向上取整\n```\n\n## 第五部分 基本查询\n\n### 1、WHERE （搜索）\n\n```\nWHERE子句可以使用以下比较运算符：\n=（等于）\n<（小于）\n>（大于）\n<=（小于或等于）\n>=（大于或等于）\n<>或!=（不等于）\n还可以使用逻辑运算符（AND、OR和NOT）来组合多个条件。\nexist\nany，all 多指比较\n```\n\n- 模糊搜索\n  - 通配符 ：%   _\n\n```\nSELECT * FROM students WHERE clazz like ‘%文科%’\n```\n\n- in(集合)\n  - 搜索符合in集合内的内容\n\n```\nselect * from students where clazz in ('文科一班','文科二班','文科三班');\n```\n\n- BETWEEN AND\n\n```sql\nselect * from students where age BETWEEN 22 AND 24;\n-- 返回年龄在22到24的学生\n```\n\n### 2、ORDER BY  （排序）\n\n- ORDER BY子句用于对查询结果按照一个或多个列进行排序。\n- 默认升序\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...\n```\n\n### 3、GROUP BY 和 HAVING  （分组和过滤）\n\n#### 3.1 GROUP BY \n\n- GROUP BY子句用于将查询结果按照一个或多个列进行分组，并对每个组进行聚合计算\n\n  - max、min、sum、avg、count\n  - count(1) 和count(*)都是统计所有的行\n  - count(cid) 统计不为null的cid个数\n  - **只有数值型的数据删除后为null    count  不能统计到 null值**\n  - **varchar类型的数据删除后为空字符 ''\"    count 能够统计到 空字符**\n- 想要group by 的排序不起作用，可以加上order by  null\n\n```sql\nSELECT column1, column2, ..., aggregate_function(column_name)\nFROM table_name\nGROUP BY column1, column2, ... \nORDER BY  null\n```\n\n- 聚合函数运作原理\n  - 聚合函数如果没有分组的情况下，就是一次查询后再进行统计，而不是对每条数据进行统计\n    如果加上分组的话，聚合函数就是在每个分组查询完成后执行\n    如果加上聚合函数中加上if判断，那么就会等符合条件的数据查询完成后，再进行统计\n\n```sql\nSELECT SUM(IF(score>=60 , 1, 0)) /count(*) -- 每组大于等60的占比\nFROM score\nGROUP BY cid  \n-- 每个分组所有数据IF判断结束后，再进行聚合操作\n```\n\n#### 3.2 HAVING  \n\n- HAVING子句用于对分组后的结果进行过滤，只返回符合条件的分组。它接受一个或多个聚合函数作为参数，并可指定每个函数的过滤条件。\n\n  - having  不能够过滤select 没查出来的字段\n\n    having 可以聚合没查的字段\n\n  ```sql\n  select sid\n  from score\n  having COUNT(cid) -- and cid=\"01\" 会报错\n  -- having  不能够过滤select 没查出来的字段\n  -- 但是having 可以聚合没查的字段\n  ```\n\n- 注意\n  - 分组的字段的必须带一个，不然报错\n  - 没有分组的字段，并且没有聚合的字段也不能带，不然报错\n\n```sql\nSELECT column1, column2, ..., aggregate_function(column_name)\nFROM table_name\nGROUP BY column1, column2, ...\nHAVING condition;\n```\n\n- \n\n### 4、LIMIT 和 OFFSET  （限制和偏移量 ）\n\n- LIMIT用于限制查询结果集的行数。\n- OFFSET用于指定查询结果集的偏移量。\n  - 如偏移量为2，则会从第3行返回数据\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nLIMIT number \n\nSELECT column1, column2, ...\nFROM table_name\nLIMIT number OFFSET offset;\n\n-- 从offset+1开始，返回number行数据\nSELECT column1, column2, ...\nFROM table_name\nLIMIT offset,number\n```\n\n### 5、union （行合并）\n\n- union 合并行\n\n```sql\n(SELECT * FROM students LIMIT 0,10)\nUNION s\n(SELECT * FROM students LIMIT 4,10)\n```\n\n- union all 不去重\n\n```sql\n(SELECT * FROM students LIMIT 0,10)\nUNION ALL\n(SELECT * FROM students LIMIT 4,10)\n```\n\n### 6、执行顺序\n\n- 从上往下\n\n```\nFROM: 从表中选择数据，生成虚拟表（视图）。\nWHERE: 对虚拟表中的数据进行筛选，满足条件的数据被保留。\nGROUP BY: 将数据按照指定的字段进行分组，生成分组后的结果。\nSELECT: 对分组后的结果进行选择，并进行聚合函数的计算。\nHAVING: 对聚合函数的结果进行筛选，满足条件的分组被保留。\nORDER BY: 对结果进行排序。\nLIMIT: 限制结果的数量。\n```\n\n### 7、子查询\n\n- where  sid in （select sid in student），子查询的一列可以作为in的集合\n- hive不支持where子查询\n\n# 扩展知识\n\n## 1、清空表和截断表\n\n```\n清空表 delete ，存在日志和记录，可以恢复\n\n截断表 truncate，没有日志\n```\n\n## 2、mysql数据表在liunx的存储位置\n\n```\n数据存储位置  cd /var/lib/mysql\n\n数据存储路径配置 vim /etc/my.cnf\n```\n\n![](MySQL笔记/image-20230801200055431.png)\n\n![](MySQL笔记/image-20230801195946980.png)\n\n## 3、中文的比较\n\n- 中文的比较 utf8  解析为16进制比较\n  - 虽然六大于四，但是解析为utf8的十六进制之后，六的十六进制小于四的十六进制\n\n![image-20230803140232355](MySQL笔记/image-20230803140232355.png)\n\n## 4、日期函数\n\n```sql\n# 获取当前日期时间\nselect NOW(); # 2021-04-02 09:25:29\n# 获取当前日期\nSELECT CURDATE(); # 2021-04-02\n# 获取当前时间\nSELECT CURTIME();  # 09:26:10\n\n# 时间减少1小时（前一小时）\nselect date_sub(now(), INTERVAL 1 hour);\n\n# 日期增加1天\nselect date_add(now(), INTERVAL 1 day);\n\n-- 日期格式化、字符串转日期\n# 格式化参考：\nselect DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s');\nselect DATE_FORMAT(now(),'%Y-%m-%d %H:00:00');\n\n#字符串转日期\nselect str_to_date('2021-04-02 10:37:14', '%Y-%m-%d %H:%i:%s'); # 2021-04-02 10:37:14\n\n-- 将具体时间时间转为timestamp\nSELECT UNIX_TIMESTAMP('2017-05-15 10:37:14');-- 指定日期时间的时间戳：1494815834\n-- 将时间戳转为具体时间\nSELECT FROM_UNIXTIME(1494815834, '%Y年%m月%d日 %h时%分:%s秒');-- 获取时间戳对应的格式化日期时间\n\n-- 截取从pos位置开始到最后的所有str字符串\nSUBSTR (str, pos, len)\n-- 返回本周的第几天\nSELECT WEEKDAY('2017-05-21 10:37:14')\n```\n\n# MySQL数据常用操作\n\n- 注释： -- # /**/\n\n## 1、navicat操作MySQL\n\n- 可以用dbeaver平替\n- 首先连接\n- 创建数据库\n\n### 1.1 创建数据表\n\n- 创建数据表，创建完成后要保存\n\n![](MySQL笔记/image-20230731201052074.png)\n\n- 查看元数据\n  - 元数据\n    - 元数据（Metadata）是关于数据的数据，用于描述数据的特征、属性和内容。\n\n- 导出建表语句\n\n![image-20230731201343039](C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230731201343039.png)\n\n### 1.2 执行sql语句\n\n### 1.3 导入数据文件\n\n- 导入向导\n\n![](MySQL笔记/image-20230731204742543.png)\n\n- 选择文件格式\n\n![](MySQL笔记/image-20230731204854988.png)\n\n- 选择文件路径\n\n![](MySQL笔记/image-20230731204818468.png)\n\n- 配置换行符和分隔符\n\n![](MySQL笔记/image-20230731205050008.png)\n\n- 设置head\n\n![](MySQL笔记/image-20230731205204993.png)\n\n- 设置对应字段\n\n![](MySQL笔记/image-20230731205244443.png)\n\n### 1.4 导出数据文件\n\n- 导出向导\n\n![](MySQL笔记/image-20230731212623170.png)\n\n- 选择数据表\n- \n\n### 1.5 导出sql文件\n\n- 转储SQL文件\n\n![](MySQL笔记/image-20230731213059217.png)\n\n### 1.6 运行sql文件\n\n![](MySQL笔记/image-20230731213327762.png)\n\n## 2、python操作MySQL\n\n### 2.1 准备\n\n- 安装pymysql库\n\n```\npip install pymysql\n```\n\n- 导入pymysql库\n\n```\nimport pymysql\n```\n\n- 创建数据库连接\n\n```\nconn = pymysql.connect(host='master', port=3306, user='root', password='123456', database='school')\n```\n\n- 创建数据库操作对象：游标\n\n```\ncursor = conn.cursor()\n```\n\n- 执行sql\n\n```\nsql = \"select * from students where id=1500100001\"\ncursor.execute(sql)  # 返回指定数据\n```\n\n- 获取DQL返回数据\n  - 值得注意的是，每次查询后的，下一次查询的起始位置就是上一次查询的结束位置\n    这点和文件读写很像\n\n```python\n # 查询一条数据 ，返回一个元组\nrows1 = cursor.fetchone() \n# 查询所有数据，返回一个元组\nrows2 = cursor.fetchall()  \n # 查询指定行数\nrows3 = cursor.fetchmany(10) \n```\n\n- pymysql执行DML时，需要手动提交事务\n\n```sql\nsql=\"insert into students values(0,'name','age','gender','clazz')\"\n\ncursor.execute(sql)\nconnect.commit()\n```\n\n- 回滚\n  - 如果执行出错，可以通过回滚的方式，让数据恢复到执行之前的状态\n\n```sql\nconn.rollback()\n```\n\n- 关闭连接\n\n  - 手动关闭\n\n  ```sql\n  cursor.close()\n  conn.close\n  ```\n\n  - 自动关闭\n    - with语句，自动执行关闭语句\n\n  ```sql\n  with pymysql.connect() as conn:  \n  \twith conn.cursor() as cursor:\n  ```\n\n### 2.2 传入参数\n\n#### 1、静态指定\n\n- 静态指定的参数，如果是字符串要加上引号\n\n```python\nsql = \"select * from students where id='1500100001'\"\ncursor.execute(sql)\n```\n\n#### 2、字符串拼接\n\n```python\nsql = \"select * from students where id=\" +\"'1500100001'\"\ncursor.execute(sql)\n```\n\n#### 3、占位符\n\n- execute\n  - 通过占位符，动态指定sql中的参数\n    - 不要因为参数是 string 就在 %s 两边加引号，mysql 会自动去处理。\n\n```python\nsql = \"select * from students where id=%s\"\ncursor.execute(sql, (\"1500100001\"))  # 返回指定数据\n```\n\n- executemany\n  - 传入可迭代的数据容器，并且元素是元组\n    - 根据元素个数，决定sql执行次数\n\n```sql\nsql = \"select * from students where id=%s\"\ncursor.executemany(sql, [(\"1500100001\"), (\"1500100002\")])  # 返回指定数据\n```\n\n### 2.3 sql注入\n\n- 如果传参方式是 字符串拼接，可以通过sql注入的方式，导致where失效，获取所有数据\n  - or 1=1 可以让where失效\n\n```sql\nid=\"'1500100001' or 1=1\"\nsql = \"select * from where id=\"+id\n```\n\n- 通过占位符传参，可以避免sql注入\n  - pymysql 的 execute 支持参数化 sql，通过占位符 %s 配合参数就可以实现 sql 注入问题的避免。\n  - 这样参数化的方式，让 mysql 通过 预处理 的方式避免了 sql 注入的存在。\n  - 需要注意的是，不要因为参数是其他类型而换掉 %s，pymysql 的占位符并不是 python 的通用占位符。\n\n```python\n# 对比字符串拼接和占位符\n\nsql = \"select * from students where id=%s\"\ncursor.execute(sql, (\"1500100001 or 1=1\"))  # 返回指定数据\nprint(cursor.fetchall())\n\nid = \"1500100001 or 1=1\"\nsql2 = \"select * from students where id=\" + id\n# cursor.execute(sql2)  # 返回所有数据\nprint(cursor.fetchall())\n```\n\n### 2.4 把文件中的数据，插入到数据库中\n\n```python\n# Description: 把文件中的数据，插入到数据库中\n\nimport pymysql\nif __name__ == '__main__':\n\n    with open('./score.txt','r',encoding='utf8') as fp:\n        line_list = fp.readlines()\n\n    tuple_list = []\n    for line in line_list:\n        line_split = line.strip().split(',')\n        tuple_list.append((line_split[0],line_split[1],line_split[2]))\n\n    with pymysql.connect(host='master',port=3306,user='root',password='123456',database='school') as conn:\n        with conn.cursor() as cursor:\n            sql = \"INSERT INTO score VALUES (%s, %s, %s)\"\n            try:\n                cursor.executemany(sql, tuple_list)\n            except Exception as e:\n                print(e)\n                conn.rollback()\n            else:\n                conn.commit()\n```\n\n","source":"_posts/MySQL笔记.md","raw":"---\ntitle: mysql笔记\ntags: MySQL\ncover: /images/mysql笔记.jpg\ncategories: MySQL\nabbrlink: cff900a3\ndate: 2023-08-10 21:46:52\n---\n\n# MySQL数据库\n\n- excel最多存104万行，1万列、\n\n## 第一部分 MySql介绍和安装\n\n### 1、MySQL介绍\n\n#### 1.1 数据库\n\n- 数据库是数据的仓库\n- 据库依据数据结构来组织数据,因为数据结构的存在,所以看到的数据是条理化的\n- 根据数据结构的不同,数据库分为关系型数据库和非关系型数据库\n\n#### 1.2 关系型数据库\n\n- 关系型数据库是依据关系模型创建数据库\n- 关系模型就是一对一,一对多,多对多等关系模型,关系模型就是存储格式是以行列组成的二维表格,所以一个关系型数据库就是由二维表之间的联系所组成的一个数据组织\n\n#### 1.3 非关系型数据库\n\n- 由于关系型太大和复杂,所以一般使用“非关系型数据”来表示其他类型的数据库\n  菲关系型的模型比如:\n  - 列模型:存储的数据是一列一列,关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录\n  - 键值对模型:存储的数据是一个个键值对,比如name:lisi\n  - 文档类模型:以一个个文档来存储数据,类似于键值对\n\n#### 1.4 MySQL概述\n\n- MySQL是一种开源关系型数据库管理系统，最初由瑞典MySQL AB公司的Michael Widenius和David Axmark于1995年创建。\n- MySQL以其速度、可靠性、灵活性和易用性而闻名，并广泛用于Web应用程序开发和其他需要高度可靠数据管理的应用程序中。\n\n### 2、MySQL安装\n\n#### 2.1 MySQL安装和配置\n\n##### 2.1.1 安装mysql5.7\n\n- 从网上下载`mysql`的`yum`存储库\n  -  -c，未下载完成则继续下载\n\n```\nwget -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n```\n\n- 安装`mysql`的`yum`存储库\n  - -y yes ，表示y/n选项执行yes\n  - 通过安装此 RPM 包，可以在系统中启用 `MySQL 5.7` 的官方存储库，然后使用 `yum` 命令来安装 `MySQL 5.7` 和其他相关的软件包\n  - 这个 RPM 包只是为了添加存储库，它本身并不包含 `MySQL 5.7` 的实际软件包。\n  - 这个存储库安装后，和yum的存储库在同一个文件夹里，也就是/etc/yum.repos.d/\n\n![image-20230731191501709](MySQL笔记/image-20230731191501709.png)\n\n![image-20230731192045754](MySQL笔记/image-20230731192045754.png)\n\n```\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n- 使用yum安装`mysql5.7`\n\n  - `nogpgcheck`，不检查软件包的`gpg`签名，也就是不进行安全验证\n  - 下图为mysql的依赖安装\n\n  ![image-20230731191806584.png](MySQL笔记/image-20230731191806584.png)\n  \n  \n\n```\nyum -y --nogpgcheck install mysql-community-server\n```\n\n- 卸载mysql的yum 存储库(repository)\n  - 防止yum操作都会自动更新，需要把这个卸载掉\n  - 卸载后/etc/yum.repos.d/文件夹中，mysql的yum存储库就会被删掉\n\n```\nyum -y remove mysql57-community-release-el7-10.noarch\n```\n\n##### 2.1.2 启动并配置mysql\n\n- 启动mysql服务\n  - mysql的服务在/usr/lib/systemd/system/中，所以sytemctl命令可以控制\n\n```shell\nsystemctl start mysql\n#or\nsystemctl start mysqld.service\n```\n\n- 设置开机自启\n\n```\nsystemctl enable mysqld\n```\n\n- 查看状态\n\n```\nsystemctl status mysqld\n```\n\n- 从mysqld.log文件中获取临时密码\n\n```\ngrep \"password\" /var/log/mysqld.log\n```\n\n![image-20230731192623335](MySQL笔记/image-20230731192623335.png)\n\n- 登录mysql\n  - -p后有空格会123456会被认为是数据库名\n\n```\nmysql -uroot -p\n请输入密码：7,>+0Od:XI<L\n```\n\n- 关闭密码复杂验证\n  - 进入mysql客户端再进行\n  - `validate_password_policy` 是 `MySQL` 数据库中的一个系统变量，用于设置密码策略的参数\n    * `0`：低强度。不执行密码强度检查，接受任何密码。\n  - 将 `validate_password_length` 设置为 `1` 是一个非常低的密码最小长度要求，它要求密码至少只需要一个字符\n\n```\nset global validate_password_policy=0;\nset global validate_password_length=1;\n```\n\n- 设置密码\n  - 修改当前登录用户的密码，其中：user() 方法将返回当前用户信息\n\n```\nalter user user() identified by \"123456\";\n```\n\n- 开放root用户远程登录\n  \n  - 赋予远程连接权限，可以用`navicat`连接操作数据库\n  - `GRANT ALL PRIVILEGES`：该命令表示授予所有权限，即允许用户执行数据库中的任何操作，包括 SELECT、INSERT、UPDATE、DELETE 等。\n  - `ON *.*`：这里的 `*.*` 表示该授权适用于所有数据库（所有库的所有表）。\n  - `TO 'root'@'%'`：这指定了接收权限的用户。在这里，'root' 是用户名，'%' 表示该用户可以从任何主机（IP 地址）连接到 MySQL 服务器。\n  - `IDENTIFIED BY '123456'`：这设置了用户 'root' 的密码为 '123456'。\n  - `WITH GRANT OPTION`：这个选项允许用户 'root' 授予其他用户与自己相同的权限。如果没有这个选项，用户 'root' 将无法将自己的权限授予其他用户。\n  \n  需要特别注意的是，将 'root' 用户的权限设置为 \"ALL PRIVILEGES\" 并允许从任何主机连接，是一个安全风险。\n\n```shell\n# 切换数据库\nuse mysql;\n# 修改权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n# 刷新权限\nflush privileges; \n# 退出\nexit;\n```\n\n##### 2.1.3 修改mysql编码\n\n- 修改编码防止中文乱码\n\n- 编辑配置文件：`vim  /etc/my.cnf`\n\n```\n[client]\ndefault-character-set = utf8mb4\n[mysqld]\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_general_ci\n```\n\n- 重启mysql\n\n```\nsystemctl restart mysqld\n```\n\n- 登录并查看mysql编码\n\n```shell\n# 123456需替换为自己的密码\nmysql -uroot -p123456\n\n# 需在MySQL的shell中执行\nshow variables like \"%char%\";\n```\n\n![](MySQL笔记/image-20230731194630101-1692105959933.png)\n\n##### 2.1.4 mysql的卸载方式\n\n- 删除依赖包\n  - -qa query all\n  - -i  insensitive  表示不区分大小写\n\n```shell\n# 查找mysql相关的安装包\nrpm -qa |grep -i mysql\n# 对mysql相关的包进行移除\n# yum会处理依赖，所以mysql-community-client-5.7.43-1.el7.x86_64即使不写上也会被删除\nyum remove mysql-community-server mysql-community-libs mysql-community-common\n```\n\n- 清理文件\n\n```\n# 查询残余mysql文件\nfind / -name mysql\n# 删除查找出来的问价\nrm -rf 文件名\n```\n\n#### 2.2 MySQL客户端的使用\n\n##### 2.2.1 linux进入客户端\n\n- 命令：`mysql -uroot -p123456`\n\n##### 2.2.2 连接navicat\n\n![](MySQL笔记/image-20230731195153935.png)\n\n## 第二部分 数据库、表、列基本概念\n\n### 1、MySQL数据库服务器、数据库和数据表的关系\n\n- 安装MySQL的C/S模式，Client/Service，用户端/服务端\n\n![](MySQL笔记/image-20230801190255233.png)\n\n### 2、DDL操作数据库\n\n- CRUD\n- 切换数据库\n\n```\nUSE db_name;\n```\n\n#### 2.1 C(create)：创建\n\n- 通过sql创建\n\n```sql\nCTREATE DATABASES [IF NOT EXISTS] students;\n```\n\n- 创建时指定字符集\n\n```\nCTREATE DATABASES [IF NOT EXISTS] students DEFAULT CHARSET=utf8mb4;\n```\n\n#### 2.2 R(retrieve)：查询\n\n- 显示所有数据库\n\n```\nSHOW DATABASES\n```\n\n- 显示数据库创建语句\n  - 可以查看字符集\n\n```\nSHOW CREATE DATABASE db_namae\n```\n\n- 显示当前数据库\n\n```\nselect database();\n```\n\n#### 2.3 U(update)：修改\n\n- 修改数据库的字符集\n\n```\nALTER DATABASE students CHARSET=utf8mb4;\n```\n\n#### 2.4 D(delete)：删除\n\n```\nDROP DATABASE  [IF EXISTS]  db_name\n```\n\n### 3、DDL操作数据表\n\n#### 3.1  C(create)：创建\n\n```sql\nCREATE TABLE [IF NOT EXISTS]  students(\n  id VARCHAR(255) PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  age INT,\n  gender VARCHAR(255),\n  clazz VARCHAR(255)\n);\n```\n\n- 指定数据表创建和修改的时间\n\n```sql\ncreated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n```\n\n- 复制表结构\n\n```sql\nCREATE TABLE student2 like student\n```\n\n- 复制表结构和表数据\n\n```sql\nCREATE TABLE student2 as SELECT * FROM student\n```\n\n#### 3.2 R(retrieve)：查询\n\n- 显示所有数据表\n\n```sql\nSHOW  tables;\n```\n\n- 显示建表语句\n\n```sql\nSHOW CREATE TABLE student;\n```\n\n- 显示表结构(discribe)\n\n```\nDESC student;\n```\n\n#### 3.3  U(update)：修改\n\n- 增加列，需要指定列的类型\n\n```sql\nalter table students add length float;\n```\n\n- 修改列类型,属性\n\n```sql\nalter table students modify length int not null;\n```\n\n- 删除列\n\n```sql\nalter table students drop length;\n```\n\n- 修改列名\n\n```sql\nalter table  student change id sid varchar(255);\n```\n\n- 修改字符集\n\n```sql\nalter table student character set utf8;\n```\n\n- 修改表名\n\n```sql\nrename table students to student;\n```\n\n#### 3.4 D(delete)：删除\n\n- 删除数据表\n\n```sql\nDROP TABLE [IF EXISTS ] students;\n```\n\n## 第三部分 数据类型和约束\n\n### 1、数据类型\n\n```sql\n-- 数值类型：INT、BIGINT、FLOAT、DOUBLE，DECIMAL等。\n-- 字符串类型：CHAR、VARCHAR、TEXT等。\n-- 日期和时间类型：DATE、DATETIME、TIMESTAMP等。\n-- 二进制类型：BLOB、LONGBLOB、VARBINARY等。\n-- 枚举类型：ENUM。\n-- 集合类型：SET。\n```\n\n#### 1.1 数值类型\n\n- DECIMAL(10,2)，表示小数，10为全部位数，2为小数位数\n\n![](MySQL笔记/image-20230801191635470.png)\n\n#### 1.2 字符类型\n\n- UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节\n- char是定长字符串，varchar为变长字符串\n  - VARCHAR(255)，表示最大长度，可以根据值的长度动态变化\n\n![](MySQL笔记/image-20230801191658112.png)\n\n#### 1.3日期和时间类型\n\n<img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230801191850098.png\" alt=\"image-20230801191850098\" style=\"zoom:80%;\" />\n\n### 2、约束\n\n#### 2.1 PRIMARY KEY （主键）\n\n- 用于唯一标识表中的每一行数据，通常使用整数类型的列。不能为空，且不能重复\n\n```sql\nid VARCHAR(255) PRIMARY KEY,\n```\n\n#### 2.2 FOREIGN KEY (外键)\n\n- 用于定义列与其他表的关系，保证引用完整性。\n- 用于建立表与表之间的关联关系。\n- 外键，关联的字段类型必须一样\n\n```sql\nCREATE TABLE customers (\n    id INT ,\n    customer_name VARCHAR(50)\n);\nCREATE TABLE orders (\n\torder_id INT,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)  -- customer_id设置为外键\n    \t\t\t\t\t\t\t\t\t\t\t\t\t-- id被引用字段\n);\n```\n\n- 外键的级联\n\n  - cascade\n\n  - 当设置为外键为级联方式，\n\n    删除或更新被引用的字段的某个值时，也会对设置为外键的字段的相同值，做出同样的删除或更新操作\n\n#### 2.3 UNIQUE （唯一键）\n\n- 保证列中的所有值都是唯一的，可以包含空值。\n\n```sql\nemail VARCHAR(100) UNIQUE\n```\n\n#### 2.4 AUTO_INCREMENT （自动增长）\n\n- 自动增长只能给整数类型的主键\n\n```sql\nid VARCHAR(255) PRIMARY KEY AUTO_INCREMENT\n```\n\n#### 2.5 NOT NULL （非空）\n\n- 确保列中不包含空值。\n\n```sql\nname VARCHAR(50) NOT NULL\n```\n\n#### 2.6 DEFUALT （默认值）\n\n- 在插入新行时，如果没有指定列的值，则使用默认值。\n\n```sql\nrole ENUM('admin', 'user') DEFAULT 'user'\n```\n\n#### 2.7 CEACK （检查）\n\n- 用于确保列中的值满足特定的条件，可以使用各种表达式和运算符来定义。\n\n```sql\nage INT CHECK(age >= 18)\n```\n\n## 第四部分 SQL语言基础\n\n### 1、SQL语言简介\n\n- Structured Query Language, 结构化查询语言\n- SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能\n\n### 2、SQL分类\n\n- DDL \n  数据定义语言 - Data Definition Language\n  是用于定义和管理数据库、表结构的语言，如数据表、视图、索引等\n- DML \n  数据处理语言 - Data Manipulation Language\n  在数据库表中更新，增加和删除记录\n  如 update， insert， delete\n- DCL\n  数据控制语言 – Data Control Language\n  指用于设置用户权限和控制事务语句\n  如 grant，revoke，if…else，while，begin transaction\n- DQL\n  数据查询语言 – Data Query Language\n  如 select\n\n```sql\nDDL：create、alter、drop、truncate\nDML：insert、update、delete\nDQL：select\nDCL：\n```\n\n### 3、SQL语言的基本操作\n\n### 3 DML\n\n#### 3.1 INSERT （增）\n\n- 一次插入一条\n\n```sql\nINSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n```\n\n- 一次插入多条\n\n  - 1)\n\n  ```sql\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100002,\"吕金鹏\",24,\"男\",\"文科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100003,\"单乐蕊\",22,\"女\",\"理科六班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100004,\"葛德曜\",24,\"男\",\"理科三班\");\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100005,\"宣谷芹\",22,\"女\",\"理科五班\");\n  ```\n\n  - 2)\n\n  ```sql\n  INSERT INTO students (id,name,age,gender,clazz)VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n  ,(1500100002,\"吕金鹏\",24,\"男\",\"文科六班\")\n  ,(1500100003,\"单乐蕊\",22,\"女\",\"理科六班\")\n  ,(1500100004,\"葛德曜\",24,\"男\",\"理科三班\")\n  ,(1500100005,\"宣谷芹\",22,\"女\",\"理科五班\");\n  ```\n\n- 入股插入的值对应字段名，字段名可以不写\n\n```sql\nINSERT INTO students VALUES (1500100001,\"施笑槐\",22,\"女\",\"文科六班\")\n```\n\n- 自动递增的字段名和值不用给，但是其他字段的字段名不能缺少\n  - id设置了自动递增\n\n```sql\nINSERT INTO students (name,age,gender,clazz)VALUES (\"施笑槐\",22,\"女\",\"文科六班\")\n-- 不给字段名用0或null占位\ninsert into students VALUES(0 | null,\"施笑槐\",22,\"女\",\"文科六班\");\t\n```\n\n- 插入查询的数据\n  - 确保两个表的结构相同，以便可以正确执行插入操作。\n\n```sql\nINSTER INTO student  SELECT * FROM student2\n```\n\n#### 3.2 UPDATE （更新）\n\n```sql\nUPDATE table_name \nSET column1 = value1, column2 = value2, ...\nWHERE some_column = some_value;\n```\n\n#### 3.3 DELETE （删）\n\n```\nDELETE FROM table_name\nWHERE some_column = some_value;\n```\n\n### 4 DQL\n\n- select 1+null  返回 null\n- select  \"a\" +null 返回null\n- select * ,1 as new from score ，会新增一个新列，值都是1\n\n#### 查询所有\n\n```sql\nSELECT * \nFROM students;\n```\n\n#### dinstinct \n\n- 去重\n  - 去重指定列的重复值，会去除一行\n\n```sql\nSELECT DISTINCT column_name\n```\n\n#### IF function\n\n- IFNULL(cid, 值1 )如果column_name为空返回 值1\n\n```\nSELECT IFNULL(column_name, 值1 ) FROM table_name\n```\n\n- IF(condition,值1,值2)，如果condition成立，则返回值1，否则返回值2\n\n#### concat \n\n- 字符串拼接\n\n- select  concat (\"a\",\"-\",\"b\",null)  返回 null\n\n#### concat_ws\n\n- concat wiht separator 通过分隔符连接\n\n- select  concat_ws(\"-\",\"a\",\"b\",null) 返回 a-b\n\n#### LIMIT\n\n```sql\nSELECT * \nFROM students\nLIMIT 10;\n```\n\n#### where\n\n```sql\nSELECT *\nFROM students\nWHERE age>22;\n```\n\n#### LIKE\n\n```sql\nSELECT * \nFROM students\nWHERE clazz LIKE \"%文科六班%\";\n```\n\n#### ORDER BY \n\n- ASC 升序\n- DESC 降序\n\n```sql\nSELECT * \nFROM students\nWHERE age>22\nORDER BY age ASC;\n```\n\n#### GROUP BY\n\n- 分组的字段的必须带一个，不然报错\n- 没有分组的字段，并且没有聚合的字段也不能带，不然报错\n- 聚合函数\n  - max，min，avg，sum，count\n\n```sql\nSELECT   clazz\n        ,gender\n        ,MAX(age)\nFROM students\nGROUP BY clazz,gender;\n```\n\n#### JOIN\n\n-  join | inner join ：内连接\n-  left join ：左外连接， right join：右外连接，  full join：全外连接\n-  ON后面是一个condition ，表示满足该condition的时候进行关联\n   -  ON t1.score > t2.score  表示 当t1.score大于t2.score时，数据行进行关联\n\n```sql\nSELECT *\nFROM students \nJOIN score  ON students.id=score.id\nJOIN subject ON score.subject_id=subject.subject_id;\n```\n\n#### 嵌套查询\n\n```sql\nselect\tt1.*\n\t\t\t\t,t2.subject_id\n\t\t\t\t,t2.sco\n\t\t\t\t,t3.subject_name \nfrom (\n    (select\tid\n                    ,name\n                    ,age\n                    ,gender\n                    ,clazz\n    from students) as t1\n    join \n    (select\tid\n                    ,subject_id\n                    ,sco\n    from score) as t2\n    join \n    (select * from subject) as t3\n    on t1.id=t2.id and t2.subject_id=t3.subject_id\n);\n```\n\n### 5 DCL\n\n#### 5.1 管理用户\n\n- 用户所在位置   mysql.user\n\n* 添加用户：\n\n  * 可以用添加的用户，代替root进行登录\n\n  ![](MySQL笔记/image-20230803213442968.png)\n\n  * 关闭密码复杂验证\n\n    ```\n    set global validate_password_policy=0;\n    set global validate_password_length=1;\n    ```\n\n  * 语法：\n\n    * 主机名可用%代替，表示任何主机\n\n    ```\n    CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';\n    ```\n\n  * 例子：\n\n    ```\n    CREATE USER 'zhangsan'@'localhost' IDENTIFIED BY '123';\n    \n    CREATE USER 'lisi'@'%' IDENTIFIED BY '123';\n    ```\n\n* 删除用户：\n\n  * 语法：\n\n    ```\n    DROP USER '用户名'@'主机名';\n    ```\n\n  * 例子：\n\n    ```\n    DROP USER 'zhangsan'@'localhost';\n    ```\n\n* 修改用户密码：\n\n  * 语法：\n\n    ```sql\n    -- 老版本的写法 \n    -- UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';\n    \n    SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');\n    \n    ALTER USER '用户名'@'主机名' IDENTIFIED BY '新密码';\n    ```\n\n  * 例子：\n\n    ```sql\n    set password for 'lisi'@'%' = password('234567');\n    ```\n\n* 查询用户：\n\n  * 1.切换到mysql数据库\n\n    ```sql\n    USE mysql;\n    ```\n\n  * 2.查询user表\n\n    ```sql\n    select * from user;\n    ```\n\n    > 通配符： % 表示可以在任意主机使用用户登录数据库 \n\n    \n\n#### 5.2.权限管理\n\n- 权限列表\n\n```\nSELECT, INSERT, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE\n```\n\n* 查询权限：\n\n  * 语法：\n\n    ```sql\n     SHOW GRANTS FOR '用户名'@'主机名';\n    \n     SHOW GRANTS FOR 'lisi'@'%';\n    ```\n\n* 授予权限：\n\n  * 语法：\n\n    > with grant option 表示带上授权的功能\n\n    ```sql\n    grant 权限列表 on 数据库名.表名 to '用户名'@'主机名' [with grant option];\n    ```\n\n  * 例子：  \n\n    ```sql\n    -- 将表db3.account的SELECT ,DELETE, UPDATE权限授予用户'lisi'@'%'\n    GRANT SELECT ,DELETE, UPDATE  ON db3.account TO 'lisi'@'%';\n    \n    -- 给zhangsan用户所有权限  \n    \n    GRANT ALL  ON *.* TO 'zhangsan'@'localhost'\n    ```\n\n* 撤销权限：\n\n  * 语法：\n\n    ```\n    revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';\n    ```\n\n  * 例子：\n\n    ```sql\n    -- 将用户'lisi'@'%'对于表db3.account的更新权限撤销\n    REVOKE UPDATE ON db3.account FROM 'lisi'@'%';\n    \n    -- 给lisi用户撤销所有权限\n    REVOKE ALL ON *.* FROM 'lisi'@'%';\n    ```\n\n### 6、其他操作\n\n#### 6.1 LOAD\n\n- 加载数据文件（mysql shell中执行）\n  - 注意转义符号 `\\` ，可以换成`/`或 `\\\\`\n\n```\nLOAD DATA LOCAL INFILE 'G:/BigData26/MySQL/data/student.txt' INTO TABLE students FIELDS TERMINATED BY ',';\n```\n\n- linux执行LOAD命令时，如果文件来自windows，可以用pycharm把换行符设置为LF，也就是\\n\n\n  不然，会导致最后一列的值中有\\r\n\n  -  windows的换行符：\\r\\n  CRLF\n  - linux的换行符：\\n  LF\n\n#### 6.2 mysqldump\n\n- dump  转储\n\n- 把数据表对应的sql文件，从linux中导出\n\n![image-20230731161918891](MySQL笔记/image-20230731161918891.png)\n\n#### 6.3 source \n\n- 执行指定sql文件\n\n```\nmysql>  source /root/data/students.sql\n```\n\n#### 6.4 取整函数\n\n```\nround(98.99999,2) ，保留两位小数，并且四舍五入\n\nfloor(98.99999)  向下取整\n\nceil(98.99999)   向上取整\n```\n\n## 第五部分 基本查询\n\n### 1、WHERE （搜索）\n\n```\nWHERE子句可以使用以下比较运算符：\n=（等于）\n<（小于）\n>（大于）\n<=（小于或等于）\n>=（大于或等于）\n<>或!=（不等于）\n还可以使用逻辑运算符（AND、OR和NOT）来组合多个条件。\nexist\nany，all 多指比较\n```\n\n- 模糊搜索\n  - 通配符 ：%   _\n\n```\nSELECT * FROM students WHERE clazz like ‘%文科%’\n```\n\n- in(集合)\n  - 搜索符合in集合内的内容\n\n```\nselect * from students where clazz in ('文科一班','文科二班','文科三班');\n```\n\n- BETWEEN AND\n\n```sql\nselect * from students where age BETWEEN 22 AND 24;\n-- 返回年龄在22到24的学生\n```\n\n### 2、ORDER BY  （排序）\n\n- ORDER BY子句用于对查询结果按照一个或多个列进行排序。\n- 默认升序\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...\n```\n\n### 3、GROUP BY 和 HAVING  （分组和过滤）\n\n#### 3.1 GROUP BY \n\n- GROUP BY子句用于将查询结果按照一个或多个列进行分组，并对每个组进行聚合计算\n\n  - max、min、sum、avg、count\n  - count(1) 和count(*)都是统计所有的行\n  - count(cid) 统计不为null的cid个数\n  - **只有数值型的数据删除后为null    count  不能统计到 null值**\n  - **varchar类型的数据删除后为空字符 ''\"    count 能够统计到 空字符**\n- 想要group by 的排序不起作用，可以加上order by  null\n\n```sql\nSELECT column1, column2, ..., aggregate_function(column_name)\nFROM table_name\nGROUP BY column1, column2, ... \nORDER BY  null\n```\n\n- 聚合函数运作原理\n  - 聚合函数如果没有分组的情况下，就是一次查询后再进行统计，而不是对每条数据进行统计\n    如果加上分组的话，聚合函数就是在每个分组查询完成后执行\n    如果加上聚合函数中加上if判断，那么就会等符合条件的数据查询完成后，再进行统计\n\n```sql\nSELECT SUM(IF(score>=60 , 1, 0)) /count(*) -- 每组大于等60的占比\nFROM score\nGROUP BY cid  \n-- 每个分组所有数据IF判断结束后，再进行聚合操作\n```\n\n#### 3.2 HAVING  \n\n- HAVING子句用于对分组后的结果进行过滤，只返回符合条件的分组。它接受一个或多个聚合函数作为参数，并可指定每个函数的过滤条件。\n\n  - having  不能够过滤select 没查出来的字段\n\n    having 可以聚合没查的字段\n\n  ```sql\n  select sid\n  from score\n  having COUNT(cid) -- and cid=\"01\" 会报错\n  -- having  不能够过滤select 没查出来的字段\n  -- 但是having 可以聚合没查的字段\n  ```\n\n- 注意\n  - 分组的字段的必须带一个，不然报错\n  - 没有分组的字段，并且没有聚合的字段也不能带，不然报错\n\n```sql\nSELECT column1, column2, ..., aggregate_function(column_name)\nFROM table_name\nGROUP BY column1, column2, ...\nHAVING condition;\n```\n\n- \n\n### 4、LIMIT 和 OFFSET  （限制和偏移量 ）\n\n- LIMIT用于限制查询结果集的行数。\n- OFFSET用于指定查询结果集的偏移量。\n  - 如偏移量为2，则会从第3行返回数据\n\n```sql\nSELECT column1, column2, ...\nFROM table_name\nLIMIT number \n\nSELECT column1, column2, ...\nFROM table_name\nLIMIT number OFFSET offset;\n\n-- 从offset+1开始，返回number行数据\nSELECT column1, column2, ...\nFROM table_name\nLIMIT offset,number\n```\n\n### 5、union （行合并）\n\n- union 合并行\n\n```sql\n(SELECT * FROM students LIMIT 0,10)\nUNION s\n(SELECT * FROM students LIMIT 4,10)\n```\n\n- union all 不去重\n\n```sql\n(SELECT * FROM students LIMIT 0,10)\nUNION ALL\n(SELECT * FROM students LIMIT 4,10)\n```\n\n### 6、执行顺序\n\n- 从上往下\n\n```\nFROM: 从表中选择数据，生成虚拟表（视图）。\nWHERE: 对虚拟表中的数据进行筛选，满足条件的数据被保留。\nGROUP BY: 将数据按照指定的字段进行分组，生成分组后的结果。\nSELECT: 对分组后的结果进行选择，并进行聚合函数的计算。\nHAVING: 对聚合函数的结果进行筛选，满足条件的分组被保留。\nORDER BY: 对结果进行排序。\nLIMIT: 限制结果的数量。\n```\n\n### 7、子查询\n\n- where  sid in （select sid in student），子查询的一列可以作为in的集合\n- hive不支持where子查询\n\n# 扩展知识\n\n## 1、清空表和截断表\n\n```\n清空表 delete ，存在日志和记录，可以恢复\n\n截断表 truncate，没有日志\n```\n\n## 2、mysql数据表在liunx的存储位置\n\n```\n数据存储位置  cd /var/lib/mysql\n\n数据存储路径配置 vim /etc/my.cnf\n```\n\n![](MySQL笔记/image-20230801200055431.png)\n\n![](MySQL笔记/image-20230801195946980.png)\n\n## 3、中文的比较\n\n- 中文的比较 utf8  解析为16进制比较\n  - 虽然六大于四，但是解析为utf8的十六进制之后，六的十六进制小于四的十六进制\n\n![image-20230803140232355](MySQL笔记/image-20230803140232355.png)\n\n## 4、日期函数\n\n```sql\n# 获取当前日期时间\nselect NOW(); # 2021-04-02 09:25:29\n# 获取当前日期\nSELECT CURDATE(); # 2021-04-02\n# 获取当前时间\nSELECT CURTIME();  # 09:26:10\n\n# 时间减少1小时（前一小时）\nselect date_sub(now(), INTERVAL 1 hour);\n\n# 日期增加1天\nselect date_add(now(), INTERVAL 1 day);\n\n-- 日期格式化、字符串转日期\n# 格式化参考：\nselect DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s');\nselect DATE_FORMAT(now(),'%Y-%m-%d %H:00:00');\n\n#字符串转日期\nselect str_to_date('2021-04-02 10:37:14', '%Y-%m-%d %H:%i:%s'); # 2021-04-02 10:37:14\n\n-- 将具体时间时间转为timestamp\nSELECT UNIX_TIMESTAMP('2017-05-15 10:37:14');-- 指定日期时间的时间戳：1494815834\n-- 将时间戳转为具体时间\nSELECT FROM_UNIXTIME(1494815834, '%Y年%m月%d日 %h时%分:%s秒');-- 获取时间戳对应的格式化日期时间\n\n-- 截取从pos位置开始到最后的所有str字符串\nSUBSTR (str, pos, len)\n-- 返回本周的第几天\nSELECT WEEKDAY('2017-05-21 10:37:14')\n```\n\n# MySQL数据常用操作\n\n- 注释： -- # /**/\n\n## 1、navicat操作MySQL\n\n- 可以用dbeaver平替\n- 首先连接\n- 创建数据库\n\n### 1.1 创建数据表\n\n- 创建数据表，创建完成后要保存\n\n![](MySQL笔记/image-20230731201052074.png)\n\n- 查看元数据\n  - 元数据\n    - 元数据（Metadata）是关于数据的数据，用于描述数据的特征、属性和内容。\n\n- 导出建表语句\n\n![image-20230731201343039](C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230731201343039.png)\n\n### 1.2 执行sql语句\n\n### 1.3 导入数据文件\n\n- 导入向导\n\n![](MySQL笔记/image-20230731204742543.png)\n\n- 选择文件格式\n\n![](MySQL笔记/image-20230731204854988.png)\n\n- 选择文件路径\n\n![](MySQL笔记/image-20230731204818468.png)\n\n- 配置换行符和分隔符\n\n![](MySQL笔记/image-20230731205050008.png)\n\n- 设置head\n\n![](MySQL笔记/image-20230731205204993.png)\n\n- 设置对应字段\n\n![](MySQL笔记/image-20230731205244443.png)\n\n### 1.4 导出数据文件\n\n- 导出向导\n\n![](MySQL笔记/image-20230731212623170.png)\n\n- 选择数据表\n- \n\n### 1.5 导出sql文件\n\n- 转储SQL文件\n\n![](MySQL笔记/image-20230731213059217.png)\n\n### 1.6 运行sql文件\n\n![](MySQL笔记/image-20230731213327762.png)\n\n## 2、python操作MySQL\n\n### 2.1 准备\n\n- 安装pymysql库\n\n```\npip install pymysql\n```\n\n- 导入pymysql库\n\n```\nimport pymysql\n```\n\n- 创建数据库连接\n\n```\nconn = pymysql.connect(host='master', port=3306, user='root', password='123456', database='school')\n```\n\n- 创建数据库操作对象：游标\n\n```\ncursor = conn.cursor()\n```\n\n- 执行sql\n\n```\nsql = \"select * from students where id=1500100001\"\ncursor.execute(sql)  # 返回指定数据\n```\n\n- 获取DQL返回数据\n  - 值得注意的是，每次查询后的，下一次查询的起始位置就是上一次查询的结束位置\n    这点和文件读写很像\n\n```python\n # 查询一条数据 ，返回一个元组\nrows1 = cursor.fetchone() \n# 查询所有数据，返回一个元组\nrows2 = cursor.fetchall()  \n # 查询指定行数\nrows3 = cursor.fetchmany(10) \n```\n\n- pymysql执行DML时，需要手动提交事务\n\n```sql\nsql=\"insert into students values(0,'name','age','gender','clazz')\"\n\ncursor.execute(sql)\nconnect.commit()\n```\n\n- 回滚\n  - 如果执行出错，可以通过回滚的方式，让数据恢复到执行之前的状态\n\n```sql\nconn.rollback()\n```\n\n- 关闭连接\n\n  - 手动关闭\n\n  ```sql\n  cursor.close()\n  conn.close\n  ```\n\n  - 自动关闭\n    - with语句，自动执行关闭语句\n\n  ```sql\n  with pymysql.connect() as conn:  \n  \twith conn.cursor() as cursor:\n  ```\n\n### 2.2 传入参数\n\n#### 1、静态指定\n\n- 静态指定的参数，如果是字符串要加上引号\n\n```python\nsql = \"select * from students where id='1500100001'\"\ncursor.execute(sql)\n```\n\n#### 2、字符串拼接\n\n```python\nsql = \"select * from students where id=\" +\"'1500100001'\"\ncursor.execute(sql)\n```\n\n#### 3、占位符\n\n- execute\n  - 通过占位符，动态指定sql中的参数\n    - 不要因为参数是 string 就在 %s 两边加引号，mysql 会自动去处理。\n\n```python\nsql = \"select * from students where id=%s\"\ncursor.execute(sql, (\"1500100001\"))  # 返回指定数据\n```\n\n- executemany\n  - 传入可迭代的数据容器，并且元素是元组\n    - 根据元素个数，决定sql执行次数\n\n```sql\nsql = \"select * from students where id=%s\"\ncursor.executemany(sql, [(\"1500100001\"), (\"1500100002\")])  # 返回指定数据\n```\n\n### 2.3 sql注入\n\n- 如果传参方式是 字符串拼接，可以通过sql注入的方式，导致where失效，获取所有数据\n  - or 1=1 可以让where失效\n\n```sql\nid=\"'1500100001' or 1=1\"\nsql = \"select * from where id=\"+id\n```\n\n- 通过占位符传参，可以避免sql注入\n  - pymysql 的 execute 支持参数化 sql，通过占位符 %s 配合参数就可以实现 sql 注入问题的避免。\n  - 这样参数化的方式，让 mysql 通过 预处理 的方式避免了 sql 注入的存在。\n  - 需要注意的是，不要因为参数是其他类型而换掉 %s，pymysql 的占位符并不是 python 的通用占位符。\n\n```python\n# 对比字符串拼接和占位符\n\nsql = \"select * from students where id=%s\"\ncursor.execute(sql, (\"1500100001 or 1=1\"))  # 返回指定数据\nprint(cursor.fetchall())\n\nid = \"1500100001 or 1=1\"\nsql2 = \"select * from students where id=\" + id\n# cursor.execute(sql2)  # 返回所有数据\nprint(cursor.fetchall())\n```\n\n### 2.4 把文件中的数据，插入到数据库中\n\n```python\n# Description: 把文件中的数据，插入到数据库中\n\nimport pymysql\nif __name__ == '__main__':\n\n    with open('./score.txt','r',encoding='utf8') as fp:\n        line_list = fp.readlines()\n\n    tuple_list = []\n    for line in line_list:\n        line_split = line.strip().split(',')\n        tuple_list.append((line_split[0],line_split[1],line_split[2]))\n\n    with pymysql.connect(host='master',port=3306,user='root',password='123456',database='school') as conn:\n        with conn.cursor() as cursor:\n            sql = \"INSERT INTO score VALUES (%s, %s, %s)\"\n            try:\n                cursor.executemany(sql, tuple_list)\n            except Exception as e:\n                print(e)\n                conn.rollback()\n            else:\n                conn.commit()\n```\n\n","slug":"MySQL笔记","published":1,"updated":"2023-08-17T01:48:40.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbzj0000imcux22j9cu4g","content":"<h1 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h1><ul>\n<li>excel最多存104万行，1万列、</li>\n</ul>\n<h2 id=\"第一部分-MySql介绍和安装\"><a href=\"#第一部分-MySql介绍和安装\" class=\"headerlink\" title=\"第一部分 MySql介绍和安装\"></a>第一部分 MySql介绍和安装</h2><h3 id=\"1、MySQL介绍\"><a href=\"#1、MySQL介绍\" class=\"headerlink\" title=\"1、MySQL介绍\"></a>1、MySQL介绍</h3><h4 id=\"1-1-数据库\"><a href=\"#1-1-数据库\" class=\"headerlink\" title=\"1.1 数据库\"></a>1.1 数据库</h4><ul>\n<li>数据库是数据的仓库</li>\n<li>据库依据数据结构来组织数据,因为数据结构的存在,所以看到的数据是条理化的</li>\n<li>根据数据结构的不同,数据库分为关系型数据库和非关系型数据库</li>\n</ul>\n<h4 id=\"1-2-关系型数据库\"><a href=\"#1-2-关系型数据库\" class=\"headerlink\" title=\"1.2 关系型数据库\"></a>1.2 关系型数据库</h4><ul>\n<li>关系型数据库是依据关系模型创建数据库</li>\n<li>关系模型就是一对一,一对多,多对多等关系模型,关系模型就是存储格式是以行列组成的二维表格,所以一个关系型数据库就是由二维表之间的联系所组成的一个数据组织</li>\n</ul>\n<h4 id=\"1-3-非关系型数据库\"><a href=\"#1-3-非关系型数据库\" class=\"headerlink\" title=\"1.3 非关系型数据库\"></a>1.3 非关系型数据库</h4><ul>\n<li>由于关系型太大和复杂,所以一般使用“非关系型数据”来表示其他类型的数据库<br>菲关系型的模型比如:<ul>\n<li>列模型:存储的数据是一列一列,关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录</li>\n<li>键值对模型:存储的数据是一个个键值对,比如name:lisi</li>\n<li>文档类模型:以一个个文档来存储数据,类似于键值对</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-4-MySQL概述\"><a href=\"#1-4-MySQL概述\" class=\"headerlink\" title=\"1.4 MySQL概述\"></a>1.4 MySQL概述</h4><ul>\n<li>MySQL是一种开源关系型数据库管理系统，最初由瑞典MySQL AB公司的Michael Widenius和David Axmark于1995年创建。</li>\n<li>MySQL以其速度、可靠性、灵活性和易用性而闻名，并广泛用于Web应用程序开发和其他需要高度可靠数据管理的应用程序中。</li>\n</ul>\n<h3 id=\"2、MySQL安装\"><a href=\"#2、MySQL安装\" class=\"headerlink\" title=\"2、MySQL安装\"></a>2、MySQL安装</h3><h4 id=\"2-1-MySQL安装和配置\"><a href=\"#2-1-MySQL安装和配置\" class=\"headerlink\" title=\"2.1 MySQL安装和配置\"></a>2.1 MySQL安装和配置</h4><h5 id=\"2-1-1-安装mysql5-7\"><a href=\"#2-1-1-安装mysql5-7\" class=\"headerlink\" title=\"2.1.1 安装mysql5.7\"></a>2.1.1 安装mysql5.7</h5><ul>\n<li>从网上下载<code>mysql</code>的<code>yum</code>存储库<ul>\n<li>-c，未下载完成则继续下载</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装<code>mysql</code>的<code>yum</code>存储库<ul>\n<li>-y yes ，表示y&#x2F;n选项执行yes</li>\n<li>通过安装此 RPM 包，可以在系统中启用 <code>MySQL 5.7</code> 的官方存储库，然后使用 <code>yum</code> 命令来安装 <code>MySQL 5.7</code> 和其他相关的软件包</li>\n<li>这个 RPM 包只是为了添加存储库，它本身并不包含 <code>MySQL 5.7</code> 的实际软件包。</li>\n<li>这个存储库安装后，和yum的存储库在同一个文件夹里，也就是&#x2F;etc&#x2F;yum.repos.d&#x2F;</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731191501709.png\" class=\"\" title=\"image-20230731191501709\">\n\n<img src=\"/posts/cff900a3/image-20230731192045754.png\" class=\"\" title=\"image-20230731192045754\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用yum安装<code>mysql5.7</code></p>\n<ul>\n<li><code>nogpgcheck</code>，不检查软件包的<code>gpg</code>签名，也就是不进行安全验证</li>\n<li>下图为mysql的依赖安装</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731191806584.png\" class=\"\" title=\"image-20230731191806584.png\"></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y --nogpgcheck install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载mysql的yum 存储库(repository)<ul>\n<li>防止yum操作都会自动更新，需要把这个卸载掉</li>\n<li>卸载后&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹中，mysql的yum存储库就会被删掉</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2-启动并配置mysql\"><a href=\"#2-1-2-启动并配置mysql\" class=\"headerlink\" title=\"2.1.2 启动并配置mysql\"></a>2.1.2 启动并配置mysql</h5><ul>\n<li>启动mysql服务<ul>\n<li>mysql的服务在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;中，所以sytemctl命令可以控制</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">or</span></span><br><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置开机自启</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从mysqld.log文件中获取临时密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230731192623335.png\" class=\"\" title=\"image-20230731192623335\">\n\n<ul>\n<li>登录mysql<ul>\n<li>-p后有空格会123456会被认为是数据库名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">请输入密码：7,&gt;+0Od:XI&lt;L</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭密码复杂验证<ul>\n<li>进入mysql客户端再进行</li>\n<li><code>validate_password_policy</code> 是 <code>MySQL</code> 数据库中的一个系统变量，用于设置密码策略的参数<ul>\n<li><code>0</code>：低强度。不执行密码强度检查，接受任何密码。</li>\n</ul>\n</li>\n<li>将 <code>validate_password_length</code> 设置为 <code>1</code> 是一个非常低的密码最小长度要求，它要求密码至少只需要一个字符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global validate_password_policy=0;</span><br><span class=\"line\">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置密码<ul>\n<li>修改当前登录用户的密码，其中：user() 方法将返回当前用户信息</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter user user() identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>开放root用户远程登录</p>\n<ul>\n<li>赋予远程连接权限，可以用<code>navicat</code>连接操作数据库</li>\n<li><code>GRANT ALL PRIVILEGES</code>：该命令表示授予所有权限，即允许用户执行数据库中的任何操作，包括 SELECT、INSERT、UPDATE、DELETE 等。</li>\n<li><code>ON *.*</code>：这里的 <code>*.*</code> 表示该授权适用于所有数据库（所有库的所有表）。</li>\n<li><code>TO &#39;root&#39;@&#39;%&#39;</code>：这指定了接收权限的用户。在这里，’root’ 是用户名，’%’ 表示该用户可以从任何主机（IP 地址）连接到 MySQL 服务器。</li>\n<li><code>IDENTIFIED BY &#39;123456&#39;</code>：这设置了用户 ‘root’ 的密码为 ‘123456’。</li>\n<li><code>WITH GRANT OPTION</code>：这个选项允许用户 ‘root’ 授予其他用户与自己相同的权限。如果没有这个选项，用户 ‘root’ 将无法将自己的权限授予其他用户。</li>\n</ul>\n<p>需要特别注意的是，将 ‘root’ 用户的权限设置为 “ALL PRIVILEGES” 并允许从任何主机连接，是一个安全风险。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换数据库</span></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改权限</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新权限</span></span><br><span class=\"line\">flush privileges; </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出</span></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-3-修改mysql编码\"><a href=\"#2-1-3-修改mysql编码\" class=\"headerlink\" title=\"2.1.3 修改mysql编码\"></a>2.1.3 修改mysql编码</h5><ul>\n<li><p>修改编码防止中文乱码</p>\n</li>\n<li><p>编辑配置文件：<code>vim  /etc/my.cnf</code></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_general_ci</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启mysql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登录并查看mysql编码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">123456需替换为自己的密码</span></span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需在MySQL的shell中执行</span></span><br><span class=\"line\">show variables like &quot;%char%&quot;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230731194630101-1692105959933.png\" class=\"\">\n\n<h5 id=\"2-1-4-mysql的卸载方式\"><a href=\"#2-1-4-mysql的卸载方式\" class=\"headerlink\" title=\"2.1.4 mysql的卸载方式\"></a>2.1.4 mysql的卸载方式</h5><ul>\n<li>删除依赖包<ul>\n<li>-qa query all</li>\n<li>-i  insensitive  表示不区分大小写</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找mysql相关的安装包</span></span><br><span class=\"line\">rpm -qa |grep -i mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对mysql相关的包进行移除</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum会处理依赖，所以mysql-community-client-5.7.43-1.el7.x86_64即使不写上也会被删除</span></span><br><span class=\"line\">yum remove mysql-community-server mysql-community-libs mysql-community-common</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清理文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询残余mysql文件</span><br><span class=\"line\">find / -name mysql</span><br><span class=\"line\"># 删除查找出来的问价</span><br><span class=\"line\">rm -rf 文件名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-MySQL客户端的使用\"><a href=\"#2-2-MySQL客户端的使用\" class=\"headerlink\" title=\"2.2 MySQL客户端的使用\"></a>2.2 MySQL客户端的使用</h4><h5 id=\"2-2-1-linux进入客户端\"><a href=\"#2-2-1-linux进入客户端\" class=\"headerlink\" title=\"2.2.1 linux进入客户端\"></a>2.2.1 linux进入客户端</h5><ul>\n<li>命令：<code>mysql -uroot -p123456</code></li>\n</ul>\n<h5 id=\"2-2-2-连接navicat\"><a href=\"#2-2-2-连接navicat\" class=\"headerlink\" title=\"2.2.2 连接navicat\"></a>2.2.2 连接navicat</h5><img src=\"/posts/cff900a3/image-20230731195153935.png\" class=\"\">\n\n<h2 id=\"第二部分-数据库、表、列基本概念\"><a href=\"#第二部分-数据库、表、列基本概念\" class=\"headerlink\" title=\"第二部分 数据库、表、列基本概念\"></a>第二部分 数据库、表、列基本概念</h2><h3 id=\"1、MySQL数据库服务器、数据库和数据表的关系\"><a href=\"#1、MySQL数据库服务器、数据库和数据表的关系\" class=\"headerlink\" title=\"1、MySQL数据库服务器、数据库和数据表的关系\"></a>1、MySQL数据库服务器、数据库和数据表的关系</h3><ul>\n<li>安装MySQL的C&#x2F;S模式，Client&#x2F;Service，用户端&#x2F;服务端</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801190255233.png\" class=\"\">\n\n<h3 id=\"2、DDL操作数据库\"><a href=\"#2、DDL操作数据库\" class=\"headerlink\" title=\"2、DDL操作数据库\"></a>2、DDL操作数据库</h3><ul>\n<li>CRUD</li>\n<li>切换数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE db_name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-C-create-：创建\"><a href=\"#2-1-C-create-：创建\" class=\"headerlink\" title=\"2.1 C(create)：创建\"></a>2.1 C(create)：创建</h4><ul>\n<li>通过sql创建</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTREATE DATABASES [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] students;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建时指定字符集</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTREATE DATABASES [IF NOT EXISTS] students DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-R-retrieve-：查询\"><a href=\"#2-2-R-retrieve-：查询\" class=\"headerlink\" title=\"2.2 R(retrieve)：查询\"></a>2.2 R(retrieve)：查询</h4><ul>\n<li>显示所有数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示数据库创建语句<ul>\n<li>可以查看字符集</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_namae</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示当前数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-U-update-：修改\"><a href=\"#2-3-U-update-：修改\" class=\"headerlink\" title=\"2.3 U(update)：修改\"></a>2.3 U(update)：修改</h4><ul>\n<li>修改数据库的字符集</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE students CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-D-delete-：删除\"><a href=\"#2-4-D-delete-：删除\" class=\"headerlink\" title=\"2.4 D(delete)：删除\"></a>2.4 D(delete)：删除</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP DATABASE  [IF EXISTS]  db_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、DDL操作数据表\"><a href=\"#3、DDL操作数据表\" class=\"headerlink\" title=\"3、DDL操作数据表\"></a>3、DDL操作数据表</h3><h4 id=\"3-1-C-create-：创建\"><a href=\"#3-1-C-create-：创建\" class=\"headerlink\" title=\"3.1  C(create)：创建\"></a>3.1  C(create)：创建</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>]  students(</span><br><span class=\"line\">  id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  age <span class=\"type\">INT</span>,</span><br><span class=\"line\">  gender <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  clazz <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定数据表创建和修改的时间</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created_at DATETIME <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">updated_at <span class=\"type\">TIMESTAMP</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表结构</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student2 <span class=\"keyword\">like</span> student</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表结构和表数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student2 <span class=\"keyword\">as</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-R-retrieve-：查询\"><a href=\"#3-2-R-retrieve-：查询\" class=\"headerlink\" title=\"3.2 R(retrieve)：查询\"></a>3.2 R(retrieve)：查询</h4><ul>\n<li>显示所有数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span>  tables;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示建表语句</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示表结构(discribe)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DESC student;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-U-update-：修改\"><a href=\"#3-3-U-update-：修改\" class=\"headerlink\" title=\"3.3  U(update)：修改\"></a>3.3  U(update)：修改</h4><ul>\n<li>增加列，需要指定列的类型</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> length <span class=\"type\">float</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列类型,属性</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students modify length <span class=\"type\">int</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除列</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">drop</span> length;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span>  student change id sid <span class=\"type\">varchar</span>(<span class=\"number\">255</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改字符集</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> student <span class=\"type\">character</span> <span class=\"keyword\">set</span> utf8;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">table</span> students <span class=\"keyword\">to</span> student;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-D-delete-：删除\"><a href=\"#3-4-D-delete-：删除\" class=\"headerlink\" title=\"3.4 D(delete)：删除\"></a>3.4 D(delete)：删除</h4><ul>\n<li>删除数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">EXISTS</span> ] students;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三部分-数据类型和约束\"><a href=\"#第三部分-数据类型和约束\" class=\"headerlink\" title=\"第三部分 数据类型和约束\"></a>第三部分 数据类型和约束</h2><h3 id=\"1、数据类型\"><a href=\"#1、数据类型\" class=\"headerlink\" title=\"1、数据类型\"></a>1、数据类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 数值类型：INT、BIGINT、FLOAT、DOUBLE，DECIMAL等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 字符串类型：CHAR、VARCHAR、TEXT等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 日期和时间类型：DATE、DATETIME、TIMESTAMP等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 二进制类型：BLOB、LONGBLOB、VARBINARY等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 枚举类型：ENUM。</span></span><br><span class=\"line\"><span class=\"comment\">-- 集合类型：SET。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-数值类型\"><a href=\"#1-1-数值类型\" class=\"headerlink\" title=\"1.1 数值类型\"></a>1.1 数值类型</h4><ul>\n<li>DECIMAL(10,2)，表示小数，10为全部位数，2为小数位数</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801191635470.png\" class=\"\">\n\n<h4 id=\"1-2-字符类型\"><a href=\"#1-2-字符类型\" class=\"headerlink\" title=\"1.2 字符类型\"></a>1.2 字符类型</h4><ul>\n<li>UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节</li>\n<li>char是定长字符串，varchar为变长字符串<ul>\n<li>VARCHAR(255)，表示最大长度，可以根据值的长度动态变化</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801191658112.png\" class=\"\">\n\n<h4 id=\"1-3日期和时间类型\"><a href=\"#1-3日期和时间类型\" class=\"headerlink\" title=\"1.3日期和时间类型\"></a>1.3日期和时间类型</h4><img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230801191850098.png\" alt=\"image-20230801191850098\" style=\"zoom:80%;\" />\n\n<h3 id=\"2、约束\"><a href=\"#2、约束\" class=\"headerlink\" title=\"2、约束\"></a>2、约束</h3><h4 id=\"2-1-PRIMARY-KEY-（主键）\"><a href=\"#2-1-PRIMARY-KEY-（主键）\" class=\"headerlink\" title=\"2.1 PRIMARY KEY （主键）\"></a>2.1 PRIMARY KEY （主键）</h4><ul>\n<li>用于唯一标识表中的每一行数据，通常使用整数类型的列。不能为空，且不能重复</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-FOREIGN-KEY-外键\"><a href=\"#2-2-FOREIGN-KEY-外键\" class=\"headerlink\" title=\"2.2 FOREIGN KEY (外键)\"></a>2.2 FOREIGN KEY (外键)</h4><ul>\n<li>用于定义列与其他表的关系，保证引用完整性。</li>\n<li>用于建立表与表之间的关联关系。</li>\n<li>外键，关联的字段类型必须一样</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> customers (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> ,</span><br><span class=\"line\">    customer_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (</span><br><span class=\"line\">\torder_id <span class=\"type\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (customer_id) <span class=\"keyword\">REFERENCES</span> customers(id)  <span class=\"comment\">-- customer_id设置为外键</span></span><br><span class=\"line\">    \t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">-- id被引用字段</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>外键的级联</p>\n<ul>\n<li><p>cascade</p>\n</li>\n<li><p>当设置为外键为级联方式，</p>\n<p>删除或更新被引用的字段的某个值时，也会对设置为外键的字段的相同值，做出同样的删除或更新操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-UNIQUE-（唯一键）\"><a href=\"#2-3-UNIQUE-（唯一键）\" class=\"headerlink\" title=\"2.3 UNIQUE （唯一键）\"></a>2.3 UNIQUE （唯一键）</h4><ul>\n<li>保证列中的所有值都是唯一的，可以包含空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">email <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">UNIQUE</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-AUTO-INCREMENT-（自动增长）\"><a href=\"#2-4-AUTO-INCREMENT-（自动增长）\" class=\"headerlink\" title=\"2.4 AUTO_INCREMENT （自动增长）\"></a>2.4 AUTO_INCREMENT （自动增长）</h4><ul>\n<li>自动增长只能给整数类型的主键</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-NOT-NULL-（非空）\"><a href=\"#2-5-NOT-NULL-（非空）\" class=\"headerlink\" title=\"2.5 NOT NULL （非空）\"></a>2.5 NOT NULL （非空）</h4><ul>\n<li>确保列中不包含空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-DEFUALT-（默认值）\"><a href=\"#2-6-DEFUALT-（默认值）\" class=\"headerlink\" title=\"2.6 DEFUALT （默认值）\"></a>2.6 DEFUALT （默认值）</h4><ul>\n<li>在插入新行时，如果没有指定列的值，则使用默认值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">role ENUM(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;user&#x27;</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-CEACK-（检查）\"><a href=\"#2-7-CEACK-（检查）\" class=\"headerlink\" title=\"2.7 CEACK （检查）\"></a>2.7 CEACK （检查）</h4><ul>\n<li>用于确保列中的值满足特定的条件，可以使用各种表达式和运算符来定义。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age <span class=\"type\">INT</span> <span class=\"keyword\">CHECK</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四部分-SQL语言基础\"><a href=\"#第四部分-SQL语言基础\" class=\"headerlink\" title=\"第四部分 SQL语言基础\"></a>第四部分 SQL语言基础</h2><h3 id=\"1、SQL语言简介\"><a href=\"#1、SQL语言简介\" class=\"headerlink\" title=\"1、SQL语言简介\"></a>1、SQL语言简介</h3><ul>\n<li>Structured Query Language, 结构化查询语言</li>\n<li>SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能</li>\n</ul>\n<h3 id=\"2、SQL分类\"><a href=\"#2、SQL分类\" class=\"headerlink\" title=\"2、SQL分类\"></a>2、SQL分类</h3><ul>\n<li>DDL<br>数据定义语言 - Data Definition Language<br>是用于定义和管理数据库、表结构的语言，如数据表、视图、索引等</li>\n<li>DML<br>数据处理语言 - Data Manipulation Language<br>在数据库表中更新，增加和删除记录<br>如 update， insert， delete</li>\n<li>DCL<br>数据控制语言 – Data Control Language<br>指用于设置用户权限和控制事务语句<br>如 grant，revoke，if…else，while，begin transaction</li>\n<li>DQL<br>数据查询语言 – Data Query Language<br>如 select</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DDL：<span class=\"keyword\">create</span>、<span class=\"keyword\">alter</span>、<span class=\"keyword\">drop</span>、<span class=\"keyword\">truncate</span></span><br><span class=\"line\">DML：<span class=\"keyword\">insert</span>、<span class=\"keyword\">update</span>、<span class=\"keyword\">delete</span></span><br><span class=\"line\">DQL：<span class=\"keyword\">select</span></span><br><span class=\"line\">DCL：</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、SQL语言的基本操作\"><a href=\"#3、SQL语言的基本操作\" class=\"headerlink\" title=\"3、SQL语言的基本操作\"></a>3、SQL语言的基本操作</h3><h3 id=\"3-DML\"><a href=\"#3-DML\" class=\"headerlink\" title=\"3 DML\"></a>3 DML</h3><h4 id=\"3-1-INSERT-（增）\"><a href=\"#3-1-INSERT-（增）\" class=\"headerlink\" title=\"3.1 INSERT （增）\"></a>3.1 INSERT （增）</h4><ul>\n<li>一次插入一条</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>一次插入多条</p>\n<ul>\n<li><ol>\n<li></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100002</span>,&quot;吕金鹏&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;文科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100003</span>,&quot;单乐蕊&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100004</span>,&quot;葛德曜&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;理科三班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100005</span>,&quot;宣谷芹&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"2\">\n<li></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100002</span>,&quot;吕金鹏&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100003</span>,&quot;单乐蕊&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100004</span>,&quot;葛德曜&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;理科三班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100005</span>,&quot;宣谷芹&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入股插入的值对应字段名，字段名可以不写</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students <span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动递增的字段名和值不用给，但是其他字段的字段名不能缺少<ul>\n<li>id设置了自动递增</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\"><span class=\"comment\">-- 不给字段名用0或null占位</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> students <span class=\"keyword\">VALUES</span>(<span class=\"number\">0</span> <span class=\"operator\">|</span> <span class=\"keyword\">null</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;);\t</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>插入查询的数据<ul>\n<li>确保两个表的结构相同，以便可以正确执行插入操作。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTER <span class=\"keyword\">INTO</span> student  <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-UPDATE-（更新）\"><a href=\"#3-2-UPDATE-（更新）\" class=\"headerlink\" title=\"3.2 UPDATE （更新）\"></a>3.2 UPDATE （更新）</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name </span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> some_column <span class=\"operator\">=</span> some_value;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-DELETE-（删）\"><a href=\"#3-3-DELETE-（删）\" class=\"headerlink\" title=\"3.3 DELETE （删）\"></a>3.3 DELETE （删）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name</span><br><span class=\"line\">WHERE some_column = some_value;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-DQL\"><a href=\"#4-DQL\" class=\"headerlink\" title=\"4 DQL\"></a>4 DQL</h3><ul>\n<li>select 1+null  返回 null</li>\n<li>select  “a” +null 返回null</li>\n<li>select * ,1 as new from score ，会新增一个新列，值都是1</li>\n</ul>\n<h4 id=\"查询所有\"><a href=\"#查询所有\" class=\"headerlink\" title=\"查询所有\"></a>查询所有</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dinstinct\"><a href=\"#dinstinct\" class=\"headerlink\" title=\"dinstinct\"></a>dinstinct</h4><ul>\n<li>去重<ul>\n<li>去重指定列的重复值，会去除一行</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IF-function\"><a href=\"#IF-function\" class=\"headerlink\" title=\"IF function\"></a>IF function</h4><ul>\n<li>IFNULL(cid, 值1 )如果column_name为空返回 值1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT IFNULL(column_name, 值1 ) FROM table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>IF(condition,值1,值2)，如果condition成立，则返回值1，否则返回值2</li>\n</ul>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><ul>\n<li><p>字符串拼接</p>\n</li>\n<li><p>select  concat (“a”,”-“,”b”,null)  返回 null</p>\n</li>\n</ul>\n<h4 id=\"concat-ws\"><a href=\"#concat-ws\" class=\"headerlink\" title=\"concat_ws\"></a>concat_ws</h4><ul>\n<li><p>concat wiht separator 通过分隔符连接</p>\n</li>\n<li><p>select  concat_ws(“-“,”a”,”b”,null) 返回 a-b</p>\n</li>\n</ul>\n<h4 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\">LIMIT <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> age<span class=\"operator\">&gt;</span><span class=\"number\">22</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LIKE\"><a href=\"#LIKE\" class=\"headerlink\" title=\"LIKE\"></a>LIKE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> clazz <span class=\"keyword\">LIKE</span> &quot;%文科六班%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h4><ul>\n<li>ASC 升序</li>\n<li>DESC 降序</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> age<span class=\"operator\">&gt;</span><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h4><ul>\n<li>分组的字段的必须带一个，不然报错</li>\n<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>\n<li>聚合函数<ul>\n<li>max，min，avg，sum，count</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>   clazz</span><br><span class=\"line\">        ,gender</span><br><span class=\"line\">        ,<span class=\"built_in\">MAX</span>(age)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> clazz,gender;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h4><ul>\n<li>join | inner join ：内连接</li>\n<li>left join ：左外连接， right join：右外连接，  full join：全外连接</li>\n<li>ON后面是一个condition ，表示满足该condition的时候进行关联<ul>\n<li>ON t1.score &gt; t2.score  表示 当t1.score大于t2.score时，数据行进行关联</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students </span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> score  <span class=\"keyword\">ON</span> students.id<span class=\"operator\">=</span>score.id</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> subject <span class=\"keyword\">ON</span> score.subject_id<span class=\"operator\">=</span>subject.subject_id;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套查询\"><a href=\"#嵌套查询\" class=\"headerlink\" title=\"嵌套查询\"></a>嵌套查询</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>\tt1.<span class=\"operator\">*</span></span><br><span class=\"line\">\t\t\t\t,t2.subject_id</span><br><span class=\"line\">\t\t\t\t,t2.sco</span><br><span class=\"line\">\t\t\t\t,t3.subject_name </span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">select</span>\tid</span><br><span class=\"line\">                    ,name</span><br><span class=\"line\">                    ,age</span><br><span class=\"line\">                    ,gender</span><br><span class=\"line\">                    ,clazz</span><br><span class=\"line\">    <span class=\"keyword\">from</span> students) <span class=\"keyword\">as</span> t1</span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\">    (<span class=\"keyword\">select</span>\tid</span><br><span class=\"line\">                    ,subject_id</span><br><span class=\"line\">                    ,sco</span><br><span class=\"line\">    <span class=\"keyword\">from</span> score) <span class=\"keyword\">as</span> t2</span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\">    (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> subject) <span class=\"keyword\">as</span> t3</span><br><span class=\"line\">    <span class=\"keyword\">on</span> t1.id<span class=\"operator\">=</span>t2.id <span class=\"keyword\">and</span> t2.subject_id<span class=\"operator\">=</span>t3.subject_id</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-DCL\"><a href=\"#5-DCL\" class=\"headerlink\" title=\"5 DCL\"></a>5 DCL</h3><h4 id=\"5-1-管理用户\"><a href=\"#5-1-管理用户\" class=\"headerlink\" title=\"5.1 管理用户\"></a>5.1 管理用户</h4><ul>\n<li>用户所在位置   mysql.user</li>\n</ul>\n<ul>\n<li><p>添加用户：</p>\n<ul>\n<li>可以用添加的用户，代替root进行登录</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230803213442968.png\" class=\"\">\n\n<ul>\n<li><p>关闭密码复杂验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global validate_password_policy=0;</span><br><span class=\"line\">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法：</p>\n<ul>\n<li>主机名可用%代替，表示任何主机</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE USER &#x27;lisi&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>删除用户：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>修改用户密码：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 老版本的写法 </span></span><br><span class=\"line\"><span class=\"comment\">-- UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> PASSWORD <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> <span class=\"operator\">=</span> PASSWORD(<span class=\"string\">&#x27;新密码&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> <span class=\"operator\">=</span> password(<span class=\"string\">&#x27;234567&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>查询用户：</p>\n<ul>\n<li><p>1.切换到mysql数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE mysql;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.查询user表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通配符： % 表示可以在任意主机使用用户登录数据库</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-2-权限管理\"><a href=\"#5-2-权限管理\" class=\"headerlink\" title=\"5.2.权限管理\"></a>5.2.权限管理</h4><ul>\n<li>权限列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT, INSERT, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查询权限：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>授予权限：</p>\n<ul>\n<li><p>语法：</p>\n<blockquote>\n<p>with grant option 表示带上授权的功能</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> 权限列表 <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> [<span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> option];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将表db3.account的SELECT ,DELETE, UPDATE权限授予用户&#x27;lisi&#x27;@&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> ,<span class=\"keyword\">DELETE</span>, <span class=\"keyword\">UPDATE</span>  <span class=\"keyword\">ON</span> db3.account <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 给zhangsan用户所有权限  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span>  <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;zhangsan&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>撤销权限：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将用户&#x27;lisi&#x27;@&#x27;%&#x27;对于表db3.account的更新权限撤销</span></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> db3.account <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 给lisi用户撤销所有权限</span></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6、其他操作\"><a href=\"#6、其他操作\" class=\"headerlink\" title=\"6、其他操作\"></a>6、其他操作</h3><h4 id=\"6-1-LOAD\"><a href=\"#6-1-LOAD\" class=\"headerlink\" title=\"6.1 LOAD\"></a>6.1 LOAD</h4><ul>\n<li>加载数据文件（mysql shell中执行）<ul>\n<li>注意转义符号 <code>\\</code> ，可以换成<code>/</code>或 <code>\\\\</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOAD DATA LOCAL INFILE &#x27;G:/BigData26/MySQL/data/student.txt&#x27; INTO TABLE students FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>linux执行LOAD命令时，如果文件来自windows，可以用pycharm把换行符设置为LF，也就是\\n</p>\n<p>不然，会导致最后一列的值中有\\r</p>\n<ul>\n<li>windows的换行符：\\r\\n  CRLF</li>\n<li>linux的换行符：\\n  LF</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-2-mysqldump\"><a href=\"#6-2-mysqldump\" class=\"headerlink\" title=\"6.2 mysqldump\"></a>6.2 mysqldump</h4><ul>\n<li><p>dump  转储</p>\n</li>\n<li><p>把数据表对应的sql文件，从linux中导出</p>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731161918891.png\" class=\"\" title=\"image-20230731161918891\">\n\n<h4 id=\"6-3-source\"><a href=\"#6-3-source\" class=\"headerlink\" title=\"6.3 source\"></a>6.3 source</h4><ul>\n<li>执行指定sql文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  source /root/data/students.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-4-取整函数\"><a href=\"#6-4-取整函数\" class=\"headerlink\" title=\"6.4 取整函数\"></a>6.4 取整函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">round(98.99999,2) ，保留两位小数，并且四舍五入</span><br><span class=\"line\"></span><br><span class=\"line\">floor(98.99999)  向下取整</span><br><span class=\"line\"></span><br><span class=\"line\">ceil(98.99999)   向上取整</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五部分-基本查询\"><a href=\"#第五部分-基本查询\" class=\"headerlink\" title=\"第五部分 基本查询\"></a>第五部分 基本查询</h2><h3 id=\"1、WHERE-（搜索）\"><a href=\"#1、WHERE-（搜索）\" class=\"headerlink\" title=\"1、WHERE （搜索）\"></a>1、WHERE （搜索）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE子句可以使用以下比较运算符：</span><br><span class=\"line\">=（等于）</span><br><span class=\"line\">&lt;（小于）</span><br><span class=\"line\">&gt;（大于）</span><br><span class=\"line\">&lt;=（小于或等于）</span><br><span class=\"line\">&gt;=（大于或等于）</span><br><span class=\"line\">&lt;&gt;或!=（不等于）</span><br><span class=\"line\">还可以使用逻辑运算符（AND、OR和NOT）来组合多个条件。</span><br><span class=\"line\">exist</span><br><span class=\"line\">any，all 多指比较</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>模糊搜索<ul>\n<li>通配符 ：%   _</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM students WHERE clazz like ‘%文科%’</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>in(集合)<ul>\n<li>搜索符合in集合内的内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from students where clazz in (&#x27;文科一班&#x27;,&#x27;文科二班&#x27;,&#x27;文科三班&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>BETWEEN AND</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">22</span> <span class=\"keyword\">AND</span> <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 返回年龄在22到24的学生</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、ORDER-BY-（排序）\"><a href=\"#2、ORDER-BY-（排序）\" class=\"headerlink\" title=\"2、ORDER BY  （排序）\"></a>2、ORDER BY  （排序）</h3><ul>\n<li>ORDER BY子句用于对查询结果按照一个或多个列进行排序。</li>\n<li>默认升序</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column1 [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], column2 [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、GROUP-BY-和-HAVING-（分组和过滤）\"><a href=\"#3、GROUP-BY-和-HAVING-（分组和过滤）\" class=\"headerlink\" title=\"3、GROUP BY 和 HAVING  （分组和过滤）\"></a>3、GROUP BY 和 HAVING  （分组和过滤）</h3><h4 id=\"3-1-GROUP-BY\"><a href=\"#3-1-GROUP-BY\" class=\"headerlink\" title=\"3.1 GROUP BY\"></a>3.1 GROUP BY</h4><ul>\n<li><p>GROUP BY子句用于将查询结果按照一个或多个列进行分组，并对每个组进行聚合计算</p>\n<ul>\n<li>max、min、sum、avg、count</li>\n<li>count(1) 和count(*)都是统计所有的行</li>\n<li>count(cid) 统计不为null的cid个数</li>\n<li><strong>只有数值型的数据删除后为null    count  不能统计到 null值</strong></li>\n<li><strong>varchar类型的数据删除后为空字符 ‘’”    count 能够统计到 空字符</strong></li>\n</ul>\n</li>\n<li><p>想要group by 的排序不起作用，可以加上order by  null</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column1, column2, ... </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>  <span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>聚合函数运作原理<ul>\n<li>聚合函数如果没有分组的情况下，就是一次查询后再进行统计，而不是对每条数据进行统计<br>如果加上分组的话，聚合函数就是在每个分组查询完成后执行<br>如果加上聚合函数中加上if判断，那么就会等符合条件的数据查询完成后，再进行统计</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(IF(score<span class=\"operator\">&gt;=</span><span class=\"number\">60</span> , <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"operator\">/</span><span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"comment\">-- 每组大于等60的占比</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cid  </span><br><span class=\"line\"><span class=\"comment\">-- 每个分组所有数据IF判断结束后，再进行聚合操作</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-HAVING\"><a href=\"#3-2-HAVING\" class=\"headerlink\" title=\"3.2 HAVING\"></a>3.2 HAVING</h4><ul>\n<li><p>HAVING子句用于对分组后的结果进行过滤，只返回符合条件的分组。它接受一个或多个聚合函数作为参数，并可指定每个函数的过滤条件。</p>\n<ul>\n<li><p>having  不能够过滤select 没查出来的字段</p>\n<p>having 可以聚合没查的字段</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sid</span><br><span class=\"line\"><span class=\"keyword\">from</span> score</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">COUNT</span>(cid) <span class=\"comment\">-- and cid=&quot;01&quot; 会报错</span></span><br><span class=\"line\"><span class=\"comment\">-- having  不能够过滤select 没查出来的字段</span></span><br><span class=\"line\"><span class=\"comment\">-- 但是having 可以聚合没查的字段</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意</p>\n<ul>\n<li>分组的字段的必须带一个，不然报错</li>\n<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<p>- </p>\n<h3 id=\"4、LIMIT-和-OFFSET-（限制和偏移量-）\"><a href=\"#4、LIMIT-和-OFFSET-（限制和偏移量-）\" class=\"headerlink\" title=\"4、LIMIT 和 OFFSET  （限制和偏移量 ）\"></a>4、LIMIT 和 OFFSET  （限制和偏移量 ）</h3><ul>\n<li>LIMIT用于限制查询结果集的行数。</li>\n<li>OFFSET用于指定查询结果集的偏移量。<ul>\n<li>如偏移量为2，则会从第3行返回数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT number </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT number <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从offset+1开始，返回number行数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT <span class=\"keyword\">offset</span>,number</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、union-（行合并）\"><a href=\"#5、union-（行合并）\" class=\"headerlink\" title=\"5、union （行合并）\"></a>5、union （行合并）</h3><ul>\n<li>union 合并行</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> s</span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">4</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>union all 不去重</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">4</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、执行顺序\"><a href=\"#6、执行顺序\" class=\"headerlink\" title=\"6、执行顺序\"></a>6、执行顺序</h3><ul>\n<li>从上往下</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM: 从表中选择数据，生成虚拟表（视图）。</span><br><span class=\"line\">WHERE: 对虚拟表中的数据进行筛选，满足条件的数据被保留。</span><br><span class=\"line\">GROUP BY: 将数据按照指定的字段进行分组，生成分组后的结果。</span><br><span class=\"line\">SELECT: 对分组后的结果进行选择，并进行聚合函数的计算。</span><br><span class=\"line\">HAVING: 对聚合函数的结果进行筛选，满足条件的分组被保留。</span><br><span class=\"line\">ORDER BY: 对结果进行排序。</span><br><span class=\"line\">LIMIT: 限制结果的数量。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、子查询\"><a href=\"#7、子查询\" class=\"headerlink\" title=\"7、子查询\"></a>7、子查询</h3><ul>\n<li>where  sid in （select sid in student），子查询的一列可以作为in的集合</li>\n<li>hive不支持where子查询</li>\n</ul>\n<h1 id=\"扩展知识\"><a href=\"#扩展知识\" class=\"headerlink\" title=\"扩展知识\"></a>扩展知识</h1><h2 id=\"1、清空表和截断表\"><a href=\"#1、清空表和截断表\" class=\"headerlink\" title=\"1、清空表和截断表\"></a>1、清空表和截断表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清空表 delete ，存在日志和记录，可以恢复</span><br><span class=\"line\"></span><br><span class=\"line\">截断表 truncate，没有日志</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、mysql数据表在liunx的存储位置\"><a href=\"#2、mysql数据表在liunx的存储位置\" class=\"headerlink\" title=\"2、mysql数据表在liunx的存储位置\"></a>2、mysql数据表在liunx的存储位置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据存储位置  cd /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">数据存储路径配置 vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230801200055431.png\" class=\"\">\n\n<img src=\"/posts/cff900a3/image-20230801195946980.png\" class=\"\">\n\n<h2 id=\"3、中文的比较\"><a href=\"#3、中文的比较\" class=\"headerlink\" title=\"3、中文的比较\"></a>3、中文的比较</h2><ul>\n<li>中文的比较 utf8  解析为16进制比较<ul>\n<li>虽然六大于四，但是解析为utf8的十六进制之后，六的十六进制小于四的十六进制</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230803140232355.png\" class=\"\" title=\"image-20230803140232355\">\n\n<h2 id=\"4、日期函数\"><a href=\"#4、日期函数\" class=\"headerlink\" title=\"4、日期函数\"></a>4、日期函数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取当前日期时间</span><br><span class=\"line\"><span class=\"keyword\">select</span> NOW(); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">09</span>:<span class=\"number\">25</span>:<span class=\"number\">29</span></span><br><span class=\"line\"># 获取当前日期</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE(); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span></span><br><span class=\"line\"># 获取当前时间</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURTIME();  # <span class=\"number\">09</span>:<span class=\"number\">26</span>:<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 时间减少<span class=\"number\">1</span>小时（前一小时）</span><br><span class=\"line\"><span class=\"keyword\">select</span> date_sub(now(), <span class=\"type\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">hour</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 日期增加<span class=\"number\">1</span>天</span><br><span class=\"line\"><span class=\"keyword\">select</span> date_add(now(), <span class=\"type\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">day</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 日期格式化、字符串转日期</span></span><br><span class=\"line\"># 格式化参考：</span><br><span class=\"line\"><span class=\"keyword\">select</span> DATE_FORMAT(now(),<span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> DATE_FORMAT(now(),<span class=\"string\">&#x27;%Y-%m-%d %H:00:00&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">#字符串转日期</span><br><span class=\"line\"><span class=\"keyword\">select</span> str_to_date(<span class=\"string\">&#x27;2021-04-02 10:37:14&#x27;</span>, <span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">10</span>:<span class=\"number\">37</span>:<span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将具体时间时间转为timestamp</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> UNIX_TIMESTAMP(<span class=\"string\">&#x27;2017-05-15 10:37:14&#x27;</span>);<span class=\"comment\">-- 指定日期时间的时间戳：1494815834</span></span><br><span class=\"line\"><span class=\"comment\">-- 将时间戳转为具体时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1494815834</span>, <span class=\"string\">&#x27;%Y年%m月%d日 %h时%分:%s秒&#x27;</span>);<span class=\"comment\">-- 获取时间戳对应的格式化日期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 截取从pos位置开始到最后的所有str字符串</span></span><br><span class=\"line\">SUBSTR (str, pos, len)</span><br><span class=\"line\"><span class=\"comment\">-- 返回本周的第几天</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> WEEKDAY(<span class=\"string\">&#x27;2017-05-21 10:37:14&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MySQL数据常用操作\"><a href=\"#MySQL数据常用操作\" class=\"headerlink\" title=\"MySQL数据常用操作\"></a>MySQL数据常用操作</h1><ul>\n<li>注释： – # &#x2F;**&#x2F;</li>\n</ul>\n<h2 id=\"1、navicat操作MySQL\"><a href=\"#1、navicat操作MySQL\" class=\"headerlink\" title=\"1、navicat操作MySQL\"></a>1、navicat操作MySQL</h2><ul>\n<li>可以用dbeaver平替</li>\n<li>首先连接</li>\n<li>创建数据库</li>\n</ul>\n<h3 id=\"1-1-创建数据表\"><a href=\"#1-1-创建数据表\" class=\"headerlink\" title=\"1.1 创建数据表\"></a>1.1 创建数据表</h3><ul>\n<li>创建数据表，创建完成后要保存</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731201052074.png\" class=\"\">\n\n<ul>\n<li><p>查看元数据</p>\n<ul>\n<li>元数据<ul>\n<li>元数据（Metadata）是关于数据的数据，用于描述数据的特征、属性和内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>导出建表语句</p>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230731201343039.png\" alt=\"image-20230731201343039\"></p>\n<h3 id=\"1-2-执行sql语句\"><a href=\"#1-2-执行sql语句\" class=\"headerlink\" title=\"1.2 执行sql语句\"></a>1.2 执行sql语句</h3><h3 id=\"1-3-导入数据文件\"><a href=\"#1-3-导入数据文件\" class=\"headerlink\" title=\"1.3 导入数据文件\"></a>1.3 导入数据文件</h3><ul>\n<li>导入向导</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204742543.png\" class=\"\">\n\n<ul>\n<li>选择文件格式</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204854988.png\" class=\"\">\n\n<ul>\n<li>选择文件路径</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204818468.png\" class=\"\">\n\n<ul>\n<li>配置换行符和分隔符</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205050008.png\" class=\"\">\n\n<ul>\n<li>设置head</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205204993.png\" class=\"\">\n\n<ul>\n<li>设置对应字段</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205244443.png\" class=\"\">\n\n<h3 id=\"1-4-导出数据文件\"><a href=\"#1-4-导出数据文件\" class=\"headerlink\" title=\"1.4 导出数据文件\"></a>1.4 导出数据文件</h3><ul>\n<li>导出向导</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731212623170.png\" class=\"\">\n\n<ul>\n<li>选择数据表</li>\n<li></li>\n</ul>\n<h3 id=\"1-5-导出sql文件\"><a href=\"#1-5-导出sql文件\" class=\"headerlink\" title=\"1.5 导出sql文件\"></a>1.5 导出sql文件</h3><ul>\n<li>转储SQL文件</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731213059217.png\" class=\"\">\n\n<h3 id=\"1-6-运行sql文件\"><a href=\"#1-6-运行sql文件\" class=\"headerlink\" title=\"1.6 运行sql文件\"></a>1.6 运行sql文件</h3><img src=\"/posts/cff900a3/image-20230731213327762.png\" class=\"\">\n\n<h2 id=\"2、python操作MySQL\"><a href=\"#2、python操作MySQL\" class=\"headerlink\" title=\"2、python操作MySQL\"></a>2、python操作MySQL</h2><h3 id=\"2-1-准备\"><a href=\"#2-1-准备\" class=\"headerlink\" title=\"2.1 准备\"></a>2.1 准备</h3><ul>\n<li>安装pymysql库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入pymysql库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库连接</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn = pymysql.connect(host=&#x27;master&#x27;, port=3306, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, database=&#x27;school&#x27;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库操作对象：游标</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor = conn.cursor()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行sql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = &quot;select * from students where id=1500100001&quot;</span><br><span class=\"line\">cursor.execute(sql)  # 返回指定数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取DQL返回数据<ul>\n<li>值得注意的是，每次查询后的，下一次查询的起始位置就是上一次查询的结束位置<br>这点和文件读写很像</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 查询一条数据 ，返回一个元组</span></span><br><span class=\"line\">rows1 = cursor.fetchone() </span><br><span class=\"line\"><span class=\"comment\"># 查询所有数据，返回一个元组</span></span><br><span class=\"line\">rows2 = cursor.fetchall()  </span><br><span class=\"line\"> <span class=\"comment\"># 查询指定行数</span></span><br><span class=\"line\">rows3 = cursor.fetchmany(<span class=\"number\">10</span>) </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pymysql执行DML时，需要手动提交事务</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span><span class=\"operator\">=</span>&quot;insert into students values(0,&#x27;name&#x27;,&#x27;age&#x27;,&#x27;gender&#x27;,&#x27;clazz&#x27;)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"keyword\">sql</span>)</span><br><span class=\"line\">connect.commit()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回滚<ul>\n<li>如果执行出错，可以通过回滚的方式，让数据恢复到执行之前的状态</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.rollback()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>关闭连接</p>\n<ul>\n<li>手动关闭</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动关闭<ul>\n<li>with语句，自动执行关闭语句</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> pymysql.connect() <span class=\"keyword\">as</span> conn:  </span><br><span class=\"line\">\t<span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> <span class=\"keyword\">cursor</span>:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-2-传入参数\"><a href=\"#2-2-传入参数\" class=\"headerlink\" title=\"2.2 传入参数\"></a>2.2 传入参数</h3><h4 id=\"1、静态指定\"><a href=\"#1、静态指定\" class=\"headerlink\" title=\"1、静态指定\"></a>1、静态指定</h4><ul>\n<li>静态指定的参数，如果是字符串要加上引号</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=&#x27;1500100001&#x27;&quot;</span></span><br><span class=\"line\">cursor.execute(sql)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、字符串拼接\"><a href=\"#2、字符串拼接\" class=\"headerlink\" title=\"2、字符串拼接\"></a>2、字符串拼接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=&quot;</span> +<span class=\"string\">&quot;&#x27;1500100001&#x27;&quot;</span></span><br><span class=\"line\">cursor.execute(sql)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、占位符\"><a href=\"#3、占位符\" class=\"headerlink\" title=\"3、占位符\"></a>3、占位符</h4><ul>\n<li>execute<ul>\n<li>通过占位符，动态指定sql中的参数<ul>\n<li>不要因为参数是 string 就在 %s 两边加引号，mysql 会自动去处理。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=%s&quot;</span></span><br><span class=\"line\">cursor.execute(sql, (<span class=\"string\">&quot;1500100001&quot;</span>))  <span class=\"comment\"># 返回指定数据</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>executemany<ul>\n<li>传入可迭代的数据容器，并且元素是元组<ul>\n<li>根据元素个数，决定sql执行次数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span> <span class=\"operator\">=</span> &quot;select * from students where id=%s&quot;</span><br><span class=\"line\">cursor.executemany(<span class=\"keyword\">sql</span>, [(&quot;1500100001&quot;), (&quot;1500100002&quot;)])  # 返回指定数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-sql注入\"><a href=\"#2-3-sql注入\" class=\"headerlink\" title=\"2.3 sql注入\"></a>2.3 sql注入</h3><ul>\n<li>如果传参方式是 字符串拼接，可以通过sql注入的方式，导致where失效，获取所有数据<ul>\n<li>or 1&#x3D;1 可以让where失效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span>&quot;&#x27;1500100001&#x27; or 1=1&quot;</span><br><span class=\"line\"><span class=\"keyword\">sql</span> <span class=\"operator\">=</span> &quot;select * from where id=&quot;<span class=\"operator\">+</span>id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过占位符传参，可以避免sql注入<ul>\n<li>pymysql 的 execute 支持参数化 sql，通过占位符 %s 配合参数就可以实现 sql 注入问题的避免。</li>\n<li>这样参数化的方式，让 mysql 通过 预处理 的方式避免了 sql 注入的存在。</li>\n<li>需要注意的是，不要因为参数是其他类型而换掉 %s，pymysql 的占位符并不是 python 的通用占位符。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对比字符串拼接和占位符</span></span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=%s&quot;</span></span><br><span class=\"line\">cursor.execute(sql, (<span class=\"string\">&quot;1500100001 or 1=1&quot;</span>))  <span class=\"comment\"># 返回指定数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.fetchall())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">id</span> = <span class=\"string\">&quot;1500100001 or 1=1&quot;</span></span><br><span class=\"line\">sql2 = <span class=\"string\">&quot;select * from students where id=&quot;</span> + <span class=\"built_in\">id</span></span><br><span class=\"line\"><span class=\"comment\"># cursor.execute(sql2)  # 返回所有数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-把文件中的数据，插入到数据库中\"><a href=\"#2-4-把文件中的数据，插入到数据库中\" class=\"headerlink\" title=\"2.4 把文件中的数据，插入到数据库中\"></a>2.4 把文件中的数据，插入到数据库中</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 把文件中的数据，插入到数据库中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./score.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        line_list = fp.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    tuple_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> line_list:</span><br><span class=\"line\">        line_split = line.strip().split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">        tuple_list.append((line_split[<span class=\"number\">0</span>],line_split[<span class=\"number\">1</span>],line_split[<span class=\"number\">2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pymysql.connect(host=<span class=\"string\">&#x27;master&#x27;</span>,port=<span class=\"number\">3306</span>,user=<span class=\"string\">&#x27;root&#x27;</span>,password=<span class=\"string\">&#x27;123456&#x27;</span>,database=<span class=\"string\">&#x27;school&#x27;</span>) <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cursor:</span><br><span class=\"line\">            sql = <span class=\"string\">&quot;INSERT INTO score VALUES (%s, %s, %s)&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cursor.executemany(sql, tuple_list)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">                conn.rollback()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                conn.commit()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h1><ul>\n<li>excel最多存104万行，1万列、</li>\n</ul>\n<h2 id=\"第一部分-MySql介绍和安装\"><a href=\"#第一部分-MySql介绍和安装\" class=\"headerlink\" title=\"第一部分 MySql介绍和安装\"></a>第一部分 MySql介绍和安装</h2><h3 id=\"1、MySQL介绍\"><a href=\"#1、MySQL介绍\" class=\"headerlink\" title=\"1、MySQL介绍\"></a>1、MySQL介绍</h3><h4 id=\"1-1-数据库\"><a href=\"#1-1-数据库\" class=\"headerlink\" title=\"1.1 数据库\"></a>1.1 数据库</h4><ul>\n<li>数据库是数据的仓库</li>\n<li>据库依据数据结构来组织数据,因为数据结构的存在,所以看到的数据是条理化的</li>\n<li>根据数据结构的不同,数据库分为关系型数据库和非关系型数据库</li>\n</ul>\n<h4 id=\"1-2-关系型数据库\"><a href=\"#1-2-关系型数据库\" class=\"headerlink\" title=\"1.2 关系型数据库\"></a>1.2 关系型数据库</h4><ul>\n<li>关系型数据库是依据关系模型创建数据库</li>\n<li>关系模型就是一对一,一对多,多对多等关系模型,关系模型就是存储格式是以行列组成的二维表格,所以一个关系型数据库就是由二维表之间的联系所组成的一个数据组织</li>\n</ul>\n<h4 id=\"1-3-非关系型数据库\"><a href=\"#1-3-非关系型数据库\" class=\"headerlink\" title=\"1.3 非关系型数据库\"></a>1.3 非关系型数据库</h4><ul>\n<li>由于关系型太大和复杂,所以一般使用“非关系型数据”来表示其他类型的数据库<br>菲关系型的模型比如:<ul>\n<li>列模型:存储的数据是一列一列,关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录</li>\n<li>键值对模型:存储的数据是一个个键值对,比如name:lisi</li>\n<li>文档类模型:以一个个文档来存储数据,类似于键值对</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-4-MySQL概述\"><a href=\"#1-4-MySQL概述\" class=\"headerlink\" title=\"1.4 MySQL概述\"></a>1.4 MySQL概述</h4><ul>\n<li>MySQL是一种开源关系型数据库管理系统，最初由瑞典MySQL AB公司的Michael Widenius和David Axmark于1995年创建。</li>\n<li>MySQL以其速度、可靠性、灵活性和易用性而闻名，并广泛用于Web应用程序开发和其他需要高度可靠数据管理的应用程序中。</li>\n</ul>\n<h3 id=\"2、MySQL安装\"><a href=\"#2、MySQL安装\" class=\"headerlink\" title=\"2、MySQL安装\"></a>2、MySQL安装</h3><h4 id=\"2-1-MySQL安装和配置\"><a href=\"#2-1-MySQL安装和配置\" class=\"headerlink\" title=\"2.1 MySQL安装和配置\"></a>2.1 MySQL安装和配置</h4><h5 id=\"2-1-1-安装mysql5-7\"><a href=\"#2-1-1-安装mysql5-7\" class=\"headerlink\" title=\"2.1.1 安装mysql5.7\"></a>2.1.1 安装mysql5.7</h5><ul>\n<li>从网上下载<code>mysql</code>的<code>yum</code>存储库<ul>\n<li>-c，未下载完成则继续下载</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装<code>mysql</code>的<code>yum</code>存储库<ul>\n<li>-y yes ，表示y&#x2F;n选项执行yes</li>\n<li>通过安装此 RPM 包，可以在系统中启用 <code>MySQL 5.7</code> 的官方存储库，然后使用 <code>yum</code> 命令来安装 <code>MySQL 5.7</code> 和其他相关的软件包</li>\n<li>这个 RPM 包只是为了添加存储库，它本身并不包含 <code>MySQL 5.7</code> 的实际软件包。</li>\n<li>这个存储库安装后，和yum的存储库在同一个文件夹里，也就是&#x2F;etc&#x2F;yum.repos.d&#x2F;</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731191501709.png\" class=\"\" title=\"image-20230731191501709\">\n\n<img src=\"/posts/cff900a3/image-20230731192045754.png\" class=\"\" title=\"image-20230731192045754\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用yum安装<code>mysql5.7</code></p>\n<ul>\n<li><code>nogpgcheck</code>，不检查软件包的<code>gpg</code>签名，也就是不进行安全验证</li>\n<li>下图为mysql的依赖安装</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731191806584.png\" class=\"\" title=\"image-20230731191806584.png\"></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y --nogpgcheck install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载mysql的yum 存储库(repository)<ul>\n<li>防止yum操作都会自动更新，需要把这个卸载掉</li>\n<li>卸载后&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹中，mysql的yum存储库就会被删掉</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2-启动并配置mysql\"><a href=\"#2-1-2-启动并配置mysql\" class=\"headerlink\" title=\"2.1.2 启动并配置mysql\"></a>2.1.2 启动并配置mysql</h5><ul>\n<li>启动mysql服务<ul>\n<li>mysql的服务在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;中，所以sytemctl命令可以控制</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">or</span></span><br><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置开机自启</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从mysqld.log文件中获取临时密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230731192623335.png\" class=\"\" title=\"image-20230731192623335\">\n\n<ul>\n<li>登录mysql<ul>\n<li>-p后有空格会123456会被认为是数据库名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">请输入密码：7,&gt;+0Od:XI&lt;L</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭密码复杂验证<ul>\n<li>进入mysql客户端再进行</li>\n<li><code>validate_password_policy</code> 是 <code>MySQL</code> 数据库中的一个系统变量，用于设置密码策略的参数<ul>\n<li><code>0</code>：低强度。不执行密码强度检查，接受任何密码。</li>\n</ul>\n</li>\n<li>将 <code>validate_password_length</code> 设置为 <code>1</code> 是一个非常低的密码最小长度要求，它要求密码至少只需要一个字符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global validate_password_policy=0;</span><br><span class=\"line\">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置密码<ul>\n<li>修改当前登录用户的密码，其中：user() 方法将返回当前用户信息</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter user user() identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>开放root用户远程登录</p>\n<ul>\n<li>赋予远程连接权限，可以用<code>navicat</code>连接操作数据库</li>\n<li><code>GRANT ALL PRIVILEGES</code>：该命令表示授予所有权限，即允许用户执行数据库中的任何操作，包括 SELECT、INSERT、UPDATE、DELETE 等。</li>\n<li><code>ON *.*</code>：这里的 <code>*.*</code> 表示该授权适用于所有数据库（所有库的所有表）。</li>\n<li><code>TO &#39;root&#39;@&#39;%&#39;</code>：这指定了接收权限的用户。在这里，’root’ 是用户名，’%’ 表示该用户可以从任何主机（IP 地址）连接到 MySQL 服务器。</li>\n<li><code>IDENTIFIED BY &#39;123456&#39;</code>：这设置了用户 ‘root’ 的密码为 ‘123456’。</li>\n<li><code>WITH GRANT OPTION</code>：这个选项允许用户 ‘root’ 授予其他用户与自己相同的权限。如果没有这个选项，用户 ‘root’ 将无法将自己的权限授予其他用户。</li>\n</ul>\n<p>需要特别注意的是，将 ‘root’ 用户的权限设置为 “ALL PRIVILEGES” 并允许从任何主机连接，是一个安全风险。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换数据库</span></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改权限</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新权限</span></span><br><span class=\"line\">flush privileges; </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出</span></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-3-修改mysql编码\"><a href=\"#2-1-3-修改mysql编码\" class=\"headerlink\" title=\"2.1.3 修改mysql编码\"></a>2.1.3 修改mysql编码</h5><ul>\n<li><p>修改编码防止中文乱码</p>\n</li>\n<li><p>编辑配置文件：<code>vim  /etc/my.cnf</code></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_general_ci</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启mysql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登录并查看mysql编码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">123456需替换为自己的密码</span></span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需在MySQL的shell中执行</span></span><br><span class=\"line\">show variables like &quot;%char%&quot;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230731194630101-1692105959933.png\" class=\"\">\n\n<h5 id=\"2-1-4-mysql的卸载方式\"><a href=\"#2-1-4-mysql的卸载方式\" class=\"headerlink\" title=\"2.1.4 mysql的卸载方式\"></a>2.1.4 mysql的卸载方式</h5><ul>\n<li>删除依赖包<ul>\n<li>-qa query all</li>\n<li>-i  insensitive  表示不区分大小写</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找mysql相关的安装包</span></span><br><span class=\"line\">rpm -qa |grep -i mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对mysql相关的包进行移除</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum会处理依赖，所以mysql-community-client-5.7.43-1.el7.x86_64即使不写上也会被删除</span></span><br><span class=\"line\">yum remove mysql-community-server mysql-community-libs mysql-community-common</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清理文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询残余mysql文件</span><br><span class=\"line\">find / -name mysql</span><br><span class=\"line\"># 删除查找出来的问价</span><br><span class=\"line\">rm -rf 文件名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-MySQL客户端的使用\"><a href=\"#2-2-MySQL客户端的使用\" class=\"headerlink\" title=\"2.2 MySQL客户端的使用\"></a>2.2 MySQL客户端的使用</h4><h5 id=\"2-2-1-linux进入客户端\"><a href=\"#2-2-1-linux进入客户端\" class=\"headerlink\" title=\"2.2.1 linux进入客户端\"></a>2.2.1 linux进入客户端</h5><ul>\n<li>命令：<code>mysql -uroot -p123456</code></li>\n</ul>\n<h5 id=\"2-2-2-连接navicat\"><a href=\"#2-2-2-连接navicat\" class=\"headerlink\" title=\"2.2.2 连接navicat\"></a>2.2.2 连接navicat</h5><img src=\"/posts/cff900a3/image-20230731195153935.png\" class=\"\">\n\n<h2 id=\"第二部分-数据库、表、列基本概念\"><a href=\"#第二部分-数据库、表、列基本概念\" class=\"headerlink\" title=\"第二部分 数据库、表、列基本概念\"></a>第二部分 数据库、表、列基本概念</h2><h3 id=\"1、MySQL数据库服务器、数据库和数据表的关系\"><a href=\"#1、MySQL数据库服务器、数据库和数据表的关系\" class=\"headerlink\" title=\"1、MySQL数据库服务器、数据库和数据表的关系\"></a>1、MySQL数据库服务器、数据库和数据表的关系</h3><ul>\n<li>安装MySQL的C&#x2F;S模式，Client&#x2F;Service，用户端&#x2F;服务端</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801190255233.png\" class=\"\">\n\n<h3 id=\"2、DDL操作数据库\"><a href=\"#2、DDL操作数据库\" class=\"headerlink\" title=\"2、DDL操作数据库\"></a>2、DDL操作数据库</h3><ul>\n<li>CRUD</li>\n<li>切换数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE db_name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-C-create-：创建\"><a href=\"#2-1-C-create-：创建\" class=\"headerlink\" title=\"2.1 C(create)：创建\"></a>2.1 C(create)：创建</h4><ul>\n<li>通过sql创建</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTREATE DATABASES [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] students;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建时指定字符集</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTREATE DATABASES [IF NOT EXISTS] students DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-R-retrieve-：查询\"><a href=\"#2-2-R-retrieve-：查询\" class=\"headerlink\" title=\"2.2 R(retrieve)：查询\"></a>2.2 R(retrieve)：查询</h4><ul>\n<li>显示所有数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示数据库创建语句<ul>\n<li>可以查看字符集</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_namae</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示当前数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-U-update-：修改\"><a href=\"#2-3-U-update-：修改\" class=\"headerlink\" title=\"2.3 U(update)：修改\"></a>2.3 U(update)：修改</h4><ul>\n<li>修改数据库的字符集</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE students CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-D-delete-：删除\"><a href=\"#2-4-D-delete-：删除\" class=\"headerlink\" title=\"2.4 D(delete)：删除\"></a>2.4 D(delete)：删除</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP DATABASE  [IF EXISTS]  db_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、DDL操作数据表\"><a href=\"#3、DDL操作数据表\" class=\"headerlink\" title=\"3、DDL操作数据表\"></a>3、DDL操作数据表</h3><h4 id=\"3-1-C-create-：创建\"><a href=\"#3-1-C-create-：创建\" class=\"headerlink\" title=\"3.1  C(create)：创建\"></a>3.1  C(create)：创建</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>]  students(</span><br><span class=\"line\">  id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">  name <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  age <span class=\"type\">INT</span>,</span><br><span class=\"line\">  gender <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  clazz <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定数据表创建和修改的时间</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created_at DATETIME <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">updated_at <span class=\"type\">TIMESTAMP</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表结构</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student2 <span class=\"keyword\">like</span> student</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表结构和表数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student2 <span class=\"keyword\">as</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-R-retrieve-：查询\"><a href=\"#3-2-R-retrieve-：查询\" class=\"headerlink\" title=\"3.2 R(retrieve)：查询\"></a>3.2 R(retrieve)：查询</h4><ul>\n<li>显示所有数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span>  tables;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示建表语句</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示表结构(discribe)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DESC student;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-U-update-：修改\"><a href=\"#3-3-U-update-：修改\" class=\"headerlink\" title=\"3.3  U(update)：修改\"></a>3.3  U(update)：修改</h4><ul>\n<li>增加列，需要指定列的类型</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">add</span> length <span class=\"type\">float</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列类型,属性</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students modify length <span class=\"type\">int</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除列</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> students <span class=\"keyword\">drop</span> length;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span>  student change id sid <span class=\"type\">varchar</span>(<span class=\"number\">255</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改字符集</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> student <span class=\"type\">character</span> <span class=\"keyword\">set</span> utf8;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">table</span> students <span class=\"keyword\">to</span> student;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-D-delete-：删除\"><a href=\"#3-4-D-delete-：删除\" class=\"headerlink\" title=\"3.4 D(delete)：删除\"></a>3.4 D(delete)：删除</h4><ul>\n<li>删除数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">EXISTS</span> ] students;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三部分-数据类型和约束\"><a href=\"#第三部分-数据类型和约束\" class=\"headerlink\" title=\"第三部分 数据类型和约束\"></a>第三部分 数据类型和约束</h2><h3 id=\"1、数据类型\"><a href=\"#1、数据类型\" class=\"headerlink\" title=\"1、数据类型\"></a>1、数据类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 数值类型：INT、BIGINT、FLOAT、DOUBLE，DECIMAL等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 字符串类型：CHAR、VARCHAR、TEXT等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 日期和时间类型：DATE、DATETIME、TIMESTAMP等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 二进制类型：BLOB、LONGBLOB、VARBINARY等。</span></span><br><span class=\"line\"><span class=\"comment\">-- 枚举类型：ENUM。</span></span><br><span class=\"line\"><span class=\"comment\">-- 集合类型：SET。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-数值类型\"><a href=\"#1-1-数值类型\" class=\"headerlink\" title=\"1.1 数值类型\"></a>1.1 数值类型</h4><ul>\n<li>DECIMAL(10,2)，表示小数，10为全部位数，2为小数位数</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801191635470.png\" class=\"\">\n\n<h4 id=\"1-2-字符类型\"><a href=\"#1-2-字符类型\" class=\"headerlink\" title=\"1.2 字符类型\"></a>1.2 字符类型</h4><ul>\n<li>UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节</li>\n<li>char是定长字符串，varchar为变长字符串<ul>\n<li>VARCHAR(255)，表示最大长度，可以根据值的长度动态变化</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230801191658112.png\" class=\"\">\n\n<h4 id=\"1-3日期和时间类型\"><a href=\"#1-3日期和时间类型\" class=\"headerlink\" title=\"1.3日期和时间类型\"></a>1.3日期和时间类型</h4><img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230801191850098.png\" alt=\"image-20230801191850098\" style=\"zoom:80%;\" />\n\n<h3 id=\"2、约束\"><a href=\"#2、约束\" class=\"headerlink\" title=\"2、约束\"></a>2、约束</h3><h4 id=\"2-1-PRIMARY-KEY-（主键）\"><a href=\"#2-1-PRIMARY-KEY-（主键）\" class=\"headerlink\" title=\"2.1 PRIMARY KEY （主键）\"></a>2.1 PRIMARY KEY （主键）</h4><ul>\n<li>用于唯一标识表中的每一行数据，通常使用整数类型的列。不能为空，且不能重复</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-FOREIGN-KEY-外键\"><a href=\"#2-2-FOREIGN-KEY-外键\" class=\"headerlink\" title=\"2.2 FOREIGN KEY (外键)\"></a>2.2 FOREIGN KEY (外键)</h4><ul>\n<li>用于定义列与其他表的关系，保证引用完整性。</li>\n<li>用于建立表与表之间的关联关系。</li>\n<li>外键，关联的字段类型必须一样</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> customers (</span><br><span class=\"line\">    id <span class=\"type\">INT</span> ,</span><br><span class=\"line\">    customer_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> orders (</span><br><span class=\"line\">\torder_id <span class=\"type\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (customer_id) <span class=\"keyword\">REFERENCES</span> customers(id)  <span class=\"comment\">-- customer_id设置为外键</span></span><br><span class=\"line\">    \t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">-- id被引用字段</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>外键的级联</p>\n<ul>\n<li><p>cascade</p>\n</li>\n<li><p>当设置为外键为级联方式，</p>\n<p>删除或更新被引用的字段的某个值时，也会对设置为外键的字段的相同值，做出同样的删除或更新操作</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-UNIQUE-（唯一键）\"><a href=\"#2-3-UNIQUE-（唯一键）\" class=\"headerlink\" title=\"2.3 UNIQUE （唯一键）\"></a>2.3 UNIQUE （唯一键）</h4><ul>\n<li>保证列中的所有值都是唯一的，可以包含空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">email <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">UNIQUE</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-AUTO-INCREMENT-（自动增长）\"><a href=\"#2-4-AUTO-INCREMENT-（自动增长）\" class=\"headerlink\" title=\"2.4 AUTO_INCREMENT （自动增长）\"></a>2.4 AUTO_INCREMENT （自动增长）</h4><ul>\n<li>自动增长只能给整数类型的主键</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-NOT-NULL-（非空）\"><a href=\"#2-5-NOT-NULL-（非空）\" class=\"headerlink\" title=\"2.5 NOT NULL （非空）\"></a>2.5 NOT NULL （非空）</h4><ul>\n<li>确保列中不包含空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-DEFUALT-（默认值）\"><a href=\"#2-6-DEFUALT-（默认值）\" class=\"headerlink\" title=\"2.6 DEFUALT （默认值）\"></a>2.6 DEFUALT （默认值）</h4><ul>\n<li>在插入新行时，如果没有指定列的值，则使用默认值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">role ENUM(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;user&#x27;</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-CEACK-（检查）\"><a href=\"#2-7-CEACK-（检查）\" class=\"headerlink\" title=\"2.7 CEACK （检查）\"></a>2.7 CEACK （检查）</h4><ul>\n<li>用于确保列中的值满足特定的条件，可以使用各种表达式和运算符来定义。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age <span class=\"type\">INT</span> <span class=\"keyword\">CHECK</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四部分-SQL语言基础\"><a href=\"#第四部分-SQL语言基础\" class=\"headerlink\" title=\"第四部分 SQL语言基础\"></a>第四部分 SQL语言基础</h2><h3 id=\"1、SQL语言简介\"><a href=\"#1、SQL语言简介\" class=\"headerlink\" title=\"1、SQL语言简介\"></a>1、SQL语言简介</h3><ul>\n<li>Structured Query Language, 结构化查询语言</li>\n<li>SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能</li>\n</ul>\n<h3 id=\"2、SQL分类\"><a href=\"#2、SQL分类\" class=\"headerlink\" title=\"2、SQL分类\"></a>2、SQL分类</h3><ul>\n<li>DDL<br>数据定义语言 - Data Definition Language<br>是用于定义和管理数据库、表结构的语言，如数据表、视图、索引等</li>\n<li>DML<br>数据处理语言 - Data Manipulation Language<br>在数据库表中更新，增加和删除记录<br>如 update， insert， delete</li>\n<li>DCL<br>数据控制语言 – Data Control Language<br>指用于设置用户权限和控制事务语句<br>如 grant，revoke，if…else，while，begin transaction</li>\n<li>DQL<br>数据查询语言 – Data Query Language<br>如 select</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DDL：<span class=\"keyword\">create</span>、<span class=\"keyword\">alter</span>、<span class=\"keyword\">drop</span>、<span class=\"keyword\">truncate</span></span><br><span class=\"line\">DML：<span class=\"keyword\">insert</span>、<span class=\"keyword\">update</span>、<span class=\"keyword\">delete</span></span><br><span class=\"line\">DQL：<span class=\"keyword\">select</span></span><br><span class=\"line\">DCL：</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、SQL语言的基本操作\"><a href=\"#3、SQL语言的基本操作\" class=\"headerlink\" title=\"3、SQL语言的基本操作\"></a>3、SQL语言的基本操作</h3><h3 id=\"3-DML\"><a href=\"#3-DML\" class=\"headerlink\" title=\"3 DML\"></a>3 DML</h3><h4 id=\"3-1-INSERT-（增）\"><a href=\"#3-1-INSERT-（增）\" class=\"headerlink\" title=\"3.1 INSERT （增）\"></a>3.1 INSERT （增）</h4><ul>\n<li>一次插入一条</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>一次插入多条</p>\n<ul>\n<li><ol>\n<li></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100002</span>,&quot;吕金鹏&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;文科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100003</span>,&quot;单乐蕊&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科六班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100004</span>,&quot;葛德曜&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;理科三班&quot;);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100005</span>,&quot;宣谷芹&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"2\">\n<li></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (id,name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100002</span>,&quot;吕金鹏&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100003</span>,&quot;单乐蕊&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科六班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100004</span>,&quot;葛德曜&quot;,<span class=\"number\">24</span>,&quot;男&quot;,&quot;理科三班&quot;)</span><br><span class=\"line\">,(<span class=\"number\">1500100005</span>,&quot;宣谷芹&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入股插入的值对应字段名，字段名可以不写</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students <span class=\"keyword\">VALUES</span> (<span class=\"number\">1500100001</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动递增的字段名和值不用给，但是其他字段的字段名不能缺少<ul>\n<li>id设置了自动递增</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> students (name,age,gender,clazz)<span class=\"keyword\">VALUES</span> (&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class=\"line\"><span class=\"comment\">-- 不给字段名用0或null占位</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> students <span class=\"keyword\">VALUES</span>(<span class=\"number\">0</span> <span class=\"operator\">|</span> <span class=\"keyword\">null</span>,&quot;施笑槐&quot;,<span class=\"number\">22</span>,&quot;女&quot;,&quot;文科六班&quot;);\t</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>插入查询的数据<ul>\n<li>确保两个表的结构相同，以便可以正确执行插入操作。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTER <span class=\"keyword\">INTO</span> student  <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> student2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-UPDATE-（更新）\"><a href=\"#3-2-UPDATE-（更新）\" class=\"headerlink\" title=\"3.2 UPDATE （更新）\"></a>3.2 UPDATE （更新）</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name </span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> some_column <span class=\"operator\">=</span> some_value;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-DELETE-（删）\"><a href=\"#3-3-DELETE-（删）\" class=\"headerlink\" title=\"3.3 DELETE （删）\"></a>3.3 DELETE （删）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name</span><br><span class=\"line\">WHERE some_column = some_value;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-DQL\"><a href=\"#4-DQL\" class=\"headerlink\" title=\"4 DQL\"></a>4 DQL</h3><ul>\n<li>select 1+null  返回 null</li>\n<li>select  “a” +null 返回null</li>\n<li>select * ,1 as new from score ，会新增一个新列，值都是1</li>\n</ul>\n<h4 id=\"查询所有\"><a href=\"#查询所有\" class=\"headerlink\" title=\"查询所有\"></a>查询所有</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dinstinct\"><a href=\"#dinstinct\" class=\"headerlink\" title=\"dinstinct\"></a>dinstinct</h4><ul>\n<li>去重<ul>\n<li>去重指定列的重复值，会去除一行</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IF-function\"><a href=\"#IF-function\" class=\"headerlink\" title=\"IF function\"></a>IF function</h4><ul>\n<li>IFNULL(cid, 值1 )如果column_name为空返回 值1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT IFNULL(column_name, 值1 ) FROM table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>IF(condition,值1,值2)，如果condition成立，则返回值1，否则返回值2</li>\n</ul>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><ul>\n<li><p>字符串拼接</p>\n</li>\n<li><p>select  concat (“a”,”-“,”b”,null)  返回 null</p>\n</li>\n</ul>\n<h4 id=\"concat-ws\"><a href=\"#concat-ws\" class=\"headerlink\" title=\"concat_ws\"></a>concat_ws</h4><ul>\n<li><p>concat wiht separator 通过分隔符连接</p>\n</li>\n<li><p>select  concat_ws(“-“,”a”,”b”,null) 返回 a-b</p>\n</li>\n</ul>\n<h4 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\">LIMIT <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> age<span class=\"operator\">&gt;</span><span class=\"number\">22</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LIKE\"><a href=\"#LIKE\" class=\"headerlink\" title=\"LIKE\"></a>LIKE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> clazz <span class=\"keyword\">LIKE</span> &quot;%文科六班%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h4><ul>\n<li>ASC 升序</li>\n<li>DESC 降序</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> age<span class=\"operator\">&gt;</span><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h4><ul>\n<li>分组的字段的必须带一个，不然报错</li>\n<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>\n<li>聚合函数<ul>\n<li>max，min，avg，sum，count</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span>   clazz</span><br><span class=\"line\">        ,gender</span><br><span class=\"line\">        ,<span class=\"built_in\">MAX</span>(age)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> clazz,gender;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h4><ul>\n<li>join | inner join ：内连接</li>\n<li>left join ：左外连接， right join：右外连接，  full join：全外连接</li>\n<li>ON后面是一个condition ，表示满足该condition的时候进行关联<ul>\n<li>ON t1.score &gt; t2.score  表示 当t1.score大于t2.score时，数据行进行关联</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> students </span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> score  <span class=\"keyword\">ON</span> students.id<span class=\"operator\">=</span>score.id</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> subject <span class=\"keyword\">ON</span> score.subject_id<span class=\"operator\">=</span>subject.subject_id;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套查询\"><a href=\"#嵌套查询\" class=\"headerlink\" title=\"嵌套查询\"></a>嵌套查询</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>\tt1.<span class=\"operator\">*</span></span><br><span class=\"line\">\t\t\t\t,t2.subject_id</span><br><span class=\"line\">\t\t\t\t,t2.sco</span><br><span class=\"line\">\t\t\t\t,t3.subject_name </span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">    (<span class=\"keyword\">select</span>\tid</span><br><span class=\"line\">                    ,name</span><br><span class=\"line\">                    ,age</span><br><span class=\"line\">                    ,gender</span><br><span class=\"line\">                    ,clazz</span><br><span class=\"line\">    <span class=\"keyword\">from</span> students) <span class=\"keyword\">as</span> t1</span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\">    (<span class=\"keyword\">select</span>\tid</span><br><span class=\"line\">                    ,subject_id</span><br><span class=\"line\">                    ,sco</span><br><span class=\"line\">    <span class=\"keyword\">from</span> score) <span class=\"keyword\">as</span> t2</span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\">    (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> subject) <span class=\"keyword\">as</span> t3</span><br><span class=\"line\">    <span class=\"keyword\">on</span> t1.id<span class=\"operator\">=</span>t2.id <span class=\"keyword\">and</span> t2.subject_id<span class=\"operator\">=</span>t3.subject_id</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-DCL\"><a href=\"#5-DCL\" class=\"headerlink\" title=\"5 DCL\"></a>5 DCL</h3><h4 id=\"5-1-管理用户\"><a href=\"#5-1-管理用户\" class=\"headerlink\" title=\"5.1 管理用户\"></a>5.1 管理用户</h4><ul>\n<li>用户所在位置   mysql.user</li>\n</ul>\n<ul>\n<li><p>添加用户：</p>\n<ul>\n<li>可以用添加的用户，代替root进行登录</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230803213442968.png\" class=\"\">\n\n<ul>\n<li><p>关闭密码复杂验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global validate_password_policy=0;</span><br><span class=\"line\">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>语法：</p>\n<ul>\n<li>主机名可用%代替，表示任何主机</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE USER &#x27;lisi&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>删除用户：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>修改用户密码：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 老版本的写法 </span></span><br><span class=\"line\"><span class=\"comment\">-- UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> PASSWORD <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> <span class=\"operator\">=</span> PASSWORD(<span class=\"string\">&#x27;新密码&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> <span class=\"operator\">=</span> password(<span class=\"string\">&#x27;234567&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>查询用户：</p>\n<ul>\n<li><p>1.切换到mysql数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE mysql;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.查询user表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通配符： % 表示可以在任意主机使用用户登录数据库</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-2-权限管理\"><a href=\"#5-2-权限管理\" class=\"headerlink\" title=\"5.2.权限管理\"></a>5.2.权限管理</h4><ul>\n<li>权限列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT, INSERT, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查询权限：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>授予权限：</p>\n<ul>\n<li><p>语法：</p>\n<blockquote>\n<p>with grant option 表示带上授权的功能</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> 权限列表 <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;主机名&#x27;</span> [<span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> option];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将表db3.account的SELECT ,DELETE, UPDATE权限授予用户&#x27;lisi&#x27;@&#x27;%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span> ,<span class=\"keyword\">DELETE</span>, <span class=\"keyword\">UPDATE</span>  <span class=\"keyword\">ON</span> db3.account <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 给zhangsan用户所有权限  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span>  <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;zhangsan&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>撤销权限：</p>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将用户&#x27;lisi&#x27;@&#x27;%&#x27;对于表db3.account的更新权限撤销</span></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> db3.account <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 给lisi用户撤销所有权限</span></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;lisi&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6、其他操作\"><a href=\"#6、其他操作\" class=\"headerlink\" title=\"6、其他操作\"></a>6、其他操作</h3><h4 id=\"6-1-LOAD\"><a href=\"#6-1-LOAD\" class=\"headerlink\" title=\"6.1 LOAD\"></a>6.1 LOAD</h4><ul>\n<li>加载数据文件（mysql shell中执行）<ul>\n<li>注意转义符号 <code>\\</code> ，可以换成<code>/</code>或 <code>\\\\</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOAD DATA LOCAL INFILE &#x27;G:/BigData26/MySQL/data/student.txt&#x27; INTO TABLE students FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>linux执行LOAD命令时，如果文件来自windows，可以用pycharm把换行符设置为LF，也就是\\n</p>\n<p>不然，会导致最后一列的值中有\\r</p>\n<ul>\n<li>windows的换行符：\\r\\n  CRLF</li>\n<li>linux的换行符：\\n  LF</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-2-mysqldump\"><a href=\"#6-2-mysqldump\" class=\"headerlink\" title=\"6.2 mysqldump\"></a>6.2 mysqldump</h4><ul>\n<li><p>dump  转储</p>\n</li>\n<li><p>把数据表对应的sql文件，从linux中导出</p>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731161918891.png\" class=\"\" title=\"image-20230731161918891\">\n\n<h4 id=\"6-3-source\"><a href=\"#6-3-source\" class=\"headerlink\" title=\"6.3 source\"></a>6.3 source</h4><ul>\n<li>执行指定sql文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  source /root/data/students.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-4-取整函数\"><a href=\"#6-4-取整函数\" class=\"headerlink\" title=\"6.4 取整函数\"></a>6.4 取整函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">round(98.99999,2) ，保留两位小数，并且四舍五入</span><br><span class=\"line\"></span><br><span class=\"line\">floor(98.99999)  向下取整</span><br><span class=\"line\"></span><br><span class=\"line\">ceil(98.99999)   向上取整</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五部分-基本查询\"><a href=\"#第五部分-基本查询\" class=\"headerlink\" title=\"第五部分 基本查询\"></a>第五部分 基本查询</h2><h3 id=\"1、WHERE-（搜索）\"><a href=\"#1、WHERE-（搜索）\" class=\"headerlink\" title=\"1、WHERE （搜索）\"></a>1、WHERE （搜索）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHERE子句可以使用以下比较运算符：</span><br><span class=\"line\">=（等于）</span><br><span class=\"line\">&lt;（小于）</span><br><span class=\"line\">&gt;（大于）</span><br><span class=\"line\">&lt;=（小于或等于）</span><br><span class=\"line\">&gt;=（大于或等于）</span><br><span class=\"line\">&lt;&gt;或!=（不等于）</span><br><span class=\"line\">还可以使用逻辑运算符（AND、OR和NOT）来组合多个条件。</span><br><span class=\"line\">exist</span><br><span class=\"line\">any，all 多指比较</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>模糊搜索<ul>\n<li>通配符 ：%   _</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM students WHERE clazz like ‘%文科%’</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>in(集合)<ul>\n<li>搜索符合in集合内的内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from students where clazz in (&#x27;文科一班&#x27;,&#x27;文科二班&#x27;,&#x27;文科三班&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>BETWEEN AND</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">22</span> <span class=\"keyword\">AND</span> <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 返回年龄在22到24的学生</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、ORDER-BY-（排序）\"><a href=\"#2、ORDER-BY-（排序）\" class=\"headerlink\" title=\"2、ORDER BY  （排序）\"></a>2、ORDER BY  （排序）</h3><ul>\n<li>ORDER BY子句用于对查询结果按照一个或多个列进行排序。</li>\n<li>默认升序</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column1 [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], column2 [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、GROUP-BY-和-HAVING-（分组和过滤）\"><a href=\"#3、GROUP-BY-和-HAVING-（分组和过滤）\" class=\"headerlink\" title=\"3、GROUP BY 和 HAVING  （分组和过滤）\"></a>3、GROUP BY 和 HAVING  （分组和过滤）</h3><h4 id=\"3-1-GROUP-BY\"><a href=\"#3-1-GROUP-BY\" class=\"headerlink\" title=\"3.1 GROUP BY\"></a>3.1 GROUP BY</h4><ul>\n<li><p>GROUP BY子句用于将查询结果按照一个或多个列进行分组，并对每个组进行聚合计算</p>\n<ul>\n<li>max、min、sum、avg、count</li>\n<li>count(1) 和count(*)都是统计所有的行</li>\n<li>count(cid) 统计不为null的cid个数</li>\n<li><strong>只有数值型的数据删除后为null    count  不能统计到 null值</strong></li>\n<li><strong>varchar类型的数据删除后为空字符 ‘’”    count 能够统计到 空字符</strong></li>\n</ul>\n</li>\n<li><p>想要group by 的排序不起作用，可以加上order by  null</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column1, column2, ... </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>  <span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>聚合函数运作原理<ul>\n<li>聚合函数如果没有分组的情况下，就是一次查询后再进行统计，而不是对每条数据进行统计<br>如果加上分组的话，聚合函数就是在每个分组查询完成后执行<br>如果加上聚合函数中加上if判断，那么就会等符合条件的数据查询完成后，再进行统计</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(IF(score<span class=\"operator\">&gt;=</span><span class=\"number\">60</span> , <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"operator\">/</span><span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"comment\">-- 每组大于等60的占比</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cid  </span><br><span class=\"line\"><span class=\"comment\">-- 每个分组所有数据IF判断结束后，再进行聚合操作</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-HAVING\"><a href=\"#3-2-HAVING\" class=\"headerlink\" title=\"3.2 HAVING\"></a>3.2 HAVING</h4><ul>\n<li><p>HAVING子句用于对分组后的结果进行过滤，只返回符合条件的分组。它接受一个或多个聚合函数作为参数，并可指定每个函数的过滤条件。</p>\n<ul>\n<li><p>having  不能够过滤select 没查出来的字段</p>\n<p>having 可以聚合没查的字段</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sid</span><br><span class=\"line\"><span class=\"keyword\">from</span> score</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">COUNT</span>(cid) <span class=\"comment\">-- and cid=&quot;01&quot; 会报错</span></span><br><span class=\"line\"><span class=\"comment\">-- having  不能够过滤select 没查出来的字段</span></span><br><span class=\"line\"><span class=\"comment\">-- 但是having 可以聚合没查的字段</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意</p>\n<ul>\n<li>分组的字段的必须带一个，不然报错</li>\n<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n\n<p>- </p>\n<h3 id=\"4、LIMIT-和-OFFSET-（限制和偏移量-）\"><a href=\"#4、LIMIT-和-OFFSET-（限制和偏移量-）\" class=\"headerlink\" title=\"4、LIMIT 和 OFFSET  （限制和偏移量 ）\"></a>4、LIMIT 和 OFFSET  （限制和偏移量 ）</h3><ul>\n<li>LIMIT用于限制查询结果集的行数。</li>\n<li>OFFSET用于指定查询结果集的偏移量。<ul>\n<li>如偏移量为2，则会从第3行返回数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT number </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT number <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 从offset+1开始，返回number行数据</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">LIMIT <span class=\"keyword\">offset</span>,number</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、union-（行合并）\"><a href=\"#5、union-（行合并）\" class=\"headerlink\" title=\"5、union （行合并）\"></a>5、union （行合并）</h3><ul>\n<li>union 合并行</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> s</span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">4</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>union all 不去重</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> students LIMIT <span class=\"number\">4</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、执行顺序\"><a href=\"#6、执行顺序\" class=\"headerlink\" title=\"6、执行顺序\"></a>6、执行顺序</h3><ul>\n<li>从上往下</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM: 从表中选择数据，生成虚拟表（视图）。</span><br><span class=\"line\">WHERE: 对虚拟表中的数据进行筛选，满足条件的数据被保留。</span><br><span class=\"line\">GROUP BY: 将数据按照指定的字段进行分组，生成分组后的结果。</span><br><span class=\"line\">SELECT: 对分组后的结果进行选择，并进行聚合函数的计算。</span><br><span class=\"line\">HAVING: 对聚合函数的结果进行筛选，满足条件的分组被保留。</span><br><span class=\"line\">ORDER BY: 对结果进行排序。</span><br><span class=\"line\">LIMIT: 限制结果的数量。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、子查询\"><a href=\"#7、子查询\" class=\"headerlink\" title=\"7、子查询\"></a>7、子查询</h3><ul>\n<li>where  sid in （select sid in student），子查询的一列可以作为in的集合</li>\n<li>hive不支持where子查询</li>\n</ul>\n<h1 id=\"扩展知识\"><a href=\"#扩展知识\" class=\"headerlink\" title=\"扩展知识\"></a>扩展知识</h1><h2 id=\"1、清空表和截断表\"><a href=\"#1、清空表和截断表\" class=\"headerlink\" title=\"1、清空表和截断表\"></a>1、清空表和截断表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清空表 delete ，存在日志和记录，可以恢复</span><br><span class=\"line\"></span><br><span class=\"line\">截断表 truncate，没有日志</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、mysql数据表在liunx的存储位置\"><a href=\"#2、mysql数据表在liunx的存储位置\" class=\"headerlink\" title=\"2、mysql数据表在liunx的存储位置\"></a>2、mysql数据表在liunx的存储位置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据存储位置  cd /var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">数据存储路径配置 vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/cff900a3/image-20230801200055431.png\" class=\"\">\n\n<img src=\"/posts/cff900a3/image-20230801195946980.png\" class=\"\">\n\n<h2 id=\"3、中文的比较\"><a href=\"#3、中文的比较\" class=\"headerlink\" title=\"3、中文的比较\"></a>3、中文的比较</h2><ul>\n<li>中文的比较 utf8  解析为16进制比较<ul>\n<li>虽然六大于四，但是解析为utf8的十六进制之后，六的十六进制小于四的十六进制</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230803140232355.png\" class=\"\" title=\"image-20230803140232355\">\n\n<h2 id=\"4、日期函数\"><a href=\"#4、日期函数\" class=\"headerlink\" title=\"4、日期函数\"></a>4、日期函数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取当前日期时间</span><br><span class=\"line\"><span class=\"keyword\">select</span> NOW(); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">09</span>:<span class=\"number\">25</span>:<span class=\"number\">29</span></span><br><span class=\"line\"># 获取当前日期</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE(); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span></span><br><span class=\"line\"># 获取当前时间</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURTIME();  # <span class=\"number\">09</span>:<span class=\"number\">26</span>:<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 时间减少<span class=\"number\">1</span>小时（前一小时）</span><br><span class=\"line\"><span class=\"keyword\">select</span> date_sub(now(), <span class=\"type\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">hour</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 日期增加<span class=\"number\">1</span>天</span><br><span class=\"line\"><span class=\"keyword\">select</span> date_add(now(), <span class=\"type\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">day</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 日期格式化、字符串转日期</span></span><br><span class=\"line\"># 格式化参考：</span><br><span class=\"line\"><span class=\"keyword\">select</span> DATE_FORMAT(now(),<span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> DATE_FORMAT(now(),<span class=\"string\">&#x27;%Y-%m-%d %H:00:00&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">#字符串转日期</span><br><span class=\"line\"><span class=\"keyword\">select</span> str_to_date(<span class=\"string\">&#x27;2021-04-02 10:37:14&#x27;</span>, <span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>); # <span class=\"number\">2021</span><span class=\"number\">-04</span><span class=\"number\">-02</span> <span class=\"number\">10</span>:<span class=\"number\">37</span>:<span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将具体时间时间转为timestamp</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> UNIX_TIMESTAMP(<span class=\"string\">&#x27;2017-05-15 10:37:14&#x27;</span>);<span class=\"comment\">-- 指定日期时间的时间戳：1494815834</span></span><br><span class=\"line\"><span class=\"comment\">-- 将时间戳转为具体时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1494815834</span>, <span class=\"string\">&#x27;%Y年%m月%d日 %h时%分:%s秒&#x27;</span>);<span class=\"comment\">-- 获取时间戳对应的格式化日期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 截取从pos位置开始到最后的所有str字符串</span></span><br><span class=\"line\">SUBSTR (str, pos, len)</span><br><span class=\"line\"><span class=\"comment\">-- 返回本周的第几天</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> WEEKDAY(<span class=\"string\">&#x27;2017-05-21 10:37:14&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MySQL数据常用操作\"><a href=\"#MySQL数据常用操作\" class=\"headerlink\" title=\"MySQL数据常用操作\"></a>MySQL数据常用操作</h1><ul>\n<li>注释： – # &#x2F;**&#x2F;</li>\n</ul>\n<h2 id=\"1、navicat操作MySQL\"><a href=\"#1、navicat操作MySQL\" class=\"headerlink\" title=\"1、navicat操作MySQL\"></a>1、navicat操作MySQL</h2><ul>\n<li>可以用dbeaver平替</li>\n<li>首先连接</li>\n<li>创建数据库</li>\n</ul>\n<h3 id=\"1-1-创建数据表\"><a href=\"#1-1-创建数据表\" class=\"headerlink\" title=\"1.1 创建数据表\"></a>1.1 创建数据表</h3><ul>\n<li>创建数据表，创建完成后要保存</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731201052074.png\" class=\"\">\n\n<ul>\n<li><p>查看元数据</p>\n<ul>\n<li>元数据<ul>\n<li>元数据（Metadata）是关于数据的数据，用于描述数据的特征、属性和内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>导出建表语句</p>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\dongjiaxin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230731201343039.png\" alt=\"image-20230731201343039\"></p>\n<h3 id=\"1-2-执行sql语句\"><a href=\"#1-2-执行sql语句\" class=\"headerlink\" title=\"1.2 执行sql语句\"></a>1.2 执行sql语句</h3><h3 id=\"1-3-导入数据文件\"><a href=\"#1-3-导入数据文件\" class=\"headerlink\" title=\"1.3 导入数据文件\"></a>1.3 导入数据文件</h3><ul>\n<li>导入向导</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204742543.png\" class=\"\">\n\n<ul>\n<li>选择文件格式</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204854988.png\" class=\"\">\n\n<ul>\n<li>选择文件路径</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731204818468.png\" class=\"\">\n\n<ul>\n<li>配置换行符和分隔符</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205050008.png\" class=\"\">\n\n<ul>\n<li>设置head</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205204993.png\" class=\"\">\n\n<ul>\n<li>设置对应字段</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731205244443.png\" class=\"\">\n\n<h3 id=\"1-4-导出数据文件\"><a href=\"#1-4-导出数据文件\" class=\"headerlink\" title=\"1.4 导出数据文件\"></a>1.4 导出数据文件</h3><ul>\n<li>导出向导</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731212623170.png\" class=\"\">\n\n<ul>\n<li>选择数据表</li>\n<li></li>\n</ul>\n<h3 id=\"1-5-导出sql文件\"><a href=\"#1-5-导出sql文件\" class=\"headerlink\" title=\"1.5 导出sql文件\"></a>1.5 导出sql文件</h3><ul>\n<li>转储SQL文件</li>\n</ul>\n<img src=\"/posts/cff900a3/image-20230731213059217.png\" class=\"\">\n\n<h3 id=\"1-6-运行sql文件\"><a href=\"#1-6-运行sql文件\" class=\"headerlink\" title=\"1.6 运行sql文件\"></a>1.6 运行sql文件</h3><img src=\"/posts/cff900a3/image-20230731213327762.png\" class=\"\">\n\n<h2 id=\"2、python操作MySQL\"><a href=\"#2、python操作MySQL\" class=\"headerlink\" title=\"2、python操作MySQL\"></a>2、python操作MySQL</h2><h3 id=\"2-1-准备\"><a href=\"#2-1-准备\" class=\"headerlink\" title=\"2.1 准备\"></a>2.1 准备</h3><ul>\n<li>安装pymysql库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入pymysql库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库连接</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn = pymysql.connect(host=&#x27;master&#x27;, port=3306, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, database=&#x27;school&#x27;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库操作对象：游标</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor = conn.cursor()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行sql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = &quot;select * from students where id=1500100001&quot;</span><br><span class=\"line\">cursor.execute(sql)  # 返回指定数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取DQL返回数据<ul>\n<li>值得注意的是，每次查询后的，下一次查询的起始位置就是上一次查询的结束位置<br>这点和文件读写很像</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 查询一条数据 ，返回一个元组</span></span><br><span class=\"line\">rows1 = cursor.fetchone() </span><br><span class=\"line\"><span class=\"comment\"># 查询所有数据，返回一个元组</span></span><br><span class=\"line\">rows2 = cursor.fetchall()  </span><br><span class=\"line\"> <span class=\"comment\"># 查询指定行数</span></span><br><span class=\"line\">rows3 = cursor.fetchmany(<span class=\"number\">10</span>) </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pymysql执行DML时，需要手动提交事务</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span><span class=\"operator\">=</span>&quot;insert into students values(0,&#x27;name&#x27;,&#x27;age&#x27;,&#x27;gender&#x27;,&#x27;clazz&#x27;)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"keyword\">sql</span>)</span><br><span class=\"line\">connect.commit()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回滚<ul>\n<li>如果执行出错，可以通过回滚的方式，让数据恢复到执行之前的状态</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.rollback()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>关闭连接</p>\n<ul>\n<li>手动关闭</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自动关闭<ul>\n<li>with语句，自动执行关闭语句</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> pymysql.connect() <span class=\"keyword\">as</span> conn:  </span><br><span class=\"line\">\t<span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> <span class=\"keyword\">cursor</span>:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-2-传入参数\"><a href=\"#2-2-传入参数\" class=\"headerlink\" title=\"2.2 传入参数\"></a>2.2 传入参数</h3><h4 id=\"1、静态指定\"><a href=\"#1、静态指定\" class=\"headerlink\" title=\"1、静态指定\"></a>1、静态指定</h4><ul>\n<li>静态指定的参数，如果是字符串要加上引号</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=&#x27;1500100001&#x27;&quot;</span></span><br><span class=\"line\">cursor.execute(sql)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、字符串拼接\"><a href=\"#2、字符串拼接\" class=\"headerlink\" title=\"2、字符串拼接\"></a>2、字符串拼接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=&quot;</span> +<span class=\"string\">&quot;&#x27;1500100001&#x27;&quot;</span></span><br><span class=\"line\">cursor.execute(sql)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、占位符\"><a href=\"#3、占位符\" class=\"headerlink\" title=\"3、占位符\"></a>3、占位符</h4><ul>\n<li>execute<ul>\n<li>通过占位符，动态指定sql中的参数<ul>\n<li>不要因为参数是 string 就在 %s 两边加引号，mysql 会自动去处理。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=%s&quot;</span></span><br><span class=\"line\">cursor.execute(sql, (<span class=\"string\">&quot;1500100001&quot;</span>))  <span class=\"comment\"># 返回指定数据</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>executemany<ul>\n<li>传入可迭代的数据容器，并且元素是元组<ul>\n<li>根据元素个数，决定sql执行次数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sql</span> <span class=\"operator\">=</span> &quot;select * from students where id=%s&quot;</span><br><span class=\"line\">cursor.executemany(<span class=\"keyword\">sql</span>, [(&quot;1500100001&quot;), (&quot;1500100002&quot;)])  # 返回指定数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-sql注入\"><a href=\"#2-3-sql注入\" class=\"headerlink\" title=\"2.3 sql注入\"></a>2.3 sql注入</h3><ul>\n<li>如果传参方式是 字符串拼接，可以通过sql注入的方式，导致where失效，获取所有数据<ul>\n<li>or 1&#x3D;1 可以让where失效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span>&quot;&#x27;1500100001&#x27; or 1=1&quot;</span><br><span class=\"line\"><span class=\"keyword\">sql</span> <span class=\"operator\">=</span> &quot;select * from where id=&quot;<span class=\"operator\">+</span>id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过占位符传参，可以避免sql注入<ul>\n<li>pymysql 的 execute 支持参数化 sql，通过占位符 %s 配合参数就可以实现 sql 注入问题的避免。</li>\n<li>这样参数化的方式，让 mysql 通过 预处理 的方式避免了 sql 注入的存在。</li>\n<li>需要注意的是，不要因为参数是其他类型而换掉 %s，pymysql 的占位符并不是 python 的通用占位符。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对比字符串拼接和占位符</span></span><br><span class=\"line\"></span><br><span class=\"line\">sql = <span class=\"string\">&quot;select * from students where id=%s&quot;</span></span><br><span class=\"line\">cursor.execute(sql, (<span class=\"string\">&quot;1500100001 or 1=1&quot;</span>))  <span class=\"comment\"># 返回指定数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.fetchall())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">id</span> = <span class=\"string\">&quot;1500100001 or 1=1&quot;</span></span><br><span class=\"line\">sql2 = <span class=\"string\">&quot;select * from students where id=&quot;</span> + <span class=\"built_in\">id</span></span><br><span class=\"line\"><span class=\"comment\"># cursor.execute(sql2)  # 返回所有数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-把文件中的数据，插入到数据库中\"><a href=\"#2-4-把文件中的数据，插入到数据库中\" class=\"headerlink\" title=\"2.4 把文件中的数据，插入到数据库中\"></a>2.4 把文件中的数据，插入到数据库中</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 把文件中的数据，插入到数据库中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./score.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        line_list = fp.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    tuple_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> line_list:</span><br><span class=\"line\">        line_split = line.strip().split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">        tuple_list.append((line_split[<span class=\"number\">0</span>],line_split[<span class=\"number\">1</span>],line_split[<span class=\"number\">2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pymysql.connect(host=<span class=\"string\">&#x27;master&#x27;</span>,port=<span class=\"number\">3306</span>,user=<span class=\"string\">&#x27;root&#x27;</span>,password=<span class=\"string\">&#x27;123456&#x27;</span>,database=<span class=\"string\">&#x27;school&#x27;</span>) <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cursor:</span><br><span class=\"line\">            sql = <span class=\"string\">&quot;INSERT INTO score VALUES (%s, %s, %s)&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cursor.executemany(sql, tuple_list)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">                conn.rollback()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                conn.commit()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"flume实时采集mysql数据库的数据到kafka","cover":"/images/flume实时采集mysql数据库的数据到kafka.jpg","abbrlink":"4a854bd2","date":"2023-08-16T12:35:16.000Z","_content":"\n> flume实时采集mysql数据到kafka的实验，做个笔记，防止忘记\n> ！！！建议从头看到尾，因为一些简单的东西我在前面提了，后面没提。\n\nKafka搭建：https://blog.csdn.net/cjwfinal/article/details/120803013\n\nflume搭建：https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502\n\n---\n\n\n# 一、flume写入当前文件系统\n## 题目：\n>编写配置文件，设置文件夹mylogs为source位置，文件夹backup为sink写入位置，实现对文件夹的数据备份。\n新建两个文本文本文件1.txt与2.txt，在1.txt中输入Hello Flume，在2.txt中输入hello flume将两个文件拖入mylog，查看backup文件夹中出现的文件及其内容。文件可用记事本打开\n\n## 解题：\n### 1.flume配置文件\n```java\n#a1表示agent的名字 可以自定义\n# 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# 给channel个名字\na1.channels = c1\n# 给channel个名字\na1.sinks = k1\n\n# 对source进行配置\n# agent的名字.sources.source的名字.参数 = 参数值\n\n# source的类型 spoolDir（监控一个目录下的文件的变化）\na1.sources.r1.type = spooldir\n# 监听哪一个目录\na1.sources.r1.spoolDir = /root/mylogs\n# 是否在event的headers中保存文件的绝对路径\na1.sources.r1.fileHeader = true\n# 给拦截器取个名字 i1\na1.sources.r1.interceptors = i1\n# 使用timestamp拦截器，将处理数据的时间保存到event的headers中\na1.sources.r1.interceptors.i1.type = timestamp\n\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# 配置sink为logger\n# 直接打印到控制台\na1.sinks.k1.type = file_roll\na1.sinks.k1.channel = c1\na1.sinks.k1.sink.directory = /root/backup\n\n# 将source、channel、sink组装成agent\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2.要保证配置文件中的文件的路径都存在，否则会报错\n### 3.启动flume\n#### 启动命令：\n```shell\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n>a1是agent的名字，spoolingtest.cong是配置文件名，如果不一样请修改\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/ac873024932c4287ab8205db9afe0584.png)\n\n### 4.测试\n#### 1.启动flume\n注意：要在配置文件所在的目录启动\n#### 2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World\n写入并保存，后flume打印出来的日志会发生改变。\n#### 3.查看backup文件夹\nbackup文件夹中，会产生许多文件，其中某个文件中会保存上面两个文件的内容，自行查找即可。\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/0d1b5a8572aa47119e603c7cd291307d.png)\n\n\n# 二、flume连接kafka\n## 题目\n>把flume监听到的文件内容，输入到，kafka，并由kafka的消费着消费出来。\n\n## 解题\n### 1.flume配置文件\n```shell\n \n# a1表示agent的名字 可以自定义\n# # 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# # 给channel个名字\na1.channels = c1\n# # 给channel个名字\na1.sinks = k1\n# 对source进行配置\n# agent的名字.sources.source的名字.参数 = 参数值\n\n# source的类型 spoolDir（监控一个目录下的文件的变化）\na1.sources.r1.type = exec\n# 监听哪一个目录\na1.sources.r1.command = tail -F -c +0 /root/dir1/test.log\n# 是否在event的headers中保存文件的绝对路径\na1.sources.r1.fileHeader = true\n# 给拦截器取个名字 i1\na1.sources.r1.interceptors = i1\n# 使用timestamp拦截器，将处理数据的时间保存到event的headers中\na1.sources.r1.interceptors.i1.type = timestamp\n\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# 配置sinks，输出到kafka中\na1.sinks.k1.channel = c1\na1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink\n# topic是指定kafka的主题\na1.sinks.k1.kafka.topic = events\n# master是主机名，也可以是主机IP地址\na1.sinks.k1.kafka.bootstrap.servers = master:9092\na1.sinks.k1.kafka.flumeBatchSize = 20\na1.sinks.k1.kafka.producer.acks = 1\na1.sinks.k1.kafka.producer.linger.ms = 1\n\n# 将source、channel、sink组装成agent![在这里插入图片描述](https://img-blog.csdnimg.cn/13519938e4ba42b9a4294454f2013dc2.png#pic_center)\n\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2测试\n#### 1.创建指定的目录/root/dir1/test.log\n#### 2.启动flume\n```java\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n#### 3.启动kafka的消费者\n##### 启动命令\n```java\n#启动消费者之前首先要创建主题\nkafka-topics.sh --create --topic events --bootstrap-server master:9092\n#启动消费者\nkafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning\n```\n##### kafka主题操作命令\n```java\n#删除主题\nkafka-topics.sh --delete --topic events --zookeeper localhost:2181\n#查看主题列表\nkafka-topics.sh --list --bootstrap-server master:9092\n```\n#### 4.在test.log中写入数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/5a3bc3a8ba45423d94fa4fbe005973b3.png)\n\n#### 5.观察kafka的消费是否消费出数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/14142856df9b4ceb91c3d85b4b017eb4.png)\n\n\n\n\n# 三、flume实时采集mysql数据到kafka\n## 题目\n>在MySQL中建立数据库school，在数据库中建立表student。SQL语句如下：\n```java\n#创建数据库\ncreate database school;\n#使用数据库\nuse school;\n#创建数据表\ncreate table student(\n\tid int not null,\n\tname varchar(40),\n\tage int,\n\tgrade int,\n\tprimary key(id)\n);\n# 删除数据\ndrop database school;\n# 删除数据表\ndrop database student;\n# 查看数据表\nshow tables;\n```\n>编写配置文件，将student表中的内容输出到控制台。启动Flume，在student表中使用下列命令插入数据，在Kafka消费者中查看相应数据。\n>\n```java\n#插入数据，sql\ninsert into student(id,name,age,grade)value(1,'Xiaoming',23,98);\ninsert into student(id,name,age,grade)value(2,'Zhangsan',24,96);\ninsert into student(id,name,age,grade)value(3,'Lisi',24,93);\ninsert into student(id,name,age,grade)value(4,'Wangwu',21,91);\ninsert into student(id,name,age,grade)value(5,'Weiliu',21,91);\n```\n## 解题\n### 1.flume配置文件\n```shell\n# # 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# # 给channel个名字\na1.channels = c1\n# # 给channel个名字\na1.sinks = k1\n\n#配置source\na1.sources.r1.type = org.keedio.flume.source.SQLSource\n#ip地址和数据库名称需要修改，如果连接的本地的mysql改成本机IP地址，如果连接虚拟机上的mysql改成虚拟机的IP地址\na1.sources.r1.hibernate.connection.url = jdbc:mysql://ip地址/数据名称?useSSL=false&allowPublicKeyRetrieval=true\n# mysql用户名，一般都是root\na1.sources.r1.hibernate.connection.user = root\n# 密码\na1.sources.r1.hibernate.connection.password = 123456\na1.sources.r1.hibernate.connection.autocommit = true\n# mysql驱动\na1.sources.r1.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect\n# 驱动版本过低会无法使用，驱动安装下文会提及\na1.sources.r1.hibernate.connection.driver_class = com.mysql.jdbc.Driver\na1.sources.r1.run.query.delay=5000\n\n# 自定义查询\na1.sources.r1.start.from = 0\na1.sources.r1.table = student\na1.sources.r1.columns.to.select = *\n\na1.sources.r1.batch.size = 1000\na1.sources.r1.max.rows = 1000\na1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider\na1.sources.r1.hibernate.c3p0.min_size=1\na1.sources.r1.hibernate.c3p0.max_size=10\n# 存放status文件\na1.sources.r1.status.file.path = /root/dir1\na1.sources.r1.status.file.name = r1.status\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 10000\na1.channels.c1.transactionCapacity = 10000\na1.channels.c1.byteCapacityBufferPercentage = 20\na1.channels.c1.byteCapacity = 800000\n# 配置sinks\na1.sinks.k1.channel = c1\na1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink\n# 指定主题名topic\na1.sinks.k1.kafka.topic = events\na1.sinks.k1.kafka.bootstrap.servers = master:9092\na1.sinks.k1.kafka.flumeBatchSize = 20\na1.sinks.k1.kafka.producer.acks = 1\na1.sinks.k1.kafka.producer.linger.ms = 1\n\n# 将source、channel、sink组装成agent\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2.要保证配置中的文件路径存在，并且根据注释做出相应的修改\n### 3.导入jar包到/flume/lib文件夹下\n```shell\n# flume连接mysqljar包\nflume-ng-sql-source-1.4.3.jar\n# mysql驱动jar包\nmysql-connector-java-5.1.49.jar\n```\n### 5.flume-ng-sql-source项目的官方网址\nhttps://github.com/keedio/flume-ng-sql-source\n### 6.测试\n#### 1.创建mysql数据库、数据表\n```shell\n#创建数据库\ncreate database school;\n#使用数据库\nuse school;\n#创建数据表\ncreate table student(\n\tid int not null,\n\tname varchar(40),\n\tage int,\n\tgrade int,\n\tprimary key(id)\n);\n```\n#### 2.启动flume\n```shell\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n#### 3.启动kafka消费者\n```shell\n#启动消费者之前首先要创建主题\nkafka-topics.sh --create --topic events --bootstrap-server master:9092\n#启动消费者\nkafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning\n```\n#### 4.student表中插入数据\n```java\n#插入数据，sql\ninsert into student(id,name,age,grade)value(1,'Xiaoming',23,98);\ninsert into student(id,name,age,grade)value(2,'Zhangsan',24,96);\ninsert into student(id,name,age,grade)value(3,'Lisi',24,93);\ninsert into student(id,name,age,grade)value(4,'Wangwu',21,91);\ninsert into student(id,name,age,grade)value(5,'Weiliu',21,91);\n```\n#### 5.观察数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/5c0301edb3124c6191bc2a33c805eddc.png)\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png)\n` 为了方便测试我重复插入了一条数据`\n\n#### 6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错\n##### 解决\n删除存放的status文件，也就是我配置文件中/root/dir1文件夹中的东西\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/7d1527b8fdd14ee3a942f5df899f9327.png)\n\n# 四、Kafka链接Flume，将生产的消息存入到HDFS\n## 题目\n> 编写配置文件，将kafka作为输入，在生产者中输入“HelloFlume”或其他信息，通过Flume将Kafka生产者输入的信息存入hdfs中，存储格式hdfs://localhost:9000/fromkafka/%Y%m%d/，要求存储时文件名为kafka_log。\n## 解答\n### 1.flume配置文件\n```shell\n\nagent.sources = kafka_source\nagent.channels = mem_channel\nagent.sinks = hdfs_sink\n# 以下配置 source\nagent.sources.kafka_source.type = org.apache.flume.source.kafka.KafkaSource\nagent.sources.kafka_source.channels = mem_channel\nagent.sources.kafka_source.batchSize = 5000\n# master为主机名或者主机IP\nagent.sources.kafka_source.kafka.bootstrap.servers = master:9092\n# 需要指定kafka生产者的主题\nagent.sources.kafka_source.kafka.topics = kafka-flume\n# 以下配置 sink\nagent.sinks.hdfs_sink.type = hdfs\nagent.sinks.hdfs_sink.channel = mem_channel\n# 输出到HDFS文件的路径\nagent.sinks.hdfs_sink.hdfs.path = /data/kafka-flume/%Y%m%d\n# HDFS文件前缀\nagent.sinks.hdfs_sink.hdfs.filePrefix = kafka_log\n# 使用时间戳\na1.sinks.r1.hdfs.useLocalTimeStamp = true\n\nagent.sinks.hdfs_sink.hdfs.rollSize = 0\nagent.sinks.hdfs_sink.hdfs.rollCount = 0\nagent.sinks.hdfs_sink.hdfs.rollInterval = 3600\nagent.sinks.hdfs_sink.hdfs.threadsPoolSize = 30\nagent.sinks.hdfs_sink.hdfs.fileType=DataStream\nagent.sinks.hdfs_sink.hdfs.writeFormat=Text\n# 以下配置 channel\nagent.channels.mem_channel.type = memory\nagent.channels.mem_channel.capacity = 100000\nagent.channels.mem_channel.transactionCapacity = 10000\n```\n### 2.根据配置文件的注释根据自己的情况做出修改\n### 3.hadoop操作文件夹命令\n```shell\n# 创建文件夹\nhadoop fs -mkdir 文件夹路径\n# 删除文件夹\nhadoop fs -rm -r -skipTrash 文件夹路径\n```\n### 4.测试\n#### 1.启动flume\n```shell\n#启动命令\nflume-ng agent -n agent -f kafka-flume-hdfs.cong -Dflume.root.logger=DEBUG,console\n# 参数解释\n第二个agent为配置文件中agent的名字，kafka-flume-hdfs.cong为配置文件名，根据自己情况做出修改\n```\n#### 2.启动kafka生产者\n```shell\n# 启动命令，根据自己配置变换主题名\nkafka-console-producer.sh --broker-list master:9092 --topic kafka-flume\n# 启动后，输入HelloFlume\n```\n#### 3.观察HDFS界面，寻找并下载文件，查看内容\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/416d1b9dd07d4e43bbaabeb02047e809.png)\n\n记得关闭flume后再下载，不然会下载出来.tmp文件\n\n# 有什么问题评论区提问！\n\n\n\n\n","source":"_posts/flume实时采集mysql数据库的数据到kafka.md","raw":"---\ntitle: flume实时采集mysql数据库的数据到kafka\ntags:\n  - Flink\n  - MySQL\n  - Kafaka\ncategories: Flink\ncover: /images/flume实时采集mysql数据库的数据到kafka.jpg\nabbrlink: 4a854bd2\ndate: 2023-08-16 20:35:16\n---\n\n> flume实时采集mysql数据到kafka的实验，做个笔记，防止忘记\n> ！！！建议从头看到尾，因为一些简单的东西我在前面提了，后面没提。\n\nKafka搭建：https://blog.csdn.net/cjwfinal/article/details/120803013\n\nflume搭建：https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502\n\n---\n\n\n# 一、flume写入当前文件系统\n## 题目：\n>编写配置文件，设置文件夹mylogs为source位置，文件夹backup为sink写入位置，实现对文件夹的数据备份。\n新建两个文本文本文件1.txt与2.txt，在1.txt中输入Hello Flume，在2.txt中输入hello flume将两个文件拖入mylog，查看backup文件夹中出现的文件及其内容。文件可用记事本打开\n\n## 解题：\n### 1.flume配置文件\n```java\n#a1表示agent的名字 可以自定义\n# 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# 给channel个名字\na1.channels = c1\n# 给channel个名字\na1.sinks = k1\n\n# 对source进行配置\n# agent的名字.sources.source的名字.参数 = 参数值\n\n# source的类型 spoolDir（监控一个目录下的文件的变化）\na1.sources.r1.type = spooldir\n# 监听哪一个目录\na1.sources.r1.spoolDir = /root/mylogs\n# 是否在event的headers中保存文件的绝对路径\na1.sources.r1.fileHeader = true\n# 给拦截器取个名字 i1\na1.sources.r1.interceptors = i1\n# 使用timestamp拦截器，将处理数据的时间保存到event的headers中\na1.sources.r1.interceptors.i1.type = timestamp\n\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# 配置sink为logger\n# 直接打印到控制台\na1.sinks.k1.type = file_roll\na1.sinks.k1.channel = c1\na1.sinks.k1.sink.directory = /root/backup\n\n# 将source、channel、sink组装成agent\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2.要保证配置文件中的文件的路径都存在，否则会报错\n### 3.启动flume\n#### 启动命令：\n```shell\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n>a1是agent的名字，spoolingtest.cong是配置文件名，如果不一样请修改\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/ac873024932c4287ab8205db9afe0584.png)\n\n### 4.测试\n#### 1.启动flume\n注意：要在配置文件所在的目录启动\n#### 2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World\n写入并保存，后flume打印出来的日志会发生改变。\n#### 3.查看backup文件夹\nbackup文件夹中，会产生许多文件，其中某个文件中会保存上面两个文件的内容，自行查找即可。\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/0d1b5a8572aa47119e603c7cd291307d.png)\n\n\n# 二、flume连接kafka\n## 题目\n>把flume监听到的文件内容，输入到，kafka，并由kafka的消费着消费出来。\n\n## 解题\n### 1.flume配置文件\n```shell\n \n# a1表示agent的名字 可以自定义\n# # 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# # 给channel个名字\na1.channels = c1\n# # 给channel个名字\na1.sinks = k1\n# 对source进行配置\n# agent的名字.sources.source的名字.参数 = 参数值\n\n# source的类型 spoolDir（监控一个目录下的文件的变化）\na1.sources.r1.type = exec\n# 监听哪一个目录\na1.sources.r1.command = tail -F -c +0 /root/dir1/test.log\n# 是否在event的headers中保存文件的绝对路径\na1.sources.r1.fileHeader = true\n# 给拦截器取个名字 i1\na1.sources.r1.interceptors = i1\n# 使用timestamp拦截器，将处理数据的时间保存到event的headers中\na1.sources.r1.interceptors.i1.type = timestamp\n\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# 配置sinks，输出到kafka中\na1.sinks.k1.channel = c1\na1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink\n# topic是指定kafka的主题\na1.sinks.k1.kafka.topic = events\n# master是主机名，也可以是主机IP地址\na1.sinks.k1.kafka.bootstrap.servers = master:9092\na1.sinks.k1.kafka.flumeBatchSize = 20\na1.sinks.k1.kafka.producer.acks = 1\na1.sinks.k1.kafka.producer.linger.ms = 1\n\n# 将source、channel、sink组装成agent![在这里插入图片描述](https://img-blog.csdnimg.cn/13519938e4ba42b9a4294454f2013dc2.png#pic_center)\n\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2测试\n#### 1.创建指定的目录/root/dir1/test.log\n#### 2.启动flume\n```java\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n#### 3.启动kafka的消费者\n##### 启动命令\n```java\n#启动消费者之前首先要创建主题\nkafka-topics.sh --create --topic events --bootstrap-server master:9092\n#启动消费者\nkafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning\n```\n##### kafka主题操作命令\n```java\n#删除主题\nkafka-topics.sh --delete --topic events --zookeeper localhost:2181\n#查看主题列表\nkafka-topics.sh --list --bootstrap-server master:9092\n```\n#### 4.在test.log中写入数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/5a3bc3a8ba45423d94fa4fbe005973b3.png)\n\n#### 5.观察kafka的消费是否消费出数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/14142856df9b4ceb91c3d85b4b017eb4.png)\n\n\n\n\n# 三、flume实时采集mysql数据到kafka\n## 题目\n>在MySQL中建立数据库school，在数据库中建立表student。SQL语句如下：\n```java\n#创建数据库\ncreate database school;\n#使用数据库\nuse school;\n#创建数据表\ncreate table student(\n\tid int not null,\n\tname varchar(40),\n\tage int,\n\tgrade int,\n\tprimary key(id)\n);\n# 删除数据\ndrop database school;\n# 删除数据表\ndrop database student;\n# 查看数据表\nshow tables;\n```\n>编写配置文件，将student表中的内容输出到控制台。启动Flume，在student表中使用下列命令插入数据，在Kafka消费者中查看相应数据。\n>\n```java\n#插入数据，sql\ninsert into student(id,name,age,grade)value(1,'Xiaoming',23,98);\ninsert into student(id,name,age,grade)value(2,'Zhangsan',24,96);\ninsert into student(id,name,age,grade)value(3,'Lisi',24,93);\ninsert into student(id,name,age,grade)value(4,'Wangwu',21,91);\ninsert into student(id,name,age,grade)value(5,'Weiliu',21,91);\n```\n## 解题\n### 1.flume配置文件\n```shell\n# # 给sources（在一个agent里可以定义多个source）取个名字\na1.sources = r1\n# # 给channel个名字\na1.channels = c1\n# # 给channel个名字\na1.sinks = k1\n\n#配置source\na1.sources.r1.type = org.keedio.flume.source.SQLSource\n#ip地址和数据库名称需要修改，如果连接的本地的mysql改成本机IP地址，如果连接虚拟机上的mysql改成虚拟机的IP地址\na1.sources.r1.hibernate.connection.url = jdbc:mysql://ip地址/数据名称?useSSL=false&allowPublicKeyRetrieval=true\n# mysql用户名，一般都是root\na1.sources.r1.hibernate.connection.user = root\n# 密码\na1.sources.r1.hibernate.connection.password = 123456\na1.sources.r1.hibernate.connection.autocommit = true\n# mysql驱动\na1.sources.r1.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect\n# 驱动版本过低会无法使用，驱动安装下文会提及\na1.sources.r1.hibernate.connection.driver_class = com.mysql.jdbc.Driver\na1.sources.r1.run.query.delay=5000\n\n# 自定义查询\na1.sources.r1.start.from = 0\na1.sources.r1.table = student\na1.sources.r1.columns.to.select = *\n\na1.sources.r1.batch.size = 1000\na1.sources.r1.max.rows = 1000\na1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider\na1.sources.r1.hibernate.c3p0.min_size=1\na1.sources.r1.hibernate.c3p0.max_size=10\n# 存放status文件\na1.sources.r1.status.file.path = /root/dir1\na1.sources.r1.status.file.name = r1.status\n# 配置channel\na1.channels.c1.type = memory\na1.channels.c1.capacity = 10000\na1.channels.c1.transactionCapacity = 10000\na1.channels.c1.byteCapacityBufferPercentage = 20\na1.channels.c1.byteCapacity = 800000\n# 配置sinks\na1.sinks.k1.channel = c1\na1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink\n# 指定主题名topic\na1.sinks.k1.kafka.topic = events\na1.sinks.k1.kafka.bootstrap.servers = master:9092\na1.sinks.k1.kafka.flumeBatchSize = 20\na1.sinks.k1.kafka.producer.acks = 1\na1.sinks.k1.kafka.producer.linger.ms = 1\n\n# 将source、channel、sink组装成agent\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n### 2.要保证配置中的文件路径存在，并且根据注释做出相应的修改\n### 3.导入jar包到/flume/lib文件夹下\n```shell\n# flume连接mysqljar包\nflume-ng-sql-source-1.4.3.jar\n# mysql驱动jar包\nmysql-connector-java-5.1.49.jar\n```\n### 5.flume-ng-sql-source项目的官方网址\nhttps://github.com/keedio/flume-ng-sql-source\n### 6.测试\n#### 1.创建mysql数据库、数据表\n```shell\n#创建数据库\ncreate database school;\n#使用数据库\nuse school;\n#创建数据表\ncreate table student(\n\tid int not null,\n\tname varchar(40),\n\tage int,\n\tgrade int,\n\tprimary key(id)\n);\n```\n#### 2.启动flume\n```shell\nflume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console\n```\n#### 3.启动kafka消费者\n```shell\n#启动消费者之前首先要创建主题\nkafka-topics.sh --create --topic events --bootstrap-server master:9092\n#启动消费者\nkafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning\n```\n#### 4.student表中插入数据\n```java\n#插入数据，sql\ninsert into student(id,name,age,grade)value(1,'Xiaoming',23,98);\ninsert into student(id,name,age,grade)value(2,'Zhangsan',24,96);\ninsert into student(id,name,age,grade)value(3,'Lisi',24,93);\ninsert into student(id,name,age,grade)value(4,'Wangwu',21,91);\ninsert into student(id,name,age,grade)value(5,'Weiliu',21,91);\n```\n#### 5.观察数据\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/5c0301edb3124c6191bc2a33c805eddc.png)\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png)\n` 为了方便测试我重复插入了一条数据`\n\n#### 6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错\n##### 解决\n删除存放的status文件，也就是我配置文件中/root/dir1文件夹中的东西\n\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/7d1527b8fdd14ee3a942f5df899f9327.png)\n\n# 四、Kafka链接Flume，将生产的消息存入到HDFS\n## 题目\n> 编写配置文件，将kafka作为输入，在生产者中输入“HelloFlume”或其他信息，通过Flume将Kafka生产者输入的信息存入hdfs中，存储格式hdfs://localhost:9000/fromkafka/%Y%m%d/，要求存储时文件名为kafka_log。\n## 解答\n### 1.flume配置文件\n```shell\n\nagent.sources = kafka_source\nagent.channels = mem_channel\nagent.sinks = hdfs_sink\n# 以下配置 source\nagent.sources.kafka_source.type = org.apache.flume.source.kafka.KafkaSource\nagent.sources.kafka_source.channels = mem_channel\nagent.sources.kafka_source.batchSize = 5000\n# master为主机名或者主机IP\nagent.sources.kafka_source.kafka.bootstrap.servers = master:9092\n# 需要指定kafka生产者的主题\nagent.sources.kafka_source.kafka.topics = kafka-flume\n# 以下配置 sink\nagent.sinks.hdfs_sink.type = hdfs\nagent.sinks.hdfs_sink.channel = mem_channel\n# 输出到HDFS文件的路径\nagent.sinks.hdfs_sink.hdfs.path = /data/kafka-flume/%Y%m%d\n# HDFS文件前缀\nagent.sinks.hdfs_sink.hdfs.filePrefix = kafka_log\n# 使用时间戳\na1.sinks.r1.hdfs.useLocalTimeStamp = true\n\nagent.sinks.hdfs_sink.hdfs.rollSize = 0\nagent.sinks.hdfs_sink.hdfs.rollCount = 0\nagent.sinks.hdfs_sink.hdfs.rollInterval = 3600\nagent.sinks.hdfs_sink.hdfs.threadsPoolSize = 30\nagent.sinks.hdfs_sink.hdfs.fileType=DataStream\nagent.sinks.hdfs_sink.hdfs.writeFormat=Text\n# 以下配置 channel\nagent.channels.mem_channel.type = memory\nagent.channels.mem_channel.capacity = 100000\nagent.channels.mem_channel.transactionCapacity = 10000\n```\n### 2.根据配置文件的注释根据自己的情况做出修改\n### 3.hadoop操作文件夹命令\n```shell\n# 创建文件夹\nhadoop fs -mkdir 文件夹路径\n# 删除文件夹\nhadoop fs -rm -r -skipTrash 文件夹路径\n```\n### 4.测试\n#### 1.启动flume\n```shell\n#启动命令\nflume-ng agent -n agent -f kafka-flume-hdfs.cong -Dflume.root.logger=DEBUG,console\n# 参数解释\n第二个agent为配置文件中agent的名字，kafka-flume-hdfs.cong为配置文件名，根据自己情况做出修改\n```\n#### 2.启动kafka生产者\n```shell\n# 启动命令，根据自己配置变换主题名\nkafka-console-producer.sh --broker-list master:9092 --topic kafka-flume\n# 启动后，输入HelloFlume\n```\n#### 3.观察HDFS界面，寻找并下载文件，查看内容\n![在这里插入图片描述](flume实时采集mysql数据库的数据到kafka/416d1b9dd07d4e43bbaabeb02047e809.png)\n\n记得关闭flume后再下载，不然会下载出来.tmp文件\n\n# 有什么问题评论区提问！\n\n\n\n\n","slug":"flume实时采集mysql数据库的数据到kafka","published":1,"updated":"2023-08-17T01:48:40.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbzj2000mmcuxgcio378u","content":"<blockquote>\n<p>flume实时采集mysql数据到kafka的实验，做个笔记，防止忘记<br>！！！建议从头看到尾，因为一些简单的东西我在前面提了，后面没提。</p>\n</blockquote>\n<p>Kafka搭建：<a href=\"https://blog.csdn.net/cjwfinal/article/details/120803013\">https://blog.csdn.net/cjwfinal/article/details/120803013</a></p>\n<p>flume搭建：<a href=\"https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502\">https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502</a></p>\n<hr>\n<h1 id=\"一、flume写入当前文件系统\"><a href=\"#一、flume写入当前文件系统\" class=\"headerlink\" title=\"一、flume写入当前文件系统\"></a>一、flume写入当前文件系统</h1><h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><blockquote>\n<p>编写配置文件，设置文件夹mylogs为source位置，文件夹backup为sink写入位置，实现对文件夹的数据备份。<br>新建两个文本文本文件1.txt与2.txt，在1.txt中输入Hello Flume，在2.txt中输入hello flume将两个文件拖入mylog，查看backup文件夹中出现的文件及其内容。文件可用记事本打开</p>\n</blockquote>\n<h2 id=\"解题：\"><a href=\"#解题：\" class=\"headerlink\" title=\"解题：\"></a>解题：</h2><h3 id=\"1-flume配置文件\"><a href=\"#1-flume配置文件\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#a1表示agent的名字 可以自定义</span><br><span class=\"line\"># 给sources（在一个agent里可以定义多个source）取个名字</span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"># 给channel个名字</span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"># 给channel个名字</span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"></span><br><span class=\"line\"># 对source进行配置</span><br><span class=\"line\"># agent的名字.sources.source的名字.参数 = 参数值</span><br><span class=\"line\"></span><br><span class=\"line\"># source的类型 spoolDir（监控一个目录下的文件的变化）</span><br><span class=\"line\">a1.sources.r1.type = spooldir</span><br><span class=\"line\"># 监听哪一个目录</span><br><span class=\"line\">a1.sources.r1.spoolDir = /root/mylogs</span><br><span class=\"line\"># 是否在event的headers中保存文件的绝对路径</span><br><span class=\"line\">a1.sources.r1.fileHeader = <span class=\"literal\">true</span></span><br><span class=\"line\"># 给拦截器取个名字 i1</span><br><span class=\"line\">a1.sources.r1.interceptors = i1</span><br><span class=\"line\"># 使用timestamp拦截器，将处理数据的时间保存到event的headers中</span><br><span class=\"line\">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置channel</span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = <span class=\"number\">1000</span></span><br><span class=\"line\">a1.channels.c1.transactionCapacity = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 配置sink为logger</span><br><span class=\"line\"># 直接打印到控制台</span><br><span class=\"line\">a1.sinks.k1.type = file_roll</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.sink.directory = /root/backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 将source、channel、sink组装成agent</span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-要保证配置文件中的文件的路径都存在，否则会报错\"><a href=\"#2-要保证配置文件中的文件的路径都存在，否则会报错\" class=\"headerlink\" title=\"2.要保证配置文件中的文件的路径都存在，否则会报错\"></a>2.要保证配置文件中的文件的路径都存在，否则会报错</h3><h3 id=\"3-启动flume\"><a href=\"#3-启动flume\" class=\"headerlink\" title=\"3.启动flume\"></a>3.启动flume</h3><h4 id=\"启动命令：\"><a href=\"#启动命令：\" class=\"headerlink\" title=\"启动命令：\"></a>启动命令：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a1是agent的名字，spoolingtest.cong是配置文件名，如果不一样请修改</p>\n</blockquote>\n<img src=\"/posts/4a854bd2/ac873024932c4287ab8205db9afe0584.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><h4 id=\"1-启动flume\"><a href=\"#1-启动flume\" class=\"headerlink\" title=\"1.启动flume\"></a>1.启动flume</h4><p>注意：要在配置文件所在的目录启动</p>\n<h4 id=\"2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World\"><a href=\"#2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World\" class=\"headerlink\" title=\"2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World\"></a>2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World</h4><p>写入并保存，后flume打印出来的日志会发生改变。</p>\n<h4 id=\"3-查看backup文件夹\"><a href=\"#3-查看backup文件夹\" class=\"headerlink\" title=\"3.查看backup文件夹\"></a>3.查看backup文件夹</h4><p>backup文件夹中，会产生许多文件，其中某个文件中会保存上面两个文件的内容，自行查找即可。</p>\n<img src=\"/posts/4a854bd2/0d1b5a8572aa47119e603c7cd291307d.png\" class=\"\" title=\"在这里插入图片描述\">\n\n\n<h1 id=\"二、flume连接kafka\"><a href=\"#二、flume连接kafka\" class=\"headerlink\" title=\"二、flume连接kafka\"></a>二、flume连接kafka</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>把flume监听到的文件内容，输入到，kafka，并由kafka的消费着消费出来。</p>\n</blockquote>\n<h2 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h2><h3 id=\"1-flume配置文件-1\"><a href=\"#1-flume配置文件-1\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">a1表示agent的名字 可以自定义</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对<span class=\"built_in\">source</span>进行配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">agent的名字.sources.source的名字.参数 = 参数值</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">source</span>的类型 spoolDir（监控一个目录下的文件的变化）</span></span><br><span class=\"line\">a1.sources.r1.type = exec</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">监听哪一个目录</span></span><br><span class=\"line\">a1.sources.r1.command = tail -F -c +0 /root/dir1/test.log</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否在event的headers中保存文件的绝对路径</span></span><br><span class=\"line\">a1.sources.r1.fileHeader = true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">给拦截器取个名字 i1</span></span><br><span class=\"line\">a1.sources.r1.interceptors = i1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用timestamp拦截器，将处理数据的时间保存到event的headers中</span></span><br><span class=\"line\">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置channel</span></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = 1000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 100</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置sinks，输出到kafka中</span></span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic是指定kafka的主题</span></span><br><span class=\"line\">a1.sinks.k1.kafka.topic = events</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master是主机名，也可以是主机IP地址</span></span><br><span class=\"line\">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将<span class=\"built_in\">source</span>、channel、sink组装成agent![在这里插入图片描述](https://img-blog.csdnimg.cn/13519938e4ba42b9a4294454f2013dc2.png<span class=\"comment\">#pic_center)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2测试\"><a href=\"#2测试\" class=\"headerlink\" title=\"2测试\"></a>2测试</h3><h4 id=\"1-创建指定的目录-root-dir1-test-log\"><a href=\"#1-创建指定的目录-root-dir1-test-log\" class=\"headerlink\" title=\"1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log\"></a>1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log</h4><h4 id=\"2-启动flume\"><a href=\"#2-启动flume\" class=\"headerlink\" title=\"2.启动flume\"></a>2.启动flume</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动kafka的消费者\"><a href=\"#3-启动kafka的消费者\" class=\"headerlink\" title=\"3.启动kafka的消费者\"></a>3.启动kafka的消费者</h4><h5 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动消费者之前首先要创建主题</span><br><span class=\"line\">kafka-topics.sh --create --topic events --bootstrap-server master:<span class=\"number\">9092</span></span><br><span class=\"line\">#启动消费者</span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server master:<span class=\"number\">9092</span> --topic events --from-beginning</span><br></pre></td></tr></table></figure>\n<h5 id=\"kafka主题操作命令\"><a href=\"#kafka主题操作命令\" class=\"headerlink\" title=\"kafka主题操作命令\"></a>kafka主题操作命令</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除主题</span><br><span class=\"line\">kafka-topics.sh --delete --topic events --zookeeper localhost:<span class=\"number\">2181</span></span><br><span class=\"line\">#查看主题列表</span><br><span class=\"line\">kafka-topics.sh --list --bootstrap-server master:<span class=\"number\">9092</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-在test-log中写入数据\"><a href=\"#4-在test-log中写入数据\" class=\"headerlink\" title=\"4.在test.log中写入数据\"></a>4.在test.log中写入数据</h4><img src=\"/posts/4a854bd2/5a3bc3a8ba45423d94fa4fbe005973b3.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h4 id=\"5-观察kafka的消费是否消费出数据\"><a href=\"#5-观察kafka的消费是否消费出数据\" class=\"headerlink\" title=\"5.观察kafka的消费是否消费出数据\"></a>5.观察kafka的消费是否消费出数据</h4><img src=\"/posts/4a854bd2/14142856df9b4ceb91c3d85b4b017eb4.png\" class=\"\" title=\"在这里插入图片描述\">\n\n\n\n\n<h1 id=\"三、flume实时采集mysql数据到kafka\"><a href=\"#三、flume实时采集mysql数据到kafka\" class=\"headerlink\" title=\"三、flume实时采集mysql数据到kafka\"></a>三、flume实时采集mysql数据到kafka</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>在MySQL中建立数据库school，在数据库中建立表student。SQL语句如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建数据库</span><br><span class=\"line\">create database school;</span><br><span class=\"line\">#使用数据库</span><br><span class=\"line\">use school;</span><br><span class=\"line\">#创建数据表</span><br><span class=\"line\">create table <span class=\"title function_\">student</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\tid <span class=\"type\">int</span> not <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">\tname varchar(<span class=\"number\">40</span>)</span>,</span><br><span class=\"line\">\tage <span class=\"type\">int</span>,</span><br><span class=\"line\">\tgrade <span class=\"type\">int</span>,</span><br><span class=\"line\">\tprimary <span class=\"title function_\">key</span><span class=\"params\">(id)</span></span><br><span class=\"line\">);</span><br><span class=\"line\"># 删除数据</span><br><span class=\"line\">drop database school;</span><br><span class=\"line\"># 删除数据表</span><br><span class=\"line\">drop database student;</span><br><span class=\"line\"># 查看数据表</span><br><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>编写配置文件，将student表中的内容输出到控制台。启动Flume，在student表中使用下列命令插入数据，在Kafka消费者中查看相应数据。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#插入数据，sql</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">1</span>,<span class=\"string\">&#x27;Xiaoming&#x27;</span>,<span class=\"number\">23</span>,<span class=\"number\">98</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">2</span>,<span class=\"string\">&#x27;Zhangsan&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">96</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">3</span>,<span class=\"string\">&#x27;Lisi&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">93</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">4</span>,<span class=\"string\">&#x27;Wangwu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">5</span>,<span class=\"string\">&#x27;Weiliu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题-1\"><a href=\"#解题-1\" class=\"headerlink\" title=\"解题\"></a>解题</h2><h3 id=\"1-flume配置文件-2\"><a href=\"#1-flume配置文件-2\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置<span class=\"built_in\">source</span></span></span><br><span class=\"line\">a1.sources.r1.type = org.keedio.flume.source.SQLSource</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ip地址和数据库名称需要修改，如果连接的本地的mysql改成本机IP地址，如果连接虚拟机上的mysql改成虚拟机的IP地址</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.url = jdbc:mysql://ip地址/数据名称?useSSL=false&amp;allowPublicKeyRetrieval=true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql用户名，一般都是root</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.user = root</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">密码</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.password = 123456</span><br><span class=\"line\">a1.sources.r1.hibernate.connection.autocommit = true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql驱动</span></span><br><span class=\"line\">a1.sources.r1.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">驱动版本过低会无法使用，驱动安装下文会提及</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.driver_class = com.mysql.jdbc.Driver</span><br><span class=\"line\">a1.sources.r1.run.query.delay=5000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义查询</span></span><br><span class=\"line\">a1.sources.r1.start.from = 0</span><br><span class=\"line\">a1.sources.r1.table = student</span><br><span class=\"line\">a1.sources.r1.columns.to.select = *</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.batch.size = 1000</span><br><span class=\"line\">a1.sources.r1.max.rows = 1000</span><br><span class=\"line\">a1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider</span><br><span class=\"line\">a1.sources.r1.hibernate.c3p0.min_size=1</span><br><span class=\"line\">a1.sources.r1.hibernate.c3p0.max_size=10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">存放status文件</span></span><br><span class=\"line\">a1.sources.r1.status.file.path = /root/dir1</span><br><span class=\"line\">a1.sources.r1.status.file.name = r1.status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置channel</span></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = 10000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 10000</span><br><span class=\"line\">a1.channels.c1.byteCapacityBufferPercentage = 20</span><br><span class=\"line\">a1.channels.c1.byteCapacity = 800000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置sinks</span></span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定主题名topic</span></span><br><span class=\"line\">a1.sinks.k1.kafka.topic = events</span><br><span class=\"line\">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将<span class=\"built_in\">source</span>、channel、sink组装成agent</span></span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-要保证配置中的文件路径存在，并且根据注释做出相应的修改\"><a href=\"#2-要保证配置中的文件路径存在，并且根据注释做出相应的修改\" class=\"headerlink\" title=\"2.要保证配置中的文件路径存在，并且根据注释做出相应的修改\"></a>2.要保证配置中的文件路径存在，并且根据注释做出相应的修改</h3><h3 id=\"3-导入jar包到-flume-lib文件夹下\"><a href=\"#3-导入jar包到-flume-lib文件夹下\" class=\"headerlink\" title=\"3.导入jar包到&#x2F;flume&#x2F;lib文件夹下\"></a>3.导入jar包到&#x2F;flume&#x2F;lib文件夹下</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">flume连接mysqljar包</span></span><br><span class=\"line\">flume-ng-sql-source-1.4.3.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql驱动jar包</span></span><br><span class=\"line\">mysql-connector-java-5.1.49.jar</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-flume-ng-sql-source项目的官方网址\"><a href=\"#5-flume-ng-sql-source项目的官方网址\" class=\"headerlink\" title=\"5.flume-ng-sql-source项目的官方网址\"></a>5.flume-ng-sql-source项目的官方网址</h3><p><a href=\"https://github.com/keedio/flume-ng-sql-source\">https://github.com/keedio/flume-ng-sql-source</a></p>\n<h3 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6.测试\"></a>6.测试</h3><h4 id=\"1-创建mysql数据库、数据表\"><a href=\"#1-创建mysql数据库、数据表\" class=\"headerlink\" title=\"1.创建mysql数据库、数据表\"></a>1.创建mysql数据库、数据表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建数据库</span></span><br><span class=\"line\">create database school;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用数据库</span></span><br><span class=\"line\">use school;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建数据表</span></span><br><span class=\"line\">create table student(</span><br><span class=\"line\">\tid int not null,</span><br><span class=\"line\">\tname varchar(40),</span><br><span class=\"line\">\tage int,</span><br><span class=\"line\">\tgrade int,</span><br><span class=\"line\">\tprimary key(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动flume-1\"><a href=\"#2-启动flume-1\" class=\"headerlink\" title=\"2.启动flume\"></a>2.启动flume</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动kafka消费者\"><a href=\"#3-启动kafka消费者\" class=\"headerlink\" title=\"3.启动kafka消费者\"></a>3.启动kafka消费者</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动消费者之前首先要创建主题</span></span><br><span class=\"line\">kafka-topics.sh --create --topic events --bootstrap-server master:9092</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动消费者</span></span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-student表中插入数据\"><a href=\"#4-student表中插入数据\" class=\"headerlink\" title=\"4.student表中插入数据\"></a>4.student表中插入数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#插入数据，sql</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">1</span>,<span class=\"string\">&#x27;Xiaoming&#x27;</span>,<span class=\"number\">23</span>,<span class=\"number\">98</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">2</span>,<span class=\"string\">&#x27;Zhangsan&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">96</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">3</span>,<span class=\"string\">&#x27;Lisi&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">93</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">4</span>,<span class=\"string\">&#x27;Wangwu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">5</span>,<span class=\"string\">&#x27;Weiliu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-观察数据\"><a href=\"#5-观察数据\" class=\"headerlink\" title=\"5.观察数据\"></a>5.观察数据</h4><img src=\"/posts/4a854bd2/5c0301edb3124c6191bc2a33c805eddc.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<img src=\"/posts/4a854bd2/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png\" class=\"\" title=\"在这里插入图片描述\">\n<p><code> 为了方便测试我重复插入了一条数据</code></p>\n<h4 id=\"6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错\"><a href=\"#6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错\" class=\"headerlink\" title=\"6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错\"></a>6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错</h4><h5 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h5><p>删除存放的status文件，也就是我配置文件中&#x2F;root&#x2F;dir1文件夹中的东西</p>\n<img src=\"/posts/4a854bd2/7d1527b8fdd14ee3a942f5df899f9327.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h1 id=\"四、Kafka链接Flume，将生产的消息存入到HDFS\"><a href=\"#四、Kafka链接Flume，将生产的消息存入到HDFS\" class=\"headerlink\" title=\"四、Kafka链接Flume，将生产的消息存入到HDFS\"></a>四、Kafka链接Flume，将生产的消息存入到HDFS</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>编写配置文件，将kafka作为输入，在生产者中输入“HelloFlume”或其他信息，通过Flume将Kafka生产者输入的信息存入hdfs中，存储格式hdfs:&#x2F;&#x2F;localhost:9000&#x2F;fromkafka&#x2F;%Y%m%d&#x2F;，要求存储时文件名为kafka_log。</p>\n</blockquote>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><h3 id=\"1-flume配置文件-3\"><a href=\"#1-flume配置文件-3\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">agent.sources = kafka_source</span><br><span class=\"line\">agent.channels = mem_channel</span><br><span class=\"line\">agent.sinks = hdfs_sink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 <span class=\"built_in\">source</span></span></span><br><span class=\"line\">agent.sources.kafka_source.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class=\"line\">agent.sources.kafka_source.channels = mem_channel</span><br><span class=\"line\">agent.sources.kafka_source.batchSize = 5000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master为主机名或者主机IP</span></span><br><span class=\"line\">agent.sources.kafka_source.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要指定kafka生产者的主题</span></span><br><span class=\"line\">agent.sources.kafka_source.kafka.topics = kafka-flume</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 sink</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.type = hdfs</span><br><span class=\"line\">agent.sinks.hdfs_sink.channel = mem_channel</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出到HDFS文件的路径</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.path = /data/kafka-flume/%Y%m%d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">HDFS文件前缀</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.filePrefix = kafka_log</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用时间戳</span></span><br><span class=\"line\">a1.sinks.r1.hdfs.useLocalTimeStamp = true</span><br><span class=\"line\"></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollSize = 0</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollCount = 0</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollInterval = 3600</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.threadsPoolSize = 30</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.fileType=DataStream</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.writeFormat=Text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 channel</span></span><br><span class=\"line\">agent.channels.mem_channel.type = memory</span><br><span class=\"line\">agent.channels.mem_channel.capacity = 100000</span><br><span class=\"line\">agent.channels.mem_channel.transactionCapacity = 10000</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-根据配置文件的注释根据自己的情况做出修改\"><a href=\"#2-根据配置文件的注释根据自己的情况做出修改\" class=\"headerlink\" title=\"2.根据配置文件的注释根据自己的情况做出修改\"></a>2.根据配置文件的注释根据自己的情况做出修改</h3><h3 id=\"3-hadoop操作文件夹命令\"><a href=\"#3-hadoop操作文件夹命令\" class=\"headerlink\" title=\"3.hadoop操作文件夹命令\"></a>3.hadoop操作文件夹命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建文件夹</span></span><br><span class=\"line\">hadoop fs -mkdir 文件夹路径</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除文件夹</span></span><br><span class=\"line\">hadoop fs -rm -r -skipTrash 文件夹路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-测试-1\"><a href=\"#4-测试-1\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><h4 id=\"1-启动flume-1\"><a href=\"#1-启动flume-1\" class=\"headerlink\" title=\"1.启动flume\"></a>1.启动flume</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动命令</span></span><br><span class=\"line\">flume-ng agent -n agent -f kafka-flume-hdfs.cong -Dflume.root.logger=DEBUG,console</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数解释</span></span><br><span class=\"line\">第二个agent为配置文件中agent的名字，kafka-flume-hdfs.cong为配置文件名，根据自己情况做出修改</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动kafka生产者\"><a href=\"#2-启动kafka生产者\" class=\"headerlink\" title=\"2.启动kafka生产者\"></a>2.启动kafka生产者</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动命令，根据自己配置变换主题名</span></span><br><span class=\"line\">kafka-console-producer.sh --broker-list master:9092 --topic kafka-flume</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动后，输入HelloFlume</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-观察HDFS界面，寻找并下载文件，查看内容\"><a href=\"#3-观察HDFS界面，寻找并下载文件，查看内容\" class=\"headerlink\" title=\"3.观察HDFS界面，寻找并下载文件，查看内容\"></a>3.观察HDFS界面，寻找并下载文件，查看内容</h4><img src=\"/posts/4a854bd2/416d1b9dd07d4e43bbaabeb02047e809.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<p>记得关闭flume后再下载，不然会下载出来.tmp文件</p>\n<h1 id=\"有什么问题评论区提问！\"><a href=\"#有什么问题评论区提问！\" class=\"headerlink\" title=\"有什么问题评论区提问！\"></a>有什么问题评论区提问！</h1>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>flume实时采集mysql数据到kafka的实验，做个笔记，防止忘记<br>！！！建议从头看到尾，因为一些简单的东西我在前面提了，后面没提。</p>\n</blockquote>\n<p>Kafka搭建：<a href=\"https://blog.csdn.net/cjwfinal/article/details/120803013\">https://blog.csdn.net/cjwfinal/article/details/120803013</a></p>\n<p>flume搭建：<a href=\"https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502\">https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502</a></p>\n<hr>\n<h1 id=\"一、flume写入当前文件系统\"><a href=\"#一、flume写入当前文件系统\" class=\"headerlink\" title=\"一、flume写入当前文件系统\"></a>一、flume写入当前文件系统</h1><h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><blockquote>\n<p>编写配置文件，设置文件夹mylogs为source位置，文件夹backup为sink写入位置，实现对文件夹的数据备份。<br>新建两个文本文本文件1.txt与2.txt，在1.txt中输入Hello Flume，在2.txt中输入hello flume将两个文件拖入mylog，查看backup文件夹中出现的文件及其内容。文件可用记事本打开</p>\n</blockquote>\n<h2 id=\"解题：\"><a href=\"#解题：\" class=\"headerlink\" title=\"解题：\"></a>解题：</h2><h3 id=\"1-flume配置文件\"><a href=\"#1-flume配置文件\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#a1表示agent的名字 可以自定义</span><br><span class=\"line\"># 给sources（在一个agent里可以定义多个source）取个名字</span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"># 给channel个名字</span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"># 给channel个名字</span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"></span><br><span class=\"line\"># 对source进行配置</span><br><span class=\"line\"># agent的名字.sources.source的名字.参数 = 参数值</span><br><span class=\"line\"></span><br><span class=\"line\"># source的类型 spoolDir（监控一个目录下的文件的变化）</span><br><span class=\"line\">a1.sources.r1.type = spooldir</span><br><span class=\"line\"># 监听哪一个目录</span><br><span class=\"line\">a1.sources.r1.spoolDir = /root/mylogs</span><br><span class=\"line\"># 是否在event的headers中保存文件的绝对路径</span><br><span class=\"line\">a1.sources.r1.fileHeader = <span class=\"literal\">true</span></span><br><span class=\"line\"># 给拦截器取个名字 i1</span><br><span class=\"line\">a1.sources.r1.interceptors = i1</span><br><span class=\"line\"># 使用timestamp拦截器，将处理数据的时间保存到event的headers中</span><br><span class=\"line\">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置channel</span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = <span class=\"number\">1000</span></span><br><span class=\"line\">a1.channels.c1.transactionCapacity = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 配置sink为logger</span><br><span class=\"line\"># 直接打印到控制台</span><br><span class=\"line\">a1.sinks.k1.type = file_roll</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.sink.directory = /root/backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 将source、channel、sink组装成agent</span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-要保证配置文件中的文件的路径都存在，否则会报错\"><a href=\"#2-要保证配置文件中的文件的路径都存在，否则会报错\" class=\"headerlink\" title=\"2.要保证配置文件中的文件的路径都存在，否则会报错\"></a>2.要保证配置文件中的文件的路径都存在，否则会报错</h3><h3 id=\"3-启动flume\"><a href=\"#3-启动flume\" class=\"headerlink\" title=\"3.启动flume\"></a>3.启动flume</h3><h4 id=\"启动命令：\"><a href=\"#启动命令：\" class=\"headerlink\" title=\"启动命令：\"></a>启动命令：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a1是agent的名字，spoolingtest.cong是配置文件名，如果不一样请修改</p>\n</blockquote>\n<img src=\"/posts/4a854bd2/ac873024932c4287ab8205db9afe0584.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><h4 id=\"1-启动flume\"><a href=\"#1-启动flume\" class=\"headerlink\" title=\"1.启动flume\"></a>1.启动flume</h4><p>注意：要在配置文件所在的目录启动</p>\n<h4 id=\"2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World\"><a href=\"#2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World\" class=\"headerlink\" title=\"2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World\"></a>2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World</h4><p>写入并保存，后flume打印出来的日志会发生改变。</p>\n<h4 id=\"3-查看backup文件夹\"><a href=\"#3-查看backup文件夹\" class=\"headerlink\" title=\"3.查看backup文件夹\"></a>3.查看backup文件夹</h4><p>backup文件夹中，会产生许多文件，其中某个文件中会保存上面两个文件的内容，自行查找即可。</p>\n<img src=\"/posts/4a854bd2/0d1b5a8572aa47119e603c7cd291307d.png\" class=\"\" title=\"在这里插入图片描述\">\n\n\n<h1 id=\"二、flume连接kafka\"><a href=\"#二、flume连接kafka\" class=\"headerlink\" title=\"二、flume连接kafka\"></a>二、flume连接kafka</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>把flume监听到的文件内容，输入到，kafka，并由kafka的消费着消费出来。</p>\n</blockquote>\n<h2 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h2><h3 id=\"1-flume配置文件-1\"><a href=\"#1-flume配置文件-1\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">a1表示agent的名字 可以自定义</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">对<span class=\"built_in\">source</span>进行配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">agent的名字.sources.source的名字.参数 = 参数值</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">source</span>的类型 spoolDir（监控一个目录下的文件的变化）</span></span><br><span class=\"line\">a1.sources.r1.type = exec</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">监听哪一个目录</span></span><br><span class=\"line\">a1.sources.r1.command = tail -F -c +0 /root/dir1/test.log</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否在event的headers中保存文件的绝对路径</span></span><br><span class=\"line\">a1.sources.r1.fileHeader = true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">给拦截器取个名字 i1</span></span><br><span class=\"line\">a1.sources.r1.interceptors = i1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用timestamp拦截器，将处理数据的时间保存到event的headers中</span></span><br><span class=\"line\">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置channel</span></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = 1000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 100</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置sinks，输出到kafka中</span></span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic是指定kafka的主题</span></span><br><span class=\"line\">a1.sinks.k1.kafka.topic = events</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master是主机名，也可以是主机IP地址</span></span><br><span class=\"line\">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将<span class=\"built_in\">source</span>、channel、sink组装成agent![在这里插入图片描述](https://img-blog.csdnimg.cn/13519938e4ba42b9a4294454f2013dc2.png<span class=\"comment\">#pic_center)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2测试\"><a href=\"#2测试\" class=\"headerlink\" title=\"2测试\"></a>2测试</h3><h4 id=\"1-创建指定的目录-root-dir1-test-log\"><a href=\"#1-创建指定的目录-root-dir1-test-log\" class=\"headerlink\" title=\"1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log\"></a>1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log</h4><h4 id=\"2-启动flume\"><a href=\"#2-启动flume\" class=\"headerlink\" title=\"2.启动flume\"></a>2.启动flume</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动kafka的消费者\"><a href=\"#3-启动kafka的消费者\" class=\"headerlink\" title=\"3.启动kafka的消费者\"></a>3.启动kafka的消费者</h4><h5 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动消费者之前首先要创建主题</span><br><span class=\"line\">kafka-topics.sh --create --topic events --bootstrap-server master:<span class=\"number\">9092</span></span><br><span class=\"line\">#启动消费者</span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server master:<span class=\"number\">9092</span> --topic events --from-beginning</span><br></pre></td></tr></table></figure>\n<h5 id=\"kafka主题操作命令\"><a href=\"#kafka主题操作命令\" class=\"headerlink\" title=\"kafka主题操作命令\"></a>kafka主题操作命令</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除主题</span><br><span class=\"line\">kafka-topics.sh --delete --topic events --zookeeper localhost:<span class=\"number\">2181</span></span><br><span class=\"line\">#查看主题列表</span><br><span class=\"line\">kafka-topics.sh --list --bootstrap-server master:<span class=\"number\">9092</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-在test-log中写入数据\"><a href=\"#4-在test-log中写入数据\" class=\"headerlink\" title=\"4.在test.log中写入数据\"></a>4.在test.log中写入数据</h4><img src=\"/posts/4a854bd2/5a3bc3a8ba45423d94fa4fbe005973b3.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h4 id=\"5-观察kafka的消费是否消费出数据\"><a href=\"#5-观察kafka的消费是否消费出数据\" class=\"headerlink\" title=\"5.观察kafka的消费是否消费出数据\"></a>5.观察kafka的消费是否消费出数据</h4><img src=\"/posts/4a854bd2/14142856df9b4ceb91c3d85b4b017eb4.png\" class=\"\" title=\"在这里插入图片描述\">\n\n\n\n\n<h1 id=\"三、flume实时采集mysql数据到kafka\"><a href=\"#三、flume实时采集mysql数据到kafka\" class=\"headerlink\" title=\"三、flume实时采集mysql数据到kafka\"></a>三、flume实时采集mysql数据到kafka</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>在MySQL中建立数据库school，在数据库中建立表student。SQL语句如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建数据库</span><br><span class=\"line\">create database school;</span><br><span class=\"line\">#使用数据库</span><br><span class=\"line\">use school;</span><br><span class=\"line\">#创建数据表</span><br><span class=\"line\">create table <span class=\"title function_\">student</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\tid <span class=\"type\">int</span> not <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">\tname varchar(<span class=\"number\">40</span>)</span>,</span><br><span class=\"line\">\tage <span class=\"type\">int</span>,</span><br><span class=\"line\">\tgrade <span class=\"type\">int</span>,</span><br><span class=\"line\">\tprimary <span class=\"title function_\">key</span><span class=\"params\">(id)</span></span><br><span class=\"line\">);</span><br><span class=\"line\"># 删除数据</span><br><span class=\"line\">drop database school;</span><br><span class=\"line\"># 删除数据表</span><br><span class=\"line\">drop database student;</span><br><span class=\"line\"># 查看数据表</span><br><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>编写配置文件，将student表中的内容输出到控制台。启动Flume，在student表中使用下列命令插入数据，在Kafka消费者中查看相应数据。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#插入数据，sql</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">1</span>,<span class=\"string\">&#x27;Xiaoming&#x27;</span>,<span class=\"number\">23</span>,<span class=\"number\">98</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">2</span>,<span class=\"string\">&#x27;Zhangsan&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">96</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">3</span>,<span class=\"string\">&#x27;Lisi&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">93</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">4</span>,<span class=\"string\">&#x27;Wangwu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">5</span>,<span class=\"string\">&#x27;Weiliu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题-1\"><a href=\"#解题-1\" class=\"headerlink\" title=\"解题\"></a>解题</h2><h3 id=\"1-flume配置文件-2\"><a href=\"#1-flume配置文件-2\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class=\"line\">a1.sources = r1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.channels = c1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"comment\"># 给channel个名字</span></span></span><br><span class=\"line\">a1.sinks = k1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置<span class=\"built_in\">source</span></span></span><br><span class=\"line\">a1.sources.r1.type = org.keedio.flume.source.SQLSource</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ip地址和数据库名称需要修改，如果连接的本地的mysql改成本机IP地址，如果连接虚拟机上的mysql改成虚拟机的IP地址</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.url = jdbc:mysql://ip地址/数据名称?useSSL=false&amp;allowPublicKeyRetrieval=true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql用户名，一般都是root</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.user = root</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">密码</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.password = 123456</span><br><span class=\"line\">a1.sources.r1.hibernate.connection.autocommit = true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql驱动</span></span><br><span class=\"line\">a1.sources.r1.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">驱动版本过低会无法使用，驱动安装下文会提及</span></span><br><span class=\"line\">a1.sources.r1.hibernate.connection.driver_class = com.mysql.jdbc.Driver</span><br><span class=\"line\">a1.sources.r1.run.query.delay=5000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义查询</span></span><br><span class=\"line\">a1.sources.r1.start.from = 0</span><br><span class=\"line\">a1.sources.r1.table = student</span><br><span class=\"line\">a1.sources.r1.columns.to.select = *</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.batch.size = 1000</span><br><span class=\"line\">a1.sources.r1.max.rows = 1000</span><br><span class=\"line\">a1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider</span><br><span class=\"line\">a1.sources.r1.hibernate.c3p0.min_size=1</span><br><span class=\"line\">a1.sources.r1.hibernate.c3p0.max_size=10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">存放status文件</span></span><br><span class=\"line\">a1.sources.r1.status.file.path = /root/dir1</span><br><span class=\"line\">a1.sources.r1.status.file.name = r1.status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置channel</span></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity = 10000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 10000</span><br><span class=\"line\">a1.channels.c1.byteCapacityBufferPercentage = 20</span><br><span class=\"line\">a1.channels.c1.byteCapacity = 800000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置sinks</span></span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br><span class=\"line\">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定主题名topic</span></span><br><span class=\"line\">a1.sinks.k1.kafka.topic = events</span><br><span class=\"line\">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class=\"line\">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将<span class=\"built_in\">source</span>、channel、sink组装成agent</span></span><br><span class=\"line\">a1.sources.r1.channels = c1</span><br><span class=\"line\">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-要保证配置中的文件路径存在，并且根据注释做出相应的修改\"><a href=\"#2-要保证配置中的文件路径存在，并且根据注释做出相应的修改\" class=\"headerlink\" title=\"2.要保证配置中的文件路径存在，并且根据注释做出相应的修改\"></a>2.要保证配置中的文件路径存在，并且根据注释做出相应的修改</h3><h3 id=\"3-导入jar包到-flume-lib文件夹下\"><a href=\"#3-导入jar包到-flume-lib文件夹下\" class=\"headerlink\" title=\"3.导入jar包到&#x2F;flume&#x2F;lib文件夹下\"></a>3.导入jar包到&#x2F;flume&#x2F;lib文件夹下</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">flume连接mysqljar包</span></span><br><span class=\"line\">flume-ng-sql-source-1.4.3.jar</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql驱动jar包</span></span><br><span class=\"line\">mysql-connector-java-5.1.49.jar</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-flume-ng-sql-source项目的官方网址\"><a href=\"#5-flume-ng-sql-source项目的官方网址\" class=\"headerlink\" title=\"5.flume-ng-sql-source项目的官方网址\"></a>5.flume-ng-sql-source项目的官方网址</h3><p><a href=\"https://github.com/keedio/flume-ng-sql-source\">https://github.com/keedio/flume-ng-sql-source</a></p>\n<h3 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6.测试\"></a>6.测试</h3><h4 id=\"1-创建mysql数据库、数据表\"><a href=\"#1-创建mysql数据库、数据表\" class=\"headerlink\" title=\"1.创建mysql数据库、数据表\"></a>1.创建mysql数据库、数据表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建数据库</span></span><br><span class=\"line\">create database school;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用数据库</span></span><br><span class=\"line\">use school;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建数据表</span></span><br><span class=\"line\">create table student(</span><br><span class=\"line\">\tid int not null,</span><br><span class=\"line\">\tname varchar(40),</span><br><span class=\"line\">\tage int,</span><br><span class=\"line\">\tgrade int,</span><br><span class=\"line\">\tprimary key(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动flume-1\"><a href=\"#2-启动flume-1\" class=\"headerlink\" title=\"2.启动flume\"></a>2.启动flume</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动kafka消费者\"><a href=\"#3-启动kafka消费者\" class=\"headerlink\" title=\"3.启动kafka消费者\"></a>3.启动kafka消费者</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动消费者之前首先要创建主题</span></span><br><span class=\"line\">kafka-topics.sh --create --topic events --bootstrap-server master:9092</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动消费者</span></span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-student表中插入数据\"><a href=\"#4-student表中插入数据\" class=\"headerlink\" title=\"4.student表中插入数据\"></a>4.student表中插入数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#插入数据，sql</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">1</span>,<span class=\"string\">&#x27;Xiaoming&#x27;</span>,<span class=\"number\">23</span>,<span class=\"number\">98</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">2</span>,<span class=\"string\">&#x27;Zhangsan&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">96</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">3</span>,<span class=\"string\">&#x27;Lisi&#x27;</span>,<span class=\"number\">24</span>,<span class=\"number\">93</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">4</span>,<span class=\"string\">&#x27;Wangwu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br><span class=\"line\">insert into <span class=\"title function_\">student</span><span class=\"params\">(id,name,age,grade)</span>value(<span class=\"number\">5</span>,<span class=\"string\">&#x27;Weiliu&#x27;</span>,<span class=\"number\">21</span>,<span class=\"number\">91</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-观察数据\"><a href=\"#5-观察数据\" class=\"headerlink\" title=\"5.观察数据\"></a>5.观察数据</h4><img src=\"/posts/4a854bd2/5c0301edb3124c6191bc2a33c805eddc.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<img src=\"/posts/4a854bd2/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png\" class=\"\" title=\"在这里插入图片描述\">\n<p><code> 为了方便测试我重复插入了一条数据</code></p>\n<h4 id=\"6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错\"><a href=\"#6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错\" class=\"headerlink\" title=\"6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错\"></a>6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错</h4><h5 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h5><p>删除存放的status文件，也就是我配置文件中&#x2F;root&#x2F;dir1文件夹中的东西</p>\n<img src=\"/posts/4a854bd2/7d1527b8fdd14ee3a942f5df899f9327.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<h1 id=\"四、Kafka链接Flume，将生产的消息存入到HDFS\"><a href=\"#四、Kafka链接Flume，将生产的消息存入到HDFS\" class=\"headerlink\" title=\"四、Kafka链接Flume，将生产的消息存入到HDFS\"></a>四、Kafka链接Flume，将生产的消息存入到HDFS</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><blockquote>\n<p>编写配置文件，将kafka作为输入，在生产者中输入“HelloFlume”或其他信息，通过Flume将Kafka生产者输入的信息存入hdfs中，存储格式hdfs:&#x2F;&#x2F;localhost:9000&#x2F;fromkafka&#x2F;%Y%m%d&#x2F;，要求存储时文件名为kafka_log。</p>\n</blockquote>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><h3 id=\"1-flume配置文件-3\"><a href=\"#1-flume配置文件-3\" class=\"headerlink\" title=\"1.flume配置文件\"></a>1.flume配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">agent.sources = kafka_source</span><br><span class=\"line\">agent.channels = mem_channel</span><br><span class=\"line\">agent.sinks = hdfs_sink</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 <span class=\"built_in\">source</span></span></span><br><span class=\"line\">agent.sources.kafka_source.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class=\"line\">agent.sources.kafka_source.channels = mem_channel</span><br><span class=\"line\">agent.sources.kafka_source.batchSize = 5000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master为主机名或者主机IP</span></span><br><span class=\"line\">agent.sources.kafka_source.kafka.bootstrap.servers = master:9092</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要指定kafka生产者的主题</span></span><br><span class=\"line\">agent.sources.kafka_source.kafka.topics = kafka-flume</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 sink</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.type = hdfs</span><br><span class=\"line\">agent.sinks.hdfs_sink.channel = mem_channel</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出到HDFS文件的路径</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.path = /data/kafka-flume/%Y%m%d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">HDFS文件前缀</span></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.filePrefix = kafka_log</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用时间戳</span></span><br><span class=\"line\">a1.sinks.r1.hdfs.useLocalTimeStamp = true</span><br><span class=\"line\"></span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollSize = 0</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollCount = 0</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.rollInterval = 3600</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.threadsPoolSize = 30</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.fileType=DataStream</span><br><span class=\"line\">agent.sinks.hdfs_sink.hdfs.writeFormat=Text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下配置 channel</span></span><br><span class=\"line\">agent.channels.mem_channel.type = memory</span><br><span class=\"line\">agent.channels.mem_channel.capacity = 100000</span><br><span class=\"line\">agent.channels.mem_channel.transactionCapacity = 10000</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-根据配置文件的注释根据自己的情况做出修改\"><a href=\"#2-根据配置文件的注释根据自己的情况做出修改\" class=\"headerlink\" title=\"2.根据配置文件的注释根据自己的情况做出修改\"></a>2.根据配置文件的注释根据自己的情况做出修改</h3><h3 id=\"3-hadoop操作文件夹命令\"><a href=\"#3-hadoop操作文件夹命令\" class=\"headerlink\" title=\"3.hadoop操作文件夹命令\"></a>3.hadoop操作文件夹命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建文件夹</span></span><br><span class=\"line\">hadoop fs -mkdir 文件夹路径</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除文件夹</span></span><br><span class=\"line\">hadoop fs -rm -r -skipTrash 文件夹路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-测试-1\"><a href=\"#4-测试-1\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><h4 id=\"1-启动flume-1\"><a href=\"#1-启动flume-1\" class=\"headerlink\" title=\"1.启动flume\"></a>1.启动flume</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动命令</span></span><br><span class=\"line\">flume-ng agent -n agent -f kafka-flume-hdfs.cong -Dflume.root.logger=DEBUG,console</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数解释</span></span><br><span class=\"line\">第二个agent为配置文件中agent的名字，kafka-flume-hdfs.cong为配置文件名，根据自己情况做出修改</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动kafka生产者\"><a href=\"#2-启动kafka生产者\" class=\"headerlink\" title=\"2.启动kafka生产者\"></a>2.启动kafka生产者</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动命令，根据自己配置变换主题名</span></span><br><span class=\"line\">kafka-console-producer.sh --broker-list master:9092 --topic kafka-flume</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动后，输入HelloFlume</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-观察HDFS界面，寻找并下载文件，查看内容\"><a href=\"#3-观察HDFS界面，寻找并下载文件，查看内容\" class=\"headerlink\" title=\"3.观察HDFS界面，寻找并下载文件，查看内容\"></a>3.观察HDFS界面，寻找并下载文件，查看内容</h4><img src=\"/posts/4a854bd2/416d1b9dd07d4e43bbaabeb02047e809.png\" class=\"\" title=\"在这里插入图片描述\">\n\n<p>记得关闭flume后再下载，不然会下载出来.tmp文件</p>\n<h1 id=\"有什么问题评论区提问！\"><a href=\"#有什么问题评论区提问！\" class=\"headerlink\" title=\"有什么问题评论区提问！\"></a>有什么问题评论区提问！</h1>"},{"title":"test","cover":"/images/test.jpg","abbrlink":"d87f7e0c","date":"2023-08-10T11:44:16.000Z","_content":"\n```\n![](image.jpg) # 正确引用图片的方式，在hexo中\n```\n\n第一种hZ9SjgCDRMUGOxT.png在./test/中\n\n![](hZ9SjgCDRMUGOxT.png)\n\n\n\n\n\n第三种\n\n\n\n\n\n![image-20230710200106371](test/image-20230710200106371.png)\n\n- \n\n```\nsssss\n```\n\n- hafhhaa","source":"_posts/test.md","raw":"---\ntitle: test\ntags: 测试\ncategories: Bug\ncover: /images/test.jpg\nabbrlink: d87f7e0c\ndate: 2023-08-10 19:44:16\n---\n\n```\n![](image.jpg) # 正确引用图片的方式，在hexo中\n```\n\n第一种hZ9SjgCDRMUGOxT.png在./test/中\n\n![](hZ9SjgCDRMUGOxT.png)\n\n\n\n\n\n第三种\n\n\n\n\n\n![image-20230710200106371](test/image-20230710200106371.png)\n\n- \n\n```\nsssss\n```\n\n- hafhhaa","slug":"test","published":1,"updated":"2023-08-17T01:48:40.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbzj2000nmcux4xxbavov","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image.jpg) # 正确引用图片的方式，在hexo中</span><br></pre></td></tr></table></figure>\n\n<p>第一种hZ9SjgCDRMUGOxT.png在.&#x2F;test&#x2F;中</p>\n<p><img src=\"/posts/d87f7e0c/hZ9SjgCDRMUGOxT.png\"></p>\n<p>第三种</p>\n<img src=\"/posts/d87f7e0c/image-20230710200106371.png\" class=\"\" title=\"image-20230710200106371\">\n\n<p>- </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sssss</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hafhhaa</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image.jpg) # 正确引用图片的方式，在hexo中</span><br></pre></td></tr></table></figure>\n\n<p>第一种hZ9SjgCDRMUGOxT.png在.&#x2F;test&#x2F;中</p>\n<p><img src=\"/posts/d87f7e0c/hZ9SjgCDRMUGOxT.png\"></p>\n<p>第三种</p>\n<img src=\"/posts/d87f7e0c/image-20230710200106371.png\" class=\"\" title=\"image-20230710200106371\">\n\n<p>- </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sssss</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hafhhaa</li>\n</ul>\n"},{"title":"python笔记","cover":"/images/python笔记.jpg","description":"这是python描述","abbrlink":"c00b24b1","date":"2023-08-10T13:46:52.000Z","_content":"\n# 一、python基础\n\n## 前言 python所学内容\n\n- 基础语法\n  - 变量、注释、基本数据类型、格式化字符串、反转字符、数据类型转化、if\\elif选择结构、for\\while循环\n  - str的常用方法、运算符\n  - 命名空间、作用域\n- 数据容器\n  - list列表、tuple元组、dict字典、set集合\n  - 遍历数据容器、列表推导式\n  - 杨辉三角、冒泡排序\n- 函数\n  - 函数参数\n    - 必选参数、 默认参数、可选参数、关键字参数、命名关键字参数\n  - 递归函数\n    - 阶乘、斐波拉契数列、汉诺塔\n- 面向对象\n  - 类、私有变量和方法、封装、继承、多态、猴子补丁、鸭子类型、兔子问题\n- 异常处理\n  - 基本异常类型、捕获和抛出异常、自定义异常\n- 文件读写\n  - 文件打开open、文件读写、with语句\n- 正则表达式\n- 常用模块\n\n## 第一部分 python简介\n\n- Python是一门解释性、面向对象以及类型动态的高级程序语言\n  - 解释型：Python代码在运行时没有了编译这个环节，类似PHP\n  - 面向对象：Python支持面向对象的风格或代码封装在对象的编程技术\n  - 动态数据类型：Python中没有对变量类型进行限制，代码非常灵活\n\n#### 1、python的垃圾回收机制\n\n- 引用计数（Reference Counting）\n- 标记清除（Mark and Sweep）\n  - 标记清除解决循环引用\n- 分代回收（Generational Collection）\n\n#### 2、python环境安装\n\n- 首先官网下载安装程序\n\n  - 选择状态为security的版本，并且选择此版本中小版本不是最后一个的版本\n  - ![](python笔记/image-20230710193122871.png)\n  - ![image-20230710193646276](python笔记/image-20230710193646276.png)\n  - <img src=\"python笔记/image-20230710193716304.png\" alt=\"image-20230710193716304\" style=\"zoom:50%;\" />\n\n- 安装时，选择客制化安装（自定义路径）\n\n  - ![image-20230710193859950](python笔记/image-20230710193859950.png)\n  - ![image-20230710194234672](python笔记/image-20230710194234672.png)\n\n- 完成安装后，查看python的环境变量（勾选上述选项后，自动添加）\n\n  - 系统会优先调用位于**系统环境变量（所有用户都可以使用）下最上面的文件路径下的程序**\n  - 目的\n    - 把第一个路径下的pip.exe文件添加到全局变量中\n    - 把第二个路径下的python.exe（python解释器）添加到全局变量中\n  - ![image-20230710194400177.png](python笔记/image-20230710194400177.png)\n\n- 验证是否安装成功\n\n  ```python\n  python -V  //查看版本\n  pip list   //查看使用pip命令所下载的包\n  ```\n\n  \n\n  - ![image-20230710194742530](python笔记/image-20230710194742530.png)\n\n- pip命令下载包的位置\n\n  - 刚开始之后两个，pip和setuptools\n  - pip list可以查看pip命令下载的包，如上图\n  - ![image-20230710200739516](python笔记/image-20230710200739516.png)\n\n- python自带的组件\n\n  - ![image-20230710200539139.png](python笔记/image-20230710200539139.png)\n  - Moudle Docs（把python的安装环境变为网页形式）\n    - ![image-20230710200312751](python笔记/image-20230710200312751.png)\n  - IDLE（python自带的集成开发环境）\n\n  - python（命令行模式）\n\n#### 3、pycharm安装\n\n- 官网找到pycharm社区版（免费版）\n  - ![](python笔记/image-20230710195406248.png)\n- 安装程序的介绍\n  - ![python笔记/image-20230710195906290.png](python笔记/image-20230710195906290.png)\n  - 鼠标右击桌面的显示框\n    - ![](python笔记/image-20230710200010566.png)\n  - 关联py后缀的文件\n    - ![](python笔记/image-20230710200106371.png)\n    - ![](python笔记/image-20230710200130611.png)\n\n\n\n- 创建项目时的注意事项\n  - 虚拟环境\n    - 创建为虚拟环境的项目，相当于把项目放在一个独立的环境中，所下载的包是独立于其他项目的\n  - 非虚拟环境\n    - 非虚拟环境的项目，所下载的包，是可以和其他非虚拟环境的项目所共用\n    - ![](python笔记/image-20230710201025426.png)\n    - ![python笔记/image-20230710201900839.png](python笔记/image-20230710201900839.png)\n    - Conda Environment 是以Anocanda的环境为基础的选择\n    - Anocanda一个集成所有python的第三方库的工具，一般作为离线使用\n  - 一般选择非虚拟环境\n- python第三方库\n  - 位于官网的PyPI\n  - Docs为python官方文档\n  - python为应用程序\n  - ![image-20230710202256691](python笔记/image-20230710202256691.png)\n\n## 第二部分 python基础语法\n\n#### 1、相对路径和绝对路径\n\n- ..表示退出当前文件夹到当前文件夹的上一级文件夹中\n\n- .表示当前文件夹\n\n- 相对路径（在print_test.py文件中helloworld.py的相对路径）\n\n  - ![python笔记/image-20230711103427935.png](python笔记/image-20230711103427935.png)\n\n    ```\n    ../day01/helloworld.py\n    ```\n\n    \n\n  - 利用相对路径执行文件的例子\n\n    - ![image-20230711103411381](python笔记/image-20230711103411381.png)\n\n- 绝对路径\n\n  ```\n  F:\\BigData26\\Code\\python\\bigdata26\\day01\n  ```\n\n  \n\n  \n\n#### 2、print函数、cmd命令、注释\n\n- print函数\n\n  - 源代码\n\n    ```python\n    def print(self, *args, sep=' ', end='\\n', file=None):\n        pass\n    ```\n\n  - *args是参数化变量，也就是可以传入多个参数\n\n  - sep是间隔符\n\n  - end代表结尾\n\n- cmd命令\n\n  - ![](python笔记/image-20230711150851404.png)\n  - 在文件的路径上输入cmd就可以直接进入命令行模式\n    - ![](python笔记/image-20230711151030189.png)\n    - ![python笔记/image-20230711151053019.png](python笔记/image-20230711151053019.png)\n    - ![](python笔记/image-20230711151134903.png)\n\n\n- 注释\n\n  ```python\n  # 单行注释快捷键 ctrl + /\n  # 单行注释，他是给人看的，编辑器不识别\n  '''\n  这是多行注释、\n  可以在很多行中\n  写文字\n  '''\n  \n  \"\"\"\n  这个也是多行注释\n  也是个字符串\n  \"\"\"\n  ```\n\n  \n\n\n\n#### 3、变量\n\n- 变量的命名规则\n\n  - 必须是大小写字母、数字、下划线\n  - 不能以数字开头\n  - 不能是关键字\n    - 如何查看关键字\n      - ![image-20230711182305418](python笔记/image-20230711182305418.png)\n    - 所有的python关键字\n      - ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n- 变量命名\n\n  ```python\n  # 驼峰命名法\n  # 在python中驼峰命名法一般用于文件命名\n  trainHead = 5\n  \n  # 下划线命名法\n  # python中下划线命名法一般用于变量命名\n  train_head = 5\n  \n  # 在python可以用中文给变量命名，但是不符合规则\n  # 火车头 = 5\n  \n  # python中可以以下划线开头\n  # 但是，一般不用，因为下划线开头的方法代表私有化方法，不能改动\n  _class_a = 2\n  ```\n\n  \n\n#### 4、数据类型和转义字符\n\n- 如果一个变量是全大写形式，就会被认为**常量**，如\n\n  ```python\n  PI = 3.14\n  ```\n\n- python的四大基本类型\n\n  - int 整型\n  - float 浮点型\n  - str 字符串类型型\n  - bool 布尔类型\n\n  ```python\n  print(type(变量名)) # 查看变量类型\n  ```\n\n- 特殊类型None\n\n  - 注意：None类型不能转换为其他基本数据类型\n\n- 转义字符 \\ ，\\n，\\t，\\r\n\n  ```python\n  # 转义字符以及''和\"\"的套用\n  # 输出I'm OK\n  print(\"I'm OK\")\n  print('I\\'m OK')\n  \n  # 输出I\\'m OK\n  print(r\"I\\'m OK\")\n  print('I\\\\\\'m OK') # 第一个\\把第二个\\进行转义：\\\\输出\\。第三个\\把'进行转义：\\'输出'\n  \n  # 转义字符\\r：覆盖前面的字符\n  print(\"a\\rb\")  # b\n  print(\"a\\rb\\rcd\")  # cd\n  ```\n\n#### 5、格式化字符串\n\n```python\nname = \"张三\"\nyear = 2023\nmonth = 7\nday = 11\nmoney = 200.23445\ndeadline = 5\npercent = 5\n```\n\n- fstring  \n\n  ```python\n  # 1.fstring\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  words1 = f\"亲爱的客户{name}，截至{year}年{month:02d}月{day}日，你已经欠费{money:08.2f}，\" \\\n  f\"请在{deadline}日内，尽快缴清话费，否则将扣除{percent}%的费用\"\n  print(words1)\n  ```\n\n  \n\n- 占位符\n\n  ```python\n  # 2.占位符\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  # 使用占位符的坑：%d%，会报错，%d%%即可解决\n  words2 = \"亲爱的客户%s，截至%d年%02d月%d日，你已经欠费%08.2f，请在%d日内，尽快缴清话费，否则将扣除%d%%的费用\" \\\n  % (name, year, month, day, money, deadline, percent)\n  print(words2)\n  ```\n\n- format\n\n  ```python\n  # 3.format\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  words3 = \"亲爱的客户{}，截至{}年{:02d}月{}日，你已经欠费{:08.2f}，请在{}日内，尽快缴清话费，否则将扣除{}%的费用\" \\\n  .format(name, year, month, day, money, deadline, percent)\n  print(words3)\n  ```\n\n- 第二种format\n\n  ```python\n  # 4.第二种format\n  words4 = \"亲爱的客户{name}，截至{year}年{month:02d}月{day}日，你已经欠费{money:08.2f}，请在{deadline}日内，尽快缴清话费，否则将扣除{percent}%的费用\" \\\n  .format(name=name, year=year, month=month, day=day, money=money,deadline=deadline, percent=percent)\n  print(words4)\n  ```\n\n- 字符串拼接\n\n  ```python\n  # 5.字符串拼接\n  # 注意：python中整型不可以和字符串拼接\n  print(\"亲爱的客户\"+name+\"，截至\"+str(year)+\"年\"+str(month)+\"月\"+str(day)+\"日\")\n  ```\n\n#### 6、反转字符串\n\n- 索引实现\n\n  ```python\n  str_a = 'hello Tuesday!'\n  str[::-1]\n  \n  # 起始位置:结束位置:步长\n  print(str_a[::-1])  # !yadseuT olleh\n  # 区间左闭右开[起始位置,结束位置)，所以取不到0位置\n  print(str_a[14:0:-1])  # !yadseuT olle\n  # 可以不给结束位置，默认就可以取到最后一位0位置\n  print(str_a[14::-1])  # !yadseuT olleh\n  ```\n\n- 使用**lambda匿名函数**实现反转字符串\n\n  ```python\n  from functools import reduce\n  srt_a = \"hello Tuesday!\"\n  # eh->leh->lleh->...->!yadseuT olleh\n  print(reduce(lambda x,y:y+x,str_a))\n  ```\n\n#### 7、数据类型转化\n\n- 整型int\n\n  - 所有非0的整型转为bool类型后都会转为True\n\n  ```python\n  # 整型int\n  int_1 = 1\n  int_2 = -0\n  int_3 = 0\n  int_4 = 2\n  print(float(int_1), float(int_2), float(int_3), float(int_4))  # 1.0 0.0 0.0 2.0\n  print(str(int_1), str(int_2), str(int_3), str(int_4))  # 1 0 0 2\n  # 所有非0的整型转为bool类型后都会转为True\n  print(bool(int_1), bool(int_2), bool(int_3), bool(int_4))  # True False False True\n  ```\n\n- 浮点型float\n\n  - 浮点型转为int类型是向下取整\n  - 所有非0的浮点型转为bool类型后都会转为True\n\n  ```python\n  # 浮点型float\n  float_1 = 1.0\n  float_2 = 1.6\n  float_3 = -1.0\n  float_4 = -0.0\n  float_5 = 0.0\n  # 浮点型转为int类型的正数是向下取整\n  # 浮点型转为int类型的负数是向上取整 int(-1.1) == -1\n  print(int(float_1), int(float_2), int(float_3), int(float_4), int(float_5))  # 1 1 -1 0 0\n  print(str(float_1), str(float_2), str(float_3), str(float_4), str(float_5))  # 1.0 1.6 -1.0 -0.0 0.0\n  # 所有非0的浮点型转为bool类型后都会转为True\n  print(bool(float_1), bool(float_2), bool(float_3), bool(float_4), bool(float_5))  # True True True False False\n  ```\n\n    \n\n- 字符型str\n\n  - 只有字符为整数才能转为整型\n  - 只有字符为数值类型才能转为浮点型\n  - 所有非空（非\"\"）的字符串转为bool时，都为True\n\n  ```python\n  # 字符型str\n  str_1 = \"-1\"\n  str_2 = \"1.0\"\n  str_3 = \"2a\"\n  str_4 = \"Ture\"\n  str_5 = \"0\"\n  str_6 = \" \"\n  str_7 = \"\"\n  # 只有字符为整数才能转为整型，如：str_1、str_5\n  # print(int(str_1),int(str_2),int(str_3),int(str_4),int(str_5),int(str_6),int(str_7))\n  # 只有字符为数值类型才能转为浮点型，如：str_1、str_2、str_5\n  # print(float(str_1),float(str_2),float(str_3),float(str_4),float(str_5),float(str_6),float(str_7))\n  # 所有非空（非\"\"）的字符串转为bool时，都为True\n  print(bool(str_1), bool(str_2), bool(str_3), bool(str_4), bool(str_5), bool(str_6),\n        bool(str_7))  # True True True True True True False\n  ```\n\n- 布尔bool\n\n  ```python\n  bool_1 = True\n  bool_2 = False\n  print(int(bool_1), int(bool_2))  # 1 0\n  print(float(bool_1), float(bool_2))  # 1.0 0.0\n  print(str(bool_1), str(bool_2))  # \"True\" \"False\"\n  ```\n\n  \n\n- None类型\n\n  - 转为int和str时都会报错\n\n  ```python\n  None_1 = None\n  # TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'\n  # print(int(None_1))\n  # TypeError: float() argument must be a string or a real number, not 'NoneType'\n  # print(float(None_1))\n  print(str(None_1))  # \"None\"\n  print(bool(None_1))  # False\n  ```\n\n#### 8、九九乘法表\n\n- 使用嵌套for循环实现\n\n  ```python\n  for i in range(1,10):\n  \tfor j in range(1,i+1):\n          print(f\"{j}*{i}={i*j}\")\n      print()\n  ```\n\n  ```\n  1*1=1\t\n  1*2=2\t2*2=4\t\n  1*3=3\t2*3=6\t3*3=9\t\n  1*4=4\t2*4=8\t3*4=12\t4*4=16\t\n  1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t\n  1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t\n  1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t\n  1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t\n  1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t\n  ```\n\n- 使用**列表推导式**实现\n\n  ```python\n  print(\"\\n\".join([\"\\t\".join([f\"{j}*{i}={i*j}\" for j in range (1,i+1)])for i in range(1,10)]))\n  ```\n\n  ```\n  1*1=1\t\n  1*2=2\t2*2=4\t\n  1*3=3\t2*3=6\t3*3=9\t\n  1*4=4\t2*4=8\t3*4=12\t4*4=16\t\n  1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t\n  1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t\n  1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t\n  1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t\n  1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t\n  ```\n\n#### 9、str的常用方法\n\n#####  split() - 切分\n\n```python\n# 按照指定字符进行切分，返回一个列表。如果不传入第二个参数（maxSplit），默认全部切分\nstr_1 = \"python,java,scala\"\nstr_1_split = str_1.split(\",\", 2)\nprint(str_1_split)\n```\n\n##### strip() - 剥离、去除、脱离\n\n```python\n# 去除前后空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala  \\r\\n \"\nstr_1_strip = str_1.strip()\nprint(str_1_strip)\n```\n\n```python\n# 传入字符串参数，去除前后指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_strip = str_1.strip(\"py\")\nprint(str_1_strip)\n```\n\n##### lstrip() - 左剥离\n\n```python\n# 默认去除左边头的空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala   \"\nstr_1_lstrip = str_1.lstrip()\nprint(str_1_lstrip)\n```\n\n```python\n# lstrip(参数)\n# 去除左边头，指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_lstrip = str_1.lstrip(\"py\")\nprint(str_1_lstrip)\n```\n\n##### rstrip() - 右剥离\n\n```python\n# 默认去除右边头的空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala   \\r\\n\"\nstr_1_rstrip = str_1.rstrip()\nprint(str_1_rstrip)\n```\n\n```python\n# rstrip(参数) - 右剥离\n# 去除左边头，指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_rstrip = str_1.rstrip(\"py\")\nprint(str_1_rstrip)\n```\n\n##### lower() - 小写\n\n```python\n# 大写字母转为小写\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_lower = str_1.lower()\nprint(str_1_lower)\n```\n\n##### upper() - 大写\n\n```python\n# 小写字母转为大写\nstr_1 = \"Python,Java,Scala\"\nstr_1_upper = str_1.upper()\nprint(str_1_upper)\n```\n\n##### islower() - 是否为小写\n\n```python\n# 判断所有字母是否是小写，如果是返回Ture，如果不是返回false\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_islower = str_1.islower()\nprint(str_1_islower)\n```\n\n##### isupper() - 是否为大写\n\n```python\n# 判断所有字母是否是大写，如果是返回Ture，如果不是返回false\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_isupper = str_1.isupper()\nprint(str_1_isupper)\n```\n\n##### replace() - 替换\n\n```python\n# 把前一个参数的值替换为后一个参数的值，默认将字符串中所有 为前一个参数的子字符串都替换为后一个参数\n# 2代表替换前两个值为前一个参数的子字符串\nstr_1 = \"python,java,scala\"\nstr_1_replace_1 = str_1.replace(\"a\",\"A\")\nstr_1_replace_2 = str_1.replace(\"a\",\"A\",2)\nprint(str_1_replace_1)\nprint(str_1_replace_2)\n```\n\n##### index() - 索引\n\n```python\n# 返回指定区间的指定元素的索引值，默认返回第一个指定元素的索引值\nstr_1 = \"python,java,scala\"\nstr_1_index_1 = str_1.index(\"a\")\nstr_1_index_2 = str_1.index(\"a\",7,9)\nprint(str_1_index_1)\nprint(str_1_index_2)\n```\n\n##### ord() - 字符转换为ASCii码值\n\n- `ord` 函数的全称是 \"ordinal\", 它是从 \"ordinal number\"（序数）一词中衍生而来\n\n```python\nprint(ord(\"A\"))  # 65\n```\n\n##### chr() - ASCii码转换为字符\n\n- `chr` 函数的全程是 \"character\"，它是从 \"character\"（字符）一词中衍生而来。\n\n```python\nprint(chr(65))  # A\n```\n\n#### 10、运算符\n\n##### 算数运算符\n\n- ![python笔记/image-20230713201620205.png](python笔记/image-20230713201620205.png)\n\n##### 比较运算符\n\n- ![](python笔记/image-20230713201653705.png)\n\n```python\n# 比较运算符 ==\n# 只有 1（整型或者浮点行）等与 False\n# 只有 0（整型或者浮点行）等与 False\n# 其他数字及不等于False也不等于False，但是强转为bool型时，只有0才能转为False，其他皆为True\nprint(1 == True)  # True\nprint(1.0 == True)  # True\nprint(2 == True)  # False\nprint(0 == False)  # True\nprint(3 == False)  # False\n```\n\n##### 赋值运算符\n\n- ![](python笔记/image-20230713201728513.png)\n\n##### 逻辑运算符\n\n- ![python笔记/image-20230713201804728.png](python笔记/image-20230713201804728.png)\n\n```python\n# 逻辑运算符 and or not\n# 注意 逻辑运算符中 非0的数皆为True\n# and 若前者为False，则返回前者的值，否则返回后者\nprint(20 == False)   # False\nprint(20 and 30)  # 30\n# or 若前者为Ture，则返回前面的值，否则返回前者\nprint(20 == True)  # False\nprint(20 or 30)  # 20\nprint(not 0)  # True 注意这个除0之外都是\n```\n\n##### 位运算符\n\n- ![python笔记/image-20230713201909704.png](python笔记/image-20230713201909704.png)\n\n```python\na = 49\nb = 11\n\"\"\"按位与运算符& 同一则 1，否则为0\n110001 a\n001011 b \n000000 a&b\n\"\"\"\nprint(a & b)  # 1\n\n\"\"\"按位或运算符| 有1则1，否则为0\n110001 a\n001011 b     \n111011 a&b\n\"\"\"\nprint(a | b)  # 59\n\n\"\"\"按位异或运算符^ 相异为1，否则为0\n110001 a\n001011 b     \n111010 a&b\n\"\"\"\nprint(a ^ b)  # 58\n\n\"\"\"按位取反运算符~ 把1变为0，把0变为1 ，结果为-a-1\n1 110001 a\n0 001110 ~a\n要计算负数的补码，需要先将其二进制表示按位取反，然后再加 1。\n对于 001110，按位取反得到 110001。\n然后，将 110001 加 1，得到 110010。\n最终的结果 110010 对应十进制的 -50。\n\"\"\"\nprint(~a)  # -50\n\n\"\"\"左移运算符<< 二进制全部往前若干位，高位往前低位补0，如果补0后的整体达到32位，则舍弃高位保留32位\n110001 a\n11000100 a<<2\n\"\"\"\nprint(a << 2)\n\n\"\"\"右移运算符>> 二进制全部往后若干位，舍弃低位\n110001 a\n1100 a>>2\n\"\"\"\nprint(a >> 2)\n```\n\n#### 11、if/elif选择结构\n\n- ![](python笔记/image-20230713212833658.png)\n\n```python\n# 由薪水判断心情\n    salary = 2500\n    if salary >= 10000:  # 区间 [10000,正无穷)\n        print(\"日子过的非常好\")\n    elif salary >= 5000:  # 区间 [5000,10000)\n        print(\"日子还能过的去\")\n    else:  # 区间 (负无穷,5000)\n        print(\"日子过不去了\")\n\n    # 反着写\n    if salary < 5000:  # 区间 (负无穷,5000)\n        print(\"日子过不去了\")\n    elif salary < 10000:  # 区间 [5000,10000)\n        print(\"日子还能过的去\")\n    else:  # 区间 [10000,正无穷)\n        print(\"日子过的非常好\")\n```\n\n##### 三元运算符\t\n\n```python\n# 三元运算符\n    print(\"日子过不去了\") if salary < 5000 else print(\"日子过的非常好\")\n    print(\"日子过不去了\") if salary < 5000 else (print(\"日子还能过的去\") if salary < 10000 else print(\"日子过的非常好\"))\n```\n\n#### 12、while/for循环结构\n\nwhile循环语句小练习：\n\n- 1.计算1~100中奇数的和\n\n  ```python\n  # 1.\n      i = 1\n      summ = 0\n      while i <= 100:\n          # 判断为基数\n          if i % 2 != 0:\n              summ += i\n          i += 1\n      print(summ)\n      # 简化\n      i = 1\n      summ = 0\n      while i <= 100:\n          # 判断为基数\n          summ += i\n          i += 2\n      print(summ)\n  ```\n\n- 2.break continue\n\n  ```python\n  # 2.break continue\n      # 下面的代码会陷入死循环\n      i = 1\n      while i <= 100:\n          if i == 90:\n              continue\n          i += 1\n          print(i)\n  ```\n\n- 3.给定一个字符串s = ‘beautifulCode’\n      从前到后检查每个字母\n      如果是大写字母则停止检查并输出：有大写字母，第一个大写字母为%s\n      否则输出：无大写字母\n\n  ```python\n  s = 'beautifulCode'\n      i = 0\n      while i < len(s):\n          if s[i].isupper():\n              print(f\"有大写字母，第一个大写字母{s[i]}\")\n              break\n          i += 1\n      # 由 i 值判断判断无大写字母\n      if i == len(s):\n          print('无大写字母')\n      # 由 i 值判断判断无大写字母\n      flag = 0\n      while i < len(s):\n          if s[i].isupper():\n              print(f\"有大写字母，第一个大写字母{s[i]}\")\n              flag = 1\n              break\n          i += 1\n      if flag == 0:\n          print('无大写字母')\n  ```\n\n#### 13、命名空间\n\n- Python中一般有三种命名空间：\n  - 内置名称（built-in names）\n    -  Python 语言内置的名称，比如函数名 abs、chr 和异常名称 BaseException、Exception 等等\n  - 全局名称（global names）\n    - 模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量\n  - 局部名称（local names）\n    - 函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）\n\n- ![python笔记/image-20230713215248858.png](python笔记/image-20230713215248858.png)\n- 命名空间查找顺序:  由内往外\n  - 假设我们要使用变量 money，则 Python 的查找顺序为：\n    - 局部的命名空间 -> 全局命名空间 -> 内置命名空间\n    - 如果找不到变量 money，它将放弃查找并引发一个错误\n\n#### 14、作用域\n\n- Python 的作用域一共有4种：\n\n  - L（Local）：包含局部变量，比如一个函数/方法内部\n  - E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量\n  - G（Global）：最外层，比如当前模块的全局变量\n  - B（Built-in）：包含内建变量/关键字等，最后被搜索\n  - **在局部找不到，便会去局部外的局部找（例如闭包Enclosing），再找不到就会去全局找，再者去内置中找**\n\n- **Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问**\n\n  ```python\n  if True:\n      msg = \"i am from Runnob\"\n  print(msg)  # if不会形成新的作用域\n  ```\n\n## 第三部分 数据容器\n\n#### todo用法\n\n- ![](python笔记/image-20230713220504552.png)\n\n#### **ctrl + p 可以让参数提示重新出现**\n\n#### id(元素) - 返回元素内存地址\n\n- list列表、tuple元组、dict字典、set集合\n\n- 在 Python 中，`sort()` 方法是列表对象的内置方法，用于对列表进行原地排序。`sort()` 方法的底层实现使用一种名为 **Timsort 的排序算法**。\n\n#### 1、list列表\n\n- list的特点：有序的集合、可以有重复值、值类型不唯一、可变\n\n##### append - 追加\n\n- 添加元素，在末尾添加\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.append(\"Irving\")  # 添加元素，在末尾添加\nprint(class_mates)\n```\n\n##### inster - 插入\n\n- 在指定索引位置，插入指定元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.insert(0, \"Irving\")  # 在指定索引位置，插入指定元素\nprint(class_mates)\n```\n\n##### extend - 继承\n\n- 再末尾追加可迭代容器中的元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.extend([1, 2, 3])  # 再末尾追加可迭代容器中的元素\nprint(class_mates)  # ['James', 'Kobe', 'Polo', 1, 2, 3]\n```\n\n##### remove - 删除\n\n- 删除指定元素，但不返回删除的元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.remove(\"James\")  # 删除指定元素，但不返回删除的元素\nprint(class_mates)\n```\n\n##### pop - 弹出、删除\n\n- 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_pop = class_mates.pop()  # 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError\nprint(class_mates_pop)\n\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_pop_1 = class_mates.pop(1)  # 删除，索引为1的元素\nprint(class_mates)\nprint(class_mates_pop_1)\n```\n\n##### del - 关键字删除、清除内存空间\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\ndel class_mates[1]  # 使用del关键字进行删除\nprint(class_mates)\n\nclass_mates = ['James', 'Kobe', 'Polo']\ndel class_mates\n# print(class_mates)  # NameError: name 'class_mates' is not defined.\n```\n\n##### index - 索引\n\n- 查询指定元素，返回索引值\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nindex_num = class_mates.index('James')  # 查询指定元素，返回索引值\nprint(index_num)\n```\n\n##### count - 统计\n\n- 统计指定元素出现的次数\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1_count = list_1.count(2)\nprint(list_1_count)  # 统计指定元素出现的次数\n```\n\n##### sort - 排序\n\n- 默认为升序排序\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.sort()  # 默认为升序排序\nprint(list_1)\n```\n\n- 指定参数revers为True，设置为降序排序\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.sort(reverse=True)  # 指定参数revers为True，设置为降序排序\nprint(list_1)\n```\n\n##### reverse - 反转\n\n- 列表中的元素进行反转\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.reverse()  # 将列表中的元素进行反转\nprint(list_1)\n```\n\n##### copy - 复制\n\n- 复制列表，重新开辟一片新的内存空间\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_copy = class_mates.copy()\nprint(id(class_mates))  # 2294213590208\nprint(id(class_mates_copy))  # 2294213319104\n```\n\n##### join - 连接  列表转为字符串\n\n- 把列表中的字符串元素以指定字符连接起来，转换为字符串\n- **请注意：如果列表中的元素不是字符串，使用此方法则会报错**\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nprint(\"\\n\".join(class_mates))  # 把列表中的字符串元素以指定字符连接起来\n                                # 请注意：如果列表中的元素不是字符串，使用此方法则会报错\n```\n\n通过索引的方式，对列表中的元素进行查找\n\n```python\nlist_2 = ['Hadoop', 'Hive', '2006', False]\nprint(list_2)\nprint(len(list_2))\nprint(list_2[0])\nprint(list_2[1])\nprint(list_2[2])\nprint(list_2[3])\n# print(list_2[4])  # list index out of range\n```\n\n##### 通过索引的方式，对列表中的元素进行修改\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates[1] = \"Kobe Bryant\"  # 通过索引的方式，对列表中的元素进行修改\nprint(class_mates)\n```\n\n##### len - 长度\n\n- 输出列表的长度\n\n```python\nlist_2 = ['Hadoop', 'Hive', '2006', False]\nprint(len(list_2))\n```\n\n##### 切片\n\n- 起始位置、结束位置、步长都可以省略，如省略则等于默认值\n- 如果想要将列表的顺序颠倒，则可以使用::-1 \n- 切片操作同样适用于：字符串、元组中，以及后续numpy、pandas中的数据结构\n- ![python笔记/image-20230713221852883.png](python笔记/image-20230713221852883.png)\n\n#### 2、tuple元组\n\n- tuple 类似与列表 、 **不可变（没有list哪些改变增删改的方法）**\n- 查找tuple中的元素，其方法也是切片\n- 注意定义一个元素的元组时，在元素后加上一个英文逗号,\n\n```python\ntuple_a = (1, 2, 3, 3, \"dasd\", True)\n# 注意定义一个元素的元组时，在元素后加上一个英文逗号,\n# 如果不追加，则为int类型\ntuple_b = (1,)\ntuple_c = (1)\nprint(type(tuple_b), type(tuple_c))  #  <class 'tuple'> <class 'int'>\n```\n\n- tuple的使用可以使得代码更安全，防止错误赋值导致重要对象的改变\n\n#### 3、dict字典\n\n- dict字典中，\n  - 键必须是唯一的，但值可以重复\n  - 值可以取任何数据类型，但键必须是不可变的类型\n    - 如基本数据类型、元组（列表不可以、字典也不可以）\n  - dict字典中的KV键值对可以动态增减\n  - dict字典是无序的（无索引）\n\n- 为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。\n\n  - 假设字典包含了1万个汉字，需要再其中查询某一个字\n\n  - 第一种方式是把字典从第一页往后翻，直到找到所需的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢\n\n  - 第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，dict字典就是该种方式\n\n    - dict会把元素的键转换为hash值存储在内存中，查询时根据hash值查询\n\n    - **请注意：在 Python 中，不同的哈希函数和数据类型都可能产生哈希冲突（不同元素的哈希值相同），尽管冲突的概率非常低。这是因为哈希函数的输出空间有限，而输入数据的空间是无限的。**\n\n##### 新增一个键值对\n\n```python\n# 新增一个键值对\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1['Luck'] = 100\nprint(dict_1)\n```\n\n##### 更改键值对\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1['Michael'] = 100\nprint(dict_1)\n```\n\n##### 查询键值对\n\n```python\nprint(dict_1['Michael'])\n```\n\n##### get(k) - 通过键获取值\n\n- 返回指定key的value\n\n```python\n# get() - 获取\n    dict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n    print(dict_1.get('Michael'))  # 返回指定key的value\n```\n\n##### pop(k) - 通过键删除值\n\n- 删除指定键值对\n\n```python\n# pop - 弹出\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1.pop('Michael')  # 删除指定键值对\nprint(dict_1)\n```\n\n##### keys() - 获取所有的键，并返回一个列表\n\n- 获取所有键的集合，并返回一个集合：dict_keys(['Michael', 'Bob', 'Tracy'])\n- **请注意**\n  - dict_keys(['Michael', 'Bob', 'Tracy'])不是列表类型，因此不能通过索引访问\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.keys())  # 获取所有键的集合，并返回一个集合：dict_keys(['Michael', 'Bob', 'Tracy'])\nfor item in dict_1.keys():  # 遍历所有键\n\tprint(item)\nfor item in dict_1:  # 遍历所有键\n\tprint(item)\n\"\"\"请注意\ndict_keys(['Michael', 'Bob', 'Tracy'])不是列表类型，因此不能通过索引访问\n\"\"\"\n```\n\n##### values() - 获取所有的值，并返回一个列表\n\n- 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.values())  # 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])\nfor item in dict_1.values():  # 遍历所有的值\n\tprint(item)\n```\n\n##### items() - 常用于dict的遍历 \n\n- 把所有的键值对转换为二元组\n- 并返回一个集合：dict_items([('Michael', 95), ('Bob', 75), ('Tracy', 85)])\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n    print(dict_1.items())  # 以二元组的方式获取所有的键值，并返回一个集合：dict_items([('Michael', 95), ('Bob', 75), ('Tracy', 85)])\n    for k, v in dict_1.items():  # 遍历所有的键和值\n        print(k, v)\n```\n\n##### _len__() - 长度\n\n- 返回dict的长度\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.__len__())  # 返回dict的长度\n```\n\n##### clear - 清空字典\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1.clear()\nprint(dict_1)  # 返回一个空字典{}\n```\n\n##### in - 判断是否包含\n\n- A in B(iterable) ：判断A是否在B中，B一般为一个可迭代的数据容器，如列表，元组，字典 ，set集合\n- 如果B为字典，则A只能为键，但是可以通过其他方法取出字典中的值，再判断\n\n```python\n# in 判断是否包含\nprint('Michael' in dict_1)  # True\nprint('Michael' in dict_1.keys())  # True\nprint(95 in dict_1.values())  # True\nprint(('Michael',95) in dict_1.items())  # True\n```\n\n##### 注意：字典中的字符串输出都是以单引号输出\n\n#### 4、set集合\n\n- set集合的特点：值是唯一的，会去重，会排序，无序\n\n  ```python\n  set_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\n      print(set_1)  # {False, 1, 2, 3, 1.2, 5, 'a'}，1就是True，0就是False\n  ```\n\n- 创建空的set集合 {}是空字典\n\n  ```python\n  set_1 = set()\n  print(set_1, type(set_1))  # set() <class 'set'>\n  \n  set_1 = set([])\n  print(set_1, type(set_1))  # set() <class 'set'>\n  ```\n\n##### pop()\n\n- 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.pop()  # 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素\nprint(set_1)\n```\n\n##### remove\n\n- 删除指定元素，没有返回值\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.remove(1)  # 删除指定元素\nprint(set_1)\n```\n\n##### discard - 抛弃\n\n- 抛弃，删除指定元素，如果元素不存在，也不会报错\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.discard('b')  # 抛弃，删除指定元素，如果元素不存在，也不会报错\nprint(set_1)\n```\n\n##### add\n\n- 添加指定元素\n\n```python\nset_1 = {1, 3, 4}\nset_1.add('a')  # 添加指定元素\nprint(set_1)\n```\n\n##### intersection - 交\n\n##### union - 并\n\n##### difference - 差\n\n```python\n# 交、并、差\nset_1 = {1, 2, 3, 4, 5, 6}\nset_2 = {4, 5, 6, 7, 8, 9}\n# intersection - 交\ninter = set_1.intersection(set_2)  # A 交 B\nprint(inter)\n# union - 并\nuni = set_1.union(set_2)  # A 并 B\nprint(uni)\n# different - 差\ndif = set_1.difference(set_2)  # A-B ，返回A中不是B中元素的集合\nprint(dif)\n```\n\n#### 5、遍历数据容器\n\n- 1.遍历列表、元组、set、直接遍历\n\n  ```python\n  list_1 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n  for list_1_sub in list_1:\n      for item in list_1_sub:\n          print(item)\n  print(\"=\" * 20)\n  ```\n\n- 2.遍历列表、元组 通过索引遍历\n\n  ```python\n  list_1 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n  for i in range(len(list_1)):\n      for j in range(len(list_1[i])):\n          print(list_1[i][j])\n  ```\n\n- 3.遍历字典\n\n  ```python\n  # 3.遍历字典\n  dict_1 = {'k1': 1, 'k2': 2, 'k3': 3}\n  # 遍历key值\n  for k in dict_1:\n      print(k)\n  for k in dict_1.keys():\n      print(k)\n  # 遍历value值\n  for v in dict_1.values():\n      print(v)\n  # 遍历key,value\n  for k, v in dict_1.items():\n      print(k, v)\n  ```\n\n#### 6、列表推导式\n\n- 生成一个 1~10的奇数 的列表\n\n```python\n# 生成一个 1~10的奇数 的列表\nlist_1 = []\nfor i in range(1, 10, 2):\nlist_1.append(i)\nprint(list_1)\n# 使用列表推到式方式\nprint([i for i in range(1, 10, 2)])\n```\n\n- 列表推导式中嵌入for和if语句\n\n  - 由于列表推导式的语法规则，正确的顺序应该是先定义外层循环（i 循环），然后在内层循环（j 循环）中引用外层循环的变量，从左到右嵌套，要生成的变量写在最左边\n\n  ```python\n  # 复杂嵌套的列表推导式\n      for i in range(1, 10):\n          if i % 2 == 1:\n              for j in range(1, i + 1):\n                  if j % 2 == 1:\n                      print(j, end=\",\")\n      print()\n      print([j for i in range(1, 10) if i % 2 == 1 for j in range(1, i + 1) if j % 2 == 1])\n  ```\n\n- 九九乘法表\n\n  ```python\n  # 99乘法表变为列表推导式的形式\n      # 通过join方法把列表转换为字符串\n      for i in range(1, 10):\n          for j in range(1, i + 1):\n              print(f\"{j}*{i}={i*j}\", end=\"\\t\")\n          print()\n      print(\"\\n\".join([\"\\t\".join([f\"{j}*{i}={i * j}\" for j in range(1, i + 1)]) for i in range(1, 10)]))\n  ```\n\n\n#### 7、冒泡排序\n\n- 冒泡排序思想\n  - 循环遍历（遍历n-1次）\n  - 两两比较\n  - 大的往后挪\n\n- 代码\n\n\n```python\n# num_list = [213, 3415, 3466, 247, 241, 86, 589, 222, 1]\nnum_list = [9, 8, 1, 2, 3, 4, 5, 6, 7]\nfor i in range(len(num_list) - 1):  # 只需要进行 n-1 轮排序即可\n    for j in range(len(num_list) - 1 - i):  # -1-i代表不需要动的数值的个数\n        if num_list[j] > num_list[j + 1]:\n            # 只有python才会有的交换方式\n            num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n    print(num_list)\nprint(\"=\"*20)\n```\n\n##### flag优化\n\n  - 优化思想，当某一次循环遍历时，没有数据进行交换，说明此时已经排序完成，flag是检查每次循环遍历时，】=】是否发生了数据交换的工具\n\n  ```python\n  num_list = [9, 8, 1, 2, 3, 4, 5, 6, 7]\n  for i in range(len(num_list) - 1):\n      flag = 1\n      for j in range(len(num_list) - 1 - i):\n          if num_list[j] > num_list[j + 1]:\n              # 只有python才会有的交换方式\n              num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n              flag = 0\n      if flag == 1:\n          break\n      print(num_list)\n  ```\n\n#### 8、杨辉三角\n\n- 构建杨辉三角并打印，每一行用list列表接收，期望的最终结果如下所示：\n\n- ![](python笔记/image-20230714090438935.png)\n\n- ![](python笔记/image-20230714090457699.png)\n\n- 第一种方法（自己实现）\n\n  ```python\n  if __name__ == '__main__':\n      # 定义一个空列表，用来存储杨辉三角\n      big_list = []\n      # i 代表每一行的索引位置\n      for i in range(0, 10):\n          # 定义一个空列表，用来动态存储杨辉三角的每一行\n          small_list = []\n          # j 代表索引元素位置\n          for j in range(0, i + 1):\n              # 起始位置\n              if j == 0:\n                  small_list.append(1)\n                  continue\n              # 结束位置\n              if j == i:\n                  small_list.append(1)\n                  continue\n              # 遍历当前行的上一行列表元素\n              # 杨辉三角中除第一个元素和最后一个元素，其他元素的值：皆是上一行中，此位置的元素 和 前一个位置元素的值 之和\n              k1 = big_list[i - 1][j - 1]\n              k2 = big_list[i - 1][j]\n              small_list.append(k1 + k2)\n          # 打印杨辉三角每一行\n          print(small_list)\n          # 把杨辉三角每一行添加到大列表中\n          big_list.append(small_list)\n  ```\n\n- 第二种方法（gpt）\n\n  ```python\n  if __name__ == '__main__':\n      triangle = []\n      for i in range(10):\n          # 保证每一行的起始位置为1，结束位置为1\n          row = [1] * (i + 1)\n          # 请注意range的默认步长为1\n          # range(1,0) 表示一个空范围，因为默认步长为1，起始值 1 大于或等于终止值 0\n          for j in range(1, i):\n              row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n          print(row)\n          triangle.append(row)\n  ```\n\n- 第三种方法（上课教的）\n\n  ```python\n  triangle = [[1]]\n  for i in range(1, 10):  # i表示行数\n  \tpre_list = triangle[i - 1]\n  \tnew_list = []\n  \tfor j in range(len(pre_list) - 1):  # 会循环本行长度的n-2次，也就是头和尾不会出现\n  \t\tnew_list.append(pre_list[j] + pre_list[j + 1])  # 去除头尾后，本行的j位置的值为上一行j位置和j+1位置的值之和\n  \tnew_list = [1] + new_list + [1]\n  \tprint(new_list)\n  \ttriangle.append(new_list)\n  ```\n\n- 第三种方法列表推导式写法\n\n  ```python\n  # 使用列表推导式实现（一维数组形式）\n  pre_list = [1]\n  for i in range(1, 11):  # i 表示执行次数\n  \tprint(pre_list)\n  \tnew_list = [1]+ [ pre_list[j] + pre_list[j + 1] for j in range(len(pre_list) - 1)] + [1]\n  \tpre_list = new_list\n  ```\n\n## 第四部分 函数\n\n- 函数定义\n\n  - 函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段\n  - 函数能提高应用的模块性，和代码的重复利用率\n  - Python提供了许多内建函数，比如print()、type()、类型转换函数等等\n  - 用户也可以自己创建函数，这被叫做用户自定义函数（user difined function，简称UDF）\n\n- 函数结构\n\n  - 可选择性地使用return返回一个值给调用方，**不 return 相当于返回 None**\n  - **def** 是定义函数的关键字\n  - ![](python笔记/image-20230714204312252.png)\n\n- 定义函数，求圆的面积\n\n  ```python\n  PI = 3.14\n  # 求圆的面积\n  def circle_area(r):\n      S = PI * r * r\n      # 不写return默认返回空值\n      print(S)\n  if __name__ == '__main__':\n      s = circle_area(3)\n      print(s)\n  ```\n\n\n#### 函数参数\n\n##### 必选参数\n\n- 必须传参\n\n```python\n# 必选参数\ndef person_1(name, gender):\n    \"\"\"\n    :param name: 必选参数\n    :param gender: 必选参数\n    \"\"\"\n    pass\nperson('小王','男')\nperson(name='小王',gender='男')\nperson(gender='小王',name='男')\nperson(gender='小王','男')  # 错误写法\n```\n\n##### 默认参数\n\n- 传参时，可传可不传，不传使用默认值\n\n```python\n# 默认参数\ndef person_2(name, gender, clazz='01'):\n    \"\"\"\n    :param clazz: 默认参数，顺序赋值，如果不赋值，将按照默认值\n    \"\"\"\n    print(clazz)\n    pass\nperson_2(name, gender, clazz='02')\nperson_2(name, gender)\n```\n\n##### 可变参数\n\n- 可变参数，可以传入0到多个值，并以元组的形式存储\n\n```python\ndef person_3(name, gender, clazz='01', *args):\n    \"\"\"\n    :param args: 可变参数，可以传入0到多个值，并以元组的形式存储\n    \"\"\"\n    print(args)\nperson_3('小王','男','02',1,2,5,'6') # (1, 2, 5, '6')\n```\n\n##### 关键字参数\n\n- 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键\n\n```python\n# 关键字参数\ndef person_4(name, gender, clazz='01', *args,**kwargs):\n    \"\"\"\n    :param kwargs: 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键\n    \"\"\"\n    print(kwargs)\nperson_4('小王','男','02',1,2,5,'6',weight=180,high=150)  # {'weight': 180, 'high': 150}\n```\n\n##### 命名关键字参数\n\n- 命名关键字参数，跟在args后面的有名参数或者跟在*后面赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值、\n\n```python\n# 命名关键字参数\ndef person_5(name,gender,clazz='01',*args,weight=180,high,**kwargs):\n# def person_5(name,gender,clazz='01',*,weight=180,high):\n    \"\"\"\n    :param weight:  命名关键字参数，跟在*args后面的有名参数或者跟在*后面\n    :param high:    赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值\n    \"\"\"\n    print(clazz)  # 02\n    print(args)  # (1, 2, 5, '6')\n    print(weight)  # 190\n    print(high)  # 150\n    print(kwargs)  # {'city': '合肥', 'number': '12345'}\nperson_5('小王','男','02',1,2,5,'6',weight=190,high=150,city='合肥',number='12345')\n```\n\n##### 参数组合\n\n- 定义函数时，各参数的位置\n\n  - 先写必选参数,再写默认参数,再写可选参数,命名关键词参数,关键字参数\n\n  ```python\n  def person(gender, cardId, clazz=\"01\", *args, weight=181, height, **kwargs):\n  \tpass\n  ```\n\n#### 递归函数(Recursive Function)\n\n- 如果一个函数在内部调用自身本身，这个函数就是递归函数\n\n- 递归函数需要满足两个条件：\n  - 自己调用自己\n  - 有停止条件\n\n##### DeBug\n\n![](python笔记/image-20230715193157730.png)\n\n##### 求阶乘\n\n```python\n# 求阶乘\ndef factorial(n):\n    # 停止条件\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\nprint(factorial(10))\n```\n\n##### 求斐波拉契数列\n\n- 著名的斐波拉契数列（Fibonacci）\n\n  1, 1, 2, 3, 5, 8, 13, 21, 34, ... 除第一、二个数之外，后一个数等于前两个数之和\n\n```python\n# todo:斐波拉契数列\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return factorial(n-1) + factorial(n-2)\n```\n\n##### 汉诺塔（Hanoi）\n\n- ![](python笔记/image-20230715194720536.png)\n\n- 思路\n  - 把A柱子上面的n-1个盘子看成整体\n  - 第一步：这n-1个盘子由：A柱子-->C柱子-->B柱子\n  - 第二步：把A柱子剩余的1个大盘子由：A-->C\n  - 第三步：把B柱子的n-1个盘子由：B-->C\n\n```python\n# 汉诺塔\n# n是A柱子的盘子数\ndef hanoi(n, a, b, c):\n    if n == 1:\n        print(a + '-->' + c)\n    hanoi(n - 1, a, c, b)  # 把A柱子上面的n-1个盘子看成整体，第一步：这n-1个盘子由：A柱子-->C柱子-->B柱子\n    hanoi(1, a, b, c)      # 第二步：把A柱子剩余的1个大盘子由：A-->C\n    hanoi(n - 1, b, a, c)  # 第三步：把B柱子的n-1个盘子由：B-->C\n\"\"\"执行过程\nhanoi(3,'A','B','C') -> hanoi(2,'A','C','B') -> hanoi(1,'A','B','C') -> A-->C\n                                                hanoi(1,'A','C','B') -> A-->B\n                                                hanoi(1,'C','A','B') -> C-->B\n                     -> hanoi(1,'A','B','C') -> A-->C\n                     -> hanoi(2,'B','A','C') -> hanoi(1,'B','C','A') -> B-->A\n                                             -> hanoi(1,'B','A','C') -> B-->C\n                                             -> hanoi(1,'A','B','C') -> A-->C\n\"\"\"\n```\n\n## Python练习题 一\n\n**1、有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？**\n\n```python\ndef question1():\n    list_1 = [1, 2, 3, 4]\n    summ = 0\n    three_list = []\n    for i in list_1:\n        for j in list_1:\n            if i == j:  # 防止第一位与第二位重复，如果第一位与第二位重复，那么第三位就不需要循环了\n                continue\n            for k in list_1:\n                # if i != j and i != k and j != k\n                # \tthree_1 = str(i) + str(j) + str(k)\n                # \tthree_list.append(three_1)\n                if i == k or j == k:  # 防止第一位与第三位重复  防止第二位与第三位重复\n                    continue\n                three_1 = str(i) + str(j) + str(k)\n                three_list.append(three_1)\n    print(three_list)\n    print(len(three_list))\n```\n\n**2、企业发放的奖金根据利润提成**\n\n* 利润(I)低于或等于10万元时，奖金可提10%；\n\n* 利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；\n* 20万到40万之间时，高于20万元的部分，可提成5%；\n* 40万到60万之间时高于40万元的部分，可提成3%；\n* 60万到100万之间时，高于60万元的部分，可提成1.5%；\n* 高于100万元时，超过100万元的部分按1%提成；\n\n**从键盘输入当月利润I，求应发放奖金总数？**\n\n- **第一种**\n\n```python\ndef question2():\n    I = 3000000\n    reward = 0\n    if I <= 100000:\n        reward = I * 0.1\n    elif I <= 200000:\n        reward = 100000 * 0.1 + (I - 100000) * 0.075\n    elif I <= 400000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + (I - 200000) * 0.05\n    elif I <= 600000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + (I - 400000) * 0.03\n    elif I <= 1000000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + 200000 * 0.03 + (I - 600000) * 0.015\n    else:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + 200000 * 0.03 + 400000 * 0.015 + (I - 1000000) * 0.01\n    print(reward)\n```\n\n- **第二种**\n\n```python\n# 利用区间边界值匹配提成率\ndef question2_2(I):\n    reward = 0\n    money_edge = [0, 10, 20, 40, 60, 100, 10000000000]  # 最后一个表示无穷大，目的是取到超出100的值\n    percent = [0.1, 0.075, 0.05, 0.03, 0.015, 0.01]  # percent的值的位置与money中的区间对应\n\n    for i in range(1, len(money_edge)):\n        if I < money_edge[i]:  # 计算的是超出的部分\n            reward += (I - money_edge[i - 1]) * percent[i - 1]\n            break  # 找到值对应的区间，退出循环\n        else:  # 计算的是每超出的内部分对应的提成\n            reward += (money_edge[i] - money_edge[i - 1]) * percent[i - 1]\n    return reward\n```\n\n**3、10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？**\n\n```python\n# 3.10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？\n# 3.1%1=0.1  3%1=0 判断是否是整数\ndef question3():\n    import math\n    for i in range(10000):\n        m = i + 100\n        n = i + 268\n        # if int(math.pow(m, 0.5)) == math.pow(m, 0.5) and int(math.pow(n, 0.5)) == math.pow(n, 0.5):\n        if (m**0.5) % 1 == 0 and (n**0.5) % 1 == 0:\n            print(i)\n```\n\n**4、模拟用户登录，检测用户输入的用户名和密码**\n\n* 准备一个字典，保存用户名及对应的密码\n* 若用户名不存在，则提示'User Not Allowed'\n* 若用户名存在，但密码不正确，则提示'Authentication failure'\n* 若用户名和密码都正确，则登录成功，输出：xxx@localhost:~$\n* 当用户登录失败后可重试3次，每次重试需间隔5s钟，累计3次失败后，退出登录程序\n\n```python\n# 4.模拟用户登录，检测用户输入的用户名和密码\n\"\"\"\ndict_1 = {'user': '123', 'user2': '12345'}\nuser = 'user'\nprint(user in dict_1)\nprint(user in dict_1 != True)  # True \n问：为什么第二个print返回True\n答：在 Python 中，比较运算符 != 具有比成员运算符 in 更高的优先级，\n因此 user in dict_1 != True 的表达式会先进行 user in dict_1 的判断，然后再将结果与 True 进行比较。\n改：print((user in dict_1) != True)  # False \n\"\"\"\ndef question4():\n    import time\n    dict_1 = {'user': '123', 'user2': '12345'}\n    n = 0  # 计数\n    while True:\n        user = input('请输入用户名：')\n        password = input('请输入密码：')\n        if not (user in dict_1):  # 避免运算符优先级的影响 用括号括起来\n            print('User Not Allowed')\n        elif password != dict_1.get(user):\n            print('Authentication failure')\n        else:\n            print(user + '@localhost:~$')\n            break\n        n = n + 1\n        if n == 3:\n            break\n        time.sleep(5)\n```\n\n**5、有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？**\n\n- 第一种\n\n```python\n\"\"\"\n分析\n    月   兔子年龄    兔子对数    \n    1     1         1  \n    2     2         1\n    3     31        2\n    4     412       3\n    5     51231     5 \n    6     61231412  8\n\"\"\"\n# 根据上述分析，兔子对数是斐波拉契数列\ndef question5(month):\n    if month == 1 or month == 2:\n        return 1\n    return question5(month - 1) + question5(month - 2)\n```\n\n- 第二种\n\n```python\n# 但是上述解法太过理想\ndef question5_2(month):\n    rabbit_list = [{'age': 0}]  # 初始化第一对兔子\n    for i in range(month):\n        for rabbit in rabbit_list:\n            rabbit['age'] += 1\n            if rabbit['age'] >= 3:\n                rabbit_list.append({'age': 0})  # 生兔子\n    return len(rabbit_list)\n```\n\n## python练习题 二\n\n1、输入三个整数x,y,z，请把这三个数由小到大输出\n\n```python\n# 1、输入三个整数x,y,z，请把这三个数由小到大输出\ndef question1(x, y, z):\n    list_1 = []\n    list_1.append(x)\n    list_1.append(y)\n    list_1.append(z)\n    list_1.sort()\n    print(list_1)\n \n# 最基本的排序方式，比较排序\ndef question1_2(x, y, z):\n    if x > y:\n        if y > z:\n            print(z, y, x)\n        else:  # y < z\n            if x > z:\n                print(y, z, x, )\n            else:  # x < z\n                print(y, x, z)\n    else:  # x < y\n        if y < z:\n            print(x, y, z)\n        else:  # y > z\n            if x > z:\n                print(z, x, y)\n            else:  # x < z\n                print(z, x, y)\n# 冒泡排序\ndef question1_3(x,y,z):\n    list_a = [x,y,z]\n    flag = 1\n    for i in range(len(list_a)-1):\n        for j in range(len(list_a)-1-i):\n            if list_a[j] > list_a[j+1]:\n                list_a[j],list_a[j+1] = list_a[j+1],list_a[j]\n                flag = 0\n        if flag:\n            break\n    print(list_a)\n```\n\n2、输入某年某月某日，判断这一天是这一年的第几天\n\n- datetime模块的应用\n\n```python\n# 2.输入某年某月某日，判断这一天是这一年的第几天\nimport datetime\ndef question2(year, month, day):\n    # 创建日期对象\n    date = datetime.date(year, month, day)\n    # timetuple().tm_yday获取日期对象在年份中的第几天\n    y_day = date.timetuple().tm_yday\n    print(y_day)\n# 面向过程\ndef question2_2(year, month, day):\n    # 首先判断日期是否合法\n    if year < 0 or (month > 12 or month < 0) or (day > 31 or day < 0):\n        print(\"日期不合法！！！\")\n        return\n    # 判断是否是闰年\n    # 能被4整除，但是不能被100整除\n    # 能被400整除\n    month_31day = [1, 3, 5, 7, 8, 10, 12]\n    month_30day = [4, 6, 9, 11]\n    ydays = 0\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400) == 0:\n        if (month == 2 and day > 29) or ((month not in month_30day) and day > 30):\n            print(\"日期不合法\")\n            return\n        for i in range(1, month):\n            if i in month_31day:\n                ydays += 31\n            elif i == 2:\n                ydays += 29\n            else:\n                ydays += 30\n        ydays += day\n    else:\n        for i in range(1, month):\n            if i in month_31day:\n                ydays += 31\n            elif i == 2:\n                ydays += 28\n            else:\n                ydays += 30\n        ydays += day\n    print(ydays)\n# datetime的应用\ndef question2_3():\n    time = \"2020年7月12日\"\n    date = datetime.datetime.strptime(time, \"%Y年%m月%d日\")  # strptime：字符串解析为datetime\n    print(date)\n    y = date.year\n    m = date.month\n    d = date.day\n\n    str_time = datetime.datetime.strftime(date, \"%Y/%m/%d\")  # strftime：字符串格式化datetime，也就是datetime转为字符串\n    print(str_time)\n\n    print(date.timetuple().tm_yday)  # 求一年当中的第几天\n\n    # question2_2优化\n    month_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    day_list_r = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # 对应闰年\n    day_list_p = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # 对应平年\n    yday = 0\n    for i in range(m - 1):  # 0,1,2,3,4,5\n        yday += day_list_r[i]\n    yday += d\n    print(yday)\n\n    # 再优化\n    yday = sum(day_list_r[0:m - 1])\n    yday += d\n    print(yday)\n```\n\n3、有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和\n\n```python\n# 3.有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和\ndef m(k):  # 分母  注意要给出前两项的返回值，不然m(2-2)=m(0)=报错\n    if k == 1:\n        return 2\n    if k == 2:\n        return 3\n    return m(k - 1) + m(k - 2)\ndef n(k):  # 分子\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    return n(k - 1) + n(k - 2)\ndef question3(k):\n    summ = 0\n    for i in range(1, k + 1):\n        summ += m(i) / n(i)\n    print(summ)\n# 二维数组求解问题三\n\"\"\"\n2/1,3/2,5/3,8/5,13/8,21/13\n\"\"\"\ndef question3_2(n):\n    list_a = [[2, 4]]\n    summ = 0\n    for i in range(n):\n        summ += list_a[i][0] / list_a[i][1]\n        list_a.append([list_a[i][0]+list_a[i][1],list_a[i][0]])\n    print(summ)\n\n# 一个一维数组求解问题三\n\"\"\"\n1 2 3 5\n2/1,3/2,5/3,8/5,13/8,21/13\n2 4 6 8\n2/4,6/2,8/6,14/8\n\"\"\"\n# 本方法只适用：分子大于分母，不适用：2/4,6/2,8/6\ndef question3_3(n):\n    list_a = [2,3]\n    summ = list_a[1]/list_a[0]  # 加第一项\n    print(f'{list_a[1]}/{list_a[0]}')  # 第一项\n    for i in range(2,n+1):\n        list_a.append(list_a[i-1]+list_a[i-2])\n        summ += list_a[i]/list_a[i-1]  # 加第i项\n        print(f'{list_a[i]}/{list_a[i-1]}')  # 第i项\n    print(summ)\n# question3_3(3)\n# 两个一维数组求解问题三\ndef question3_4(n):\n    list_a = [2]  # 分子\n    list_b = [1]  # 分母\n    summ = 0\n    for i in range(n):\n        summ += list_a[i] / list_b[i]  # 第i+1项\n        list_a.append(list_a[i]+list_b[i])\n        list_b.append(list_a[i])\n    # print(list_a)  # 最后list_a和list_b中的元素会比 summ的累加项 多一项\n    # print(list_b)\n    print(summ)\n```\n\n4、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高\n\n```python\n\"\"\"分析\n次数    反弹高度     经历高度\n1       50         100\n2       25         100+50*2\n3       25/2      100+50*2+25*2\n4       25/4      100+50*2+25*2+25/2*2\n\"\"\"\ndef question4(n):\n    height = 50        # 初始化第一次反弹高度\n    sum_height = 100  # 初始化第一次落地经历高度\n    for i in range(n-1):\n        sum_height += height*2\n        height /= 2\n    print(sum_height)\n    print(height)\n    \n# 递归求反弹高度\n\"\"\"初始高度100\n反弹次数 反弹高度\n1       50\n2       25\n\"\"\"\ndef question4_2(n):\n    if n == 1:\n        return 50\n    return question4_2(n - 1) / 2\n    # 两种方式\n    # if n==0:\n    #     return 100\n    # return question4_2(n-1)/2\n# print(question4_2(2))\n```\n\n5、有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大\n\n```python\n\"\"\"分析\n1      10\n2      age(1)+2\n3      age(2)+2\n4      age(2)+2\n5      age(4)+2\n\"\"\"\ndef question5(n):\n    if n == 1:\n        return 10\n    return question5(n-1)+2\nprint(question5(5))\n```\n\n6、猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少\n\n```python\n\"\"\"\n天数 剩余桃子数\n1   n/2-1 \n2   (n/2 - 1)/2-1\n3   ((n/2 - 1)/2-1)/2-1\n4   (((n/2 - 1)/2-1)/2-1)/2-1   n(d-1)=(n(d)+1)*2   \n.\n.\n.   \n10  1\nn(d-1)=(n(d)+1)*2\nn(d)=(n(d+1)+1)*2\n\"\"\"\ndef question6():\n    peach = 1  # 第十天剩下的桃子数量\n    for i in range(9,0,-1):\n        peach = (peach+1)*2\n    print(peach)\n# 也可以递归写\ndef question6_2(day):\n    if day == 10:\n        return 1\n    return (question6_2(day+1)+1)*2\nprint(question6_2(1))\n```\n\n# 二、python进阶\n\n## 第一部分 面向对象\n\n- 面向对象编程OOP——Object Oriented Programming，是一种程序设计思想\n\n- 面向对象的三大特点：封装、继承、多态\n\n- 多态：父类的引用指向子类的对象\n\n### 1、类（class）\n\n- 类的定义\n  - ![](python笔记/image-20230717203553391.png)\n\n- 类的实例化\n  - 类的实例化会调用初始化方法  init()方法，传入的实参也都会传到 init()方法中\n- 类的方法和属性的调用\n  - 在类里面通过  self.  的方式调用方法和属性\n  - 在类外面通过 实例对象. 的方式调用方法和属性\n- 定义在函数体外的属性（如chinese_name），被认为是默认属性，可以通过 self. 的方式再次赋值\n- **self 传入的是实例对象stu1**，self. 参数名=值  的方式赋值的参数都可以上述方式调用\n- 重载：python中没有这种实现方式，会默认调用后面出现的同名方法，如果不传入后面方法对应的参数就会报错\n- 重写：重写父类已有的方法，在此基础上获得新功能\n  - 重写object类中的__str__方法，自定义打印实列输出的内容\n- 从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“**封装**”起来了，调用很容易，但却不用知道内部实现的细节\n\n```python\nclass Student(object):  # 默认继承object类（所有类的父类）\n    \n    # 直接被添加到self里面\n    chinese_name = '小王'  # 默认属性值，在类里面通过 self. 的方式调用，在类外面通过 实例对象. 的方式调用\n\n    def __init__(self, name, score, chinese_name):  # 构造方法，实例化时调用\n        self.name = name  # 通过init方法被添加到self里面的\n        self.score = score\n        self.chinese_name = chinese_name  # 可以通过init方法传入参数，修改默认的属性值\n        # self.print_score()\n\n    def print_score(self):  # 打印学生成绩\n        print(f'{self.name}的成绩{self.score}')\n        print(f'中文名为：{self.chinese_name}')\n        print(self)  # self是类自己，等同于类外的 stu1\n\n    # 重载（python中没有这种实现方式，会默认调用后面出现的方法，如果不传入后面方法对应的参数就会报错）\n    def print_score(self,value):  # 打印学生成绩\n        print(f\"{value} 不传参，就报错\")\n\n    # 重写：object类中的__str__方法，自定义打印实列输出的内容\n    def __str__(self):\n        return self.name\n\n\n\"\"\"\nself 传入的是实例对象stu1\nself是类的实例对象自己，等同于类外的 stu1\n在类中是通过 self. 的方式调用类的属性和方法\n在类外是通过 实例化对象. 的方式调用类的属性和方法\n\"\"\"\n\nstu1 = Student('Jack', 99, '小刘')  # Student类的实例化\nprint(stu1.name)\nprint(stu1.chinese_name)\nprint(stu1)  # 默认打印内存地址\nstu1.print_score(250)\n```\n\n### 2、私有方法和属性\n\n- 要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，只有内部可以访问，外部不能访问\n  - 强制访问私有变量方法一\n    - stu1._Student__secret\n  - 强制访问私有变量方法二\n    - 类的内部可以访问私有变量\n    - 通过getter方法，返回私有变量的值\n- 一般约定俗成的是 变量，_方法名 是私有的 不要随意访问和修改\n\n```python\nclass Student:\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        # __开头的变量为私有变量，不能被外部的实例化对象访问，但是可以强制访问或在类内访问\n        self.__secret = \"This is a secret!\"\n\n    def study(self):\n        print(f\"{self.name}每天都学习\")\n\n    # __开头的方法为私有方法，外部实例对象不能访问\n    def __play_game(self):\n        print(f\"{self.name}今年{self.age}天天去网吧打游戏\")\n\n    def getter_secret(self):\n        return self.__secret  # 类内访问私有变量\n\n\nif __name__ == '__main__':\n    stu1 = Student('Jack', '15')\n    # 强制访问私有变量方法1\n    print(stu1._Student__secret)\n    # 强制访问 私有变量访问2：通过类中的getter方法\n    print(stu1.getter_secret())\n```\n\n### 3、兔子问题\n\n- 使用类的思想实现：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n\n```python\nclass Rabbit:\n\n    def __init__(self):\n        self.age = 0\n\n    def growth(self):\n        self.age += 1\ndef question5(month):\n    total = [Rabbit()]\n    for i in range(month):\n        for rabbit in total:\n            rabbit.growth()\n            if rabbit.age >= 3:\n                total.append(Rabbit())\n    print(len(total))\n\n\nif __name__ == '__main__':\n    question5(10)\n```\n\n### 4、猴子补丁（Monkey patch）\n\n- 猴子补丁是对Python中模块和类可以在外部被动态修改这种特性的一个比喻 \n\n  将对类中没有的方法和属性进行赋值后，就可以调用，破坏了代码的封装性，造成了python代码的不安全\n\n- 在模块和类的外部对模块和类进行修改是一种非常耍赖的做法，会破坏代码的封装结构，这种事情大概只有淘气的猴子喜欢去做，因此形象地称之为猴子补丁\n\n```python\n# 定义一个Dog类\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def sleep(self):\n        print(\"Zzz... Zzz... Zzz...\")\n# Dog类外的方法\ndef speak(self):\n    print(\"wang wang wang\")\n\n# 对Python中模块和类可以在外部被动态修改\nDog.speak = speak  # 猴子补丁\nDog.home = \"Earth\"  # 猴子补丁\nspike = Dog('spike', 12)\nspike.home = \"HeFei\"\nspike.sleep()\nspike.speak()\nprint(spike.home)\n```\n\n### 5、继承\n\n```python\n# 抽取学生类和教室类的共同特征，抽象为一个Person类\nclass Person:\n\n    def __init__(self,id_card,name,age,gender):\n        self.id_card = id_card\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def eat(self):\n        print(\"吃饭\")\n    def sleep(self):\n        print(\"睡觉\")\n\n    def interest(self):\n        print(\"喜欢玩游戏\")\n\nclass Student(Person):  # 继承Person类\n\n    def __init__(self,id_card,name,age,gender,clazz,sid):\n        super().__init__(id_card,name,age,gender)  # 调用父类的初始化方法对共性内容初始化\n        self.clazz = clazz\n        self.sid = sid\n\n    # 重写了父类的interest方法\n    def interest(self):\n        print(\"学生喜欢写试卷\")\n\nclass Teacher(Person):  # 继承Person类\n    def __init__(self,id_card,name,age,gender,office,tid):\n        super().__init__(id_card,name,age,gender)\n        self.office = office\n        self.tid = tid\n\n    # 重写了父类的interest方法\n    def interest(self):\n        print(\"老师喜欢讲知识\")\n\nif __name__ == '__main__':\n    stu1 = Student('341281','小王','18','男','一班','010017')\n    stu1.eat()\n    stu1.sleep()\n    stu1.interest()\n    print(\"=\"*20)\n    tea1 = Teacher('341281','刘老师','38','男','3号办公室','30018')\n    tea1.eat()\n    tea1.sleep()\n    tea1.interest()\n```\n\n### 6、多态\n\n- 多态：父类的引用指向子类的对象\n  - Animal animal = new Dog()\n\n```python\n# Description: 多态：父类的引用指向子类的对象\n\nclass Animal:\n    def run(self):\n        print(\"animal is running\")\n\n\nclass Dog(Animal):\n    def run(self):\n        print(\"Dog is running and baking\")\n\n\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running and jumping\")\n\n\ndef animal_run(animal: Animal):\n    animal.run()\n\n# 父类的引用指向子类的对象\n\nif __name__ == '__main__':\n    animal_run(Dog)  # Animal animal = new Dog()\n    animal_run(Cat)\n```\n\n### 7、鸭子类型\n\n- 鸭子类型，因为python的数据类型是动态的，没有严格类型检查，所以Goose这个类具有和Duck这个类相同的方法，duck_show这个函数也可以对ee进行作用，故Python其数据类型属于鸭子类型\n\n```python\nclass Duck:\n    def __init__(self,name):\n        self.name = name\n    def swim(self):\n        print(f\"A duck named {self.name} is swimming\")\n    def call(self):\n        print(\"ga ga ga ...\")\nclass Goose:\n    def __init__(self,name):\n        self.name = name\n    def swim(self):\n        print(f\"A goose named {self.name} is swimming\")\n    def call(self):\n        print(\"goo goo goo ...\")\n\ndef duck_show(duck:Duck):\n    duck.swim()\n    duck.call()\nif __name__ == '__main__':\n    duck = Duck(\"丑小鸭\")\n    duck_show(duck)\n    goose = Goose(\"白天鹅\")\n    duck_show(goose)\n```\n\n## 第二部分 异常处理\n\n### 1、基本异常类型\n\n- ![](python笔记/image-20230718201445587.png)\n\n##### keyboardInterrupt\n\n- 终止此代码后会抛出异常keyboardInterrupt\n  - ![](python笔记/image-20230718202052338.png)\n\n```python\nwhile True:\n    print(1)\n```\n\n##### SyntaxError\n\n- 语法异常\n\n```python\nfor i in range(10)\n    print(i)\n```\n\n##### ZeroDivisionError\n\n- 除数为0异常\n\n```python\n# ZeroDivisionError\nsum_1 = 100\nn = 10\nwhile n >= 0:\n    sum_1 /= n\n    n -= 1\n```\n\n##### NameError\n\n- 命名异常，一般是变量没有赋值就被引用\n\n```python\n# NameError\na\n```\n\n##### TypeError\n\n- 类型错误，下面为int和str相加报错\n\n```python\n# TypeError\nprint(1 + \"a\")\n```\n\n##### ValueError\n\n- 值错误\n\n```python\n# ValueError\nprint(int(\"a\"))\n```\n\n##### IndexError\n\n- 索引异常，一般为索引越界异常\n\n```python\n# IndexError\ntuple = (1,2,3,4,5)\nprint(tuple[-6])\n```\n\n##### AttributeError\n\n- 属性异常，一般是调用不存在的方法或变量\n\n```python\n# AttributeError\ntuple_1 = (1, 2, 3, 4, 5)\ntuple_1.append(0)\nclass Cat:\n    pass\ntom = Cat()\ntom.run()\n```\n\n### 2、捕获和抛出异常\n\n##### 忽略警告\n\n```python\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n##### 捕获异常\n\n- ![](python笔记/image-20230718202931072.png)\n- 发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行\n\n```python\n#发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行\nsum_1 = 100\nn = 10\ntry:\n    while n >= 0:\n        sum_1 /= n\n        n -= 1\n        print(sum_1)\nexcept Exception as e:\n    print(e)\nelse:\n    print('没有异常会执行的代码')\nfinally:\n    print(\"有没有异常都会执行的代码\")\nprint('try/except代码块外的代码')\n```\n\n- try/except不会引入新的作用域，只不过没有异常的时候，except中的代码块就不会执行\n  - 如果没有异常在这里尝试访问 error_message 变量会引发 NameError\n\n```python\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    error_message_0 = \"除数不能为零\"\n    print(error_message_0)\nprint(error_message_0)  # 除数不能为零，\n# 如果没有异常在这里尝试访问 error_message 变量会引发 NameError\n```\n\n- try代码块中，发生异常的代码的上方变量还是可以引用的\n  - result = x/y  # 如果该段代码有异常，result 变量就不被定义\n\n```python\ntry:\n    x = 10\n    y = 0\n    result = x/y  # 如果该段代码有异常，该变量就不被定义\n    u = 100   # 上面代码有异常，try中下面的代码就不会执行\nexcept ZeroDivisionError as z:\n    print(z)\nprint(x)  # 10\nprint(y)  # 1\nprint(u)\n#尝试访问 error_message 变量会引发 NameError\n```\n\n- 如果数值加法中，有字符串可以把其转为ASCii码值再进行加\n\n```python\n# 如果数值加法中，有字符串可以把其转为ASCii码值再进行加\nlist_a = [1,2,3,4,\"a\",\"b\"]\ntry:\n    for i in list_a:\n        operand = i + 5\n        print(f\"操作数为{operand}\")\nexcept Exception as e:\n    print(\"Exception 错误\",e)\n    operand = ord(i) + 5\n    print(f\"操作数为{i}，数值为{operand}\")\n```\n\n##### 抛出异常\n\n- 抛出异常会终止程序\n\n```python\n# 抛出异常\nx = 10\nif x > 5:\n    raise Exception(f\"x不能大于5，x的值为{x}\")  # Exception: x不能大于5，x的值为10\n```\n\n### 3、自定义异常\n\n- 自定义异常的原因\n  - Python提供的内建异常不够用 \n  - 可以预估某个错误的产生 \n- 定义异常类\n  - 异常类继承自 Exception 类，可以直接继承，或者间接继承\n\n```python\n# 直接继承\nclass AgeError(Exception):\n    pass\n\n# 间接继承\nclass AgeErrorSub(AgeError):\n    pass\nage = -1\nif age < 0:\n    # raise AgeError(f\"年龄异常，年龄为{age}\")  # __main__.AgeError: 年龄异常，年龄为-1\n    raise AgeErrorSub(f\"年龄异常，年龄为{age}\")  # __main__.AgeErrorSub: 年龄异常，年龄为-1\n```\n\n## 第三部分 文件读写\n\n#### 文件打开\n\n- with open语句的好处：无论文件操作是否有异常都会执行.close操作，\n\n  关闭文件读写，防止阻塞，和try...finally: .close 一个作用\n\n```python\nopen(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\")\n```\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:\n\tpass\n```\n\n- ValueError: must have exactly one of create/read/write/append mode\n\n  - 上述错误表示：x/r/w/a这四个模式不能同时出现\n\n- 'w' open for writing, truncating（清空） the file first\n\n  - 会清空原有文件的内容，然后再写\n\n  \n\n#### 读文件\n\n##### read()\n\n- 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）\n  对于同一个文件对象，后面的read方法会接着上一个read方法 继续读\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    # read()\n    # 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）\n    # 对于同一个文件对象，后面的read方法会接着上一个read方法继续读\n     print(fp.read(10))\n     print(\"=\"*20)\n     print(fp.read(10))\n     print(\"=\"*20)\n     print(fp.read(10))\n```\n\n##### readline()\n\n- 默认读取一行，传入整型参数代表读的字符的个数，\n\n  如果这一行只有一个字符那就会读出一个字符并不会往后读\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    # readline()\n    # 默认读取一行，传入整型参数代表读的字符的个数，如果这一行只有一个字符那就会读出一个字符并不会往后读\n    print(fp.readline(10))\n    print(\"=\"*20)\n    print(fp.readline(10))\n    print(\"=\"*20)\n    print(fp.readline(10))\n```\n\n##### readlines()\n\n- 默认全部行，并返回一个列表，元素为每一行\n  传入整型参数，只会读取一行的全部内容，并返会一个列表\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    print(fp.readlines(10))\n    print(fp.readlines(10))\n    print(fp.readlines(10))\n```\n\n#### 写文件\n\n##### write()\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:\n    # write()\n    fp.write(\"006,dbh,22,male\\n\")\n    fp.write(\"007,dl,21,male\")\n```\n\n##### writelines()\n\n- 传入可以迭代的参数\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:    \n    # writelines()\n    # 传入可以迭代的参数\n    fp.writelines([\"006,dbh,22,male\\n\", \"007,dl,21,male\"])\n    fp.writelines(\"006,dbh,22,male\\n\")\n```\n\n## 第四部分 正则表达式\n\n### 1、正则表达式中的元字符\n\n- `.` **匹配任何字符，但不包括换行符。**\n- `[\\s\\S]`  **匹配任何字符，包括换行符和空白字符。**\n\n```python\n\"\"\" 正则表达式中的元字符\n\\d \t\t 可以匹配一个数字 \t\t\t\t\t  等价于[0-9] \n\\D(大写)  可以匹配一个非数字 \t\t\t\t\t 等价于[^0-9] \n\\d\\d \t 可以匹配两个数字 \n\\w \t\t 可以匹配一个数字或字母或下划线                 等价于[A-Za-z0-9_] \n\\W(大写) \t可以匹配一个非数字非字母非下划线的符号          等价于[^A-Za-z0-9_]\n\\w\\w \t 可以 匹配 00 或者 0a等\n. \t\t 可以匹配任意字符，特殊字符除外如:\\n\n\\s \t\t 可以匹配空白字符 如：一个空格或\\n或\\r等   等价于[\\f\\n\\r\\v]  \n\\S(大写)\t可以匹配一个非空白字符 \t\t\t\t等价于[^\\f\\n\\r\\v]\n\"\"\"\n```\n\n### 2、匹配长字符\n\n```python\n\"\"\" 匹配长字符\n*代表0-无穷个字符\n+代表1-无穷个字符\n?代表0-1个字符\n{n,m}代表n-m个字符 （左闭右闭）\n\\d{3}-\\d{3,8} 可以匹配001-123或001-12345等\n^表示行的开头，^\\d表示必须以数字开头\n$表示行的结束，\\d$表示必须以数字结束\n\"\"\"\n```\n\n### 3、match方法\n\n- 匹配到了返回Match对象\n- 匹配不到返回None\n\n```python\nstr_a = \"001-12345\"\nmatch = re.match(r\"\\d{3}-\\d{3,8}\", str_a)\nprint(match)\n```\n\n- match结合if结构进行判断\n\n```python\nif match:  # 匹配成功\n    print(\"ok\")\nelse:  # 匹配失败\n    print(\"failed\")\n```\n\n### 4、re.split()切分字符串\n\n```python\n\"\"\"切分字符串\n\"\"\"\nstr_a = \"a,b;; c  d\"\nsplits = re.split(r\"\\W+\", str_a)  # 匹配0-n个非数字非字母符号作为切分符\nprint(splits)\n```\n\n### 5、group分组提取\n\n- 通过() 提取匹配到的内容\n\n  group(0) 代表匹配到的字符串\n  group(1) 代表提取出的第一个子字符串\n  group(2) 代表提取出的第二个子字符串\n  groups() 将所有提取的字符串串存储到元组中\n\n```python\nstr_a = \"001-12345\"\nmatch = re.match(r\"(\\d{3})-(\\d{3,8})\", str_a)\nprint(match.group(0))\nprint(match.group(1))\nprint(match.group(2))\nprint(match.groups())\n```\n\n### 6、匹配时间19:05:30\n\n- 注意时间的格式和规则：\n  h : 00-23\n  m : 00-59\n  s : 00-59\n\n```python\nstr_a = \"19:05:30\"\nmatch = re.match(r\"([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)\", str_a)\nprint(match.group(1))\nprint(match.group(2))\nprint(match.group(3))\n```\n\n### 7、(?P< name > ) 变量赋值\n\n- 将提取到的数据赋值给name变量\n  再利用group(\"name\")提取\n\n```python\nid_card = \"20051001\"\nre_pattern = re.compile(r\"(?P<year>[1-2]\\d{3})(?P<month>[0][1-9]|[1][0-2])(?P<day>[0][1-9]|[1-2][0-9])\")\n# 提取 年 月 日\nmatch = re_pattern.match(id_card)\nprint(match.group(\"year\"))\nprint(match.group(\"month\"))\nprint(match.group(\"day\"))\n```\n\n### 8、贪婪匹配\n\n- 正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符\n  \\d+则是贪婪匹配\n  \\d+?则是非贪婪匹配\n\n```python\nmatch = re.match(r'(\\d+)(0*)', '102300')\nprint(match.groups())\n\nmatch = re.match(r'^(\\d+?)(0*)$', '102300')  # 加上$符才会匹配到尾部的0，否则只会停在第一个0\nprint(match.groups())\n```\n\n### 9、.  .*  .*? 的区别\n\n```python\na = 'xxIxxjshdxxlovexxsffaxxpythonxx'\ninfos1 = re.findall('xx(.)xx', a)\nprint(infos1)\ninfos2 = re.findall('xx(.*)xx', a)\nprint(infos2)\ninfos3 = re.findall('xx(.*?)xx', a)\nprint(infos3)\n```\n\n### 10、re.match和re.search的区别\n\n- re.match(pattern, string)：\n  - re.match 只从字符串的 ***开头开始匹配***，如果字符串的开头符合正则表达式的模式，则返回匹配对象；如果字符串开头不匹配，则返回 None。\n    适合用于检查字符串的开头是否符合某种模式。\n- re.search(pattern, string)：\n  - re.search 在 ***整个字符串中搜索*** ，只要找到第一个匹配的子串，就返回匹配对象；如果没有找到匹配的子串，则返回 None。\n    适合用于在整个字符串中查找某种模式的出现。\n\n```python\nstr_a = \"a12345\"\nmatch = re.match(r\"\\d+\", str_a)\nprint(match)  # 返回None\nsearch = re.search(r\"\\d+\", str_a)\nprint(search)  # 返回Search对象\n```\n\n### 11、预编译\n\n- re.compile(正则表达式)\n  便于修改正则表达式\n\n```python\nstr_a = \"19:05:30\"\nre_pattern = re.compile(r\"([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)\")\nmatch = re_pattern.match(str_a)\nprint(match.groups())\n```\n\n## 第五部分 爬虫\n\n- 爬虫是一种模仿浏览器上网过程的一种程序，可以获取一些网页的数据\n\n### 1、URL\n\n- 统一资源定位符  uniform resource locator\n\n### ![](python笔记/LjTR2tNPAO81cnU.png)\n\n```\nhttp: 超文本传输协议  HyperText Transfer Protocol  默认端口 80\nhttps: 安全的超文本传输协议  security               默认端口 443\nwww.example.com  域名\n80  端口 port\n/path/to/myfile.html 资源路径\n?key1=value1&key2=value2  参数 & 表示多个参数的拼接\n# 锚点\n```\n\n### 2、准备\n\n- 安装requests包\n\n```python\npip install requests\n```\n\n- pip 换源\n  -  改写该文件内容 `C:\\Users\\dongjiaxin\\AppData\\Roaming\\pip\\pip.ini`\n\n```python\npip config set global.index-url http://pypi.douban.com/simple/\npip config set install.trusted-host pypi.douban.com\n```\n\n- User-Agent： 身份标识  表示你是哪个浏览器\n\n- status_code：状态码\n\n  - 200 OK：请求成功，服务器成功返回请求的数据。\n  - 201 Created：请求成功，服务器成功创建了新的资源。\n  - 204 No Content：请求成功，服务器成功处理了请求，但没有返回任何内容。\n  - 400 Bad Request：客户端请求错误，服务器无法理解请求。\n  - 401 Unauthorized：请求要求用户认证，用户没有提供有效的认证信息。\n  - 403 Forbidden：服务器拒绝请求，通常是因为没有足够的权限。\n  - 404 Not Found：请求的资源不存在。\n  - 500 Internal Server Error：服务器内部错误，无法完成请求。\n\n- 使用随机生成的user-agnet\n\n  - 下载包\n\n  ```\n  pip install fake_useragent\n  ```\n\n  - 代码\n\n  ```python\n  from fake_useragent import UserAgnet\n  headers = {\n          'User-Agent': UserAgent().random\n    py  }\n  ```\n\n#### 获取百度网页源码\n\n```python\n# Description:  获取百度搜索源代码\n\nimport requests\n\nif __name__ == '__main__':\n    url = \"https://www.baidu.com\"\n    header = {\n        \"User-agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82\"\n    }\n\n    response = requests.get(url, headers=header)\n    response.encoding = \"utf-8\"  # 修改编码形式，防止中文乱码\n    # print(response.content)  # 网页代码二进制\n    # print(response.text)  # 网页代码文本\n    print(response.status_code)  # 状态码\n```\n\n#### 使用 http://httpbin.org/get 网站测试get请求\n\n```python\n# Description: 使用 http://httpbin.org/get 网站测试get请求\nimport requests\nif __name__ == '__main__':\n\n    url = \"http://httpbin.org/get\"\n\n    response = requests.get(url)\n\n    print(response.text)\n```\n\n### 3、豆瓣top250\n\n- **可以把获取的html保存到本地，然后用浏览器打开，查看是否正确**\n\n### 4、Xpath解析（静态页面）\n\n- XPath 是一种用于在 XML 和 HTML 文档中定位和选择节点的查询语言。可以帮助开发者轻松地从 XML 和 HTML 数据中提取、过滤和处理所需的信息，是数据解析和处理中的重要工具之一。\n\n- 下载相关包\n\n  - ```python\n    pip install lxml\n    ```\n\n- 导入相关包\n\n  - ```python\n    from lxml import etree\n    ```\n\n- 两种创建解析对象的方式\n\n  - 解析本地html\n\n    - ```python\n      html = etree.parse(本地文件路径)\n      ```\n\n  - 解析爬取下来的html\n\n    - ```python\n      response = requests.get(url)\n      html = etree.HTML(response.text)\n      ```\n\n#### Xpath相关语法\n\n  - .xpath()，获取所有符号规则的内容，并返回一个列表\n\n  - **.xpath() 返回的元素对象，还可以继续进行xpath解析**\n\n  - ```python\n    /\t表示从根节点选取\n    //\t从当前节点选取子孙节点\n    .\t选取当前节点\n    ./\t表示从当前节点\n    ..\t选取当前节点的父节点\n    @\t选取属性\n    ```\n\n##### 基本语法\n\n- ```python\n  \"\"\"\n  <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n  <html><body><div>&#13;\n      <ul>&#13;\n          <li class=\"item-0\"><a href=\"link1.html\">first item</a></li>&#13;\n          <li class=\"item-1\"><a href=\"link2.html\">second item</a></li>&#13;\n          <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li>&#13;\n          <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li>&#13;\n          <li class=\"item-0\"><a href=\"link5.html\">fifth item</a>&#13;\n  </li></ul>&#13;\n  </div></body></html>\n  \"\"\"\n  html = etree.parse('./test.html', etree.HTMLParser())\n  result = etree.tostring(html).decode('utf-8')\n  # 基本语法\n  result = html.xpath('.')  # .获取当前节点 html\n  result = html.xpath('..')  # .. 获取当前节点的父节点 空\n  result = html.xpath('./body')  # 选取子节点\n  result = html.xpath('//div')  # 选取所有的子孙节点div\n  result = html.xpath('//body')  # 选取子孙节点body\n  result = html.xpath('//*')  # //* 选取所有节点\n  result = html.xpath('//li')  # //li 获取所有的li节点\n  result = html.xpath('//li/a')  # //li/a 获取li节点的所有的子节点a\n  result = html.xpath('//ul/a')  # //ul/a 无返回结果，因为ul的子节点不是a\n  result = html.xpath('//ul//a')  # //ul//a 获取ul的所有孙子节点a\n  result = html.xpath('/html/body/div')  # 逐层定位body的所有的div子节点\n  result = html.xpath('//div')  # 定位到所有的div节点\n  ```\n\n##### 获取父节点\n\n- 获取a父节点li的class属性值\n\n- ```\n  result = html.xpath('//a[@href=\"link5.html\"]/../@class') \n  ```\n\n##### 索引定位\n\n- ```\n  result = html.xpath('//li[1]')  # 定位到第一个li节点\n  ```\n\n##### 属性定位\n\n- 定位class属性值为[\"item-0\"]的li节点\n\n- ```python\n  result = html.xpath('//li[@class=\"item-0\"]') \n  ```\n\n##### 属性获取\n\n- 获取li节点下所有字节点a的href属性值\n\n- ```python\n  result = html.xpath('//li/a/@href')  # \n  ```\n\n##### 文本获取\n\n- 通过 /text()方法获取指定节点中的文本\n\n  - ```python\n    result = html.xpath('//li[@class=\"item-0\"]/a/text()') \n    ```\n\n- 通过 //text()获取所有指定节点的所有子节点的文本，包括节点本身的文本（包含缩进换行等字符）\n\n  - ```python\n    result = html.xpath('//li[@class=\"item-0\"]//text()')  \n    ```\n\n##### 属性多值匹配\n\n- 使用**contains函数**进行属性多值匹配\n\n- 这里的li节点的class属性有两个属性值li、li-first\n\n- ```python\n  text = '''\n  <li class=\"li li-first\"><a href=\"https://ask.hellobi.com/link.html\">first item</a></li>\n  '''\n  html = etree.HTML(text)\n  result = html.xpath('//li[contains(@class, \"li\")]/a/text()') \n  ```\n\n##### 多属性匹配\n\n- 通过 and 连接class属性和name属性\n\n- ```python\n  text = '''\n  <li class=\"li li-first\" name=\"item\"><a href=\"https://ask.hellobi.com/link.html\">first item</a></li>\n  '''\n  html = etree.HTML(text)\n  result = html.xpath('//li[contains(@class,\"li\") and @name=\"item\"]/a/text()')  \n  ```\n\n### 5、数据格式\n\n- 查看网页包文件中，响应标头中的Content-Type\n- ![](python笔记/image-20230723143523063.png)\n- ![](python笔记/image-20230723143638690.png)\n- ![](python笔记/image-20230723144731031.png)\n\n#### 5.1 text\n\n- 使用.text方法接收，接收的是网页的html\n\n```python\nresponse = requests.get(url, headers=headers)\nhtml = response.text\n```\n\n#### 5.2 json\n\n- 使用.json()方法接收，接收json字符串，并返回一个dict\n\n```python\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n```\n\n- json和dict的区别\n  - 可以复制网页的json数据，在json在线解析器上解析，注意dict不能用json的在线解析\n  - **输出时，json字符串中的字符被双引号引着，dict中的字符被单引号引着**\n  - 在python中，json数据被识别为字符串，所以不能像字典一样访问其中的元素\n  - 在json文件中，可以存放json字符串，并且可以用通过ctrl+alt+l的方式，将json字符串正确的格式化 \n- json和dict的相互转换\n\n```python\nimport json\n# dict转为json字符串\n# ensure_ascii默认为True，转为进制数据\n# ensure_ascii为False，返回正常数据\njs = json.dumps(response.json(), ensure_ascii=False)\nprint(type(js))  # <class 'str'> \n# json字符串转为dict\ndi = json.loads(js)\n```\n\n#### 5.3 二进制（图片和视频）\n\n- 请求图片和视频时，会返回二进制数据，可以使用.content接收\n\n```json\nresponse = requests.get(url, headers=headers)\ncon = response.content\n```\n\n- 使用'wb'模式，写入对应后缀（jsp/png/mp4）的文件中，就可以正常打开了\n\n```python\nwith open(path, 'wb') as fp:\n\tfp.write(con)\n```\n\n### 6、get和post请求\n\n#### 6.1 get请求\n\n- 大多数网页都是get请求，可以通过.get()方法的params参数，传入请求参数\n\n#### 6.2 post（百度翻译）\n\n- 部分网页是post请求，可以通过.post()方法的data参数，传入表单数据\n\n### 7、BeautifulSoup解析（静态页面）\n\n- 爬取豆瓣读书时，使用了bs4解析方式\n\n- 下载bs4解析包\n\n```\npip install bs4\n```\n\n- 导入包\n\n```python\nfrom bs4 import BeautifulSoup\n```\n\n- 首先解析html。然后定位标签，返回列表。最后正则匹配数据，也返回一个列表。\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\n\nbs = bt.find_all('div', class_=\"subject clearfix\")\n\nelement = re.findall(r'<a class=\"nbg\" href=\".*?\" title=\"(?P<book>.*?)\">\\n', bs)\n```\n\n### 8、京东评论（动态抓包）\n\n- 代码文件\n\n```\nday09/demo04JDComment.py\n```\n\n### 9、豆瓣Top250（非详情页）\n\n- 代码文件\n\n```\nday09/demo05SpiderDouBan.py\n```\n\n### 10、豆瓣读书（详情页）\n\n- 代码文件\n- 使用了xpath解析和bs4解析方式\n\n```\nday10/demo01DoubanReadBook.py\n```\n\n### 11、WallHaven（高清图片）\n\n- 代码文件\n\n```\nday09/demo06WallHaven.py\n```\n\n### 11、大麦网（selenium）\n\n- 代码文件\n- 由于大麦网网页跳转时的网址不会改变，该方式获取的数据量很少\n\n```\nday10/demo02SeleniumDaMai.py\n```\n\n### 12、大麦网（动态抓包）\n\n- 代码文件\n- 大麦网采用的是，异步加载数据的方式，然后js渲染，所以动态抓包可以获取更多的数据\n\n```\nday10/demo03JsonDamai.py\n```\n\n### 13、遇到的坑\n\n#### 13.1 显示字符串中特殊字符\n\n- 使用\"\"\" ... \"\"\"包含字符串，并放到列表，打印输出\n- ''' ... ''' 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\nprint([f\"\"\"{bt.find_all('div', class_=\"subject clearfix\")[0]}\"\"\"])\n```\n\n#### 13.2 替换字符串中的转义字符不要加 r\n\n- 替换转义字符不要加 r\n\n```python\n.replace(\"\\xa0\", \"\")\n```\n\n#### 13.3 xpath二次解析尽量开头带上 ./\n\n- 如果不带可能会导致二次解析定位不到\n- selenium的xpath解析可以直接  div/div[@class='info']//a/span[1]\n\n```python\nli_list = tree.xpath(r\"//ol[@class='grid_view']/li\")\nfor li in li_list:\n    title = li.xpath(\"./div/div[@class='info']//a/span[1]/text()\")[0]\n```\n\n#### 13.4 正则匹配的字符串一般不要含有 | \n\n- 如果带了，会匹配不到，可以先使用.replace()方法替换掉\n\n```python\n# 一般不要匹配 | ，不然匹配不到\n # directore = \"|\".join(列表)\ndirecto = \"#\".join(列表)\nsearch = re.search(r\"导演: (?P<director>.*?) .*?主演: (?P<actor>.*?) .*?#(?P<time>.*?) (?P<country>.*?) (?P<type_>.*)\",director)\n```\n\n#### 13.5 正则匹配表达式中不要含有< span >或< /span >\n\n- 可以使用 .*? 忽略它，不然匹配不到\n\n#### 13.6 反爬导致解析获取的列表为空，造成 list out of range\n\n- 反爬导致解析获取的列表为空，由于索引取值，造成列表越界异常\n- 可以捕获该异常代码，保证后续的url请求不受阻\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\n# ''' ... ''' 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等\ntry:\n    bs = bt.find_all('div', class_=\"subject clearfix\")[0]\n    bs = bs[0]  # 提取列表中的字符串\nexcept Exception as e:\n    print(\"反爬机制\", e)\n```\n\n#### 13.7 应对部分元素为空，导致list out of range错误\n\n- 导致此错误的原因一般都是列表为空，但是使用了索引获取其中的元素\n\n- **可以自定义一个函数，用来捕获这类错误**，\n\n  如果报错，则返回一个空值；如果不报错，则返回处理好的值\n\n```python\n# 捕获元素不存在时的错误\ndef find(element, by, pattern, split):\n    try:\n        return element.find_element(by, pattern).text.split(split)[1].strip()\n    except Exception as e:\n        print(e)\n        return ' '\n```\n\n#### 13.8 通过xpath获取标签外的文本内容\n\n- ![](python笔记/image-20230724090823259.png)\n\n```python\ntree.xpath( \"//div[@class='subject clearfix']/div[@id='info']/span[@class='pl'][contains(text(), '页数:')]/following-sibling::text()[1]\",html)\n```\n\n- 或者使用bs4解析\n\n```\nre.findall(r'定价:.*? (?P<money>.*?)<br/>', bs)[0]\n```\n\n\n\n#### 13.9 遇到无法避免的异常\n\n- 遇到无法避免的异常时，可以捕获该异常信息，确保后续程序正常运行\n\n## 第六部分 selenium半自动化工具\n\n- 首先下载selenium包\n\n```\npip install selenium\n```\n\n- 下载对应浏览器版本的浏览器驱动，并放到处于环境变量的包中\n  - ![](python笔记/image-20230723151140532.png)\n\n- 导入包\n\n```python\nfrom selenuim import webdriver\n```\n\n### 1、等待网页js渲染\n\n### 2、通过cookie免密登录\n\n## 第七部分 Pandas\n\n- 安装pandas包\n\n```\npip insatll pandas\n```\n\n- 安装jupyter notebook\n\n```\npip install jupyter notebook\n```\n\n- 在pycharm终端启动jupyter notebook\n\n```\nF:\\BigData26\\Code\\python\\bigdata26>jupyter notebook\n```\n\n- 导入pandas的包\n\n```python\nimport pandas\nimport numpy\n```\n\n### 布尔索引\n\n- 使用布尔索引可以提取指定条件的值\n- df['Age'] > 32的值\n\n![](python笔记/image-20230724212046687.png)\n\n- 如下代码，可以获取次df的Age列，值大于32的行\n\n```py\ndf[df['Age'] > 32]\n```\n\n![](python笔记/image-20230724212222545.png)\n\n### pandas 读取文件\n\n- pd.read_csv()方法中，index_col参数和names参数的区别\n\n  - index_col需要指定，文件中已有的head信息，才能够读取\n\n    - ```python\n      id,name,age,gender,clazz\n      1500100001,施笑槐,22,女,文科六班\n      \n      df_student = pd.read_csv('../data/student.csv',index_col=[\"id\",\"name\",\"age\",\"gender\",\"clazz\"])\n      ```\n\n  - names参数，会当作读取文件的列名\n\n### DF取值\n\n#### 1、取列\n\n- df[\"name\"]，注意是两对中括号\n  - 取列名为name的列\n- df[[\"name1\",\"name2\",\"name3]]\n  - 取列名为name1、name2、name3的列\n\n#### 2、取行\n\n- df.iloc[[0,1]]，注意是两对中括号\n  - 取行索引为0，为1的行\n- df.loc[[\"name1\",\"name2\"]]\n  - 取行名为name1，name2的行\n- df_student[1:3]\n  - 取行索引，[2,3)的所有行\n\n#### 3、取行列\n\n- 可以通过.iloc[ 行索引切片, 列索引切片 ]的方式取行列\n  - df_student.iloc[1:4,0:2]\n    - 取[1,4)行，且[0,2)列\n      - ![](python笔记/image-20230724214335918.png)\n\n### 连接\n\n#### 1、join\n\n- 默认情况下他是把行索引相同的数据合并到一起\n\n![](python笔记/image-20230724153228728.png)\n\n#### 2、merge:\n\n- 按照指定的列把数据按照一定的方式合并到一起\n  \t左外连接、右外连接、全外连接、内连接、\n\n![](python笔记/image-20230724153243607.png)\n\n### 分组聚合\n\n- df.groupby([\"clazz\",\"subject_id\"])\n  - 先根据clazz列进行分组和默认的排序\n  - 然后再根据subject_id列，在clazz分组的基础上，再进行分组和默认的排序\n  - 最后聚合的聚合，根据分的各个组进行的聚合操作\n  - 除了指定列，其他未分组的列也会进行聚合操作\n\n![](python笔记/image-20230724215256243.png)\n\n- df_result.groupby([\"clazz\",\"subject_id\",\"name\"]).sum(\"score\")\n  -  由于分组列太多（分组过后，各组只有一条数据），聚合不起作用，可以用来显示分组过后的情况\n\n![image-20230724223358859](python笔记/image-20230724223358859.png)\n\n- rank()聚合\n  - rank只会排名，不会改变原来数据的顺序\n  - 可以根据如下代码，取各个班级各个学科得前三名\n  - ascending=False，代表值降序，从1开始排序\n\ndf_merge[\"rank\"] = df_merge.groupby([\"clazz\",\"subject_id\"])['score'].rank(\"dense\",ascending=False)\n\ndf_result = df_merge[df_merge[\"rank\"]<=3]  # 取各班各科前三名的行\n\n如图，代码结果（在day11的homework文件中）\n\n![image-20230724223247119](python笔记/image-20230724223247119.png)\n\n![image-20230724223315189](python笔记/image-20230724223315189.png)\n\n### sort_values()分组排序\n\n- df_result.sort_values([\"clazz\",\"subject_id\",\"rank\"],ascending=[False,False,False]).reset_index(drop=True)\n  - 使用sort_valus()方法进行分组排序\n  - reset_index并重置索引，drop=Ture删除原来的乱序索引\n  - 传给ascending参数一个bool列表，指定每列的排序方式，默认为True(升序)\n  - **sort_values() 会先排序指定的第一列，然后在此基础上继续排序其他列，有分组的作用，并按每列指定的规则排序**\n\n![image-20230725102707716](python笔记/image-20230725102707716.png)\n\n# Python 内存管理和垃圾回收\n\n基于C源码 \n\n- 引用计数器\n- 标记清除\n- 分代回收\n- 缓存机制\n\n## 1. 引用计数器\n\n### 环状双向链表 refchain\n\npython创建对象时会把任何对象放在refchain中\n\n```python\nname = '西西'\nage = 18\nheight = 1.81\n```\n\n```python\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数】\nname = '西西'\nnew_name = name\n\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、val=18】\nage=18\n\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、元素个数、值】\nhobby = ['唱','跳','rap']\n```\n\nC源码中每个对象都有不一样的存储结构数据   PyObject结构体（4个值） PyVarObject = PyObject + ob_size\n\n```python\ndata = 3.14\n\n内部会创建：\n\t_ob_next = refchain中的下一个对象\n    _ob_prev = refchain中的上一个对象\n    ob_refcnt = 1 引用计数  \n    ob_type = float\n    ob_fval = 3.14\n```\n\n### 引用计数器\n\n创建一个对象的时候 默认refcnt是1\n\n- 引用\n\n```python\na = 9999   # refcnt = 1\nb = a      # refcnt + 1\n\n# 删除引用\ndel b      # refcnt - 1\ndel a      # refcnt - 1\n\n# 当一个对象的引用计数器为0时，表示这个对象不存在了，这个对象就是一个垃圾  就回收了\n# 回收\n\t# 1.对象从refchain中移除\n    # 2.对象销毁，内存归还\n```\n\n- 但是会出现以下问题\n\n```PYTHON\na = [1,2,3]   # a\\refcnt = 1\nb = [4,5,6]   # b\\refcnt = 1\n\na.append(b)   # b\\refcnt + 1\nb.append(a)   # a\\refcnt + 1\n\ndel a         # a\\refcnt - 1\ndel b         # b\\refcnt - 1   值都还是1   没有实现回收的功能\n```\n\n\n\n## 2. 标记清除\n\n- 目的： 解决引用计数器出现的循环引用的问题\n- 实现：在底层再次维护一个链表，用于存放可能出现循环引用的对象（list,tuple,dict,set）\n\n![hZ9SjgCDRMUGOxT](python笔记/hZ9SjgCDRMUGOxT.png)\n\n> 在python内部```某种情况```下触发，回头触发扫描```可能出现循环引用的链表```中的每个元素，检查该对象是否出现一个循环引用的现象，如果出现，refcnt - 1 ；如果refcnt=0，垃圾回收。\n\n- 问题：\n\n  ​\t什么时候扫描？\n\n  ​\t可能存在扫描循环引用的链表代价大，耗时久。\n\n\n\n## 3. 分代回收\n\n![image.png](python笔记/hZ9SjgCDRMUGOxT.png)\n\n- 0代 ： 0代中对象到达700个，记录循环引用的链表扫描一次\n- 1代 ： 0代扫描十次，1代扫描一次\n- 2代 ： 1代扫描十次，2代扫描一次\n\n\n\n## Python缓存池\n\n为了避免重复和创建一些常见对象，维护池。\n\n```python\n# 启动解释器时，python会内部创建 ： -5、-4 ...... 257，值在次范围的int对象会被放到缓存池中\nv1 = 7\nv2 = 9\nv3 = 9\n\n# 查看内存地址\nid(v1)\nid(v2)\n\nv4 = 9999\nv5 = 9999\n```\n\n\n\n### free_list\n\n> refcnt = 0 按道理来说是不是应该会回收，但是内部不会直接回收，他会把这个对象存到一个free_list的链表中当缓存，之后取创建一个相同对象的时候，不重新开辟内存，而是从free_list中取一个对象\n\n![image.png](python笔记/bxmZRYfl4UXaeB6.png)\n\n### 缓存机制（自己理解）\n\n- 即使删除了值，但是对象并不会删除，会放到该对象对应的缓存池中，（如果值得范围，在缓存范围内）\n\n  如上图的cmd中的例子，虽然删除了v1的值，但是v1对应的float对象并没有被清除内存，而是被放到缓存池中（所在内存不变）\n\n  所以下下一个定义的v3对应的float对象可能是v1的float对象，只是值有所改变\n\n  打印内存地址发现，v3和已经被放入缓存池的v1的的地址相同，所以v3和v1使用的是同一个float对象\n\n","source":"_posts/python笔记.md","raw":"---\ntitle: python笔记\ntags: Python\ncover: /images/python笔记.jpg\ncategories: Python\ndescription: 这是python描述\nabbrlink: c00b24b1\ndate: 2023-08-10 21:46:52\n---\n\n# 一、python基础\n\n## 前言 python所学内容\n\n- 基础语法\n  - 变量、注释、基本数据类型、格式化字符串、反转字符、数据类型转化、if\\elif选择结构、for\\while循环\n  - str的常用方法、运算符\n  - 命名空间、作用域\n- 数据容器\n  - list列表、tuple元组、dict字典、set集合\n  - 遍历数据容器、列表推导式\n  - 杨辉三角、冒泡排序\n- 函数\n  - 函数参数\n    - 必选参数、 默认参数、可选参数、关键字参数、命名关键字参数\n  - 递归函数\n    - 阶乘、斐波拉契数列、汉诺塔\n- 面向对象\n  - 类、私有变量和方法、封装、继承、多态、猴子补丁、鸭子类型、兔子问题\n- 异常处理\n  - 基本异常类型、捕获和抛出异常、自定义异常\n- 文件读写\n  - 文件打开open、文件读写、with语句\n- 正则表达式\n- 常用模块\n\n## 第一部分 python简介\n\n- Python是一门解释性、面向对象以及类型动态的高级程序语言\n  - 解释型：Python代码在运行时没有了编译这个环节，类似PHP\n  - 面向对象：Python支持面向对象的风格或代码封装在对象的编程技术\n  - 动态数据类型：Python中没有对变量类型进行限制，代码非常灵活\n\n#### 1、python的垃圾回收机制\n\n- 引用计数（Reference Counting）\n- 标记清除（Mark and Sweep）\n  - 标记清除解决循环引用\n- 分代回收（Generational Collection）\n\n#### 2、python环境安装\n\n- 首先官网下载安装程序\n\n  - 选择状态为security的版本，并且选择此版本中小版本不是最后一个的版本\n  - ![](python笔记/image-20230710193122871.png)\n  - ![image-20230710193646276](python笔记/image-20230710193646276.png)\n  - <img src=\"python笔记/image-20230710193716304.png\" alt=\"image-20230710193716304\" style=\"zoom:50%;\" />\n\n- 安装时，选择客制化安装（自定义路径）\n\n  - ![image-20230710193859950](python笔记/image-20230710193859950.png)\n  - ![image-20230710194234672](python笔记/image-20230710194234672.png)\n\n- 完成安装后，查看python的环境变量（勾选上述选项后，自动添加）\n\n  - 系统会优先调用位于**系统环境变量（所有用户都可以使用）下最上面的文件路径下的程序**\n  - 目的\n    - 把第一个路径下的pip.exe文件添加到全局变量中\n    - 把第二个路径下的python.exe（python解释器）添加到全局变量中\n  - ![image-20230710194400177.png](python笔记/image-20230710194400177.png)\n\n- 验证是否安装成功\n\n  ```python\n  python -V  //查看版本\n  pip list   //查看使用pip命令所下载的包\n  ```\n\n  \n\n  - ![image-20230710194742530](python笔记/image-20230710194742530.png)\n\n- pip命令下载包的位置\n\n  - 刚开始之后两个，pip和setuptools\n  - pip list可以查看pip命令下载的包，如上图\n  - ![image-20230710200739516](python笔记/image-20230710200739516.png)\n\n- python自带的组件\n\n  - ![image-20230710200539139.png](python笔记/image-20230710200539139.png)\n  - Moudle Docs（把python的安装环境变为网页形式）\n    - ![image-20230710200312751](python笔记/image-20230710200312751.png)\n  - IDLE（python自带的集成开发环境）\n\n  - python（命令行模式）\n\n#### 3、pycharm安装\n\n- 官网找到pycharm社区版（免费版）\n  - ![](python笔记/image-20230710195406248.png)\n- 安装程序的介绍\n  - ![python笔记/image-20230710195906290.png](python笔记/image-20230710195906290.png)\n  - 鼠标右击桌面的显示框\n    - ![](python笔记/image-20230710200010566.png)\n  - 关联py后缀的文件\n    - ![](python笔记/image-20230710200106371.png)\n    - ![](python笔记/image-20230710200130611.png)\n\n\n\n- 创建项目时的注意事项\n  - 虚拟环境\n    - 创建为虚拟环境的项目，相当于把项目放在一个独立的环境中，所下载的包是独立于其他项目的\n  - 非虚拟环境\n    - 非虚拟环境的项目，所下载的包，是可以和其他非虚拟环境的项目所共用\n    - ![](python笔记/image-20230710201025426.png)\n    - ![python笔记/image-20230710201900839.png](python笔记/image-20230710201900839.png)\n    - Conda Environment 是以Anocanda的环境为基础的选择\n    - Anocanda一个集成所有python的第三方库的工具，一般作为离线使用\n  - 一般选择非虚拟环境\n- python第三方库\n  - 位于官网的PyPI\n  - Docs为python官方文档\n  - python为应用程序\n  - ![image-20230710202256691](python笔记/image-20230710202256691.png)\n\n## 第二部分 python基础语法\n\n#### 1、相对路径和绝对路径\n\n- ..表示退出当前文件夹到当前文件夹的上一级文件夹中\n\n- .表示当前文件夹\n\n- 相对路径（在print_test.py文件中helloworld.py的相对路径）\n\n  - ![python笔记/image-20230711103427935.png](python笔记/image-20230711103427935.png)\n\n    ```\n    ../day01/helloworld.py\n    ```\n\n    \n\n  - 利用相对路径执行文件的例子\n\n    - ![image-20230711103411381](python笔记/image-20230711103411381.png)\n\n- 绝对路径\n\n  ```\n  F:\\BigData26\\Code\\python\\bigdata26\\day01\n  ```\n\n  \n\n  \n\n#### 2、print函数、cmd命令、注释\n\n- print函数\n\n  - 源代码\n\n    ```python\n    def print(self, *args, sep=' ', end='\\n', file=None):\n        pass\n    ```\n\n  - *args是参数化变量，也就是可以传入多个参数\n\n  - sep是间隔符\n\n  - end代表结尾\n\n- cmd命令\n\n  - ![](python笔记/image-20230711150851404.png)\n  - 在文件的路径上输入cmd就可以直接进入命令行模式\n    - ![](python笔记/image-20230711151030189.png)\n    - ![python笔记/image-20230711151053019.png](python笔记/image-20230711151053019.png)\n    - ![](python笔记/image-20230711151134903.png)\n\n\n- 注释\n\n  ```python\n  # 单行注释快捷键 ctrl + /\n  # 单行注释，他是给人看的，编辑器不识别\n  '''\n  这是多行注释、\n  可以在很多行中\n  写文字\n  '''\n  \n  \"\"\"\n  这个也是多行注释\n  也是个字符串\n  \"\"\"\n  ```\n\n  \n\n\n\n#### 3、变量\n\n- 变量的命名规则\n\n  - 必须是大小写字母、数字、下划线\n  - 不能以数字开头\n  - 不能是关键字\n    - 如何查看关键字\n      - ![image-20230711182305418](python笔记/image-20230711182305418.png)\n    - 所有的python关键字\n      - ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n- 变量命名\n\n  ```python\n  # 驼峰命名法\n  # 在python中驼峰命名法一般用于文件命名\n  trainHead = 5\n  \n  # 下划线命名法\n  # python中下划线命名法一般用于变量命名\n  train_head = 5\n  \n  # 在python可以用中文给变量命名，但是不符合规则\n  # 火车头 = 5\n  \n  # python中可以以下划线开头\n  # 但是，一般不用，因为下划线开头的方法代表私有化方法，不能改动\n  _class_a = 2\n  ```\n\n  \n\n#### 4、数据类型和转义字符\n\n- 如果一个变量是全大写形式，就会被认为**常量**，如\n\n  ```python\n  PI = 3.14\n  ```\n\n- python的四大基本类型\n\n  - int 整型\n  - float 浮点型\n  - str 字符串类型型\n  - bool 布尔类型\n\n  ```python\n  print(type(变量名)) # 查看变量类型\n  ```\n\n- 特殊类型None\n\n  - 注意：None类型不能转换为其他基本数据类型\n\n- 转义字符 \\ ，\\n，\\t，\\r\n\n  ```python\n  # 转义字符以及''和\"\"的套用\n  # 输出I'm OK\n  print(\"I'm OK\")\n  print('I\\'m OK')\n  \n  # 输出I\\'m OK\n  print(r\"I\\'m OK\")\n  print('I\\\\\\'m OK') # 第一个\\把第二个\\进行转义：\\\\输出\\。第三个\\把'进行转义：\\'输出'\n  \n  # 转义字符\\r：覆盖前面的字符\n  print(\"a\\rb\")  # b\n  print(\"a\\rb\\rcd\")  # cd\n  ```\n\n#### 5、格式化字符串\n\n```python\nname = \"张三\"\nyear = 2023\nmonth = 7\nday = 11\nmoney = 200.23445\ndeadline = 5\npercent = 5\n```\n\n- fstring  \n\n  ```python\n  # 1.fstring\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  words1 = f\"亲爱的客户{name}，截至{year}年{month:02d}月{day}日，你已经欠费{money:08.2f}，\" \\\n  f\"请在{deadline}日内，尽快缴清话费，否则将扣除{percent}%的费用\"\n  print(words1)\n  ```\n\n  \n\n- 占位符\n\n  ```python\n  # 2.占位符\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  # 使用占位符的坑：%d%，会报错，%d%%即可解决\n  words2 = \"亲爱的客户%s，截至%d年%02d月%d日，你已经欠费%08.2f，请在%d日内，尽快缴清话费，否则将扣除%d%%的费用\" \\\n  % (name, year, month, day, money, deadline, percent)\n  print(words2)\n  ```\n\n- format\n\n  ```python\n  # 3.format\n  # 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型\n  # 08.2f：08表示同上述02。.2f代表浮点型保留两位小数\n  words3 = \"亲爱的客户{}，截至{}年{:02d}月{}日，你已经欠费{:08.2f}，请在{}日内，尽快缴清话费，否则将扣除{}%的费用\" \\\n  .format(name, year, month, day, money, deadline, percent)\n  print(words3)\n  ```\n\n- 第二种format\n\n  ```python\n  # 4.第二种format\n  words4 = \"亲爱的客户{name}，截至{year}年{month:02d}月{day}日，你已经欠费{money:08.2f}，请在{deadline}日内，尽快缴清话费，否则将扣除{percent}%的费用\" \\\n  .format(name=name, year=year, month=month, day=day, money=money,deadline=deadline, percent=percent)\n  print(words4)\n  ```\n\n- 字符串拼接\n\n  ```python\n  # 5.字符串拼接\n  # 注意：python中整型不可以和字符串拼接\n  print(\"亲爱的客户\"+name+\"，截至\"+str(year)+\"年\"+str(month)+\"月\"+str(day)+\"日\")\n  ```\n\n#### 6、反转字符串\n\n- 索引实现\n\n  ```python\n  str_a = 'hello Tuesday!'\n  str[::-1]\n  \n  # 起始位置:结束位置:步长\n  print(str_a[::-1])  # !yadseuT olleh\n  # 区间左闭右开[起始位置,结束位置)，所以取不到0位置\n  print(str_a[14:0:-1])  # !yadseuT olle\n  # 可以不给结束位置，默认就可以取到最后一位0位置\n  print(str_a[14::-1])  # !yadseuT olleh\n  ```\n\n- 使用**lambda匿名函数**实现反转字符串\n\n  ```python\n  from functools import reduce\n  srt_a = \"hello Tuesday!\"\n  # eh->leh->lleh->...->!yadseuT olleh\n  print(reduce(lambda x,y:y+x,str_a))\n  ```\n\n#### 7、数据类型转化\n\n- 整型int\n\n  - 所有非0的整型转为bool类型后都会转为True\n\n  ```python\n  # 整型int\n  int_1 = 1\n  int_2 = -0\n  int_3 = 0\n  int_4 = 2\n  print(float(int_1), float(int_2), float(int_3), float(int_4))  # 1.0 0.0 0.0 2.0\n  print(str(int_1), str(int_2), str(int_3), str(int_4))  # 1 0 0 2\n  # 所有非0的整型转为bool类型后都会转为True\n  print(bool(int_1), bool(int_2), bool(int_3), bool(int_4))  # True False False True\n  ```\n\n- 浮点型float\n\n  - 浮点型转为int类型是向下取整\n  - 所有非0的浮点型转为bool类型后都会转为True\n\n  ```python\n  # 浮点型float\n  float_1 = 1.0\n  float_2 = 1.6\n  float_3 = -1.0\n  float_4 = -0.0\n  float_5 = 0.0\n  # 浮点型转为int类型的正数是向下取整\n  # 浮点型转为int类型的负数是向上取整 int(-1.1) == -1\n  print(int(float_1), int(float_2), int(float_3), int(float_4), int(float_5))  # 1 1 -1 0 0\n  print(str(float_1), str(float_2), str(float_3), str(float_4), str(float_5))  # 1.0 1.6 -1.0 -0.0 0.0\n  # 所有非0的浮点型转为bool类型后都会转为True\n  print(bool(float_1), bool(float_2), bool(float_3), bool(float_4), bool(float_5))  # True True True False False\n  ```\n\n    \n\n- 字符型str\n\n  - 只有字符为整数才能转为整型\n  - 只有字符为数值类型才能转为浮点型\n  - 所有非空（非\"\"）的字符串转为bool时，都为True\n\n  ```python\n  # 字符型str\n  str_1 = \"-1\"\n  str_2 = \"1.0\"\n  str_3 = \"2a\"\n  str_4 = \"Ture\"\n  str_5 = \"0\"\n  str_6 = \" \"\n  str_7 = \"\"\n  # 只有字符为整数才能转为整型，如：str_1、str_5\n  # print(int(str_1),int(str_2),int(str_3),int(str_4),int(str_5),int(str_6),int(str_7))\n  # 只有字符为数值类型才能转为浮点型，如：str_1、str_2、str_5\n  # print(float(str_1),float(str_2),float(str_3),float(str_4),float(str_5),float(str_6),float(str_7))\n  # 所有非空（非\"\"）的字符串转为bool时，都为True\n  print(bool(str_1), bool(str_2), bool(str_3), bool(str_4), bool(str_5), bool(str_6),\n        bool(str_7))  # True True True True True True False\n  ```\n\n- 布尔bool\n\n  ```python\n  bool_1 = True\n  bool_2 = False\n  print(int(bool_1), int(bool_2))  # 1 0\n  print(float(bool_1), float(bool_2))  # 1.0 0.0\n  print(str(bool_1), str(bool_2))  # \"True\" \"False\"\n  ```\n\n  \n\n- None类型\n\n  - 转为int和str时都会报错\n\n  ```python\n  None_1 = None\n  # TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'\n  # print(int(None_1))\n  # TypeError: float() argument must be a string or a real number, not 'NoneType'\n  # print(float(None_1))\n  print(str(None_1))  # \"None\"\n  print(bool(None_1))  # False\n  ```\n\n#### 8、九九乘法表\n\n- 使用嵌套for循环实现\n\n  ```python\n  for i in range(1,10):\n  \tfor j in range(1,i+1):\n          print(f\"{j}*{i}={i*j}\")\n      print()\n  ```\n\n  ```\n  1*1=1\t\n  1*2=2\t2*2=4\t\n  1*3=3\t2*3=6\t3*3=9\t\n  1*4=4\t2*4=8\t3*4=12\t4*4=16\t\n  1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t\n  1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t\n  1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t\n  1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t\n  1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t\n  ```\n\n- 使用**列表推导式**实现\n\n  ```python\n  print(\"\\n\".join([\"\\t\".join([f\"{j}*{i}={i*j}\" for j in range (1,i+1)])for i in range(1,10)]))\n  ```\n\n  ```\n  1*1=1\t\n  1*2=2\t2*2=4\t\n  1*3=3\t2*3=6\t3*3=9\t\n  1*4=4\t2*4=8\t3*4=12\t4*4=16\t\n  1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t\n  1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t\n  1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t\n  1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t\n  1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t\n  ```\n\n#### 9、str的常用方法\n\n#####  split() - 切分\n\n```python\n# 按照指定字符进行切分，返回一个列表。如果不传入第二个参数（maxSplit），默认全部切分\nstr_1 = \"python,java,scala\"\nstr_1_split = str_1.split(\",\", 2)\nprint(str_1_split)\n```\n\n##### strip() - 剥离、去除、脱离\n\n```python\n# 去除前后空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala  \\r\\n \"\nstr_1_strip = str_1.strip()\nprint(str_1_strip)\n```\n\n```python\n# 传入字符串参数，去除前后指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_strip = str_1.strip(\"py\")\nprint(str_1_strip)\n```\n\n##### lstrip() - 左剥离\n\n```python\n# 默认去除左边头的空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala   \"\nstr_1_lstrip = str_1.lstrip()\nprint(str_1_lstrip)\n```\n\n```python\n# lstrip(参数)\n# 去除左边头，指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_lstrip = str_1.lstrip(\"py\")\nprint(str_1_lstrip)\n```\n\n##### rstrip() - 右剥离\n\n```python\n# 默认去除右边头的空格和特殊字符\nstr_1 = \" \\r\\n  python,java,scala   \\r\\n\"\nstr_1_rstrip = str_1.rstrip()\nprint(str_1_rstrip)\n```\n\n```python\n# rstrip(参数) - 右剥离\n# 去除左边头，指定字符串\nstr_1 = \"python,java,scala,py\"\nstr_1_rstrip = str_1.rstrip(\"py\")\nprint(str_1_rstrip)\n```\n\n##### lower() - 小写\n\n```python\n# 大写字母转为小写\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_lower = str_1.lower()\nprint(str_1_lower)\n```\n\n##### upper() - 大写\n\n```python\n# 小写字母转为大写\nstr_1 = \"Python,Java,Scala\"\nstr_1_upper = str_1.upper()\nprint(str_1_upper)\n```\n\n##### islower() - 是否为小写\n\n```python\n# 判断所有字母是否是小写，如果是返回Ture，如果不是返回false\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_islower = str_1.islower()\nprint(str_1_islower)\n```\n\n##### isupper() - 是否为大写\n\n```python\n# 判断所有字母是否是大写，如果是返回Ture，如果不是返回false\nstr_1 = \"PYTHON,JAVA,SCALA\"\nstr_1_isupper = str_1.isupper()\nprint(str_1_isupper)\n```\n\n##### replace() - 替换\n\n```python\n# 把前一个参数的值替换为后一个参数的值，默认将字符串中所有 为前一个参数的子字符串都替换为后一个参数\n# 2代表替换前两个值为前一个参数的子字符串\nstr_1 = \"python,java,scala\"\nstr_1_replace_1 = str_1.replace(\"a\",\"A\")\nstr_1_replace_2 = str_1.replace(\"a\",\"A\",2)\nprint(str_1_replace_1)\nprint(str_1_replace_2)\n```\n\n##### index() - 索引\n\n```python\n# 返回指定区间的指定元素的索引值，默认返回第一个指定元素的索引值\nstr_1 = \"python,java,scala\"\nstr_1_index_1 = str_1.index(\"a\")\nstr_1_index_2 = str_1.index(\"a\",7,9)\nprint(str_1_index_1)\nprint(str_1_index_2)\n```\n\n##### ord() - 字符转换为ASCii码值\n\n- `ord` 函数的全称是 \"ordinal\", 它是从 \"ordinal number\"（序数）一词中衍生而来\n\n```python\nprint(ord(\"A\"))  # 65\n```\n\n##### chr() - ASCii码转换为字符\n\n- `chr` 函数的全程是 \"character\"，它是从 \"character\"（字符）一词中衍生而来。\n\n```python\nprint(chr(65))  # A\n```\n\n#### 10、运算符\n\n##### 算数运算符\n\n- ![python笔记/image-20230713201620205.png](python笔记/image-20230713201620205.png)\n\n##### 比较运算符\n\n- ![](python笔记/image-20230713201653705.png)\n\n```python\n# 比较运算符 ==\n# 只有 1（整型或者浮点行）等与 False\n# 只有 0（整型或者浮点行）等与 False\n# 其他数字及不等于False也不等于False，但是强转为bool型时，只有0才能转为False，其他皆为True\nprint(1 == True)  # True\nprint(1.0 == True)  # True\nprint(2 == True)  # False\nprint(0 == False)  # True\nprint(3 == False)  # False\n```\n\n##### 赋值运算符\n\n- ![](python笔记/image-20230713201728513.png)\n\n##### 逻辑运算符\n\n- ![python笔记/image-20230713201804728.png](python笔记/image-20230713201804728.png)\n\n```python\n# 逻辑运算符 and or not\n# 注意 逻辑运算符中 非0的数皆为True\n# and 若前者为False，则返回前者的值，否则返回后者\nprint(20 == False)   # False\nprint(20 and 30)  # 30\n# or 若前者为Ture，则返回前面的值，否则返回前者\nprint(20 == True)  # False\nprint(20 or 30)  # 20\nprint(not 0)  # True 注意这个除0之外都是\n```\n\n##### 位运算符\n\n- ![python笔记/image-20230713201909704.png](python笔记/image-20230713201909704.png)\n\n```python\na = 49\nb = 11\n\"\"\"按位与运算符& 同一则 1，否则为0\n110001 a\n001011 b \n000000 a&b\n\"\"\"\nprint(a & b)  # 1\n\n\"\"\"按位或运算符| 有1则1，否则为0\n110001 a\n001011 b     \n111011 a&b\n\"\"\"\nprint(a | b)  # 59\n\n\"\"\"按位异或运算符^ 相异为1，否则为0\n110001 a\n001011 b     \n111010 a&b\n\"\"\"\nprint(a ^ b)  # 58\n\n\"\"\"按位取反运算符~ 把1变为0，把0变为1 ，结果为-a-1\n1 110001 a\n0 001110 ~a\n要计算负数的补码，需要先将其二进制表示按位取反，然后再加 1。\n对于 001110，按位取反得到 110001。\n然后，将 110001 加 1，得到 110010。\n最终的结果 110010 对应十进制的 -50。\n\"\"\"\nprint(~a)  # -50\n\n\"\"\"左移运算符<< 二进制全部往前若干位，高位往前低位补0，如果补0后的整体达到32位，则舍弃高位保留32位\n110001 a\n11000100 a<<2\n\"\"\"\nprint(a << 2)\n\n\"\"\"右移运算符>> 二进制全部往后若干位，舍弃低位\n110001 a\n1100 a>>2\n\"\"\"\nprint(a >> 2)\n```\n\n#### 11、if/elif选择结构\n\n- ![](python笔记/image-20230713212833658.png)\n\n```python\n# 由薪水判断心情\n    salary = 2500\n    if salary >= 10000:  # 区间 [10000,正无穷)\n        print(\"日子过的非常好\")\n    elif salary >= 5000:  # 区间 [5000,10000)\n        print(\"日子还能过的去\")\n    else:  # 区间 (负无穷,5000)\n        print(\"日子过不去了\")\n\n    # 反着写\n    if salary < 5000:  # 区间 (负无穷,5000)\n        print(\"日子过不去了\")\n    elif salary < 10000:  # 区间 [5000,10000)\n        print(\"日子还能过的去\")\n    else:  # 区间 [10000,正无穷)\n        print(\"日子过的非常好\")\n```\n\n##### 三元运算符\t\n\n```python\n# 三元运算符\n    print(\"日子过不去了\") if salary < 5000 else print(\"日子过的非常好\")\n    print(\"日子过不去了\") if salary < 5000 else (print(\"日子还能过的去\") if salary < 10000 else print(\"日子过的非常好\"))\n```\n\n#### 12、while/for循环结构\n\nwhile循环语句小练习：\n\n- 1.计算1~100中奇数的和\n\n  ```python\n  # 1.\n      i = 1\n      summ = 0\n      while i <= 100:\n          # 判断为基数\n          if i % 2 != 0:\n              summ += i\n          i += 1\n      print(summ)\n      # 简化\n      i = 1\n      summ = 0\n      while i <= 100:\n          # 判断为基数\n          summ += i\n          i += 2\n      print(summ)\n  ```\n\n- 2.break continue\n\n  ```python\n  # 2.break continue\n      # 下面的代码会陷入死循环\n      i = 1\n      while i <= 100:\n          if i == 90:\n              continue\n          i += 1\n          print(i)\n  ```\n\n- 3.给定一个字符串s = ‘beautifulCode’\n      从前到后检查每个字母\n      如果是大写字母则停止检查并输出：有大写字母，第一个大写字母为%s\n      否则输出：无大写字母\n\n  ```python\n  s = 'beautifulCode'\n      i = 0\n      while i < len(s):\n          if s[i].isupper():\n              print(f\"有大写字母，第一个大写字母{s[i]}\")\n              break\n          i += 1\n      # 由 i 值判断判断无大写字母\n      if i == len(s):\n          print('无大写字母')\n      # 由 i 值判断判断无大写字母\n      flag = 0\n      while i < len(s):\n          if s[i].isupper():\n              print(f\"有大写字母，第一个大写字母{s[i]}\")\n              flag = 1\n              break\n          i += 1\n      if flag == 0:\n          print('无大写字母')\n  ```\n\n#### 13、命名空间\n\n- Python中一般有三种命名空间：\n  - 内置名称（built-in names）\n    -  Python 语言内置的名称，比如函数名 abs、chr 和异常名称 BaseException、Exception 等等\n  - 全局名称（global names）\n    - 模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量\n  - 局部名称（local names）\n    - 函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）\n\n- ![python笔记/image-20230713215248858.png](python笔记/image-20230713215248858.png)\n- 命名空间查找顺序:  由内往外\n  - 假设我们要使用变量 money，则 Python 的查找顺序为：\n    - 局部的命名空间 -> 全局命名空间 -> 内置命名空间\n    - 如果找不到变量 money，它将放弃查找并引发一个错误\n\n#### 14、作用域\n\n- Python 的作用域一共有4种：\n\n  - L（Local）：包含局部变量，比如一个函数/方法内部\n  - E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量\n  - G（Global）：最外层，比如当前模块的全局变量\n  - B（Built-in）：包含内建变量/关键字等，最后被搜索\n  - **在局部找不到，便会去局部外的局部找（例如闭包Enclosing），再找不到就会去全局找，再者去内置中找**\n\n- **Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问**\n\n  ```python\n  if True:\n      msg = \"i am from Runnob\"\n  print(msg)  # if不会形成新的作用域\n  ```\n\n## 第三部分 数据容器\n\n#### todo用法\n\n- ![](python笔记/image-20230713220504552.png)\n\n#### **ctrl + p 可以让参数提示重新出现**\n\n#### id(元素) - 返回元素内存地址\n\n- list列表、tuple元组、dict字典、set集合\n\n- 在 Python 中，`sort()` 方法是列表对象的内置方法，用于对列表进行原地排序。`sort()` 方法的底层实现使用一种名为 **Timsort 的排序算法**。\n\n#### 1、list列表\n\n- list的特点：有序的集合、可以有重复值、值类型不唯一、可变\n\n##### append - 追加\n\n- 添加元素，在末尾添加\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.append(\"Irving\")  # 添加元素，在末尾添加\nprint(class_mates)\n```\n\n##### inster - 插入\n\n- 在指定索引位置，插入指定元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.insert(0, \"Irving\")  # 在指定索引位置，插入指定元素\nprint(class_mates)\n```\n\n##### extend - 继承\n\n- 再末尾追加可迭代容器中的元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.extend([1, 2, 3])  # 再末尾追加可迭代容器中的元素\nprint(class_mates)  # ['James', 'Kobe', 'Polo', 1, 2, 3]\n```\n\n##### remove - 删除\n\n- 删除指定元素，但不返回删除的元素\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates.remove(\"James\")  # 删除指定元素，但不返回删除的元素\nprint(class_mates)\n```\n\n##### pop - 弹出、删除\n\n- 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_pop = class_mates.pop()  # 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError\nprint(class_mates_pop)\n\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_pop_1 = class_mates.pop(1)  # 删除，索引为1的元素\nprint(class_mates)\nprint(class_mates_pop_1)\n```\n\n##### del - 关键字删除、清除内存空间\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\ndel class_mates[1]  # 使用del关键字进行删除\nprint(class_mates)\n\nclass_mates = ['James', 'Kobe', 'Polo']\ndel class_mates\n# print(class_mates)  # NameError: name 'class_mates' is not defined.\n```\n\n##### index - 索引\n\n- 查询指定元素，返回索引值\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nindex_num = class_mates.index('James')  # 查询指定元素，返回索引值\nprint(index_num)\n```\n\n##### count - 统计\n\n- 统计指定元素出现的次数\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1_count = list_1.count(2)\nprint(list_1_count)  # 统计指定元素出现的次数\n```\n\n##### sort - 排序\n\n- 默认为升序排序\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.sort()  # 默认为升序排序\nprint(list_1)\n```\n\n- 指定参数revers为True，设置为降序排序\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.sort(reverse=True)  # 指定参数revers为True，设置为降序排序\nprint(list_1)\n```\n\n##### reverse - 反转\n\n- 列表中的元素进行反转\n\n```python\nlist_1 = [1, 2, 2, 3, 2, 4, 2, 5, 6]\nlist_1.reverse()  # 将列表中的元素进行反转\nprint(list_1)\n```\n\n##### copy - 复制\n\n- 复制列表，重新开辟一片新的内存空间\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates_copy = class_mates.copy()\nprint(id(class_mates))  # 2294213590208\nprint(id(class_mates_copy))  # 2294213319104\n```\n\n##### join - 连接  列表转为字符串\n\n- 把列表中的字符串元素以指定字符连接起来，转换为字符串\n- **请注意：如果列表中的元素不是字符串，使用此方法则会报错**\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nprint(\"\\n\".join(class_mates))  # 把列表中的字符串元素以指定字符连接起来\n                                # 请注意：如果列表中的元素不是字符串，使用此方法则会报错\n```\n\n通过索引的方式，对列表中的元素进行查找\n\n```python\nlist_2 = ['Hadoop', 'Hive', '2006', False]\nprint(list_2)\nprint(len(list_2))\nprint(list_2[0])\nprint(list_2[1])\nprint(list_2[2])\nprint(list_2[3])\n# print(list_2[4])  # list index out of range\n```\n\n##### 通过索引的方式，对列表中的元素进行修改\n\n```python\nclass_mates = ['James', 'Kobe', 'Polo']\nclass_mates[1] = \"Kobe Bryant\"  # 通过索引的方式，对列表中的元素进行修改\nprint(class_mates)\n```\n\n##### len - 长度\n\n- 输出列表的长度\n\n```python\nlist_2 = ['Hadoop', 'Hive', '2006', False]\nprint(len(list_2))\n```\n\n##### 切片\n\n- 起始位置、结束位置、步长都可以省略，如省略则等于默认值\n- 如果想要将列表的顺序颠倒，则可以使用::-1 \n- 切片操作同样适用于：字符串、元组中，以及后续numpy、pandas中的数据结构\n- ![python笔记/image-20230713221852883.png](python笔记/image-20230713221852883.png)\n\n#### 2、tuple元组\n\n- tuple 类似与列表 、 **不可变（没有list哪些改变增删改的方法）**\n- 查找tuple中的元素，其方法也是切片\n- 注意定义一个元素的元组时，在元素后加上一个英文逗号,\n\n```python\ntuple_a = (1, 2, 3, 3, \"dasd\", True)\n# 注意定义一个元素的元组时，在元素后加上一个英文逗号,\n# 如果不追加，则为int类型\ntuple_b = (1,)\ntuple_c = (1)\nprint(type(tuple_b), type(tuple_c))  #  <class 'tuple'> <class 'int'>\n```\n\n- tuple的使用可以使得代码更安全，防止错误赋值导致重要对象的改变\n\n#### 3、dict字典\n\n- dict字典中，\n  - 键必须是唯一的，但值可以重复\n  - 值可以取任何数据类型，但键必须是不可变的类型\n    - 如基本数据类型、元组（列表不可以、字典也不可以）\n  - dict字典中的KV键值对可以动态增减\n  - dict字典是无序的（无索引）\n\n- 为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。\n\n  - 假设字典包含了1万个汉字，需要再其中查询某一个字\n\n  - 第一种方式是把字典从第一页往后翻，直到找到所需的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢\n\n  - 第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，dict字典就是该种方式\n\n    - dict会把元素的键转换为hash值存储在内存中，查询时根据hash值查询\n\n    - **请注意：在 Python 中，不同的哈希函数和数据类型都可能产生哈希冲突（不同元素的哈希值相同），尽管冲突的概率非常低。这是因为哈希函数的输出空间有限，而输入数据的空间是无限的。**\n\n##### 新增一个键值对\n\n```python\n# 新增一个键值对\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1['Luck'] = 100\nprint(dict_1)\n```\n\n##### 更改键值对\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1['Michael'] = 100\nprint(dict_1)\n```\n\n##### 查询键值对\n\n```python\nprint(dict_1['Michael'])\n```\n\n##### get(k) - 通过键获取值\n\n- 返回指定key的value\n\n```python\n# get() - 获取\n    dict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n    print(dict_1.get('Michael'))  # 返回指定key的value\n```\n\n##### pop(k) - 通过键删除值\n\n- 删除指定键值对\n\n```python\n# pop - 弹出\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1.pop('Michael')  # 删除指定键值对\nprint(dict_1)\n```\n\n##### keys() - 获取所有的键，并返回一个列表\n\n- 获取所有键的集合，并返回一个集合：dict_keys(['Michael', 'Bob', 'Tracy'])\n- **请注意**\n  - dict_keys(['Michael', 'Bob', 'Tracy'])不是列表类型，因此不能通过索引访问\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.keys())  # 获取所有键的集合，并返回一个集合：dict_keys(['Michael', 'Bob', 'Tracy'])\nfor item in dict_1.keys():  # 遍历所有键\n\tprint(item)\nfor item in dict_1:  # 遍历所有键\n\tprint(item)\n\"\"\"请注意\ndict_keys(['Michael', 'Bob', 'Tracy'])不是列表类型，因此不能通过索引访问\n\"\"\"\n```\n\n##### values() - 获取所有的值，并返回一个列表\n\n- 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.values())  # 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])\nfor item in dict_1.values():  # 遍历所有的值\n\tprint(item)\n```\n\n##### items() - 常用于dict的遍历 \n\n- 把所有的键值对转换为二元组\n- 并返回一个集合：dict_items([('Michael', 95), ('Bob', 75), ('Tracy', 85)])\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n    print(dict_1.items())  # 以二元组的方式获取所有的键值，并返回一个集合：dict_items([('Michael', 95), ('Bob', 75), ('Tracy', 85)])\n    for k, v in dict_1.items():  # 遍历所有的键和值\n        print(k, v)\n```\n\n##### _len__() - 长度\n\n- 返回dict的长度\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\nprint(dict_1.__len__())  # 返回dict的长度\n```\n\n##### clear - 清空字典\n\n```python\ndict_1 = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\ndict_1.clear()\nprint(dict_1)  # 返回一个空字典{}\n```\n\n##### in - 判断是否包含\n\n- A in B(iterable) ：判断A是否在B中，B一般为一个可迭代的数据容器，如列表，元组，字典 ，set集合\n- 如果B为字典，则A只能为键，但是可以通过其他方法取出字典中的值，再判断\n\n```python\n# in 判断是否包含\nprint('Michael' in dict_1)  # True\nprint('Michael' in dict_1.keys())  # True\nprint(95 in dict_1.values())  # True\nprint(('Michael',95) in dict_1.items())  # True\n```\n\n##### 注意：字典中的字符串输出都是以单引号输出\n\n#### 4、set集合\n\n- set集合的特点：值是唯一的，会去重，会排序，无序\n\n  ```python\n  set_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\n      print(set_1)  # {False, 1, 2, 3, 1.2, 5, 'a'}，1就是True，0就是False\n  ```\n\n- 创建空的set集合 {}是空字典\n\n  ```python\n  set_1 = set()\n  print(set_1, type(set_1))  # set() <class 'set'>\n  \n  set_1 = set([])\n  print(set_1, type(set_1))  # set() <class 'set'>\n  ```\n\n##### pop()\n\n- 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.pop()  # 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素\nprint(set_1)\n```\n\n##### remove\n\n- 删除指定元素，没有返回值\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.remove(1)  # 删除指定元素\nprint(set_1)\n```\n\n##### discard - 抛弃\n\n- 抛弃，删除指定元素，如果元素不存在，也不会报错\n\n```python\nset_1 = {1, 3, 2, 5, False, True, 'c', 'a', 1.3, 1.2}\nset_1.discard('b')  # 抛弃，删除指定元素，如果元素不存在，也不会报错\nprint(set_1)\n```\n\n##### add\n\n- 添加指定元素\n\n```python\nset_1 = {1, 3, 4}\nset_1.add('a')  # 添加指定元素\nprint(set_1)\n```\n\n##### intersection - 交\n\n##### union - 并\n\n##### difference - 差\n\n```python\n# 交、并、差\nset_1 = {1, 2, 3, 4, 5, 6}\nset_2 = {4, 5, 6, 7, 8, 9}\n# intersection - 交\ninter = set_1.intersection(set_2)  # A 交 B\nprint(inter)\n# union - 并\nuni = set_1.union(set_2)  # A 并 B\nprint(uni)\n# different - 差\ndif = set_1.difference(set_2)  # A-B ，返回A中不是B中元素的集合\nprint(dif)\n```\n\n#### 5、遍历数据容器\n\n- 1.遍历列表、元组、set、直接遍历\n\n  ```python\n  list_1 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n  for list_1_sub in list_1:\n      for item in list_1_sub:\n          print(item)\n  print(\"=\" * 20)\n  ```\n\n- 2.遍历列表、元组 通过索引遍历\n\n  ```python\n  list_1 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n  for i in range(len(list_1)):\n      for j in range(len(list_1[i])):\n          print(list_1[i][j])\n  ```\n\n- 3.遍历字典\n\n  ```python\n  # 3.遍历字典\n  dict_1 = {'k1': 1, 'k2': 2, 'k3': 3}\n  # 遍历key值\n  for k in dict_1:\n      print(k)\n  for k in dict_1.keys():\n      print(k)\n  # 遍历value值\n  for v in dict_1.values():\n      print(v)\n  # 遍历key,value\n  for k, v in dict_1.items():\n      print(k, v)\n  ```\n\n#### 6、列表推导式\n\n- 生成一个 1~10的奇数 的列表\n\n```python\n# 生成一个 1~10的奇数 的列表\nlist_1 = []\nfor i in range(1, 10, 2):\nlist_1.append(i)\nprint(list_1)\n# 使用列表推到式方式\nprint([i for i in range(1, 10, 2)])\n```\n\n- 列表推导式中嵌入for和if语句\n\n  - 由于列表推导式的语法规则，正确的顺序应该是先定义外层循环（i 循环），然后在内层循环（j 循环）中引用外层循环的变量，从左到右嵌套，要生成的变量写在最左边\n\n  ```python\n  # 复杂嵌套的列表推导式\n      for i in range(1, 10):\n          if i % 2 == 1:\n              for j in range(1, i + 1):\n                  if j % 2 == 1:\n                      print(j, end=\",\")\n      print()\n      print([j for i in range(1, 10) if i % 2 == 1 for j in range(1, i + 1) if j % 2 == 1])\n  ```\n\n- 九九乘法表\n\n  ```python\n  # 99乘法表变为列表推导式的形式\n      # 通过join方法把列表转换为字符串\n      for i in range(1, 10):\n          for j in range(1, i + 1):\n              print(f\"{j}*{i}={i*j}\", end=\"\\t\")\n          print()\n      print(\"\\n\".join([\"\\t\".join([f\"{j}*{i}={i * j}\" for j in range(1, i + 1)]) for i in range(1, 10)]))\n  ```\n\n\n#### 7、冒泡排序\n\n- 冒泡排序思想\n  - 循环遍历（遍历n-1次）\n  - 两两比较\n  - 大的往后挪\n\n- 代码\n\n\n```python\n# num_list = [213, 3415, 3466, 247, 241, 86, 589, 222, 1]\nnum_list = [9, 8, 1, 2, 3, 4, 5, 6, 7]\nfor i in range(len(num_list) - 1):  # 只需要进行 n-1 轮排序即可\n    for j in range(len(num_list) - 1 - i):  # -1-i代表不需要动的数值的个数\n        if num_list[j] > num_list[j + 1]:\n            # 只有python才会有的交换方式\n            num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n    print(num_list)\nprint(\"=\"*20)\n```\n\n##### flag优化\n\n  - 优化思想，当某一次循环遍历时，没有数据进行交换，说明此时已经排序完成，flag是检查每次循环遍历时，】=】是否发生了数据交换的工具\n\n  ```python\n  num_list = [9, 8, 1, 2, 3, 4, 5, 6, 7]\n  for i in range(len(num_list) - 1):\n      flag = 1\n      for j in range(len(num_list) - 1 - i):\n          if num_list[j] > num_list[j + 1]:\n              # 只有python才会有的交换方式\n              num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n              flag = 0\n      if flag == 1:\n          break\n      print(num_list)\n  ```\n\n#### 8、杨辉三角\n\n- 构建杨辉三角并打印，每一行用list列表接收，期望的最终结果如下所示：\n\n- ![](python笔记/image-20230714090438935.png)\n\n- ![](python笔记/image-20230714090457699.png)\n\n- 第一种方法（自己实现）\n\n  ```python\n  if __name__ == '__main__':\n      # 定义一个空列表，用来存储杨辉三角\n      big_list = []\n      # i 代表每一行的索引位置\n      for i in range(0, 10):\n          # 定义一个空列表，用来动态存储杨辉三角的每一行\n          small_list = []\n          # j 代表索引元素位置\n          for j in range(0, i + 1):\n              # 起始位置\n              if j == 0:\n                  small_list.append(1)\n                  continue\n              # 结束位置\n              if j == i:\n                  small_list.append(1)\n                  continue\n              # 遍历当前行的上一行列表元素\n              # 杨辉三角中除第一个元素和最后一个元素，其他元素的值：皆是上一行中，此位置的元素 和 前一个位置元素的值 之和\n              k1 = big_list[i - 1][j - 1]\n              k2 = big_list[i - 1][j]\n              small_list.append(k1 + k2)\n          # 打印杨辉三角每一行\n          print(small_list)\n          # 把杨辉三角每一行添加到大列表中\n          big_list.append(small_list)\n  ```\n\n- 第二种方法（gpt）\n\n  ```python\n  if __name__ == '__main__':\n      triangle = []\n      for i in range(10):\n          # 保证每一行的起始位置为1，结束位置为1\n          row = [1] * (i + 1)\n          # 请注意range的默认步长为1\n          # range(1,0) 表示一个空范围，因为默认步长为1，起始值 1 大于或等于终止值 0\n          for j in range(1, i):\n              row[j] = triangle[i-1][j-1] + triangle[i-1][j]\n          print(row)\n          triangle.append(row)\n  ```\n\n- 第三种方法（上课教的）\n\n  ```python\n  triangle = [[1]]\n  for i in range(1, 10):  # i表示行数\n  \tpre_list = triangle[i - 1]\n  \tnew_list = []\n  \tfor j in range(len(pre_list) - 1):  # 会循环本行长度的n-2次，也就是头和尾不会出现\n  \t\tnew_list.append(pre_list[j] + pre_list[j + 1])  # 去除头尾后，本行的j位置的值为上一行j位置和j+1位置的值之和\n  \tnew_list = [1] + new_list + [1]\n  \tprint(new_list)\n  \ttriangle.append(new_list)\n  ```\n\n- 第三种方法列表推导式写法\n\n  ```python\n  # 使用列表推导式实现（一维数组形式）\n  pre_list = [1]\n  for i in range(1, 11):  # i 表示执行次数\n  \tprint(pre_list)\n  \tnew_list = [1]+ [ pre_list[j] + pre_list[j + 1] for j in range(len(pre_list) - 1)] + [1]\n  \tpre_list = new_list\n  ```\n\n## 第四部分 函数\n\n- 函数定义\n\n  - 函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段\n  - 函数能提高应用的模块性，和代码的重复利用率\n  - Python提供了许多内建函数，比如print()、type()、类型转换函数等等\n  - 用户也可以自己创建函数，这被叫做用户自定义函数（user difined function，简称UDF）\n\n- 函数结构\n\n  - 可选择性地使用return返回一个值给调用方，**不 return 相当于返回 None**\n  - **def** 是定义函数的关键字\n  - ![](python笔记/image-20230714204312252.png)\n\n- 定义函数，求圆的面积\n\n  ```python\n  PI = 3.14\n  # 求圆的面积\n  def circle_area(r):\n      S = PI * r * r\n      # 不写return默认返回空值\n      print(S)\n  if __name__ == '__main__':\n      s = circle_area(3)\n      print(s)\n  ```\n\n\n#### 函数参数\n\n##### 必选参数\n\n- 必须传参\n\n```python\n# 必选参数\ndef person_1(name, gender):\n    \"\"\"\n    :param name: 必选参数\n    :param gender: 必选参数\n    \"\"\"\n    pass\nperson('小王','男')\nperson(name='小王',gender='男')\nperson(gender='小王',name='男')\nperson(gender='小王','男')  # 错误写法\n```\n\n##### 默认参数\n\n- 传参时，可传可不传，不传使用默认值\n\n```python\n# 默认参数\ndef person_2(name, gender, clazz='01'):\n    \"\"\"\n    :param clazz: 默认参数，顺序赋值，如果不赋值，将按照默认值\n    \"\"\"\n    print(clazz)\n    pass\nperson_2(name, gender, clazz='02')\nperson_2(name, gender)\n```\n\n##### 可变参数\n\n- 可变参数，可以传入0到多个值，并以元组的形式存储\n\n```python\ndef person_3(name, gender, clazz='01', *args):\n    \"\"\"\n    :param args: 可变参数，可以传入0到多个值，并以元组的形式存储\n    \"\"\"\n    print(args)\nperson_3('小王','男','02',1,2,5,'6') # (1, 2, 5, '6')\n```\n\n##### 关键字参数\n\n- 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键\n\n```python\n# 关键字参数\ndef person_4(name, gender, clazz='01', *args,**kwargs):\n    \"\"\"\n    :param kwargs: 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键\n    \"\"\"\n    print(kwargs)\nperson_4('小王','男','02',1,2,5,'6',weight=180,high=150)  # {'weight': 180, 'high': 150}\n```\n\n##### 命名关键字参数\n\n- 命名关键字参数，跟在args后面的有名参数或者跟在*后面赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值、\n\n```python\n# 命名关键字参数\ndef person_5(name,gender,clazz='01',*args,weight=180,high,**kwargs):\n# def person_5(name,gender,clazz='01',*,weight=180,high):\n    \"\"\"\n    :param weight:  命名关键字参数，跟在*args后面的有名参数或者跟在*后面\n    :param high:    赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值\n    \"\"\"\n    print(clazz)  # 02\n    print(args)  # (1, 2, 5, '6')\n    print(weight)  # 190\n    print(high)  # 150\n    print(kwargs)  # {'city': '合肥', 'number': '12345'}\nperson_5('小王','男','02',1,2,5,'6',weight=190,high=150,city='合肥',number='12345')\n```\n\n##### 参数组合\n\n- 定义函数时，各参数的位置\n\n  - 先写必选参数,再写默认参数,再写可选参数,命名关键词参数,关键字参数\n\n  ```python\n  def person(gender, cardId, clazz=\"01\", *args, weight=181, height, **kwargs):\n  \tpass\n  ```\n\n#### 递归函数(Recursive Function)\n\n- 如果一个函数在内部调用自身本身，这个函数就是递归函数\n\n- 递归函数需要满足两个条件：\n  - 自己调用自己\n  - 有停止条件\n\n##### DeBug\n\n![](python笔记/image-20230715193157730.png)\n\n##### 求阶乘\n\n```python\n# 求阶乘\ndef factorial(n):\n    # 停止条件\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\nprint(factorial(10))\n```\n\n##### 求斐波拉契数列\n\n- 著名的斐波拉契数列（Fibonacci）\n\n  1, 1, 2, 3, 5, 8, 13, 21, 34, ... 除第一、二个数之外，后一个数等于前两个数之和\n\n```python\n# todo:斐波拉契数列\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return factorial(n-1) + factorial(n-2)\n```\n\n##### 汉诺塔（Hanoi）\n\n- ![](python笔记/image-20230715194720536.png)\n\n- 思路\n  - 把A柱子上面的n-1个盘子看成整体\n  - 第一步：这n-1个盘子由：A柱子-->C柱子-->B柱子\n  - 第二步：把A柱子剩余的1个大盘子由：A-->C\n  - 第三步：把B柱子的n-1个盘子由：B-->C\n\n```python\n# 汉诺塔\n# n是A柱子的盘子数\ndef hanoi(n, a, b, c):\n    if n == 1:\n        print(a + '-->' + c)\n    hanoi(n - 1, a, c, b)  # 把A柱子上面的n-1个盘子看成整体，第一步：这n-1个盘子由：A柱子-->C柱子-->B柱子\n    hanoi(1, a, b, c)      # 第二步：把A柱子剩余的1个大盘子由：A-->C\n    hanoi(n - 1, b, a, c)  # 第三步：把B柱子的n-1个盘子由：B-->C\n\"\"\"执行过程\nhanoi(3,'A','B','C') -> hanoi(2,'A','C','B') -> hanoi(1,'A','B','C') -> A-->C\n                                                hanoi(1,'A','C','B') -> A-->B\n                                                hanoi(1,'C','A','B') -> C-->B\n                     -> hanoi(1,'A','B','C') -> A-->C\n                     -> hanoi(2,'B','A','C') -> hanoi(1,'B','C','A') -> B-->A\n                                             -> hanoi(1,'B','A','C') -> B-->C\n                                             -> hanoi(1,'A','B','C') -> A-->C\n\"\"\"\n```\n\n## Python练习题 一\n\n**1、有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？**\n\n```python\ndef question1():\n    list_1 = [1, 2, 3, 4]\n    summ = 0\n    three_list = []\n    for i in list_1:\n        for j in list_1:\n            if i == j:  # 防止第一位与第二位重复，如果第一位与第二位重复，那么第三位就不需要循环了\n                continue\n            for k in list_1:\n                # if i != j and i != k and j != k\n                # \tthree_1 = str(i) + str(j) + str(k)\n                # \tthree_list.append(three_1)\n                if i == k or j == k:  # 防止第一位与第三位重复  防止第二位与第三位重复\n                    continue\n                three_1 = str(i) + str(j) + str(k)\n                three_list.append(three_1)\n    print(three_list)\n    print(len(three_list))\n```\n\n**2、企业发放的奖金根据利润提成**\n\n* 利润(I)低于或等于10万元时，奖金可提10%；\n\n* 利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；\n* 20万到40万之间时，高于20万元的部分，可提成5%；\n* 40万到60万之间时高于40万元的部分，可提成3%；\n* 60万到100万之间时，高于60万元的部分，可提成1.5%；\n* 高于100万元时，超过100万元的部分按1%提成；\n\n**从键盘输入当月利润I，求应发放奖金总数？**\n\n- **第一种**\n\n```python\ndef question2():\n    I = 3000000\n    reward = 0\n    if I <= 100000:\n        reward = I * 0.1\n    elif I <= 200000:\n        reward = 100000 * 0.1 + (I - 100000) * 0.075\n    elif I <= 400000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + (I - 200000) * 0.05\n    elif I <= 600000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + (I - 400000) * 0.03\n    elif I <= 1000000:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + 200000 * 0.03 + (I - 600000) * 0.015\n    else:\n        reward = 100000 * 0.1 + 100000 * 0.075 + 200000 * 0.05 + 200000 * 0.03 + 400000 * 0.015 + (I - 1000000) * 0.01\n    print(reward)\n```\n\n- **第二种**\n\n```python\n# 利用区间边界值匹配提成率\ndef question2_2(I):\n    reward = 0\n    money_edge = [0, 10, 20, 40, 60, 100, 10000000000]  # 最后一个表示无穷大，目的是取到超出100的值\n    percent = [0.1, 0.075, 0.05, 0.03, 0.015, 0.01]  # percent的值的位置与money中的区间对应\n\n    for i in range(1, len(money_edge)):\n        if I < money_edge[i]:  # 计算的是超出的部分\n            reward += (I - money_edge[i - 1]) * percent[i - 1]\n            break  # 找到值对应的区间，退出循环\n        else:  # 计算的是每超出的内部分对应的提成\n            reward += (money_edge[i] - money_edge[i - 1]) * percent[i - 1]\n    return reward\n```\n\n**3、10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？**\n\n```python\n# 3.10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？\n# 3.1%1=0.1  3%1=0 判断是否是整数\ndef question3():\n    import math\n    for i in range(10000):\n        m = i + 100\n        n = i + 268\n        # if int(math.pow(m, 0.5)) == math.pow(m, 0.5) and int(math.pow(n, 0.5)) == math.pow(n, 0.5):\n        if (m**0.5) % 1 == 0 and (n**0.5) % 1 == 0:\n            print(i)\n```\n\n**4、模拟用户登录，检测用户输入的用户名和密码**\n\n* 准备一个字典，保存用户名及对应的密码\n* 若用户名不存在，则提示'User Not Allowed'\n* 若用户名存在，但密码不正确，则提示'Authentication failure'\n* 若用户名和密码都正确，则登录成功，输出：xxx@localhost:~$\n* 当用户登录失败后可重试3次，每次重试需间隔5s钟，累计3次失败后，退出登录程序\n\n```python\n# 4.模拟用户登录，检测用户输入的用户名和密码\n\"\"\"\ndict_1 = {'user': '123', 'user2': '12345'}\nuser = 'user'\nprint(user in dict_1)\nprint(user in dict_1 != True)  # True \n问：为什么第二个print返回True\n答：在 Python 中，比较运算符 != 具有比成员运算符 in 更高的优先级，\n因此 user in dict_1 != True 的表达式会先进行 user in dict_1 的判断，然后再将结果与 True 进行比较。\n改：print((user in dict_1) != True)  # False \n\"\"\"\ndef question4():\n    import time\n    dict_1 = {'user': '123', 'user2': '12345'}\n    n = 0  # 计数\n    while True:\n        user = input('请输入用户名：')\n        password = input('请输入密码：')\n        if not (user in dict_1):  # 避免运算符优先级的影响 用括号括起来\n            print('User Not Allowed')\n        elif password != dict_1.get(user):\n            print('Authentication failure')\n        else:\n            print(user + '@localhost:~$')\n            break\n        n = n + 1\n        if n == 3:\n            break\n        time.sleep(5)\n```\n\n**5、有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？**\n\n- 第一种\n\n```python\n\"\"\"\n分析\n    月   兔子年龄    兔子对数    \n    1     1         1  \n    2     2         1\n    3     31        2\n    4     412       3\n    5     51231     5 \n    6     61231412  8\n\"\"\"\n# 根据上述分析，兔子对数是斐波拉契数列\ndef question5(month):\n    if month == 1 or month == 2:\n        return 1\n    return question5(month - 1) + question5(month - 2)\n```\n\n- 第二种\n\n```python\n# 但是上述解法太过理想\ndef question5_2(month):\n    rabbit_list = [{'age': 0}]  # 初始化第一对兔子\n    for i in range(month):\n        for rabbit in rabbit_list:\n            rabbit['age'] += 1\n            if rabbit['age'] >= 3:\n                rabbit_list.append({'age': 0})  # 生兔子\n    return len(rabbit_list)\n```\n\n## python练习题 二\n\n1、输入三个整数x,y,z，请把这三个数由小到大输出\n\n```python\n# 1、输入三个整数x,y,z，请把这三个数由小到大输出\ndef question1(x, y, z):\n    list_1 = []\n    list_1.append(x)\n    list_1.append(y)\n    list_1.append(z)\n    list_1.sort()\n    print(list_1)\n \n# 最基本的排序方式，比较排序\ndef question1_2(x, y, z):\n    if x > y:\n        if y > z:\n            print(z, y, x)\n        else:  # y < z\n            if x > z:\n                print(y, z, x, )\n            else:  # x < z\n                print(y, x, z)\n    else:  # x < y\n        if y < z:\n            print(x, y, z)\n        else:  # y > z\n            if x > z:\n                print(z, x, y)\n            else:  # x < z\n                print(z, x, y)\n# 冒泡排序\ndef question1_3(x,y,z):\n    list_a = [x,y,z]\n    flag = 1\n    for i in range(len(list_a)-1):\n        for j in range(len(list_a)-1-i):\n            if list_a[j] > list_a[j+1]:\n                list_a[j],list_a[j+1] = list_a[j+1],list_a[j]\n                flag = 0\n        if flag:\n            break\n    print(list_a)\n```\n\n2、输入某年某月某日，判断这一天是这一年的第几天\n\n- datetime模块的应用\n\n```python\n# 2.输入某年某月某日，判断这一天是这一年的第几天\nimport datetime\ndef question2(year, month, day):\n    # 创建日期对象\n    date = datetime.date(year, month, day)\n    # timetuple().tm_yday获取日期对象在年份中的第几天\n    y_day = date.timetuple().tm_yday\n    print(y_day)\n# 面向过程\ndef question2_2(year, month, day):\n    # 首先判断日期是否合法\n    if year < 0 or (month > 12 or month < 0) or (day > 31 or day < 0):\n        print(\"日期不合法！！！\")\n        return\n    # 判断是否是闰年\n    # 能被4整除，但是不能被100整除\n    # 能被400整除\n    month_31day = [1, 3, 5, 7, 8, 10, 12]\n    month_30day = [4, 6, 9, 11]\n    ydays = 0\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400) == 0:\n        if (month == 2 and day > 29) or ((month not in month_30day) and day > 30):\n            print(\"日期不合法\")\n            return\n        for i in range(1, month):\n            if i in month_31day:\n                ydays += 31\n            elif i == 2:\n                ydays += 29\n            else:\n                ydays += 30\n        ydays += day\n    else:\n        for i in range(1, month):\n            if i in month_31day:\n                ydays += 31\n            elif i == 2:\n                ydays += 28\n            else:\n                ydays += 30\n        ydays += day\n    print(ydays)\n# datetime的应用\ndef question2_3():\n    time = \"2020年7月12日\"\n    date = datetime.datetime.strptime(time, \"%Y年%m月%d日\")  # strptime：字符串解析为datetime\n    print(date)\n    y = date.year\n    m = date.month\n    d = date.day\n\n    str_time = datetime.datetime.strftime(date, \"%Y/%m/%d\")  # strftime：字符串格式化datetime，也就是datetime转为字符串\n    print(str_time)\n\n    print(date.timetuple().tm_yday)  # 求一年当中的第几天\n\n    # question2_2优化\n    month_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    day_list_r = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # 对应闰年\n    day_list_p = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # 对应平年\n    yday = 0\n    for i in range(m - 1):  # 0,1,2,3,4,5\n        yday += day_list_r[i]\n    yday += d\n    print(yday)\n\n    # 再优化\n    yday = sum(day_list_r[0:m - 1])\n    yday += d\n    print(yday)\n```\n\n3、有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和\n\n```python\n# 3.有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和\ndef m(k):  # 分母  注意要给出前两项的返回值，不然m(2-2)=m(0)=报错\n    if k == 1:\n        return 2\n    if k == 2:\n        return 3\n    return m(k - 1) + m(k - 2)\ndef n(k):  # 分子\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    return n(k - 1) + n(k - 2)\ndef question3(k):\n    summ = 0\n    for i in range(1, k + 1):\n        summ += m(i) / n(i)\n    print(summ)\n# 二维数组求解问题三\n\"\"\"\n2/1,3/2,5/3,8/5,13/8,21/13\n\"\"\"\ndef question3_2(n):\n    list_a = [[2, 4]]\n    summ = 0\n    for i in range(n):\n        summ += list_a[i][0] / list_a[i][1]\n        list_a.append([list_a[i][0]+list_a[i][1],list_a[i][0]])\n    print(summ)\n\n# 一个一维数组求解问题三\n\"\"\"\n1 2 3 5\n2/1,3/2,5/3,8/5,13/8,21/13\n2 4 6 8\n2/4,6/2,8/6,14/8\n\"\"\"\n# 本方法只适用：分子大于分母，不适用：2/4,6/2,8/6\ndef question3_3(n):\n    list_a = [2,3]\n    summ = list_a[1]/list_a[0]  # 加第一项\n    print(f'{list_a[1]}/{list_a[0]}')  # 第一项\n    for i in range(2,n+1):\n        list_a.append(list_a[i-1]+list_a[i-2])\n        summ += list_a[i]/list_a[i-1]  # 加第i项\n        print(f'{list_a[i]}/{list_a[i-1]}')  # 第i项\n    print(summ)\n# question3_3(3)\n# 两个一维数组求解问题三\ndef question3_4(n):\n    list_a = [2]  # 分子\n    list_b = [1]  # 分母\n    summ = 0\n    for i in range(n):\n        summ += list_a[i] / list_b[i]  # 第i+1项\n        list_a.append(list_a[i]+list_b[i])\n        list_b.append(list_a[i])\n    # print(list_a)  # 最后list_a和list_b中的元素会比 summ的累加项 多一项\n    # print(list_b)\n    print(summ)\n```\n\n4、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高\n\n```python\n\"\"\"分析\n次数    反弹高度     经历高度\n1       50         100\n2       25         100+50*2\n3       25/2      100+50*2+25*2\n4       25/4      100+50*2+25*2+25/2*2\n\"\"\"\ndef question4(n):\n    height = 50        # 初始化第一次反弹高度\n    sum_height = 100  # 初始化第一次落地经历高度\n    for i in range(n-1):\n        sum_height += height*2\n        height /= 2\n    print(sum_height)\n    print(height)\n    \n# 递归求反弹高度\n\"\"\"初始高度100\n反弹次数 反弹高度\n1       50\n2       25\n\"\"\"\ndef question4_2(n):\n    if n == 1:\n        return 50\n    return question4_2(n - 1) / 2\n    # 两种方式\n    # if n==0:\n    #     return 100\n    # return question4_2(n-1)/2\n# print(question4_2(2))\n```\n\n5、有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大\n\n```python\n\"\"\"分析\n1      10\n2      age(1)+2\n3      age(2)+2\n4      age(2)+2\n5      age(4)+2\n\"\"\"\ndef question5(n):\n    if n == 1:\n        return 10\n    return question5(n-1)+2\nprint(question5(5))\n```\n\n6、猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少\n\n```python\n\"\"\"\n天数 剩余桃子数\n1   n/2-1 \n2   (n/2 - 1)/2-1\n3   ((n/2 - 1)/2-1)/2-1\n4   (((n/2 - 1)/2-1)/2-1)/2-1   n(d-1)=(n(d)+1)*2   \n.\n.\n.   \n10  1\nn(d-1)=(n(d)+1)*2\nn(d)=(n(d+1)+1)*2\n\"\"\"\ndef question6():\n    peach = 1  # 第十天剩下的桃子数量\n    for i in range(9,0,-1):\n        peach = (peach+1)*2\n    print(peach)\n# 也可以递归写\ndef question6_2(day):\n    if day == 10:\n        return 1\n    return (question6_2(day+1)+1)*2\nprint(question6_2(1))\n```\n\n# 二、python进阶\n\n## 第一部分 面向对象\n\n- 面向对象编程OOP——Object Oriented Programming，是一种程序设计思想\n\n- 面向对象的三大特点：封装、继承、多态\n\n- 多态：父类的引用指向子类的对象\n\n### 1、类（class）\n\n- 类的定义\n  - ![](python笔记/image-20230717203553391.png)\n\n- 类的实例化\n  - 类的实例化会调用初始化方法  init()方法，传入的实参也都会传到 init()方法中\n- 类的方法和属性的调用\n  - 在类里面通过  self.  的方式调用方法和属性\n  - 在类外面通过 实例对象. 的方式调用方法和属性\n- 定义在函数体外的属性（如chinese_name），被认为是默认属性，可以通过 self. 的方式再次赋值\n- **self 传入的是实例对象stu1**，self. 参数名=值  的方式赋值的参数都可以上述方式调用\n- 重载：python中没有这种实现方式，会默认调用后面出现的同名方法，如果不传入后面方法对应的参数就会报错\n- 重写：重写父类已有的方法，在此基础上获得新功能\n  - 重写object类中的__str__方法，自定义打印实列输出的内容\n- 从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“**封装**”起来了，调用很容易，但却不用知道内部实现的细节\n\n```python\nclass Student(object):  # 默认继承object类（所有类的父类）\n    \n    # 直接被添加到self里面\n    chinese_name = '小王'  # 默认属性值，在类里面通过 self. 的方式调用，在类外面通过 实例对象. 的方式调用\n\n    def __init__(self, name, score, chinese_name):  # 构造方法，实例化时调用\n        self.name = name  # 通过init方法被添加到self里面的\n        self.score = score\n        self.chinese_name = chinese_name  # 可以通过init方法传入参数，修改默认的属性值\n        # self.print_score()\n\n    def print_score(self):  # 打印学生成绩\n        print(f'{self.name}的成绩{self.score}')\n        print(f'中文名为：{self.chinese_name}')\n        print(self)  # self是类自己，等同于类外的 stu1\n\n    # 重载（python中没有这种实现方式，会默认调用后面出现的方法，如果不传入后面方法对应的参数就会报错）\n    def print_score(self,value):  # 打印学生成绩\n        print(f\"{value} 不传参，就报错\")\n\n    # 重写：object类中的__str__方法，自定义打印实列输出的内容\n    def __str__(self):\n        return self.name\n\n\n\"\"\"\nself 传入的是实例对象stu1\nself是类的实例对象自己，等同于类外的 stu1\n在类中是通过 self. 的方式调用类的属性和方法\n在类外是通过 实例化对象. 的方式调用类的属性和方法\n\"\"\"\n\nstu1 = Student('Jack', 99, '小刘')  # Student类的实例化\nprint(stu1.name)\nprint(stu1.chinese_name)\nprint(stu1)  # 默认打印内存地址\nstu1.print_score(250)\n```\n\n### 2、私有方法和属性\n\n- 要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，只有内部可以访问，外部不能访问\n  - 强制访问私有变量方法一\n    - stu1._Student__secret\n  - 强制访问私有变量方法二\n    - 类的内部可以访问私有变量\n    - 通过getter方法，返回私有变量的值\n- 一般约定俗成的是 变量，_方法名 是私有的 不要随意访问和修改\n\n```python\nclass Student:\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        # __开头的变量为私有变量，不能被外部的实例化对象访问，但是可以强制访问或在类内访问\n        self.__secret = \"This is a secret!\"\n\n    def study(self):\n        print(f\"{self.name}每天都学习\")\n\n    # __开头的方法为私有方法，外部实例对象不能访问\n    def __play_game(self):\n        print(f\"{self.name}今年{self.age}天天去网吧打游戏\")\n\n    def getter_secret(self):\n        return self.__secret  # 类内访问私有变量\n\n\nif __name__ == '__main__':\n    stu1 = Student('Jack', '15')\n    # 强制访问私有变量方法1\n    print(stu1._Student__secret)\n    # 强制访问 私有变量访问2：通过类中的getter方法\n    print(stu1.getter_secret())\n```\n\n### 3、兔子问题\n\n- 使用类的思想实现：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n\n```python\nclass Rabbit:\n\n    def __init__(self):\n        self.age = 0\n\n    def growth(self):\n        self.age += 1\ndef question5(month):\n    total = [Rabbit()]\n    for i in range(month):\n        for rabbit in total:\n            rabbit.growth()\n            if rabbit.age >= 3:\n                total.append(Rabbit())\n    print(len(total))\n\n\nif __name__ == '__main__':\n    question5(10)\n```\n\n### 4、猴子补丁（Monkey patch）\n\n- 猴子补丁是对Python中模块和类可以在外部被动态修改这种特性的一个比喻 \n\n  将对类中没有的方法和属性进行赋值后，就可以调用，破坏了代码的封装性，造成了python代码的不安全\n\n- 在模块和类的外部对模块和类进行修改是一种非常耍赖的做法，会破坏代码的封装结构，这种事情大概只有淘气的猴子喜欢去做，因此形象地称之为猴子补丁\n\n```python\n# 定义一个Dog类\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def sleep(self):\n        print(\"Zzz... Zzz... Zzz...\")\n# Dog类外的方法\ndef speak(self):\n    print(\"wang wang wang\")\n\n# 对Python中模块和类可以在外部被动态修改\nDog.speak = speak  # 猴子补丁\nDog.home = \"Earth\"  # 猴子补丁\nspike = Dog('spike', 12)\nspike.home = \"HeFei\"\nspike.sleep()\nspike.speak()\nprint(spike.home)\n```\n\n### 5、继承\n\n```python\n# 抽取学生类和教室类的共同特征，抽象为一个Person类\nclass Person:\n\n    def __init__(self,id_card,name,age,gender):\n        self.id_card = id_card\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def eat(self):\n        print(\"吃饭\")\n    def sleep(self):\n        print(\"睡觉\")\n\n    def interest(self):\n        print(\"喜欢玩游戏\")\n\nclass Student(Person):  # 继承Person类\n\n    def __init__(self,id_card,name,age,gender,clazz,sid):\n        super().__init__(id_card,name,age,gender)  # 调用父类的初始化方法对共性内容初始化\n        self.clazz = clazz\n        self.sid = sid\n\n    # 重写了父类的interest方法\n    def interest(self):\n        print(\"学生喜欢写试卷\")\n\nclass Teacher(Person):  # 继承Person类\n    def __init__(self,id_card,name,age,gender,office,tid):\n        super().__init__(id_card,name,age,gender)\n        self.office = office\n        self.tid = tid\n\n    # 重写了父类的interest方法\n    def interest(self):\n        print(\"老师喜欢讲知识\")\n\nif __name__ == '__main__':\n    stu1 = Student('341281','小王','18','男','一班','010017')\n    stu1.eat()\n    stu1.sleep()\n    stu1.interest()\n    print(\"=\"*20)\n    tea1 = Teacher('341281','刘老师','38','男','3号办公室','30018')\n    tea1.eat()\n    tea1.sleep()\n    tea1.interest()\n```\n\n### 6、多态\n\n- 多态：父类的引用指向子类的对象\n  - Animal animal = new Dog()\n\n```python\n# Description: 多态：父类的引用指向子类的对象\n\nclass Animal:\n    def run(self):\n        print(\"animal is running\")\n\n\nclass Dog(Animal):\n    def run(self):\n        print(\"Dog is running and baking\")\n\n\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running and jumping\")\n\n\ndef animal_run(animal: Animal):\n    animal.run()\n\n# 父类的引用指向子类的对象\n\nif __name__ == '__main__':\n    animal_run(Dog)  # Animal animal = new Dog()\n    animal_run(Cat)\n```\n\n### 7、鸭子类型\n\n- 鸭子类型，因为python的数据类型是动态的，没有严格类型检查，所以Goose这个类具有和Duck这个类相同的方法，duck_show这个函数也可以对ee进行作用，故Python其数据类型属于鸭子类型\n\n```python\nclass Duck:\n    def __init__(self,name):\n        self.name = name\n    def swim(self):\n        print(f\"A duck named {self.name} is swimming\")\n    def call(self):\n        print(\"ga ga ga ...\")\nclass Goose:\n    def __init__(self,name):\n        self.name = name\n    def swim(self):\n        print(f\"A goose named {self.name} is swimming\")\n    def call(self):\n        print(\"goo goo goo ...\")\n\ndef duck_show(duck:Duck):\n    duck.swim()\n    duck.call()\nif __name__ == '__main__':\n    duck = Duck(\"丑小鸭\")\n    duck_show(duck)\n    goose = Goose(\"白天鹅\")\n    duck_show(goose)\n```\n\n## 第二部分 异常处理\n\n### 1、基本异常类型\n\n- ![](python笔记/image-20230718201445587.png)\n\n##### keyboardInterrupt\n\n- 终止此代码后会抛出异常keyboardInterrupt\n  - ![](python笔记/image-20230718202052338.png)\n\n```python\nwhile True:\n    print(1)\n```\n\n##### SyntaxError\n\n- 语法异常\n\n```python\nfor i in range(10)\n    print(i)\n```\n\n##### ZeroDivisionError\n\n- 除数为0异常\n\n```python\n# ZeroDivisionError\nsum_1 = 100\nn = 10\nwhile n >= 0:\n    sum_1 /= n\n    n -= 1\n```\n\n##### NameError\n\n- 命名异常，一般是变量没有赋值就被引用\n\n```python\n# NameError\na\n```\n\n##### TypeError\n\n- 类型错误，下面为int和str相加报错\n\n```python\n# TypeError\nprint(1 + \"a\")\n```\n\n##### ValueError\n\n- 值错误\n\n```python\n# ValueError\nprint(int(\"a\"))\n```\n\n##### IndexError\n\n- 索引异常，一般为索引越界异常\n\n```python\n# IndexError\ntuple = (1,2,3,4,5)\nprint(tuple[-6])\n```\n\n##### AttributeError\n\n- 属性异常，一般是调用不存在的方法或变量\n\n```python\n# AttributeError\ntuple_1 = (1, 2, 3, 4, 5)\ntuple_1.append(0)\nclass Cat:\n    pass\ntom = Cat()\ntom.run()\n```\n\n### 2、捕获和抛出异常\n\n##### 忽略警告\n\n```python\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n##### 捕获异常\n\n- ![](python笔记/image-20230718202931072.png)\n- 发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行\n\n```python\n#发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行\nsum_1 = 100\nn = 10\ntry:\n    while n >= 0:\n        sum_1 /= n\n        n -= 1\n        print(sum_1)\nexcept Exception as e:\n    print(e)\nelse:\n    print('没有异常会执行的代码')\nfinally:\n    print(\"有没有异常都会执行的代码\")\nprint('try/except代码块外的代码')\n```\n\n- try/except不会引入新的作用域，只不过没有异常的时候，except中的代码块就不会执行\n  - 如果没有异常在这里尝试访问 error_message 变量会引发 NameError\n\n```python\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    error_message_0 = \"除数不能为零\"\n    print(error_message_0)\nprint(error_message_0)  # 除数不能为零，\n# 如果没有异常在这里尝试访问 error_message 变量会引发 NameError\n```\n\n- try代码块中，发生异常的代码的上方变量还是可以引用的\n  - result = x/y  # 如果该段代码有异常，result 变量就不被定义\n\n```python\ntry:\n    x = 10\n    y = 0\n    result = x/y  # 如果该段代码有异常，该变量就不被定义\n    u = 100   # 上面代码有异常，try中下面的代码就不会执行\nexcept ZeroDivisionError as z:\n    print(z)\nprint(x)  # 10\nprint(y)  # 1\nprint(u)\n#尝试访问 error_message 变量会引发 NameError\n```\n\n- 如果数值加法中，有字符串可以把其转为ASCii码值再进行加\n\n```python\n# 如果数值加法中，有字符串可以把其转为ASCii码值再进行加\nlist_a = [1,2,3,4,\"a\",\"b\"]\ntry:\n    for i in list_a:\n        operand = i + 5\n        print(f\"操作数为{operand}\")\nexcept Exception as e:\n    print(\"Exception 错误\",e)\n    operand = ord(i) + 5\n    print(f\"操作数为{i}，数值为{operand}\")\n```\n\n##### 抛出异常\n\n- 抛出异常会终止程序\n\n```python\n# 抛出异常\nx = 10\nif x > 5:\n    raise Exception(f\"x不能大于5，x的值为{x}\")  # Exception: x不能大于5，x的值为10\n```\n\n### 3、自定义异常\n\n- 自定义异常的原因\n  - Python提供的内建异常不够用 \n  - 可以预估某个错误的产生 \n- 定义异常类\n  - 异常类继承自 Exception 类，可以直接继承，或者间接继承\n\n```python\n# 直接继承\nclass AgeError(Exception):\n    pass\n\n# 间接继承\nclass AgeErrorSub(AgeError):\n    pass\nage = -1\nif age < 0:\n    # raise AgeError(f\"年龄异常，年龄为{age}\")  # __main__.AgeError: 年龄异常，年龄为-1\n    raise AgeErrorSub(f\"年龄异常，年龄为{age}\")  # __main__.AgeErrorSub: 年龄异常，年龄为-1\n```\n\n## 第三部分 文件读写\n\n#### 文件打开\n\n- with open语句的好处：无论文件操作是否有异常都会执行.close操作，\n\n  关闭文件读写，防止阻塞，和try...finally: .close 一个作用\n\n```python\nopen(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\")\n```\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:\n\tpass\n```\n\n- ValueError: must have exactly one of create/read/write/append mode\n\n  - 上述错误表示：x/r/w/a这四个模式不能同时出现\n\n- 'w' open for writing, truncating（清空） the file first\n\n  - 会清空原有文件的内容，然后再写\n\n  \n\n#### 读文件\n\n##### read()\n\n- 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）\n  对于同一个文件对象，后面的read方法会接着上一个read方法 继续读\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    # read()\n    # 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）\n    # 对于同一个文件对象，后面的read方法会接着上一个read方法继续读\n     print(fp.read(10))\n     print(\"=\"*20)\n     print(fp.read(10))\n     print(\"=\"*20)\n     print(fp.read(10))\n```\n\n##### readline()\n\n- 默认读取一行，传入整型参数代表读的字符的个数，\n\n  如果这一行只有一个字符那就会读出一个字符并不会往后读\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    # readline()\n    # 默认读取一行，传入整型参数代表读的字符的个数，如果这一行只有一个字符那就会读出一个字符并不会往后读\n    print(fp.readline(10))\n    print(\"=\"*20)\n    print(fp.readline(10))\n    print(\"=\"*20)\n    print(fp.readline(10))\n```\n\n##### readlines()\n\n- 默认全部行，并返回一个列表，元素为每一行\n  传入整型参数，只会读取一行的全部内容，并返会一个列表\n\n```python\nwith open(\"../data/data_student.txt\", \"r\", encoding=\"utf-8\") as fp:\n    print(fp.readlines(10))\n    print(fp.readlines(10))\n    print(fp.readlines(10))\n```\n\n#### 写文件\n\n##### write()\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:\n    # write()\n    fp.write(\"006,dbh,22,male\\n\")\n    fp.write(\"007,dl,21,male\")\n```\n\n##### writelines()\n\n- 传入可以迭代的参数\n\n```python\nwith open(\"../data/data_student.txt\", \"w\", encoding=\"utf-8\") as fp:    \n    # writelines()\n    # 传入可以迭代的参数\n    fp.writelines([\"006,dbh,22,male\\n\", \"007,dl,21,male\"])\n    fp.writelines(\"006,dbh,22,male\\n\")\n```\n\n## 第四部分 正则表达式\n\n### 1、正则表达式中的元字符\n\n- `.` **匹配任何字符，但不包括换行符。**\n- `[\\s\\S]`  **匹配任何字符，包括换行符和空白字符。**\n\n```python\n\"\"\" 正则表达式中的元字符\n\\d \t\t 可以匹配一个数字 \t\t\t\t\t  等价于[0-9] \n\\D(大写)  可以匹配一个非数字 \t\t\t\t\t 等价于[^0-9] \n\\d\\d \t 可以匹配两个数字 \n\\w \t\t 可以匹配一个数字或字母或下划线                 等价于[A-Za-z0-9_] \n\\W(大写) \t可以匹配一个非数字非字母非下划线的符号          等价于[^A-Za-z0-9_]\n\\w\\w \t 可以 匹配 00 或者 0a等\n. \t\t 可以匹配任意字符，特殊字符除外如:\\n\n\\s \t\t 可以匹配空白字符 如：一个空格或\\n或\\r等   等价于[\\f\\n\\r\\v]  \n\\S(大写)\t可以匹配一个非空白字符 \t\t\t\t等价于[^\\f\\n\\r\\v]\n\"\"\"\n```\n\n### 2、匹配长字符\n\n```python\n\"\"\" 匹配长字符\n*代表0-无穷个字符\n+代表1-无穷个字符\n?代表0-1个字符\n{n,m}代表n-m个字符 （左闭右闭）\n\\d{3}-\\d{3,8} 可以匹配001-123或001-12345等\n^表示行的开头，^\\d表示必须以数字开头\n$表示行的结束，\\d$表示必须以数字结束\n\"\"\"\n```\n\n### 3、match方法\n\n- 匹配到了返回Match对象\n- 匹配不到返回None\n\n```python\nstr_a = \"001-12345\"\nmatch = re.match(r\"\\d{3}-\\d{3,8}\", str_a)\nprint(match)\n```\n\n- match结合if结构进行判断\n\n```python\nif match:  # 匹配成功\n    print(\"ok\")\nelse:  # 匹配失败\n    print(\"failed\")\n```\n\n### 4、re.split()切分字符串\n\n```python\n\"\"\"切分字符串\n\"\"\"\nstr_a = \"a,b;; c  d\"\nsplits = re.split(r\"\\W+\", str_a)  # 匹配0-n个非数字非字母符号作为切分符\nprint(splits)\n```\n\n### 5、group分组提取\n\n- 通过() 提取匹配到的内容\n\n  group(0) 代表匹配到的字符串\n  group(1) 代表提取出的第一个子字符串\n  group(2) 代表提取出的第二个子字符串\n  groups() 将所有提取的字符串串存储到元组中\n\n```python\nstr_a = \"001-12345\"\nmatch = re.match(r\"(\\d{3})-(\\d{3,8})\", str_a)\nprint(match.group(0))\nprint(match.group(1))\nprint(match.group(2))\nprint(match.groups())\n```\n\n### 6、匹配时间19:05:30\n\n- 注意时间的格式和规则：\n  h : 00-23\n  m : 00-59\n  s : 00-59\n\n```python\nstr_a = \"19:05:30\"\nmatch = re.match(r\"([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)\", str_a)\nprint(match.group(1))\nprint(match.group(2))\nprint(match.group(3))\n```\n\n### 7、(?P< name > ) 变量赋值\n\n- 将提取到的数据赋值给name变量\n  再利用group(\"name\")提取\n\n```python\nid_card = \"20051001\"\nre_pattern = re.compile(r\"(?P<year>[1-2]\\d{3})(?P<month>[0][1-9]|[1][0-2])(?P<day>[0][1-9]|[1-2][0-9])\")\n# 提取 年 月 日\nmatch = re_pattern.match(id_card)\nprint(match.group(\"year\"))\nprint(match.group(\"month\"))\nprint(match.group(\"day\"))\n```\n\n### 8、贪婪匹配\n\n- 正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符\n  \\d+则是贪婪匹配\n  \\d+?则是非贪婪匹配\n\n```python\nmatch = re.match(r'(\\d+)(0*)', '102300')\nprint(match.groups())\n\nmatch = re.match(r'^(\\d+?)(0*)$', '102300')  # 加上$符才会匹配到尾部的0，否则只会停在第一个0\nprint(match.groups())\n```\n\n### 9、.  .*  .*? 的区别\n\n```python\na = 'xxIxxjshdxxlovexxsffaxxpythonxx'\ninfos1 = re.findall('xx(.)xx', a)\nprint(infos1)\ninfos2 = re.findall('xx(.*)xx', a)\nprint(infos2)\ninfos3 = re.findall('xx(.*?)xx', a)\nprint(infos3)\n```\n\n### 10、re.match和re.search的区别\n\n- re.match(pattern, string)：\n  - re.match 只从字符串的 ***开头开始匹配***，如果字符串的开头符合正则表达式的模式，则返回匹配对象；如果字符串开头不匹配，则返回 None。\n    适合用于检查字符串的开头是否符合某种模式。\n- re.search(pattern, string)：\n  - re.search 在 ***整个字符串中搜索*** ，只要找到第一个匹配的子串，就返回匹配对象；如果没有找到匹配的子串，则返回 None。\n    适合用于在整个字符串中查找某种模式的出现。\n\n```python\nstr_a = \"a12345\"\nmatch = re.match(r\"\\d+\", str_a)\nprint(match)  # 返回None\nsearch = re.search(r\"\\d+\", str_a)\nprint(search)  # 返回Search对象\n```\n\n### 11、预编译\n\n- re.compile(正则表达式)\n  便于修改正则表达式\n\n```python\nstr_a = \"19:05:30\"\nre_pattern = re.compile(r\"([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)\")\nmatch = re_pattern.match(str_a)\nprint(match.groups())\n```\n\n## 第五部分 爬虫\n\n- 爬虫是一种模仿浏览器上网过程的一种程序，可以获取一些网页的数据\n\n### 1、URL\n\n- 统一资源定位符  uniform resource locator\n\n### ![](python笔记/LjTR2tNPAO81cnU.png)\n\n```\nhttp: 超文本传输协议  HyperText Transfer Protocol  默认端口 80\nhttps: 安全的超文本传输协议  security               默认端口 443\nwww.example.com  域名\n80  端口 port\n/path/to/myfile.html 资源路径\n?key1=value1&key2=value2  参数 & 表示多个参数的拼接\n# 锚点\n```\n\n### 2、准备\n\n- 安装requests包\n\n```python\npip install requests\n```\n\n- pip 换源\n  -  改写该文件内容 `C:\\Users\\dongjiaxin\\AppData\\Roaming\\pip\\pip.ini`\n\n```python\npip config set global.index-url http://pypi.douban.com/simple/\npip config set install.trusted-host pypi.douban.com\n```\n\n- User-Agent： 身份标识  表示你是哪个浏览器\n\n- status_code：状态码\n\n  - 200 OK：请求成功，服务器成功返回请求的数据。\n  - 201 Created：请求成功，服务器成功创建了新的资源。\n  - 204 No Content：请求成功，服务器成功处理了请求，但没有返回任何内容。\n  - 400 Bad Request：客户端请求错误，服务器无法理解请求。\n  - 401 Unauthorized：请求要求用户认证，用户没有提供有效的认证信息。\n  - 403 Forbidden：服务器拒绝请求，通常是因为没有足够的权限。\n  - 404 Not Found：请求的资源不存在。\n  - 500 Internal Server Error：服务器内部错误，无法完成请求。\n\n- 使用随机生成的user-agnet\n\n  - 下载包\n\n  ```\n  pip install fake_useragent\n  ```\n\n  - 代码\n\n  ```python\n  from fake_useragent import UserAgnet\n  headers = {\n          'User-Agent': UserAgent().random\n    py  }\n  ```\n\n#### 获取百度网页源码\n\n```python\n# Description:  获取百度搜索源代码\n\nimport requests\n\nif __name__ == '__main__':\n    url = \"https://www.baidu.com\"\n    header = {\n        \"User-agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82\"\n    }\n\n    response = requests.get(url, headers=header)\n    response.encoding = \"utf-8\"  # 修改编码形式，防止中文乱码\n    # print(response.content)  # 网页代码二进制\n    # print(response.text)  # 网页代码文本\n    print(response.status_code)  # 状态码\n```\n\n#### 使用 http://httpbin.org/get 网站测试get请求\n\n```python\n# Description: 使用 http://httpbin.org/get 网站测试get请求\nimport requests\nif __name__ == '__main__':\n\n    url = \"http://httpbin.org/get\"\n\n    response = requests.get(url)\n\n    print(response.text)\n```\n\n### 3、豆瓣top250\n\n- **可以把获取的html保存到本地，然后用浏览器打开，查看是否正确**\n\n### 4、Xpath解析（静态页面）\n\n- XPath 是一种用于在 XML 和 HTML 文档中定位和选择节点的查询语言。可以帮助开发者轻松地从 XML 和 HTML 数据中提取、过滤和处理所需的信息，是数据解析和处理中的重要工具之一。\n\n- 下载相关包\n\n  - ```python\n    pip install lxml\n    ```\n\n- 导入相关包\n\n  - ```python\n    from lxml import etree\n    ```\n\n- 两种创建解析对象的方式\n\n  - 解析本地html\n\n    - ```python\n      html = etree.parse(本地文件路径)\n      ```\n\n  - 解析爬取下来的html\n\n    - ```python\n      response = requests.get(url)\n      html = etree.HTML(response.text)\n      ```\n\n#### Xpath相关语法\n\n  - .xpath()，获取所有符号规则的内容，并返回一个列表\n\n  - **.xpath() 返回的元素对象，还可以继续进行xpath解析**\n\n  - ```python\n    /\t表示从根节点选取\n    //\t从当前节点选取子孙节点\n    .\t选取当前节点\n    ./\t表示从当前节点\n    ..\t选取当前节点的父节点\n    @\t选取属性\n    ```\n\n##### 基本语法\n\n- ```python\n  \"\"\"\n  <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n  <html><body><div>&#13;\n      <ul>&#13;\n          <li class=\"item-0\"><a href=\"link1.html\">first item</a></li>&#13;\n          <li class=\"item-1\"><a href=\"link2.html\">second item</a></li>&#13;\n          <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li>&#13;\n          <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li>&#13;\n          <li class=\"item-0\"><a href=\"link5.html\">fifth item</a>&#13;\n  </li></ul>&#13;\n  </div></body></html>\n  \"\"\"\n  html = etree.parse('./test.html', etree.HTMLParser())\n  result = etree.tostring(html).decode('utf-8')\n  # 基本语法\n  result = html.xpath('.')  # .获取当前节点 html\n  result = html.xpath('..')  # .. 获取当前节点的父节点 空\n  result = html.xpath('./body')  # 选取子节点\n  result = html.xpath('//div')  # 选取所有的子孙节点div\n  result = html.xpath('//body')  # 选取子孙节点body\n  result = html.xpath('//*')  # //* 选取所有节点\n  result = html.xpath('//li')  # //li 获取所有的li节点\n  result = html.xpath('//li/a')  # //li/a 获取li节点的所有的子节点a\n  result = html.xpath('//ul/a')  # //ul/a 无返回结果，因为ul的子节点不是a\n  result = html.xpath('//ul//a')  # //ul//a 获取ul的所有孙子节点a\n  result = html.xpath('/html/body/div')  # 逐层定位body的所有的div子节点\n  result = html.xpath('//div')  # 定位到所有的div节点\n  ```\n\n##### 获取父节点\n\n- 获取a父节点li的class属性值\n\n- ```\n  result = html.xpath('//a[@href=\"link5.html\"]/../@class') \n  ```\n\n##### 索引定位\n\n- ```\n  result = html.xpath('//li[1]')  # 定位到第一个li节点\n  ```\n\n##### 属性定位\n\n- 定位class属性值为[\"item-0\"]的li节点\n\n- ```python\n  result = html.xpath('//li[@class=\"item-0\"]') \n  ```\n\n##### 属性获取\n\n- 获取li节点下所有字节点a的href属性值\n\n- ```python\n  result = html.xpath('//li/a/@href')  # \n  ```\n\n##### 文本获取\n\n- 通过 /text()方法获取指定节点中的文本\n\n  - ```python\n    result = html.xpath('//li[@class=\"item-0\"]/a/text()') \n    ```\n\n- 通过 //text()获取所有指定节点的所有子节点的文本，包括节点本身的文本（包含缩进换行等字符）\n\n  - ```python\n    result = html.xpath('//li[@class=\"item-0\"]//text()')  \n    ```\n\n##### 属性多值匹配\n\n- 使用**contains函数**进行属性多值匹配\n\n- 这里的li节点的class属性有两个属性值li、li-first\n\n- ```python\n  text = '''\n  <li class=\"li li-first\"><a href=\"https://ask.hellobi.com/link.html\">first item</a></li>\n  '''\n  html = etree.HTML(text)\n  result = html.xpath('//li[contains(@class, \"li\")]/a/text()') \n  ```\n\n##### 多属性匹配\n\n- 通过 and 连接class属性和name属性\n\n- ```python\n  text = '''\n  <li class=\"li li-first\" name=\"item\"><a href=\"https://ask.hellobi.com/link.html\">first item</a></li>\n  '''\n  html = etree.HTML(text)\n  result = html.xpath('//li[contains(@class,\"li\") and @name=\"item\"]/a/text()')  \n  ```\n\n### 5、数据格式\n\n- 查看网页包文件中，响应标头中的Content-Type\n- ![](python笔记/image-20230723143523063.png)\n- ![](python笔记/image-20230723143638690.png)\n- ![](python笔记/image-20230723144731031.png)\n\n#### 5.1 text\n\n- 使用.text方法接收，接收的是网页的html\n\n```python\nresponse = requests.get(url, headers=headers)\nhtml = response.text\n```\n\n#### 5.2 json\n\n- 使用.json()方法接收，接收json字符串，并返回一个dict\n\n```python\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n```\n\n- json和dict的区别\n  - 可以复制网页的json数据，在json在线解析器上解析，注意dict不能用json的在线解析\n  - **输出时，json字符串中的字符被双引号引着，dict中的字符被单引号引着**\n  - 在python中，json数据被识别为字符串，所以不能像字典一样访问其中的元素\n  - 在json文件中，可以存放json字符串，并且可以用通过ctrl+alt+l的方式，将json字符串正确的格式化 \n- json和dict的相互转换\n\n```python\nimport json\n# dict转为json字符串\n# ensure_ascii默认为True，转为进制数据\n# ensure_ascii为False，返回正常数据\njs = json.dumps(response.json(), ensure_ascii=False)\nprint(type(js))  # <class 'str'> \n# json字符串转为dict\ndi = json.loads(js)\n```\n\n#### 5.3 二进制（图片和视频）\n\n- 请求图片和视频时，会返回二进制数据，可以使用.content接收\n\n```json\nresponse = requests.get(url, headers=headers)\ncon = response.content\n```\n\n- 使用'wb'模式，写入对应后缀（jsp/png/mp4）的文件中，就可以正常打开了\n\n```python\nwith open(path, 'wb') as fp:\n\tfp.write(con)\n```\n\n### 6、get和post请求\n\n#### 6.1 get请求\n\n- 大多数网页都是get请求，可以通过.get()方法的params参数，传入请求参数\n\n#### 6.2 post（百度翻译）\n\n- 部分网页是post请求，可以通过.post()方法的data参数，传入表单数据\n\n### 7、BeautifulSoup解析（静态页面）\n\n- 爬取豆瓣读书时，使用了bs4解析方式\n\n- 下载bs4解析包\n\n```\npip install bs4\n```\n\n- 导入包\n\n```python\nfrom bs4 import BeautifulSoup\n```\n\n- 首先解析html。然后定位标签，返回列表。最后正则匹配数据，也返回一个列表。\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\n\nbs = bt.find_all('div', class_=\"subject clearfix\")\n\nelement = re.findall(r'<a class=\"nbg\" href=\".*?\" title=\"(?P<book>.*?)\">\\n', bs)\n```\n\n### 8、京东评论（动态抓包）\n\n- 代码文件\n\n```\nday09/demo04JDComment.py\n```\n\n### 9、豆瓣Top250（非详情页）\n\n- 代码文件\n\n```\nday09/demo05SpiderDouBan.py\n```\n\n### 10、豆瓣读书（详情页）\n\n- 代码文件\n- 使用了xpath解析和bs4解析方式\n\n```\nday10/demo01DoubanReadBook.py\n```\n\n### 11、WallHaven（高清图片）\n\n- 代码文件\n\n```\nday09/demo06WallHaven.py\n```\n\n### 11、大麦网（selenium）\n\n- 代码文件\n- 由于大麦网网页跳转时的网址不会改变，该方式获取的数据量很少\n\n```\nday10/demo02SeleniumDaMai.py\n```\n\n### 12、大麦网（动态抓包）\n\n- 代码文件\n- 大麦网采用的是，异步加载数据的方式，然后js渲染，所以动态抓包可以获取更多的数据\n\n```\nday10/demo03JsonDamai.py\n```\n\n### 13、遇到的坑\n\n#### 13.1 显示字符串中特殊字符\n\n- 使用\"\"\" ... \"\"\"包含字符串，并放到列表，打印输出\n- ''' ... ''' 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\nprint([f\"\"\"{bt.find_all('div', class_=\"subject clearfix\")[0]}\"\"\"])\n```\n\n#### 13.2 替换字符串中的转义字符不要加 r\n\n- 替换转义字符不要加 r\n\n```python\n.replace(\"\\xa0\", \"\")\n```\n\n#### 13.3 xpath二次解析尽量开头带上 ./\n\n- 如果不带可能会导致二次解析定位不到\n- selenium的xpath解析可以直接  div/div[@class='info']//a/span[1]\n\n```python\nli_list = tree.xpath(r\"//ol[@class='grid_view']/li\")\nfor li in li_list:\n    title = li.xpath(\"./div/div[@class='info']//a/span[1]/text()\")[0]\n```\n\n#### 13.4 正则匹配的字符串一般不要含有 | \n\n- 如果带了，会匹配不到，可以先使用.replace()方法替换掉\n\n```python\n# 一般不要匹配 | ，不然匹配不到\n # directore = \"|\".join(列表)\ndirecto = \"#\".join(列表)\nsearch = re.search(r\"导演: (?P<director>.*?) .*?主演: (?P<actor>.*?) .*?#(?P<time>.*?) (?P<country>.*?) (?P<type_>.*)\",director)\n```\n\n#### 13.5 正则匹配表达式中不要含有< span >或< /span >\n\n- 可以使用 .*? 忽略它，不然匹配不到\n\n#### 13.6 反爬导致解析获取的列表为空，造成 list out of range\n\n- 反爬导致解析获取的列表为空，由于索引取值，造成列表越界异常\n- 可以捕获该异常代码，保证后续的url请求不受阻\n\n```python\nbt = bs4.BeautifulSoup(html2, 'html.parser')\n# ''' ... ''' 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等\ntry:\n    bs = bt.find_all('div', class_=\"subject clearfix\")[0]\n    bs = bs[0]  # 提取列表中的字符串\nexcept Exception as e:\n    print(\"反爬机制\", e)\n```\n\n#### 13.7 应对部分元素为空，导致list out of range错误\n\n- 导致此错误的原因一般都是列表为空，但是使用了索引获取其中的元素\n\n- **可以自定义一个函数，用来捕获这类错误**，\n\n  如果报错，则返回一个空值；如果不报错，则返回处理好的值\n\n```python\n# 捕获元素不存在时的错误\ndef find(element, by, pattern, split):\n    try:\n        return element.find_element(by, pattern).text.split(split)[1].strip()\n    except Exception as e:\n        print(e)\n        return ' '\n```\n\n#### 13.8 通过xpath获取标签外的文本内容\n\n- ![](python笔记/image-20230724090823259.png)\n\n```python\ntree.xpath( \"//div[@class='subject clearfix']/div[@id='info']/span[@class='pl'][contains(text(), '页数:')]/following-sibling::text()[1]\",html)\n```\n\n- 或者使用bs4解析\n\n```\nre.findall(r'定价:.*? (?P<money>.*?)<br/>', bs)[0]\n```\n\n\n\n#### 13.9 遇到无法避免的异常\n\n- 遇到无法避免的异常时，可以捕获该异常信息，确保后续程序正常运行\n\n## 第六部分 selenium半自动化工具\n\n- 首先下载selenium包\n\n```\npip install selenium\n```\n\n- 下载对应浏览器版本的浏览器驱动，并放到处于环境变量的包中\n  - ![](python笔记/image-20230723151140532.png)\n\n- 导入包\n\n```python\nfrom selenuim import webdriver\n```\n\n### 1、等待网页js渲染\n\n### 2、通过cookie免密登录\n\n## 第七部分 Pandas\n\n- 安装pandas包\n\n```\npip insatll pandas\n```\n\n- 安装jupyter notebook\n\n```\npip install jupyter notebook\n```\n\n- 在pycharm终端启动jupyter notebook\n\n```\nF:\\BigData26\\Code\\python\\bigdata26>jupyter notebook\n```\n\n- 导入pandas的包\n\n```python\nimport pandas\nimport numpy\n```\n\n### 布尔索引\n\n- 使用布尔索引可以提取指定条件的值\n- df['Age'] > 32的值\n\n![](python笔记/image-20230724212046687.png)\n\n- 如下代码，可以获取次df的Age列，值大于32的行\n\n```py\ndf[df['Age'] > 32]\n```\n\n![](python笔记/image-20230724212222545.png)\n\n### pandas 读取文件\n\n- pd.read_csv()方法中，index_col参数和names参数的区别\n\n  - index_col需要指定，文件中已有的head信息，才能够读取\n\n    - ```python\n      id,name,age,gender,clazz\n      1500100001,施笑槐,22,女,文科六班\n      \n      df_student = pd.read_csv('../data/student.csv',index_col=[\"id\",\"name\",\"age\",\"gender\",\"clazz\"])\n      ```\n\n  - names参数，会当作读取文件的列名\n\n### DF取值\n\n#### 1、取列\n\n- df[\"name\"]，注意是两对中括号\n  - 取列名为name的列\n- df[[\"name1\",\"name2\",\"name3]]\n  - 取列名为name1、name2、name3的列\n\n#### 2、取行\n\n- df.iloc[[0,1]]，注意是两对中括号\n  - 取行索引为0，为1的行\n- df.loc[[\"name1\",\"name2\"]]\n  - 取行名为name1，name2的行\n- df_student[1:3]\n  - 取行索引，[2,3)的所有行\n\n#### 3、取行列\n\n- 可以通过.iloc[ 行索引切片, 列索引切片 ]的方式取行列\n  - df_student.iloc[1:4,0:2]\n    - 取[1,4)行，且[0,2)列\n      - ![](python笔记/image-20230724214335918.png)\n\n### 连接\n\n#### 1、join\n\n- 默认情况下他是把行索引相同的数据合并到一起\n\n![](python笔记/image-20230724153228728.png)\n\n#### 2、merge:\n\n- 按照指定的列把数据按照一定的方式合并到一起\n  \t左外连接、右外连接、全外连接、内连接、\n\n![](python笔记/image-20230724153243607.png)\n\n### 分组聚合\n\n- df.groupby([\"clazz\",\"subject_id\"])\n  - 先根据clazz列进行分组和默认的排序\n  - 然后再根据subject_id列，在clazz分组的基础上，再进行分组和默认的排序\n  - 最后聚合的聚合，根据分的各个组进行的聚合操作\n  - 除了指定列，其他未分组的列也会进行聚合操作\n\n![](python笔记/image-20230724215256243.png)\n\n- df_result.groupby([\"clazz\",\"subject_id\",\"name\"]).sum(\"score\")\n  -  由于分组列太多（分组过后，各组只有一条数据），聚合不起作用，可以用来显示分组过后的情况\n\n![image-20230724223358859](python笔记/image-20230724223358859.png)\n\n- rank()聚合\n  - rank只会排名，不会改变原来数据的顺序\n  - 可以根据如下代码，取各个班级各个学科得前三名\n  - ascending=False，代表值降序，从1开始排序\n\ndf_merge[\"rank\"] = df_merge.groupby([\"clazz\",\"subject_id\"])['score'].rank(\"dense\",ascending=False)\n\ndf_result = df_merge[df_merge[\"rank\"]<=3]  # 取各班各科前三名的行\n\n如图，代码结果（在day11的homework文件中）\n\n![image-20230724223247119](python笔记/image-20230724223247119.png)\n\n![image-20230724223315189](python笔记/image-20230724223315189.png)\n\n### sort_values()分组排序\n\n- df_result.sort_values([\"clazz\",\"subject_id\",\"rank\"],ascending=[False,False,False]).reset_index(drop=True)\n  - 使用sort_valus()方法进行分组排序\n  - reset_index并重置索引，drop=Ture删除原来的乱序索引\n  - 传给ascending参数一个bool列表，指定每列的排序方式，默认为True(升序)\n  - **sort_values() 会先排序指定的第一列，然后在此基础上继续排序其他列，有分组的作用，并按每列指定的规则排序**\n\n![image-20230725102707716](python笔记/image-20230725102707716.png)\n\n# Python 内存管理和垃圾回收\n\n基于C源码 \n\n- 引用计数器\n- 标记清除\n- 分代回收\n- 缓存机制\n\n## 1. 引用计数器\n\n### 环状双向链表 refchain\n\npython创建对象时会把任何对象放在refchain中\n\n```python\nname = '西西'\nage = 18\nheight = 1.81\n```\n\n```python\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数】\nname = '西西'\nnew_name = name\n\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、val=18】\nage=18\n\n内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、元素个数、值】\nhobby = ['唱','跳','rap']\n```\n\nC源码中每个对象都有不一样的存储结构数据   PyObject结构体（4个值） PyVarObject = PyObject + ob_size\n\n```python\ndata = 3.14\n\n内部会创建：\n\t_ob_next = refchain中的下一个对象\n    _ob_prev = refchain中的上一个对象\n    ob_refcnt = 1 引用计数  \n    ob_type = float\n    ob_fval = 3.14\n```\n\n### 引用计数器\n\n创建一个对象的时候 默认refcnt是1\n\n- 引用\n\n```python\na = 9999   # refcnt = 1\nb = a      # refcnt + 1\n\n# 删除引用\ndel b      # refcnt - 1\ndel a      # refcnt - 1\n\n# 当一个对象的引用计数器为0时，表示这个对象不存在了，这个对象就是一个垃圾  就回收了\n# 回收\n\t# 1.对象从refchain中移除\n    # 2.对象销毁，内存归还\n```\n\n- 但是会出现以下问题\n\n```PYTHON\na = [1,2,3]   # a\\refcnt = 1\nb = [4,5,6]   # b\\refcnt = 1\n\na.append(b)   # b\\refcnt + 1\nb.append(a)   # a\\refcnt + 1\n\ndel a         # a\\refcnt - 1\ndel b         # b\\refcnt - 1   值都还是1   没有实现回收的功能\n```\n\n\n\n## 2. 标记清除\n\n- 目的： 解决引用计数器出现的循环引用的问题\n- 实现：在底层再次维护一个链表，用于存放可能出现循环引用的对象（list,tuple,dict,set）\n\n![hZ9SjgCDRMUGOxT](python笔记/hZ9SjgCDRMUGOxT.png)\n\n> 在python内部```某种情况```下触发，回头触发扫描```可能出现循环引用的链表```中的每个元素，检查该对象是否出现一个循环引用的现象，如果出现，refcnt - 1 ；如果refcnt=0，垃圾回收。\n\n- 问题：\n\n  ​\t什么时候扫描？\n\n  ​\t可能存在扫描循环引用的链表代价大，耗时久。\n\n\n\n## 3. 分代回收\n\n![image.png](python笔记/hZ9SjgCDRMUGOxT.png)\n\n- 0代 ： 0代中对象到达700个，记录循环引用的链表扫描一次\n- 1代 ： 0代扫描十次，1代扫描一次\n- 2代 ： 1代扫描十次，2代扫描一次\n\n\n\n## Python缓存池\n\n为了避免重复和创建一些常见对象，维护池。\n\n```python\n# 启动解释器时，python会内部创建 ： -5、-4 ...... 257，值在次范围的int对象会被放到缓存池中\nv1 = 7\nv2 = 9\nv3 = 9\n\n# 查看内存地址\nid(v1)\nid(v2)\n\nv4 = 9999\nv5 = 9999\n```\n\n\n\n### free_list\n\n> refcnt = 0 按道理来说是不是应该会回收，但是内部不会直接回收，他会把这个对象存到一个free_list的链表中当缓存，之后取创建一个相同对象的时候，不重新开辟内存，而是从free_list中取一个对象\n\n![image.png](python笔记/bxmZRYfl4UXaeB6.png)\n\n### 缓存机制（自己理解）\n\n- 即使删除了值，但是对象并不会删除，会放到该对象对应的缓存池中，（如果值得范围，在缓存范围内）\n\n  如上图的cmd中的例子，虽然删除了v1的值，但是v1对应的float对象并没有被清除内存，而是被放到缓存池中（所在内存不变）\n\n  所以下下一个定义的v3对应的float对象可能是v1的float对象，只是值有所改变\n\n  打印内存地址发现，v3和已经被放入缓存池的v1的的地址相同，所以v3和v1使用的是同一个float对象\n\n","slug":"python笔记","published":1,"updated":"2023-08-17T01:48:40.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllqbzj4000rmcuxelz8331l","content":"<h1 id=\"一、python基础\"><a href=\"#一、python基础\" class=\"headerlink\" title=\"一、python基础\"></a>一、python基础</h1><h2 id=\"前言-python所学内容\"><a href=\"#前言-python所学内容\" class=\"headerlink\" title=\"前言 python所学内容\"></a>前言 python所学内容</h2><ul>\n<li>基础语法<ul>\n<li>变量、注释、基本数据类型、格式化字符串、反转字符、数据类型转化、if\\elif选择结构、for\\while循环</li>\n<li>str的常用方法、运算符</li>\n<li>命名空间、作用域</li>\n</ul>\n</li>\n<li>数据容器<ul>\n<li>list列表、tuple元组、dict字典、set集合</li>\n<li>遍历数据容器、列表推导式</li>\n<li>杨辉三角、冒泡排序</li>\n</ul>\n</li>\n<li>函数<ul>\n<li>函数参数<ul>\n<li>必选参数、 默认参数、可选参数、关键字参数、命名关键字参数</li>\n</ul>\n</li>\n<li>递归函数<ul>\n<li>阶乘、斐波拉契数列、汉诺塔</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>面向对象<ul>\n<li>类、私有变量和方法、封装、继承、多态、猴子补丁、鸭子类型、兔子问题</li>\n</ul>\n</li>\n<li>异常处理<ul>\n<li>基本异常类型、捕获和抛出异常、自定义异常</li>\n</ul>\n</li>\n<li>文件读写<ul>\n<li>文件打开open、文件读写、with语句</li>\n</ul>\n</li>\n<li>正则表达式</li>\n<li>常用模块</li>\n</ul>\n<h2 id=\"第一部分-python简介\"><a href=\"#第一部分-python简介\" class=\"headerlink\" title=\"第一部分 python简介\"></a>第一部分 python简介</h2><ul>\n<li>Python是一门解释性、面向对象以及类型动态的高级程序语言<ul>\n<li>解释型：Python代码在运行时没有了编译这个环节，类似PHP</li>\n<li>面向对象：Python支持面向对象的风格或代码封装在对象的编程技术</li>\n<li>动态数据类型：Python中没有对变量类型进行限制，代码非常灵活</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、python的垃圾回收机制\"><a href=\"#1、python的垃圾回收机制\" class=\"headerlink\" title=\"1、python的垃圾回收机制\"></a>1、python的垃圾回收机制</h4><ul>\n<li>引用计数（Reference Counting）</li>\n<li>标记清除（Mark and Sweep）<ul>\n<li>标记清除解决循环引用</li>\n</ul>\n</li>\n<li>分代回收（Generational Collection）</li>\n</ul>\n<h4 id=\"2、python环境安装\"><a href=\"#2、python环境安装\" class=\"headerlink\" title=\"2、python环境安装\"></a>2、python环境安装</h4><ul>\n<li><p>首先官网下载安装程序</p>\n<ul>\n<li>选择状态为security的版本，并且选择此版本中小版本不是最后一个的版本</li>\n<li><img src=\"/posts/c00b24b1/image-20230710193122871.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710193646276.png\" class=\"\" title=\"image-20230710193646276\"></li>\n<li><img src=\"python笔记/image-20230710193716304.png\" alt=\"image-20230710193716304\" style=\"zoom:50%;\" /></li>\n</ul>\n</li>\n<li><p>安装时，选择客制化安装（自定义路径）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710193859950.png\" class=\"\" title=\"image-20230710193859950\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710194234672.png\" class=\"\" title=\"image-20230710194234672\"></li>\n</ul>\n</li>\n<li><p>完成安装后，查看python的环境变量（勾选上述选项后，自动添加）</p>\n<ul>\n<li>系统会优先调用位于<strong>系统环境变量（所有用户都可以使用）下最上面的文件路径下的程序</strong></li>\n<li>目的<ul>\n<li>把第一个路径下的pip.exe文件添加到全局变量中</li>\n<li>把第二个路径下的python.exe（python解释器）添加到全局变量中</li>\n</ul>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230710194400177.png\" class=\"\" title=\"image-20230710194400177.png\"></li>\n</ul>\n</li>\n<li><p>验证是否安装成功</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V  //查看版本</span><br><span class=\"line\">pip <span class=\"built_in\">list</span>   //查看使用pip命令所下载的包</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710194742530.png\" class=\"\" title=\"image-20230710194742530\"></li>\n</ul>\n</li>\n<li><p>pip命令下载包的位置</p>\n<ul>\n<li>刚开始之后两个，pip和setuptools</li>\n<li>pip list可以查看pip命令下载的包，如上图</li>\n<li><img src=\"/posts/c00b24b1/image-20230710200739516.png\" class=\"\" title=\"image-20230710200739516\"></li>\n</ul>\n</li>\n<li><p>python自带的组件</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200539139.png\" class=\"\" title=\"image-20230710200539139.png\"></li>\n<li><p>Moudle Docs（把python的安装环境变为网页形式）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200312751.png\" class=\"\" title=\"image-20230710200312751\"></li>\n</ul>\n</li>\n<li><p>IDLE（python自带的集成开发环境）</p>\n</li>\n<li><p>python（命令行模式）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、pycharm安装\"><a href=\"#3、pycharm安装\" class=\"headerlink\" title=\"3、pycharm安装\"></a>3、pycharm安装</h4><ul>\n<li><p>官网找到pycharm社区版（免费版）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710195406248.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>安装程序的介绍</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710195906290.png\" class=\"\" title=\"python笔记&#x2F;image-20230710195906290.png\"></li>\n<li>鼠标右击桌面的显示框<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200010566.png\" class=\"\"></li>\n</ul>\n</li>\n<li>关联py后缀的文件<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200106371.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710200130611.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>创建项目时的注意事项</p>\n<ul>\n<li>虚拟环境<ul>\n<li>创建为虚拟环境的项目，相当于把项目放在一个独立的环境中，所下载的包是独立于其他项目的</li>\n</ul>\n</li>\n<li>非虚拟环境<ul>\n<li>非虚拟环境的项目，所下载的包，是可以和其他非虚拟环境的项目所共用</li>\n<li><img src=\"/posts/c00b24b1/image-20230710201025426.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710201900839.png\" class=\"\" title=\"python笔记&#x2F;image-20230710201900839.png\"></li>\n<li>Conda Environment 是以Anocanda的环境为基础的选择</li>\n<li>Anocanda一个集成所有python的第三方库的工具，一般作为离线使用</li>\n</ul>\n</li>\n<li>一般选择非虚拟环境</li>\n</ul>\n</li>\n<li><p>python第三方库</p>\n<ul>\n<li>位于官网的PyPI</li>\n<li>Docs为python官方文档</li>\n<li>python为应用程序</li>\n<li><img src=\"/posts/c00b24b1/image-20230710202256691.png\" class=\"\" title=\"image-20230710202256691\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二部分-python基础语法\"><a href=\"#第二部分-python基础语法\" class=\"headerlink\" title=\"第二部分 python基础语法\"></a>第二部分 python基础语法</h2><h4 id=\"1、相对路径和绝对路径\"><a href=\"#1、相对路径和绝对路径\" class=\"headerlink\" title=\"1、相对路径和绝对路径\"></a>1、相对路径和绝对路径</h4><ul>\n<li><p>..表示退出当前文件夹到当前文件夹的上一级文件夹中</p>\n</li>\n<li><p>.表示当前文件夹</p>\n</li>\n<li><p>相对路径（在print_test.py文件中helloworld.py的相对路径）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711103427935.png\" class=\"\" title=\"python笔记&#x2F;image-20230711103427935.png\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../day01/helloworld.py</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>利用相对路径执行文件的例子</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711103411381.png\" class=\"\" title=\"image-20230711103411381\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>绝对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\BigData26\\Code\\python\\bigdata26\\day01</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2、print函数、cmd命令、注释\"><a href=\"#2、print函数、cmd命令、注释\" class=\"headerlink\" title=\"2、print函数、cmd命令、注释\"></a>2、print函数、cmd命令、注释</h4><ul>\n<li><p>print函数</p>\n<ul>\n<li><p>源代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print</span>(<span class=\"params\">self, *args, sep=<span class=\"string\">&#x27; &#x27;</span>, end=<span class=\"string\">&#x27;\\n&#x27;</span>, file=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*args是参数化变量，也就是可以传入多个参数</p>\n</li>\n<li><p>sep是间隔符</p>\n</li>\n<li><p>end代表结尾</p>\n</li>\n</ul>\n</li>\n<li><p>cmd命令</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711150851404.png\" class=\"\"></li>\n<li>在文件的路径上输入cmd就可以直接进入命令行模式<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711151030189.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230711151053019.png\" class=\"\" title=\"python笔记&#x2F;image-20230711151053019.png\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230711151134903.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>注释</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释快捷键 ctrl + /</span></span><br><span class=\"line\"><span class=\"comment\"># 单行注释，他是给人看的，编辑器不识别</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释、</span></span><br><span class=\"line\"><span class=\"string\">可以在很多行中</span></span><br><span class=\"line\"><span class=\"string\">写文字</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">这个也是多行注释</span></span><br><span class=\"line\"><span class=\"string\">也是个字符串</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3、变量\"><a href=\"#3、变量\" class=\"headerlink\" title=\"3、变量\"></a>3、变量</h4><ul>\n<li><p>变量的命名规则</p>\n<ul>\n<li>必须是大小写字母、数字、下划线</li>\n<li>不能以数字开头</li>\n<li>不能是关键字<ul>\n<li>如何查看关键字<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711182305418.png\" class=\"\" title=\"image-20230711182305418\"></li>\n</ul>\n</li>\n<li>所有的python关键字<ul>\n<li>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量命名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 驼峰命名法</span></span><br><span class=\"line\"><span class=\"comment\"># 在python中驼峰命名法一般用于文件命名</span></span><br><span class=\"line\">trainHead = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下划线命名法</span></span><br><span class=\"line\"><span class=\"comment\"># python中下划线命名法一般用于变量命名</span></span><br><span class=\"line\">train_head = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在python可以用中文给变量命名，但是不符合规则</span></span><br><span class=\"line\"><span class=\"comment\"># 火车头 = 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python中可以以下划线开头</span></span><br><span class=\"line\"><span class=\"comment\"># 但是，一般不用，因为下划线开头的方法代表私有化方法，不能改动</span></span><br><span class=\"line\">_class_a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4、数据类型和转义字符\"><a href=\"#4、数据类型和转义字符\" class=\"headerlink\" title=\"4、数据类型和转义字符\"></a>4、数据类型和转义字符</h4><ul>\n<li><p>如果一个变量是全大写形式，就会被认为<strong>常量</strong>，如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>python的四大基本类型</p>\n<ul>\n<li>int 整型</li>\n<li>float 浮点型</li>\n<li>str 字符串类型型</li>\n<li>bool 布尔类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(变量名)) <span class=\"comment\"># 查看变量类型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊类型None</p>\n<ul>\n<li>注意：None类型不能转换为其他基本数据类型</li>\n</ul>\n</li>\n<li><p>转义字符 \\ ，\\n，\\t，\\r</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转义字符以及&#x27;&#x27;和&quot;&quot;的套用</span></span><br><span class=\"line\"><span class=\"comment\"># 输出I&#x27;m OK</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;I&#x27;m OK&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;I\\&#x27;m OK&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出I\\&#x27;m OK</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;I\\&#x27;m OK&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;I\\\\\\&#x27;m OK&#x27;</span>) <span class=\"comment\"># 第一个\\把第二个\\进行转义：\\\\输出\\。第三个\\把&#x27;进行转义：\\&#x27;输出&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转义字符\\r：覆盖前面的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a\\rb&quot;</span>)  <span class=\"comment\"># b</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a\\rb\\rcd&quot;</span>)  <span class=\"comment\"># cd</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5、格式化字符串\"><a href=\"#5、格式化字符串\" class=\"headerlink\" title=\"5、格式化字符串\"></a>5、格式化字符串</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">year = <span class=\"number\">2023</span></span><br><span class=\"line\">month = <span class=\"number\">7</span></span><br><span class=\"line\">day = <span class=\"number\">11</span></span><br><span class=\"line\">money = <span class=\"number\">200.23445</span></span><br><span class=\"line\">deadline = <span class=\"number\">5</span></span><br><span class=\"line\">percent = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>fstring  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.fstring</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\">words1 = <span class=\"string\">f&quot;亲爱的客户<span class=\"subst\">&#123;name&#125;</span>，截至<span class=\"subst\">&#123;year&#125;</span>年<span class=\"subst\">&#123;month:02d&#125;</span>月<span class=\"subst\">&#123;day&#125;</span>日，你已经欠费<span class=\"subst\">&#123;money:<span class=\"number\">08.2</span>f&#125;</span>，&quot;</span> \\</span><br><span class=\"line\"><span class=\"string\">f&quot;请在<span class=\"subst\">&#123;deadline&#125;</span>日内，尽快缴清话费，否则将扣除<span class=\"subst\">&#123;percent&#125;</span>%的费用&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(words1)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>占位符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.占位符</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\"># 使用占位符的坑：%d%，会报错，%d%%即可解决</span></span><br><span class=\"line\">words2 = <span class=\"string\">&quot;亲爱的客户%s，截至%d年%02d月%d日，你已经欠费%08.2f，请在%d日内，尽快缴清话费，否则将扣除%d%%的费用&quot;</span> \\</span><br><span class=\"line\">% (name, year, month, day, money, deadline, percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>format</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.format</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\">words3 = <span class=\"string\">&quot;亲爱的客户&#123;&#125;，截至&#123;&#125;年&#123;:02d&#125;月&#123;&#125;日，你已经欠费&#123;:08.2f&#125;，请在&#123;&#125;日内，尽快缴清话费，否则将扣除&#123;&#125;%的费用&quot;</span> \\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(name, year, month, day, money, deadline, percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words3)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种format</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4.第二种format</span></span><br><span class=\"line\">words4 = <span class=\"string\">&quot;亲爱的客户&#123;name&#125;，截至&#123;year&#125;年&#123;month:02d&#125;月&#123;day&#125;日，你已经欠费&#123;money:08.2f&#125;，请在&#123;deadline&#125;日内，尽快缴清话费，否则将扣除&#123;percent&#125;%的费用&quot;</span> \\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(name=name, year=year, month=month, day=day, money=money,deadline=deadline, percent=percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words4)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 5.字符串拼接</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：python中整型不可以和字符串拼接</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;亲爱的客户&quot;</span>+name+<span class=\"string\">&quot;，截至&quot;</span>+<span class=\"built_in\">str</span>(year)+<span class=\"string\">&quot;年&quot;</span>+<span class=\"built_in\">str</span>(month)+<span class=\"string\">&quot;月&quot;</span>+<span class=\"built_in\">str</span>(day)+<span class=\"string\">&quot;日&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"6、反转字符串\"><a href=\"#6、反转字符串\" class=\"headerlink\" title=\"6、反转字符串\"></a>6、反转字符串</h4><ul>\n<li><p>索引实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&#x27;hello Tuesday!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 起始位置:结束位置:步长</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[::-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olleh</span></span><br><span class=\"line\"><span class=\"comment\"># 区间左闭右开[起始位置,结束位置)，所以取不到0位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[<span class=\"number\">14</span>:<span class=\"number\">0</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olle</span></span><br><span class=\"line\"><span class=\"comment\"># 可以不给结束位置，默认就可以取到最后一位0位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[<span class=\"number\">14</span>::-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olleh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<strong>lambda匿名函数</strong>实现反转字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">srt_a = <span class=\"string\">&quot;hello Tuesday!&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># eh-&gt;leh-&gt;lleh-&gt;...-&gt;!yadseuT olleh</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(reduce(<span class=\"keyword\">lambda</span> x,y:y+x,str_a))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7、数据类型转化\"><a href=\"#7、数据类型转化\" class=\"headerlink\" title=\"7、数据类型转化\"></a>7、数据类型转化</h4><ul>\n<li><p>整型int</p>\n<ul>\n<li>所有非0的整型转为bool类型后都会转为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整型int</span></span><br><span class=\"line\">int_1 = <span class=\"number\">1</span></span><br><span class=\"line\">int_2 = -<span class=\"number\">0</span></span><br><span class=\"line\">int_3 = <span class=\"number\">0</span></span><br><span class=\"line\">int_4 = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(int_1), <span class=\"built_in\">float</span>(int_2), <span class=\"built_in\">float</span>(int_3), <span class=\"built_in\">float</span>(int_4))  <span class=\"comment\"># 1.0 0.0 0.0 2.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(int_1), <span class=\"built_in\">str</span>(int_2), <span class=\"built_in\">str</span>(int_3), <span class=\"built_in\">str</span>(int_4))  <span class=\"comment\"># 1 0 0 2</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非0的整型转为bool类型后都会转为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(int_1), <span class=\"built_in\">bool</span>(int_2), <span class=\"built_in\">bool</span>(int_3), <span class=\"built_in\">bool</span>(int_4))  <span class=\"comment\"># True False False True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浮点型float</p>\n<ul>\n<li>浮点型转为int类型是向下取整</li>\n<li>所有非0的浮点型转为bool类型后都会转为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 浮点型float</span></span><br><span class=\"line\">float_1 = <span class=\"number\">1.0</span></span><br><span class=\"line\">float_2 = <span class=\"number\">1.6</span></span><br><span class=\"line\">float_3 = -<span class=\"number\">1.0</span></span><br><span class=\"line\">float_4 = -<span class=\"number\">0.0</span></span><br><span class=\"line\">float_5 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"comment\"># 浮点型转为int类型的正数是向下取整</span></span><br><span class=\"line\"><span class=\"comment\"># 浮点型转为int类型的负数是向上取整 int(-1.1) == -1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(float_1), <span class=\"built_in\">int</span>(float_2), <span class=\"built_in\">int</span>(float_3), <span class=\"built_in\">int</span>(float_4), <span class=\"built_in\">int</span>(float_5))  <span class=\"comment\"># 1 1 -1 0 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(float_1), <span class=\"built_in\">str</span>(float_2), <span class=\"built_in\">str</span>(float_3), <span class=\"built_in\">str</span>(float_4), <span class=\"built_in\">str</span>(float_5))  <span class=\"comment\"># 1.0 1.6 -1.0 -0.0 0.0</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非0的浮点型转为bool类型后都会转为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(float_1), <span class=\"built_in\">bool</span>(float_2), <span class=\"built_in\">bool</span>(float_3), <span class=\"built_in\">bool</span>(float_4), <span class=\"built_in\">bool</span>(float_5))  <span class=\"comment\"># True True True False False</span></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>字符型str</p>\n<ul>\n<li>只有字符为整数才能转为整型</li>\n<li>只有字符为数值类型才能转为浮点型</li>\n<li>所有非空（非””）的字符串转为bool时，都为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符型str</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">str_2 = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">str_3 = <span class=\"string\">&quot;2a&quot;</span></span><br><span class=\"line\">str_4 = <span class=\"string\">&quot;Ture&quot;</span></span><br><span class=\"line\">str_5 = <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">str_6 = <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">str_7 = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 只有字符为整数才能转为整型，如：str_1、str_5</span></span><br><span class=\"line\"><span class=\"comment\"># print(int(str_1),int(str_2),int(str_3),int(str_4),int(str_5),int(str_6),int(str_7))</span></span><br><span class=\"line\"><span class=\"comment\"># 只有字符为数值类型才能转为浮点型，如：str_1、str_2、str_5</span></span><br><span class=\"line\"><span class=\"comment\"># print(float(str_1),float(str_2),float(str_3),float(str_4),float(str_5),float(str_6),float(str_7))</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非空（非&quot;&quot;）的字符串转为bool时，都为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(str_1), <span class=\"built_in\">bool</span>(str_2), <span class=\"built_in\">bool</span>(str_3), <span class=\"built_in\">bool</span>(str_4), <span class=\"built_in\">bool</span>(str_5), <span class=\"built_in\">bool</span>(str_6),</span><br><span class=\"line\">      <span class=\"built_in\">bool</span>(str_7))  <span class=\"comment\"># True True True True True True False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔bool</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool_1 = <span class=\"literal\">True</span></span><br><span class=\"line\">bool_2 = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(bool_1), <span class=\"built_in\">int</span>(bool_2))  <span class=\"comment\"># 1 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(bool_1), <span class=\"built_in\">float</span>(bool_2))  <span class=\"comment\"># 1.0 0.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(bool_1), <span class=\"built_in\">str</span>(bool_2))  <span class=\"comment\"># &quot;True&quot; &quot;False&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>None类型</p>\n<ul>\n<li>转为int和str时都会报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">None_1 = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: int() argument must be a string, a bytes-like object or a real number, not &#x27;NoneType&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># print(int(None_1))</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: float() argument must be a string or a real number, not &#x27;NoneType&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># print(float(None_1))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(None_1))  <span class=\"comment\"># &quot;None&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(None_1))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8、九九乘法表\"><a href=\"#8、九九乘法表\" class=\"headerlink\" title=\"8、九九乘法表\"></a>8、九九乘法表</h4><ul>\n<li><p>使用嵌套for循环实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1*1=1\t</span><br><span class=\"line\">1*2=2\t2*2=4\t</span><br><span class=\"line\">1*3=3\t2*3=6\t3*3=9\t</span><br><span class=\"line\">1*4=4\t2*4=8\t3*4=12\t4*4=16\t</span><br><span class=\"line\">1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t</span><br><span class=\"line\">1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t</span><br><span class=\"line\">1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t</span><br><span class=\"line\">1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t</span><br><span class=\"line\">1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<strong>列表推导式</strong>实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join([<span class=\"string\">&quot;\\t&quot;</span>.join([<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,i+<span class=\"number\">1</span>)])<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>)]))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1*1=1\t</span><br><span class=\"line\">1*2=2\t2*2=4\t</span><br><span class=\"line\">1*3=3\t2*3=6\t3*3=9\t</span><br><span class=\"line\">1*4=4\t2*4=8\t3*4=12\t4*4=16\t</span><br><span class=\"line\">1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t</span><br><span class=\"line\">1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t</span><br><span class=\"line\">1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t</span><br><span class=\"line\">1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t</span><br><span class=\"line\">1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"9、str的常用方法\"><a href=\"#9、str的常用方法\" class=\"headerlink\" title=\"9、str的常用方法\"></a>9、str的常用方法</h4><h5 id=\"split-切分\"><a href=\"#split-切分\" class=\"headerlink\" title=\"split() - 切分\"></a>split() - 切分</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照指定字符进行切分，返回一个列表。如果不传入第二个参数（maxSplit），默认全部切分</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_split = str_1.split(<span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_split)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"strip-剥离、去除、脱离\"><a href=\"#strip-剥离、去除、脱离\" class=\"headerlink\" title=\"strip() - 剥离、去除、脱离\"></a>strip() - 剥离、去除、脱离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 去除前后空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala  \\r\\n &quot;</span></span><br><span class=\"line\">str_1_strip = str_1.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 传入字符串参数，去除前后指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_strip = str_1.strip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"lstrip-左剥离\"><a href=\"#lstrip-左剥离\" class=\"headerlink\" title=\"lstrip() - 左剥离\"></a>lstrip() - 左剥离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认去除左边头的空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala   &quot;</span></span><br><span class=\"line\">str_1_lstrip = str_1.lstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lstrip(参数)</span></span><br><span class=\"line\"><span class=\"comment\"># 去除左边头，指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_lstrip = str_1.lstrip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"rstrip-右剥离\"><a href=\"#rstrip-右剥离\" class=\"headerlink\" title=\"rstrip() - 右剥离\"></a>rstrip() - 右剥离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认去除右边头的空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala   \\r\\n&quot;</span></span><br><span class=\"line\">str_1_rstrip = str_1.rstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rstrip(参数) - 右剥离</span></span><br><span class=\"line\"><span class=\"comment\"># 去除左边头，指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_rstrip = str_1.rstrip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"lower-小写\"><a href=\"#lower-小写\" class=\"headerlink\" title=\"lower() - 小写\"></a>lower() - 小写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大写字母转为小写</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_lower = str_1.lower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lower)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"upper-大写\"><a href=\"#upper-大写\" class=\"headerlink\" title=\"upper() - 大写\"></a>upper() - 大写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 小写字母转为大写</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;Python,Java,Scala&quot;</span></span><br><span class=\"line\">str_1_upper = str_1.upper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_upper)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"islower-是否为小写\"><a href=\"#islower-是否为小写\" class=\"headerlink\" title=\"islower() - 是否为小写\"></a>islower() - 是否为小写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断所有字母是否是小写，如果是返回Ture，如果不是返回false</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_islower = str_1.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_islower)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"isupper-是否为大写\"><a href=\"#isupper-是否为大写\" class=\"headerlink\" title=\"isupper() - 是否为大写\"></a>isupper() - 是否为大写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断所有字母是否是大写，如果是返回Ture，如果不是返回false</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_isupper = str_1.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_isupper)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"replace-替换\"><a href=\"#replace-替换\" class=\"headerlink\" title=\"replace() - 替换\"></a>replace() - 替换</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把前一个参数的值替换为后一个参数的值，默认将字符串中所有 为前一个参数的子字符串都替换为后一个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 2代表替换前两个值为前一个参数的子字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_replace_1 = str_1.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">str_1_replace_2 = str_1.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_replace_1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_replace_2)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"index-索引\"><a href=\"#index-索引\" class=\"headerlink\" title=\"index() - 索引\"></a>index() - 索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回指定区间的指定元素的索引值，默认返回第一个指定元素的索引值</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_index_1 = str_1.index(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">str_1_index_2 = str_1.index(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_index_1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_index_2)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ord-字符转换为ASCii码值\"><a href=\"#ord-字符转换为ASCii码值\" class=\"headerlink\" title=\"ord() - 字符转换为ASCii码值\"></a>ord() - 字符转换为ASCii码值</h5><ul>\n<li><code>ord</code> 函数的全称是 “ordinal”, 它是从 “ordinal number”（序数）一词中衍生而来</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;A&quot;</span>))  <span class=\"comment\"># 65</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"chr-ASCii码转换为字符\"><a href=\"#chr-ASCii码转换为字符\" class=\"headerlink\" title=\"chr() - ASCii码转换为字符\"></a>chr() - ASCii码转换为字符</h5><ul>\n<li><code>chr</code> 函数的全程是 “character”，它是从 “character”（字符）一词中衍生而来。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(<span class=\"number\">65</span>))  <span class=\"comment\"># A</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10、运算符\"><a href=\"#10、运算符\" class=\"headerlink\" title=\"10、运算符\"></a>10、运算符</h4><h5 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201620205.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201620205.png\"></li>\n</ul>\n<h5 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201653705.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较运算符 ==</span></span><br><span class=\"line\"><span class=\"comment\"># 只有 1（整型或者浮点行）等与 False</span></span><br><span class=\"line\"><span class=\"comment\"># 只有 0（整型或者浮点行）等与 False</span></span><br><span class=\"line\"><span class=\"comment\"># 其他数字及不等于False也不等于False，但是强转为bool型时，只有0才能转为False，其他皆为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> == <span class=\"literal\">False</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> == <span class=\"literal\">False</span>)  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201728513.png\" class=\"\"></li>\n</ul>\n<h5 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201804728.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201804728.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 逻辑运算符 and or not</span></span><br><span class=\"line\"><span class=\"comment\"># 注意 逻辑运算符中 非0的数皆为True</span></span><br><span class=\"line\"><span class=\"comment\"># and 若前者为False，则返回前者的值，否则返回后者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> == <span class=\"literal\">False</span>)   <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>)  <span class=\"comment\"># 30</span></span><br><span class=\"line\"><span class=\"comment\"># or 若前者为Ture，则返回前面的值，否则返回前者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> <span class=\"keyword\">or</span> <span class=\"number\">30</span>)  <span class=\"comment\"># 20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">not</span> <span class=\"number\">0</span>)  <span class=\"comment\"># True 注意这个除0之外都是</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201909704.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201909704.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">49</span></span><br><span class=\"line\">b = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位与运算符&amp; 同一则 1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b </span></span><br><span class=\"line\"><span class=\"string\">000000 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &amp; b)  <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位或运算符| 有1则1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b     </span></span><br><span class=\"line\"><span class=\"string\">111011 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a | b)  <span class=\"comment\"># 59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位异或运算符^ 相异为1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b     </span></span><br><span class=\"line\"><span class=\"string\">111010 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a ^ b)  <span class=\"comment\"># 58</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位取反运算符~ 把1变为0，把0变为1 ，结果为-a-1</span></span><br><span class=\"line\"><span class=\"string\">1 110001 a</span></span><br><span class=\"line\"><span class=\"string\">0 001110 ~a</span></span><br><span class=\"line\"><span class=\"string\">要计算负数的补码，需要先将其二进制表示按位取反，然后再加 1。</span></span><br><span class=\"line\"><span class=\"string\">对于 001110，按位取反得到 110001。</span></span><br><span class=\"line\"><span class=\"string\">然后，将 110001 加 1，得到 110010。</span></span><br><span class=\"line\"><span class=\"string\">最终的结果 110010 对应十进制的 -50。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(~a)  <span class=\"comment\"># -50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;左移运算符&lt;&lt; 二进制全部往前若干位，高位往前低位补0，如果补0后的整体达到32位，则舍弃高位保留32位</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">11000100 a&lt;&lt;2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &lt;&lt; <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;右移运算符&gt;&gt; 二进制全部往后若干位，舍弃低位</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">1100 a&gt;&gt;2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &gt;&gt; <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11、if-elif选择结构\"><a href=\"#11、if-elif选择结构\" class=\"headerlink\" title=\"11、if&#x2F;elif选择结构\"></a>11、if&#x2F;elif选择结构</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713212833658.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由薪水判断心情</span></span><br><span class=\"line\">    salary = <span class=\"number\">2500</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> salary &gt;= <span class=\"number\">10000</span>:  <span class=\"comment\"># 区间 [10000,正无穷)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> salary &gt;= <span class=\"number\">5000</span>:  <span class=\"comment\"># 区间 [5000,10000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 区间 (负无穷,5000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反着写</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span>:  <span class=\"comment\"># 区间 (负无穷,5000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> salary &lt; <span class=\"number\">10000</span>:  <span class=\"comment\"># 区间 [5000,10000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 区间 [10000,正无穷)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 三元运算符</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span> <span class=\"keyword\">else</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span> <span class=\"keyword\">else</span> (<span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">10000</span> <span class=\"keyword\">else</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12、while-for循环结构\"><a href=\"#12、while-for循环结构\" class=\"headerlink\" title=\"12、while&#x2F;for循环结构\"></a>12、while&#x2F;for循环结构</h4><p>while循环语句小练习：</p>\n<ul>\n<li><p>1.计算1~100中奇数的和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 判断为基数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">            summ += i</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\">    <span class=\"comment\"># 简化</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 判断为基数</span></span><br><span class=\"line\">        summ += i</span><br><span class=\"line\">        i += <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.break continue</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.break continue</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面的代码会陷入死循环</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">90</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.给定一个字符串s &#x3D; ‘beautifulCode’<br>从前到后检查每个字母<br>如果是大写字母则停止检查并输出：有大写字母，第一个大写字母为%s<br>否则输出：无大写字母</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;beautifulCode&#x27;</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i].isupper():</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;有大写字母，第一个大写字母<span class=\"subst\">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 由 i 值判断判断无大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;无大写字母&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 由 i 值判断判断无大写字母</span></span><br><span class=\"line\">    flag = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i].isupper():</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;有大写字母，第一个大写字母<span class=\"subst\">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            flag = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;无大写字母&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"13、命名空间\"><a href=\"#13、命名空间\" class=\"headerlink\" title=\"13、命名空间\"></a>13、命名空间</h4><ul>\n<li><p>Python中一般有三种命名空间：</p>\n<ul>\n<li>内置名称（built-in names）<ul>\n<li>Python 语言内置的名称，比如函数名 abs、chr 和异常名称 BaseException、Exception 等等</li>\n</ul>\n</li>\n<li>全局名称（global names）<ul>\n<li>模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li>\n</ul>\n</li>\n<li>局部名称（local names）<ul>\n<li>函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230713215248858.png\" class=\"\" title=\"python笔记&#x2F;image-20230713215248858.png\"></li>\n<li><p>命名空间查找顺序:  由内往外</p>\n<ul>\n<li>假设我们要使用变量 money，则 Python 的查找顺序为：<ul>\n<li>局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</li>\n<li>如果找不到变量 money，它将放弃查找并引发一个错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"14、作用域\"><a href=\"#14、作用域\" class=\"headerlink\" title=\"14、作用域\"></a>14、作用域</h4><ul>\n<li><p>Python 的作用域一共有4种：</p>\n<ul>\n<li>L（Local）：包含局部变量，比如一个函数&#x2F;方法内部</li>\n<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量</li>\n<li>G（Global）：最外层，比如当前模块的全局变量</li>\n<li>B（Built-in）：包含内建变量&#x2F;关键字等，最后被搜索</li>\n<li><strong>在局部找不到，便会去局部外的局部找（例如闭包Enclosing），再找不到就会去全局找，再者去内置中找</strong></li>\n</ul>\n</li>\n<li><p><strong>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if&#x2F;elif&#x2F;else&#x2F;、try&#x2F;except、for&#x2F;while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = <span class=\"string\">&quot;i am from Runnob&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(msg)  <span class=\"comment\"># if不会形成新的作用域</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"第三部分-数据容器\"><a href=\"#第三部分-数据容器\" class=\"headerlink\" title=\"第三部分 数据容器\"></a>第三部分 数据容器</h2><h4 id=\"todo用法\"><a href=\"#todo用法\" class=\"headerlink\" title=\"todo用法\"></a>todo用法</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713220504552.png\" class=\"\"></li>\n</ul>\n<h4 id=\"ctrl-p-可以让参数提示重新出现\"><a href=\"#ctrl-p-可以让参数提示重新出现\" class=\"headerlink\" title=\"ctrl + p 可以让参数提示重新出现\"></a><strong>ctrl + p 可以让参数提示重新出现</strong></h4><h4 id=\"id-元素-返回元素内存地址\"><a href=\"#id-元素-返回元素内存地址\" class=\"headerlink\" title=\"id(元素) - 返回元素内存地址\"></a>id(元素) - 返回元素内存地址</h4><ul>\n<li><p>list列表、tuple元组、dict字典、set集合</p>\n</li>\n<li><p>在 Python 中，<code>sort()</code> 方法是列表对象的内置方法，用于对列表进行原地排序。<code>sort()</code> 方法的底层实现使用一种名为 <strong>Timsort 的排序算法</strong>。</p>\n</li>\n</ul>\n<h4 id=\"1、list列表\"><a href=\"#1、list列表\" class=\"headerlink\" title=\"1、list列表\"></a>1、list列表</h4><ul>\n<li>list的特点：有序的集合、可以有重复值、值类型不唯一、可变</li>\n</ul>\n<h5 id=\"append-追加\"><a href=\"#append-追加\" class=\"headerlink\" title=\"append - 追加\"></a>append - 追加</h5><ul>\n<li>添加元素，在末尾添加</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.append(<span class=\"string\">&quot;Irving&quot;</span>)  <span class=\"comment\"># 添加元素，在末尾添加</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"inster-插入\"><a href=\"#inster-插入\" class=\"headerlink\" title=\"inster - 插入\"></a>inster - 插入</h5><ul>\n<li>在指定索引位置，插入指定元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;Irving&quot;</span>)  <span class=\"comment\"># 在指定索引位置，插入指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"extend-继承\"><a href=\"#extend-继承\" class=\"headerlink\" title=\"extend - 继承\"></a>extend - 继承</h5><ul>\n<li>再末尾追加可迭代容器中的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])  <span class=\"comment\"># 再末尾追加可迭代容器中的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)  <span class=\"comment\"># [&#x27;James&#x27;, &#x27;Kobe&#x27;, &#x27;Polo&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"remove-删除\"><a href=\"#remove-删除\" class=\"headerlink\" title=\"remove - 删除\"></a>remove - 删除</h5><ul>\n<li>删除指定元素，但不返回删除的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.remove(<span class=\"string\">&quot;James&quot;</span>)  <span class=\"comment\"># 删除指定元素，但不返回删除的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"pop-弹出、删除\"><a href=\"#pop-弹出、删除\" class=\"headerlink\" title=\"pop - 弹出、删除\"></a>pop - 弹出、删除</h5><ul>\n<li>删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_pop = class_mates.pop()  <span class=\"comment\"># 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates_pop)</span><br><span class=\"line\"></span><br><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_pop_1 = class_mates.pop(<span class=\"number\">1</span>)  <span class=\"comment\"># 删除，索引为1的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates_pop_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"del-关键字删除、清除内存空间\"><a href=\"#del-关键字删除、清除内存空间\" class=\"headerlink\" title=\"del - 关键字删除、清除内存空间\"></a>del - 关键字删除、清除内存空间</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> class_mates[<span class=\"number\">1</span>]  <span class=\"comment\"># 使用del关键字进行删除</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br><span class=\"line\"></span><br><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> class_mates</span><br><span class=\"line\"><span class=\"comment\"># print(class_mates)  # NameError: name &#x27;class_mates&#x27; is not defined.</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"index-索引-1\"><a href=\"#index-索引-1\" class=\"headerlink\" title=\"index - 索引\"></a>index - 索引</h5><ul>\n<li>查询指定元素，返回索引值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">index_num = class_mates.index(<span class=\"string\">&#x27;James&#x27;</span>)  <span class=\"comment\"># 查询指定元素，返回索引值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"count-统计\"><a href=\"#count-统计\" class=\"headerlink\" title=\"count - 统计\"></a>count - 统计</h5><ul>\n<li>统计指定元素出现的次数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1_count = list_1.count(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1_count)  <span class=\"comment\"># 统计指定元素出现的次数</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort - 排序\"></a>sort - 排序</h5><ul>\n<li>默认为升序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.sort()  <span class=\"comment\"># 默认为升序排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定参数revers为True，设置为降序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.sort(reverse=<span class=\"literal\">True</span>)  <span class=\"comment\"># 指定参数revers为True，设置为降序排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reverse-反转\"><a href=\"#reverse-反转\" class=\"headerlink\" title=\"reverse - 反转\"></a>reverse - 反转</h5><ul>\n<li>列表中的元素进行反转</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.reverse()  <span class=\"comment\"># 将列表中的元素进行反转</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"copy-复制\"><a href=\"#copy-复制\" class=\"headerlink\" title=\"copy - 复制\"></a>copy - 复制</h5><ul>\n<li>复制列表，重新开辟一片新的内存空间</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_copy = class_mates.copy()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(class_mates))  <span class=\"comment\"># 2294213590208</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(class_mates_copy))  <span class=\"comment\"># 2294213319104</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"join-连接-列表转为字符串\"><a href=\"#join-连接-列表转为字符串\" class=\"headerlink\" title=\"join - 连接  列表转为字符串\"></a>join - 连接  列表转为字符串</h5><ul>\n<li>把列表中的字符串元素以指定字符连接起来，转换为字符串</li>\n<li><strong>请注意：如果列表中的元素不是字符串，使用此方法则会报错</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join(class_mates))  <span class=\"comment\"># 把列表中的字符串元素以指定字符连接起来</span></span><br><span class=\"line\">                                <span class=\"comment\"># 请注意：如果列表中的元素不是字符串，使用此方法则会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>通过索引的方式，对列表中的元素进行查找</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_2 = [<span class=\"string\">&#x27;Hadoop&#x27;</span>, <span class=\"string\">&#x27;Hive&#x27;</span>, <span class=\"string\">&#x27;2006&#x27;</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list_2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># print(list_2[4])  # list index out of range</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过索引的方式，对列表中的元素进行修改\"><a href=\"#通过索引的方式，对列表中的元素进行修改\" class=\"headerlink\" title=\"通过索引的方式，对列表中的元素进行修改\"></a>通过索引的方式，对列表中的元素进行修改</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Kobe Bryant&quot;</span>  <span class=\"comment\"># 通过索引的方式，对列表中的元素进行修改</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"len-长度\"><a href=\"#len-长度\" class=\"headerlink\" title=\"len - 长度\"></a>len - 长度</h5><ul>\n<li>输出列表的长度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_2 = [<span class=\"string\">&#x27;Hadoop&#x27;</span>, <span class=\"string\">&#x27;Hive&#x27;</span>, <span class=\"string\">&#x27;2006&#x27;</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list_2))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h5><ul>\n<li>起始位置、结束位置、步长都可以省略，如省略则等于默认值</li>\n<li>如果想要将列表的顺序颠倒，则可以使用::-1 </li>\n<li>切片操作同样适用于：字符串、元组中，以及后续numpy、pandas中的数据结构</li>\n<li><img src=\"/posts/c00b24b1/image-20230713221852883.png\" class=\"\" title=\"python笔记&#x2F;image-20230713221852883.png\"></li>\n</ul>\n<h4 id=\"2、tuple元组\"><a href=\"#2、tuple元组\" class=\"headerlink\" title=\"2、tuple元组\"></a>2、tuple元组</h4><ul>\n<li>tuple 类似与列表 、 <strong>不可变（没有list哪些改变增删改的方法）</strong></li>\n<li>查找tuple中的元素，其方法也是切片</li>\n<li>注意定义一个元素的元组时，在元素后加上一个英文逗号,</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_a = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;dasd&quot;</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 注意定义一个元素的元组时，在元素后加上一个英文逗号,</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不追加，则为int类型</span></span><br><span class=\"line\">tuple_b = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">tuple_c = (<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple_b), <span class=\"built_in\">type</span>(tuple_c))  <span class=\"comment\">#  &lt;class &#x27;tuple&#x27;&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tuple的使用可以使得代码更安全，防止错误赋值导致重要对象的改变</li>\n</ul>\n<h4 id=\"3、dict字典\"><a href=\"#3、dict字典\" class=\"headerlink\" title=\"3、dict字典\"></a>3、dict字典</h4><ul>\n<li><p>dict字典中，</p>\n<ul>\n<li>键必须是唯一的，但值可以重复</li>\n<li>值可以取任何数据类型，但键必须是不可变的类型<ul>\n<li>如基本数据类型、元组（列表不可以、字典也不可以）</li>\n</ul>\n</li>\n<li>dict字典中的KV键值对可以动态增减</li>\n<li>dict字典是无序的（无索引）</li>\n</ul>\n</li>\n<li><p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。</p>\n<ul>\n<li><p>假设字典包含了1万个汉字，需要再其中查询某一个字</p>\n</li>\n<li><p>第一种方式是把字典从第一页往后翻，直到找到所需的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢</p>\n</li>\n<li><p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，dict字典就是该种方式</p>\n<ul>\n<li><p>dict会把元素的键转换为hash值存储在内存中，查询时根据hash值查询</p>\n</li>\n<li><p><strong>请注意：在 Python 中，不同的哈希函数和数据类型都可能产生哈希冲突（不同元素的哈希值相同），尽管冲突的概率非常低。这是因为哈希函数的输出空间有限，而输入数据的空间是无限的。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"新增一个键值对\"><a href=\"#新增一个键值对\" class=\"headerlink\" title=\"新增一个键值对\"></a>新增一个键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一个键值对</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1[<span class=\"string\">&#x27;Luck&#x27;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"更改键值对\"><a href=\"#更改键值对\" class=\"headerlink\" title=\"更改键值对\"></a>更改键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1[<span class=\"string\">&#x27;Michael&#x27;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询键值对\"><a href=\"#查询键值对\" class=\"headerlink\" title=\"查询键值对\"></a>查询键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(dict_1[<span class=\"string\">&#x27;Michael&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"get-k-通过键获取值\"><a href=\"#get-k-通过键获取值\" class=\"headerlink\" title=\"get(k) - 通过键获取值\"></a>get(k) - 通过键获取值</h5><ul>\n<li>返回指定key的value</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get() - 获取</span></span><br><span class=\"line\">    dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dict_1.get(<span class=\"string\">&#x27;Michael&#x27;</span>))  <span class=\"comment\"># 返回指定key的value</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"pop-k-通过键删除值\"><a href=\"#pop-k-通过键删除值\" class=\"headerlink\" title=\"pop(k) - 通过键删除值\"></a>pop(k) - 通过键删除值</h5><ul>\n<li>删除指定键值对</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pop - 弹出</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1.pop(<span class=\"string\">&#x27;Michael&#x27;</span>)  <span class=\"comment\"># 删除指定键值对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"keys-获取所有的键，并返回一个列表\"><a href=\"#keys-获取所有的键，并返回一个列表\" class=\"headerlink\" title=\"keys() - 获取所有的键，并返回一个列表\"></a>keys() - 获取所有的键，并返回一个列表</h5><ul>\n<li>获取所有键的集合，并返回一个集合：dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])</li>\n<li><strong>请注意</strong><ul>\n<li>dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])不是列表类型，因此不能通过索引访问</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.keys())  <span class=\"comment\"># 获取所有键的集合，并返回一个集合：dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1.keys():  <span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1:  <span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;请注意</span></span><br><span class=\"line\"><span class=\"string\">dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])不是列表类型，因此不能通过索引访问</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"values-获取所有的值，并返回一个列表\"><a href=\"#values-获取所有的值，并返回一个列表\" class=\"headerlink\" title=\"values() - 获取所有的值，并返回一个列表\"></a>values() - 获取所有的值，并返回一个列表</h5><ul>\n<li>获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.values())  <span class=\"comment\"># 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1.values():  <span class=\"comment\"># 遍历所有的值</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"items-常用于dict的遍历\"><a href=\"#items-常用于dict的遍历\" class=\"headerlink\" title=\"items() - 常用于dict的遍历\"></a>items() - 常用于dict的遍历</h5><ul>\n<li>把所有的键值对转换为二元组</li>\n<li>并返回一个集合：dict_items([(‘Michael’, 95), (‘Bob’, 75), (‘Tracy’, 85)])</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dict_1.items())  <span class=\"comment\"># 以二元组的方式获取所有的键值，并返回一个集合：dict_items([(&#x27;Michael&#x27;, 95), (&#x27;Bob&#x27;, 75), (&#x27;Tracy&#x27;, 85)])</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict_1.items():  <span class=\"comment\"># 遍历所有的键和值</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k, v)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"len-长度-1\"><a href=\"#len-长度-1\" class=\"headerlink\" title=\"len_() - 长度\"></a><em>len</em>_() - 长度</h5><ul>\n<li>返回dict的长度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.__len__())  <span class=\"comment\"># 返回dict的长度</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"clear-清空字典\"><a href=\"#clear-清空字典\" class=\"headerlink\" title=\"clear - 清空字典\"></a>clear - 清空字典</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)  <span class=\"comment\"># 返回一个空字典&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"in-判断是否包含\"><a href=\"#in-判断是否包含\" class=\"headerlink\" title=\"in - 判断是否包含\"></a>in - 判断是否包含</h5><ul>\n<li>A in B(iterable) ：判断A是否在B中，B一般为一个可迭代的数据容器，如列表，元组，字典 ，set集合</li>\n<li>如果B为字典，则A只能为键，但是可以通过其他方法取出字典中的值，再判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># in 判断是否包含</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Michael&#x27;</span> <span class=\"keyword\">in</span> dict_1)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Michael&#x27;</span> <span class=\"keyword\">in</span> dict_1.keys())  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">95</span> <span class=\"keyword\">in</span> dict_1.values())  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&#x27;Michael&#x27;</span>,<span class=\"number\">95</span>) <span class=\"keyword\">in</span> dict_1.items())  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：字典中的字符串输出都是以单引号输出\"><a href=\"#注意：字典中的字符串输出都是以单引号输出\" class=\"headerlink\" title=\"注意：字典中的字符串输出都是以单引号输出\"></a>注意：字典中的字符串输出都是以单引号输出</h5><h4 id=\"4、set集合\"><a href=\"#4、set集合\" class=\"headerlink\" title=\"4、set集合\"></a>4、set集合</h4><ul>\n<li><p>set集合的特点：值是唯一的，会去重，会排序，无序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(set_1)  <span class=\"comment\"># &#123;False, 1, 2, 3, 1.2, 5, &#x27;a&#x27;&#125;，1就是True，0就是False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建空的set集合 {}是空字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1, <span class=\"built_in\">type</span>(set_1))  <span class=\"comment\"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">set_1 = <span class=\"built_in\">set</span>([])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1, <span class=\"built_in\">type</span>(set_1))  <span class=\"comment\"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h5><ul>\n<li>这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.pop()  <span class=\"comment\"># 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h5><ul>\n<li>删除指定元素，没有返回值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.remove(<span class=\"number\">1</span>)  <span class=\"comment\"># 删除指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"discard-抛弃\"><a href=\"#discard-抛弃\" class=\"headerlink\" title=\"discard - 抛弃\"></a>discard - 抛弃</h5><ul>\n<li>抛弃，删除指定元素，如果元素不存在，也不会报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.discard(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\"># 抛弃，删除指定元素，如果元素不存在，也不会报错</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h5><ul>\n<li>添加指定元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">set_1.add(<span class=\"string\">&#x27;a&#x27;</span>)  <span class=\"comment\"># 添加指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"intersection-交\"><a href=\"#intersection-交\" class=\"headerlink\" title=\"intersection - 交\"></a>intersection - 交</h5><h5 id=\"union-并\"><a href=\"#union-并\" class=\"headerlink\" title=\"union - 并\"></a>union - 并</h5><h5 id=\"difference-差\"><a href=\"#difference-差\" class=\"headerlink\" title=\"difference - 差\"></a>difference - 差</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交、并、差</span></span><br><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set_2 = &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># intersection - 交</span></span><br><span class=\"line\">inter = set_1.intersection(set_2)  <span class=\"comment\"># A 交 B</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(inter)</span><br><span class=\"line\"><span class=\"comment\"># union - 并</span></span><br><span class=\"line\">uni = set_1.union(set_2)  <span class=\"comment\"># A 并 B</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(uni)</span><br><span class=\"line\"><span class=\"comment\"># different - 差</span></span><br><span class=\"line\">dif = set_1.difference(set_2)  <span class=\"comment\"># A-B ，返回A中不是B中元素的集合</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dif)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、遍历数据容器\"><a href=\"#5、遍历数据容器\" class=\"headerlink\" title=\"5、遍历数据容器\"></a>5、遍历数据容器</h4><ul>\n<li><p>1.遍历列表、元组、set、直接遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> list_1_sub <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_1_sub:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span> * <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.遍历列表、元组 通过索引遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_1)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_1[i])):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(list_1[i][j])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.遍历字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.遍历字典</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;k1&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;k2&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;k3&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历key值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> dict_1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> dict_1.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"><span class=\"comment\"># 遍历value值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> dict_1.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"comment\"># 遍历key,value</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict_1.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k, v)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"6、列表推导式\"><a href=\"#6、列表推导式\" class=\"headerlink\" title=\"6、列表推导式\"></a>6、列表推导式</h4><ul>\n<li>生成一个 1~10的奇数 的列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个 1~10的奇数 的列表</span></span><br><span class=\"line\">list_1 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">list_1.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br><span class=\"line\"><span class=\"comment\"># 使用列表推到式方式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>列表推导式中嵌入for和if语句</p>\n<ul>\n<li>由于列表推导式的语法规则，正确的顺序应该是先定义外层循环（i 循环），然后在内层循环（j 循环）中引用外层循环的变量，从左到右嵌套，要生成的变量写在最左边</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复杂嵌套的列表推导式</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(j, end=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>([j <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>) <span class=\"keyword\">if</span> j % <span class=\"number\">2</span> == <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>九九乘法表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 99乘法表变为列表推导式的形式</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过join方法把列表转换为字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span>, end=<span class=\"string\">&quot;\\t&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join([<span class=\"string\">&quot;\\t&quot;</span>.join([<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i * j&#125;</span>&quot;</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>)]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>)]))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7、冒泡排序\"><a href=\"#7、冒泡排序\" class=\"headerlink\" title=\"7、冒泡排序\"></a>7、冒泡排序</h4><ul>\n<li><p>冒泡排序思想</p>\n<ul>\n<li>循环遍历（遍历n-1次）</li>\n<li>两两比较</li>\n<li>大的往后挪</li>\n</ul>\n</li>\n<li><p>代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># num_list = [213, 3415, 3466, 247, 241, 86, 589, 222, 1]</span></span><br><span class=\"line\">num_list = [<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span>):  <span class=\"comment\"># 只需要进行 n-1 轮排序即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span> - i):  <span class=\"comment\"># -1-i代表不需要动的数值的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num_list[j] &gt; num_list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 只有python才会有的交换方式</span></span><br><span class=\"line\">            num_list[j], num_list[j + <span class=\"number\">1</span>] = num_list[j + <span class=\"number\">1</span>], num_list[j]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num_list)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"flag优化\"><a href=\"#flag优化\" class=\"headerlink\" title=\"flag优化\"></a>flag优化</h5><ul>\n<li>优化思想，当某一次循环遍历时，没有数据进行交换，说明此时已经排序完成，flag是检查每次循环遍历时，】&#x3D;】是否发生了数据交换的工具</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_list = [<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">    flag = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span> - i):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num_list[j] &gt; num_list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 只有python才会有的交换方式</span></span><br><span class=\"line\">            num_list[j], num_list[j + <span class=\"number\">1</span>] = num_list[j + <span class=\"number\">1</span>], num_list[j]</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num_list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8、杨辉三角\"><a href=\"#8、杨辉三角\" class=\"headerlink\" title=\"8、杨辉三角\"></a>8、杨辉三角</h4><ul>\n<li><p>构建杨辉三角并打印，每一行用list列表接收，期望的最终结果如下所示：</p>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230714090438935.png\" class=\"\">\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230714090457699.png\" class=\"\">\n</li>\n<li><p>第一种方法（自己实现）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个空列表，用来存储杨辉三角</span></span><br><span class=\"line\">    big_list = []</span><br><span class=\"line\">    <span class=\"comment\"># i 代表每一行的索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空列表，用来动态存储杨辉三角的每一行</span></span><br><span class=\"line\">        small_list = []</span><br><span class=\"line\">        <span class=\"comment\"># j 代表索引元素位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 起始位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                small_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == i:</span><br><span class=\"line\">                small_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 遍历当前行的上一行列表元素</span></span><br><span class=\"line\">            <span class=\"comment\"># 杨辉三角中除第一个元素和最后一个元素，其他元素的值：皆是上一行中，此位置的元素 和 前一个位置元素的值 之和</span></span><br><span class=\"line\">            k1 = big_list[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">            k2 = big_list[i - <span class=\"number\">1</span>][j]</span><br><span class=\"line\">            small_list.append(k1 + k2)</span><br><span class=\"line\">        <span class=\"comment\"># 打印杨辉三角每一行</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(small_list)</span><br><span class=\"line\">        <span class=\"comment\"># 把杨辉三角每一行添加到大列表中</span></span><br><span class=\"line\">        big_list.append(small_list)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法（gpt）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    triangle = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 保证每一行的起始位置为1，结束位置为1</span></span><br><span class=\"line\">        row = [<span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 请注意range的默认步长为1</span></span><br><span class=\"line\">        <span class=\"comment\"># range(1,0) 表示一个空范围，因为默认步长为1，起始值 1 大于或等于终止值 0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i):</span><br><span class=\"line\">            row[j] = triangle[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + triangle[i-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\">        triangle.append(row)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法（上课教的）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangle = [[<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):  <span class=\"comment\"># i表示行数</span></span><br><span class=\"line\">\tpre_list = triangle[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">\tnew_list = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(pre_list) - <span class=\"number\">1</span>):  <span class=\"comment\"># 会循环本行长度的n-2次，也就是头和尾不会出现</span></span><br><span class=\"line\">\t\tnew_list.append(pre_list[j] + pre_list[j + <span class=\"number\">1</span>])  <span class=\"comment\"># 去除头尾后，本行的j位置的值为上一行j位置和j+1位置的值之和</span></span><br><span class=\"line\">\tnew_list = [<span class=\"number\">1</span>] + new_list + [<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(new_list)</span><br><span class=\"line\">\ttriangle.append(new_list)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法列表推导式写法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用列表推导式实现（一维数组形式）</span></span><br><span class=\"line\">pre_list = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>):  <span class=\"comment\"># i 表示执行次数</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(pre_list)</span><br><span class=\"line\">\tnew_list = [<span class=\"number\">1</span>]+ [ pre_list[j] + pre_list[j + <span class=\"number\">1</span>] <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(pre_list) - <span class=\"number\">1</span>)] + [<span class=\"number\">1</span>]</span><br><span class=\"line\">\tpre_list = new_list</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"第四部分-函数\"><a href=\"#第四部分-函数\" class=\"headerlink\" title=\"第四部分 函数\"></a>第四部分 函数</h2><ul>\n<li><p>函数定义</p>\n<ul>\n<li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段</li>\n<li>函数能提高应用的模块性，和代码的重复利用率</li>\n<li>Python提供了许多内建函数，比如print()、type()、类型转换函数等等</li>\n<li>用户也可以自己创建函数，这被叫做用户自定义函数（user difined function，简称UDF）</li>\n</ul>\n</li>\n<li><p>函数结构</p>\n<ul>\n<li>可选择性地使用return返回一个值给调用方，<strong>不 return 相当于返回 None</strong></li>\n<li><strong>def</strong> 是定义函数的关键字</li>\n<li><img src=\"/posts/c00b24b1/image-20230714204312252.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>定义函数，求圆的面积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\"># 求圆的面积</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">circle_area</span>(<span class=\"params\">r</span>):</span><br><span class=\"line\">    S = PI * r * r</span><br><span class=\"line\">    <span class=\"comment\"># 不写return默认返回空值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(S)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    s = circle_area(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><h5 id=\"必选参数\"><a href=\"#必选参数\" class=\"headerlink\" title=\"必选参数\"></a>必选参数</h5><ul>\n<li>必须传参</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必选参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_1</span>(<span class=\"params\">name, gender</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param name: 必选参数</span></span><br><span class=\"line\"><span class=\"string\">    :param gender: 必选参数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">person(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(name=<span class=\"string\">&#x27;小王&#x27;</span>,gender=<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(gender=<span class=\"string\">&#x27;小王&#x27;</span>,name=<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(gender=<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>)  <span class=\"comment\"># 错误写法</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h5><ul>\n<li>传参时，可传可不传，不传使用默认值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_2</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param clazz: 默认参数，顺序赋值，如果不赋值，将按照默认值</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clazz)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">person_2(name, gender, clazz=<span class=\"string\">&#x27;02&#x27;</span>)</span><br><span class=\"line\">person_2(name, gender)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h5><ul>\n<li>可变参数，可以传入0到多个值，并以元组的形式存储</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_3</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span>, *args</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param args: 可变参数，可以传入0到多个值，并以元组的形式存储</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">person_3(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>) <span class=\"comment\"># (1, 2, 5, &#x27;6&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h5><ul>\n<li>关键字参数，需要以 参数名(参数中没有出现的参数名)&#x3D;值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_4</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span>, *args,**kwargs</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param kwargs: 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)</span><br><span class=\"line\">person_4(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>,weight=<span class=\"number\">180</span>,high=<span class=\"number\">150</span>)  <span class=\"comment\"># &#123;&#x27;weight&#x27;: 180, &#x27;high&#x27;: 150&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h5><ul>\n<li>命名关键字参数，跟在args后面的有名参数或者跟在*后面赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值、</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命名关键字参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_5</span>(<span class=\"params\">name,gender,clazz=<span class=\"string\">&#x27;01&#x27;</span>,*args,weight=<span class=\"number\">180</span>,high,**kwargs</span>):</span><br><span class=\"line\"><span class=\"comment\"># def person_5(name,gender,clazz=&#x27;01&#x27;,*,weight=180,high):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param weight:  命名关键字参数，跟在*args后面的有名参数或者跟在*后面</span></span><br><span class=\"line\"><span class=\"string\">    :param high:    赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clazz)  <span class=\"comment\"># 02</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)  <span class=\"comment\"># (1, 2, 5, &#x27;6&#x27;)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(weight)  <span class=\"comment\"># 190</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(high)  <span class=\"comment\"># 150</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)  <span class=\"comment\"># &#123;&#x27;city&#x27;: &#x27;合肥&#x27;, &#x27;number&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class=\"line\">person_5(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>,weight=<span class=\"number\">190</span>,high=<span class=\"number\">150</span>,city=<span class=\"string\">&#x27;合肥&#x27;</span>,number=<span class=\"string\">&#x27;12345&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数组合\"><a href=\"#参数组合\" class=\"headerlink\" title=\"参数组合\"></a>参数组合</h5><ul>\n<li><p>定义函数时，各参数的位置</p>\n<ul>\n<li>先写必选参数,再写默认参数,再写可选参数,命名关键词参数,关键字参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">gender, cardId, clazz=<span class=\"string\">&quot;01&quot;</span>, *args, weight=<span class=\"number\">181</span>, height, **kwargs</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"递归函数-Recursive-Function\"><a href=\"#递归函数-Recursive-Function\" class=\"headerlink\" title=\"递归函数(Recursive Function)\"></a>递归函数(Recursive Function)</h4><ul>\n<li><p>如果一个函数在内部调用自身本身，这个函数就是递归函数</p>\n</li>\n<li><p>递归函数需要满足两个条件：</p>\n<ul>\n<li>自己调用自己</li>\n<li>有停止条件</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"DeBug\"><a href=\"#DeBug\" class=\"headerlink\" title=\"DeBug\"></a>DeBug</h5><img src=\"/posts/c00b24b1/image-20230715193157730.png\" class=\"\">\n\n<h5 id=\"求阶乘\"><a href=\"#求阶乘\" class=\"headerlink\" title=\"求阶乘\"></a>求阶乘</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 停止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial(n-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"求斐波拉契数列\"><a href=\"#求斐波拉契数列\" class=\"headerlink\" title=\"求斐波拉契数列\"></a>求斐波拉契数列</h5><ul>\n<li><p>著名的斐波拉契数列（Fibonacci）</p>\n<p>1, 1, 2, 3, 5, 8, 13, 21, 34, … 除第一、二个数之外，后一个数等于前两个数之和</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># todo:斐波拉契数列</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span> <span class=\"keyword\">or</span> n == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factorial(n-<span class=\"number\">1</span>) + factorial(n-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"汉诺塔（Hanoi）\"><a href=\"#汉诺塔（Hanoi）\" class=\"headerlink\" title=\"汉诺塔（Hanoi）\"></a>汉诺塔（Hanoi）</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230715194720536.png\" class=\"\">\n</li>\n<li><p>思路</p>\n<ul>\n<li>把A柱子上面的n-1个盘子看成整体</li>\n<li>第一步：这n-1个盘子由：A柱子–&gt;C柱子–&gt;B柱子</li>\n<li>第二步：把A柱子剩余的1个大盘子由：A–&gt;C</li>\n<li>第三步：把B柱子的n-1个盘子由：B–&gt;C</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 汉诺塔</span></span><br><span class=\"line\"><span class=\"comment\"># n是A柱子的盘子数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hanoi</span>(<span class=\"params\">n, a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a + <span class=\"string\">&#x27;--&gt;&#x27;</span> + c)</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, a, c, b)  <span class=\"comment\"># 把A柱子上面的n-1个盘子看成整体，第一步：这n-1个盘子由：A柱子--&gt;C柱子--&gt;B柱子</span></span><br><span class=\"line\">    hanoi(<span class=\"number\">1</span>, a, b, c)      <span class=\"comment\"># 第二步：把A柱子剩余的1个大盘子由：A--&gt;C</span></span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, b, a, c)  <span class=\"comment\"># 第三步：把B柱子的n-1个盘子由：B--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;执行过程</span></span><br><span class=\"line\"><span class=\"string\">hanoi(3,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; hanoi(2,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                                                hanoi(1,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; A--&gt;B</span></span><br><span class=\"line\"><span class=\"string\">                                                hanoi(1,&#x27;C&#x27;,&#x27;A&#x27;,&#x27;B&#x27;) -&gt; C--&gt;B</span></span><br><span class=\"line\"><span class=\"string\">                     -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                     -&gt; hanoi(2,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; hanoi(1,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;A&#x27;) -&gt; B--&gt;A</span></span><br><span class=\"line\"><span class=\"string\">                                             -&gt; hanoi(1,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; B--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                                             -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python练习题-一\"><a href=\"#Python练习题-一\" class=\"headerlink\" title=\"Python练习题 一\"></a>Python练习题 一</h2><p><strong>1、有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1</span>():</span><br><span class=\"line\">    list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    three_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:  <span class=\"comment\"># 防止第一位与第二位重复，如果第一位与第二位重复，那么第三位就不需要循环了</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">                <span class=\"comment\"># if i != j and i != k and j != k</span></span><br><span class=\"line\">                <span class=\"comment\"># \tthree_1 = str(i) + str(j) + str(k)</span></span><br><span class=\"line\">                <span class=\"comment\"># \tthree_list.append(three_1)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == k <span class=\"keyword\">or</span> j == k:  <span class=\"comment\"># 防止第一位与第三位重复  防止第二位与第三位重复</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                three_1 = <span class=\"built_in\">str</span>(i) + <span class=\"built_in\">str</span>(j) + <span class=\"built_in\">str</span>(k)</span><br><span class=\"line\">                three_list.append(three_1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(three_list)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(three_list))</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、企业发放的奖金根据利润提成</strong></p>\n<ul>\n<li><p>利润(I)低于或等于10万元时，奖金可提10%；</p>\n</li>\n<li><p>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</p>\n</li>\n<li><p>20万到40万之间时，高于20万元的部分，可提成5%；</p>\n</li>\n<li><p>40万到60万之间时高于40万元的部分，可提成3%；</p>\n</li>\n<li><p>60万到100万之间时，高于60万元的部分，可提成1.5%；</p>\n</li>\n<li><p>高于100万元时，超过100万元的部分按1%提成；</p>\n</li>\n</ul>\n<p><strong>从键盘输入当月利润I，求应发放奖金总数？</strong></p>\n<ul>\n<li><strong>第一种</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2</span>():</span><br><span class=\"line\">    I = <span class=\"number\">3000000</span></span><br><span class=\"line\">    reward = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> I &lt;= <span class=\"number\">100000</span>:</span><br><span class=\"line\">        reward = I * <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">200000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + (I - <span class=\"number\">100000</span>) * <span class=\"number\">0.075</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">400000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + (I - <span class=\"number\">200000</span>) * <span class=\"number\">0.05</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">600000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + (I - <span class=\"number\">400000</span>) * <span class=\"number\">0.03</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">1000000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.03</span> + (I - <span class=\"number\">600000</span>) * <span class=\"number\">0.015</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.03</span> + <span class=\"number\">400000</span> * <span class=\"number\">0.015</span> + (I - <span class=\"number\">1000000</span>) * <span class=\"number\">0.01</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(reward)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>第二种</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用区间边界值匹配提成率</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_2</span>(<span class=\"params\">I</span>):</span><br><span class=\"line\">    reward = <span class=\"number\">0</span></span><br><span class=\"line\">    money_edge = [<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>, <span class=\"number\">100</span>, <span class=\"number\">10000000000</span>]  <span class=\"comment\"># 最后一个表示无穷大，目的是取到超出100的值</span></span><br><span class=\"line\">    percent = [<span class=\"number\">0.1</span>, <span class=\"number\">0.075</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.03</span>, <span class=\"number\">0.015</span>, <span class=\"number\">0.01</span>]  <span class=\"comment\"># percent的值的位置与money中的区间对应</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(money_edge)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> I &lt; money_edge[i]:  <span class=\"comment\"># 计算的是超出的部分</span></span><br><span class=\"line\">            reward += (I - money_edge[i - <span class=\"number\">1</span>]) * percent[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span>  <span class=\"comment\"># 找到值对应的区间，退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 计算的是每超出的内部分对应的提成</span></span><br><span class=\"line\">            reward += (money_edge[i] - money_edge[i - <span class=\"number\">1</span>]) * percent[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reward</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</span></span><br><span class=\"line\"><span class=\"comment\"># 3.1%1=0.1  3%1=0 判断是否是整数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3</span>():</span><br><span class=\"line\">    <span class=\"keyword\">import</span> math</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        m = i + <span class=\"number\">100</span></span><br><span class=\"line\">        n = i + <span class=\"number\">268</span></span><br><span class=\"line\">        <span class=\"comment\"># if int(math.pow(m, 0.5)) == math.pow(m, 0.5) and int(math.pow(n, 0.5)) == math.pow(n, 0.5):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m**<span class=\"number\">0.5</span>) % <span class=\"number\">1</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> (n**<span class=\"number\">0.5</span>) % <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模拟用户登录，检测用户输入的用户名和密码</strong></p>\n<ul>\n<li>准备一个字典，保存用户名及对应的密码</li>\n<li>若用户名不存在，则提示’User Not Allowed’</li>\n<li>若用户名存在，但密码不正确，则提示’Authentication failure’</li>\n<li>若用户名和密码都正确，则登录成功，输出：xxx@localhost:~$</li>\n<li>当用户登录失败后可重试3次，每次重试需间隔5s钟，累计3次失败后，退出登录程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4.模拟用户登录，检测用户输入的用户名和密码</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">dict_1 = &#123;&#x27;user&#x27;: &#x27;123&#x27;, &#x27;user2&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"string\">user = &#x27;user&#x27;</span></span><br><span class=\"line\"><span class=\"string\">print(user in dict_1)</span></span><br><span class=\"line\"><span class=\"string\">print(user in dict_1 != True)  # True </span></span><br><span class=\"line\"><span class=\"string\">问：为什么第二个print返回True</span></span><br><span class=\"line\"><span class=\"string\">答：在 Python 中，比较运算符 != 具有比成员运算符 in 更高的优先级，</span></span><br><span class=\"line\"><span class=\"string\">因此 user in dict_1 != True 的表达式会先进行 user in dict_1 的判断，然后再将结果与 True 进行比较。</span></span><br><span class=\"line\"><span class=\"string\">改：print((user in dict_1) != True)  # False </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4</span>():</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\">    dict_1 = &#123;<span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;user2&#x27;</span>: <span class=\"string\">&#x27;12345&#x27;</span>&#125;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>  <span class=\"comment\"># 计数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        user = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入用户名：&#x27;</span>)</span><br><span class=\"line\">        password = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入密码：&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (user <span class=\"keyword\">in</span> dict_1):  <span class=\"comment\"># 避免运算符优先级的影响 用括号括起来</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;User Not Allowed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> password != dict_1.get(user):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Authentication failure&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(user + <span class=\"string\">&#x27;@localhost:~$&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">分析</span></span><br><span class=\"line\"><span class=\"string\">    月   兔子年龄    兔子对数    </span></span><br><span class=\"line\"><span class=\"string\">    1     1         1  </span></span><br><span class=\"line\"><span class=\"string\">    2     2         1</span></span><br><span class=\"line\"><span class=\"string\">    3     31        2</span></span><br><span class=\"line\"><span class=\"string\">    4     412       3</span></span><br><span class=\"line\"><span class=\"string\">    5     51231     5 </span></span><br><span class=\"line\"><span class=\"string\">    6     61231412  8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 根据上述分析，兔子对数是斐波拉契数列</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> month == <span class=\"number\">1</span> <span class=\"keyword\">or</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question5(month - <span class=\"number\">1</span>) + question5(month - <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 但是上述解法太过理想</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5_2</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    rabbit_list = [&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>&#125;]  <span class=\"comment\"># 初始化第一对兔子</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> rabbit <span class=\"keyword\">in</span> rabbit_list:</span><br><span class=\"line\">            rabbit[<span class=\"string\">&#x27;age&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rabbit[<span class=\"string\">&#x27;age&#x27;</span>] &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">                rabbit_list.append(&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>&#125;)  <span class=\"comment\"># 生兔子</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(rabbit_list)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python练习题-二\"><a href=\"#python练习题-二\" class=\"headerlink\" title=\"python练习题 二\"></a>python练习题 二</h2><p>1、输入三个整数x,y,z，请把这三个数由小到大输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、输入三个整数x,y,z，请把这三个数由小到大输出</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    list_1 = []</span><br><span class=\"line\">    list_1.append(x)</span><br><span class=\"line\">    list_1.append(y)</span><br><span class=\"line\">    list_1.append(z)</span><br><span class=\"line\">    list_1.sort()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list_1)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 最基本的排序方式，比较排序</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1_2</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> y &gt; z:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(z, y, x)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># y &lt; z</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; z:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(y, z, x, )</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; z</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(y, x, z)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> y &lt; z:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># y &gt; z</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; z:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(z, x, y)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; z</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(z, x, y)</span><br><span class=\"line\"><span class=\"comment\"># 冒泡排序</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1_3</span>(<span class=\"params\">x,y,z</span>):</span><br><span class=\"line\">    list_a = [x,y,z]</span><br><span class=\"line\">    flag = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_a)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_a)-<span class=\"number\">1</span>-i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list_a[j] &gt; list_a[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                list_a[j],list_a[j+<span class=\"number\">1</span>] = list_a[j+<span class=\"number\">1</span>],list_a[j]</span><br><span class=\"line\">                flag = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list_a)</span><br></pre></td></tr></table></figure>\n\n<p>2、输入某年某月某日，判断这一天是这一年的第几天</p>\n<ul>\n<li>datetime模块的应用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.输入某年某月某日，判断这一天是这一年的第几天</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2</span>(<span class=\"params\">year, month, day</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 创建日期对象</span></span><br><span class=\"line\">    date = datetime.date(year, month, day)</span><br><span class=\"line\">    <span class=\"comment\"># timetuple().tm_yday获取日期对象在年份中的第几天</span></span><br><span class=\"line\">    y_day = date.timetuple().tm_yday</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(y_day)</span><br><span class=\"line\"><span class=\"comment\"># 面向过程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_2</span>(<span class=\"params\">year, month, day</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 首先判断日期是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> year &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> (month &gt; <span class=\"number\">12</span> <span class=\"keyword\">or</span> month &lt; <span class=\"number\">0</span>) <span class=\"keyword\">or</span> (day &gt; <span class=\"number\">31</span> <span class=\"keyword\">or</span> day &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日期不合法！！！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否是闰年</span></span><br><span class=\"line\">    <span class=\"comment\"># 能被4整除，但是不能被100整除</span></span><br><span class=\"line\">    <span class=\"comment\"># 能被400整除</span></span><br><span class=\"line\">    month_31day = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    month_30day = [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">    ydays = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">100</span> != <span class=\"number\">0</span>) <span class=\"keyword\">or</span> (year % <span class=\"number\">400</span>) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (month == <span class=\"number\">2</span> <span class=\"keyword\">and</span> day &gt; <span class=\"number\">29</span>) <span class=\"keyword\">or</span> ((month <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> month_30day) <span class=\"keyword\">and</span> day &gt; <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日期不合法&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, month):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_31day:</span><br><span class=\"line\">                ydays += <span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">29</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">30</span></span><br><span class=\"line\">        ydays += day</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, month):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_31day:</span><br><span class=\"line\">                ydays += <span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">28</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">30</span></span><br><span class=\"line\">        ydays += day</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ydays)</span><br><span class=\"line\"><span class=\"comment\"># datetime的应用</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_3</span>():</span><br><span class=\"line\">    time = <span class=\"string\">&quot;2020年7月12日&quot;</span></span><br><span class=\"line\">    date = datetime.datetime.strptime(time, <span class=\"string\">&quot;%Y年%m月%d日&quot;</span>)  <span class=\"comment\"># strptime：字符串解析为datetime</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(date)</span><br><span class=\"line\">    y = date.year</span><br><span class=\"line\">    m = date.month</span><br><span class=\"line\">    d = date.day</span><br><span class=\"line\"></span><br><span class=\"line\">    str_time = datetime.datetime.strftime(date, <span class=\"string\">&quot;%Y/%m/%d&quot;</span>)  <span class=\"comment\"># strftime：字符串格式化datetime，也就是datetime转为字符串</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(date.timetuple().tm_yday)  <span class=\"comment\"># 求一年当中的第几天</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># question2_2优化</span></span><br><span class=\"line\">    month_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">    day_list_r = [<span class=\"number\">31</span>, <span class=\"number\">29</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>]  <span class=\"comment\"># 对应闰年</span></span><br><span class=\"line\">    day_list_p = [<span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>]  <span class=\"comment\"># 对应平年</span></span><br><span class=\"line\">    yday = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m - <span class=\"number\">1</span>):  <span class=\"comment\"># 0,1,2,3,4,5</span></span><br><span class=\"line\">        yday += day_list_r[i]</span><br><span class=\"line\">    yday += d</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(yday)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 再优化</span></span><br><span class=\"line\">    yday = <span class=\"built_in\">sum</span>(day_list_r[<span class=\"number\">0</span>:m - <span class=\"number\">1</span>])</span><br><span class=\"line\">    yday += d</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(yday)</span><br></pre></td></tr></table></figure>\n\n<p>3、有一分数序列：2&#x2F;1,3&#x2F;2,5&#x2F;3,8&#x2F;5,13&#x2F;8,21&#x2F;13…求出这个数列的前20项之和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">m</span>(<span class=\"params\">k</span>):  <span class=\"comment\"># 分母  注意要给出前两项的返回值，不然m(2-2)=m(0)=报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(k - <span class=\"number\">1</span>) + m(k - <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">n</span>(<span class=\"params\">k</span>):  <span class=\"comment\"># 分子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n(k - <span class=\"number\">1</span>) + n(k - <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3</span>(<span class=\"params\">k</span>):</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, k + <span class=\"number\">1</span>):</span><br><span class=\"line\">        summ += m(i) / n(i)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"><span class=\"comment\"># 二维数组求解问题三</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_2</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [[<span class=\"number\">2</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        summ += list_a[i][<span class=\"number\">0</span>] / list_a[i][<span class=\"number\">1</span>]</span><br><span class=\"line\">        list_a.append([list_a[i][<span class=\"number\">0</span>]+list_a[i][<span class=\"number\">1</span>],list_a[i][<span class=\"number\">0</span>]])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个一维数组求解问题三</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">1 2 3 5</span></span><br><span class=\"line\"><span class=\"string\">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class=\"line\"><span class=\"string\">2 4 6 8</span></span><br><span class=\"line\"><span class=\"string\">2/4,6/2,8/6,14/8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 本方法只适用：分子大于分母，不适用：2/4,6/2,8/6</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_3</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    summ = list_a[<span class=\"number\">1</span>]/list_a[<span class=\"number\">0</span>]  <span class=\"comment\"># 加第一项</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;list_a[<span class=\"number\">1</span>]&#125;</span>/<span class=\"subst\">&#123;list_a[<span class=\"number\">0</span>]&#125;</span>&#x27;</span>)  <span class=\"comment\"># 第一项</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">        list_a.append(list_a[i-<span class=\"number\">1</span>]+list_a[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        summ += list_a[i]/list_a[i-<span class=\"number\">1</span>]  <span class=\"comment\"># 加第i项</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;list_a[i]&#125;</span>/<span class=\"subst\">&#123;list_a[i-<span class=\"number\">1</span>]&#125;</span>&#x27;</span>)  <span class=\"comment\"># 第i项</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"><span class=\"comment\"># question3_3(3)</span></span><br><span class=\"line\"><span class=\"comment\"># 两个一维数组求解问题三</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_4</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [<span class=\"number\">2</span>]  <span class=\"comment\"># 分子</span></span><br><span class=\"line\">    list_b = [<span class=\"number\">1</span>]  <span class=\"comment\"># 分母</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        summ += list_a[i] / list_b[i]  <span class=\"comment\"># 第i+1项</span></span><br><span class=\"line\">        list_a.append(list_a[i]+list_b[i])</span><br><span class=\"line\">        list_b.append(list_a[i])</span><br><span class=\"line\">    <span class=\"comment\"># print(list_a)  # 最后list_a和list_b中的元素会比 summ的累加项 多一项</span></span><br><span class=\"line\">    <span class=\"comment\"># print(list_b)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br></pre></td></tr></table></figure>\n\n<p>4、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;分析</span></span><br><span class=\"line\"><span class=\"string\">次数    反弹高度     经历高度</span></span><br><span class=\"line\"><span class=\"string\">1       50         100</span></span><br><span class=\"line\"><span class=\"string\">2       25         100+50*2</span></span><br><span class=\"line\"><span class=\"string\">3       25/2      100+50*2+25*2</span></span><br><span class=\"line\"><span class=\"string\">4       25/4      100+50*2+25*2+25/2*2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    height = <span class=\"number\">50</span>        <span class=\"comment\"># 初始化第一次反弹高度</span></span><br><span class=\"line\">    sum_height = <span class=\"number\">100</span>  <span class=\"comment\"># 初始化第一次落地经历高度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        sum_height += height*<span class=\"number\">2</span></span><br><span class=\"line\">        height /= <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(sum_height)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(height)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 递归求反弹高度</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;初始高度100</span></span><br><span class=\"line\"><span class=\"string\">反弹次数 反弹高度</span></span><br><span class=\"line\"><span class=\"string\">1       50</span></span><br><span class=\"line\"><span class=\"string\">2       25</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4_2</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question4_2(n - <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># 两种方式</span></span><br><span class=\"line\">    <span class=\"comment\"># if n==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#     return 100</span></span><br><span class=\"line\">    <span class=\"comment\"># return question4_2(n-1)/2</span></span><br><span class=\"line\"><span class=\"comment\"># print(question4_2(2))</span></span><br></pre></td></tr></table></figure>\n\n<p>5、有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;分析</span></span><br><span class=\"line\"><span class=\"string\">1      10</span></span><br><span class=\"line\"><span class=\"string\">2      age(1)+2</span></span><br><span class=\"line\"><span class=\"string\">3      age(2)+2</span></span><br><span class=\"line\"><span class=\"string\">4      age(2)+2</span></span><br><span class=\"line\"><span class=\"string\">5      age(4)+2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question5(n-<span class=\"number\">1</span>)+<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(question5(<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n\n<p>6、猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">天数 剩余桃子数</span></span><br><span class=\"line\"><span class=\"string\">1   n/2-1 </span></span><br><span class=\"line\"><span class=\"string\">2   (n/2 - 1)/2-1</span></span><br><span class=\"line\"><span class=\"string\">3   ((n/2 - 1)/2-1)/2-1</span></span><br><span class=\"line\"><span class=\"string\">4   (((n/2 - 1)/2-1)/2-1)/2-1   n(d-1)=(n(d)+1)*2   </span></span><br><span class=\"line\"><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">.   </span></span><br><span class=\"line\"><span class=\"string\">10  1</span></span><br><span class=\"line\"><span class=\"string\">n(d-1)=(n(d)+1)*2</span></span><br><span class=\"line\"><span class=\"string\">n(d)=(n(d+1)+1)*2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question6</span>():</span><br><span class=\"line\">    peach = <span class=\"number\">1</span>  <span class=\"comment\"># 第十天剩下的桃子数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        peach = (peach+<span class=\"number\">1</span>)*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(peach)</span><br><span class=\"line\"><span class=\"comment\"># 也可以递归写</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question6_2</span>(<span class=\"params\">day</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> day == <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (question6_2(day+<span class=\"number\">1</span>)+<span class=\"number\">1</span>)*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(question6_2(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、python进阶\"><a href=\"#二、python进阶\" class=\"headerlink\" title=\"二、python进阶\"></a>二、python进阶</h1><h2 id=\"第一部分-面向对象\"><a href=\"#第一部分-面向对象\" class=\"headerlink\" title=\"第一部分 面向对象\"></a>第一部分 面向对象</h2><ul>\n<li><p>面向对象编程OOP——Object Oriented Programming，是一种程序设计思想</p>\n</li>\n<li><p>面向对象的三大特点：封装、继承、多态</p>\n</li>\n<li><p>多态：父类的引用指向子类的对象</p>\n</li>\n</ul>\n<h3 id=\"1、类（class）\"><a href=\"#1、类（class）\" class=\"headerlink\" title=\"1、类（class）\"></a>1、类（class）</h3><ul>\n<li><p>类的定义</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230717203553391.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>类的实例化</p>\n<ul>\n<li>类的实例化会调用初始化方法  init()方法，传入的实参也都会传到 init()方法中</li>\n</ul>\n</li>\n<li><p>类的方法和属性的调用</p>\n<ul>\n<li>在类里面通过  self.  的方式调用方法和属性</li>\n<li>在类外面通过 实例对象. 的方式调用方法和属性</li>\n</ul>\n</li>\n<li><p>定义在函数体外的属性（如chinese_name），被认为是默认属性，可以通过 self. 的方式再次赋值</p>\n</li>\n<li><p><strong>self 传入的是实例对象stu1</strong>，self. 参数名&#x3D;值  的方式赋值的参数都可以上述方式调用</p>\n</li>\n<li><p>重载：python中没有这种实现方式，会默认调用后面出现的同名方法，如果不传入后面方法对应的参数就会报错</p>\n</li>\n<li><p>重写：重写父类已有的方法，在此基础上获得新功能</p>\n<ul>\n<li>重写object类中的__str__方法，自定义打印实列输出的内容</li>\n</ul>\n</li>\n<li><p>从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“<strong>封装</strong>”起来了，调用很容易，但却不用知道内部实现的细节</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):  <span class=\"comment\"># 默认继承object类（所有类的父类）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 直接被添加到self里面</span></span><br><span class=\"line\">    chinese_name = <span class=\"string\">&#x27;小王&#x27;</span>  <span class=\"comment\"># 默认属性值，在类里面通过 self. 的方式调用，在类外面通过 实例对象. 的方式调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, score, chinese_name</span>):  <span class=\"comment\"># 构造方法，实例化时调用</span></span><br><span class=\"line\">        self.name = name  <span class=\"comment\"># 通过init方法被添加到self里面的</span></span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">        self.chinese_name = chinese_name  <span class=\"comment\"># 可以通过init方法传入参数，修改默认的属性值</span></span><br><span class=\"line\">        <span class=\"comment\"># self.print_score()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_score</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 打印学生成绩</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;self.name&#125;</span>的成绩<span class=\"subst\">&#123;self.score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;中文名为：<span class=\"subst\">&#123;self.chinese_name&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)  <span class=\"comment\"># self是类自己，等同于类外的 stu1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重载（python中没有这种实现方式，会默认调用后面出现的方法，如果不传入后面方法对应的参数就会报错）</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_score</span>(<span class=\"params\">self,value</span>):  <span class=\"comment\"># 打印学生成绩</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;value&#125;</span> 不传参，就报错&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写：object类中的__str__方法，自定义打印实列输出的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">self 传入的是实例对象stu1</span></span><br><span class=\"line\"><span class=\"string\">self是类的实例对象自己，等同于类外的 stu1</span></span><br><span class=\"line\"><span class=\"string\">在类中是通过 self. 的方式调用类的属性和方法</span></span><br><span class=\"line\"><span class=\"string\">在类外是通过 实例化对象. 的方式调用类的属性和方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">99</span>, <span class=\"string\">&#x27;小刘&#x27;</span>)  <span class=\"comment\"># Student类的实例化</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.chinese_name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1)  <span class=\"comment\"># 默认打印内存地址</span></span><br><span class=\"line\">stu1.print_score(<span class=\"number\">250</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、私有方法和属性\"><a href=\"#2、私有方法和属性\" class=\"headerlink\" title=\"2、私有方法和属性\"></a>2、私有方法和属性</h3><ul>\n<li>要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，只有内部可以访问，外部不能访问<ul>\n<li>强制访问私有变量方法一<ul>\n<li>stu1._Student__secret</li>\n</ul>\n</li>\n<li>强制访问私有变量方法二<ul>\n<li>类的内部可以访问私有变量</li>\n<li>通过getter方法，返回私有变量的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一般约定俗成的是 变量，_方法名 是私有的 不要随意访问和修改</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        <span class=\"comment\"># __开头的变量为私有变量，不能被外部的实例化对象访问，但是可以强制访问或在类内访问</span></span><br><span class=\"line\">        self.__secret = <span class=\"string\">&quot;This is a secret!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">study</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span>每天都学习&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># __开头的方法为私有方法，外部实例对象不能访问</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__play_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span>今年<span class=\"subst\">&#123;self.age&#125;</span>天天去网吧打游戏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getter_secret</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__secret  <span class=\"comment\"># 类内访问私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stu1 = Student(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;15&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 强制访问私有变量方法1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(stu1._Student__secret)</span><br><span class=\"line\">    <span class=\"comment\"># 强制访问 私有变量访问2：通过类中的getter方法</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(stu1.getter_secret())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、兔子问题\"><a href=\"#3、兔子问题\" class=\"headerlink\" title=\"3、兔子问题\"></a>3、兔子问题</h3><ul>\n<li>使用类的思想实现：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rabbit</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">growth</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.age += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    total = [Rabbit()]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> rabbit <span class=\"keyword\">in</span> total:</span><br><span class=\"line\">            rabbit.growth()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rabbit.age &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">                total.append(Rabbit())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(total))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    question5(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、猴子补丁（Monkey-patch）\"><a href=\"#4、猴子补丁（Monkey-patch）\" class=\"headerlink\" title=\"4、猴子补丁（Monkey patch）\"></a>4、猴子补丁（Monkey patch）</h3><ul>\n<li><p>猴子补丁是对Python中模块和类可以在外部被动态修改这种特性的一个比喻 </p>\n<p>将对类中没有的方法和属性进行赋值后，就可以调用，破坏了代码的封装性，造成了python代码的不安全</p>\n</li>\n<li><p>在模块和类的外部对模块和类进行修改是一种非常耍赖的做法，会破坏代码的封装结构，这种事情大概只有淘气的猴子喜欢去做，因此形象地称之为猴子补丁</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个Dog类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sleep</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Zzz... Zzz... Zzz...&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Dog类外的方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">speak</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;wang wang wang&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对Python中模块和类可以在外部被动态修改</span></span><br><span class=\"line\">Dog.speak = speak  <span class=\"comment\"># 猴子补丁</span></span><br><span class=\"line\">Dog.home = <span class=\"string\">&quot;Earth&quot;</span>  <span class=\"comment\"># 猴子补丁</span></span><br><span class=\"line\">spike = Dog(<span class=\"string\">&#x27;spike&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">spike.home = <span class=\"string\">&quot;HeFei&quot;</span></span><br><span class=\"line\">spike.sleep()</span><br><span class=\"line\">spike.speak()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(spike.home)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、继承\"><a href=\"#5、继承\" class=\"headerlink\" title=\"5、继承\"></a>5、继承</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 抽取学生类和教室类的共同特征，抽象为一个Person类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender</span>):</span><br><span class=\"line\">        self.id_card = id_card</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.gender = gender</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;吃饭&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sleep</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;睡觉&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;喜欢玩游戏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Person</span>):  <span class=\"comment\"># 继承Person类</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender,clazz,sid</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_card,name,age,gender)  <span class=\"comment\"># 调用父类的初始化方法对共性内容初始化</span></span><br><span class=\"line\">        self.clazz = clazz</span><br><span class=\"line\">        self.sid = sid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写了父类的interest方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;学生喜欢写试卷&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span>(<span class=\"title class_ inherited__\">Person</span>):  <span class=\"comment\"># 继承Person类</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender,office,tid</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_card,name,age,gender)</span><br><span class=\"line\">        self.office = office</span><br><span class=\"line\">        self.tid = tid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写了父类的interest方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;老师喜欢讲知识&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stu1 = Student(<span class=\"string\">&#x27;341281&#x27;</span>,<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;一班&#x27;</span>,<span class=\"string\">&#x27;010017&#x27;</span>)</span><br><span class=\"line\">    stu1.eat()</span><br><span class=\"line\">    stu1.sleep()</span><br><span class=\"line\">    stu1.interest()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    tea1 = Teacher(<span class=\"string\">&#x27;341281&#x27;</span>,<span class=\"string\">&#x27;刘老师&#x27;</span>,<span class=\"string\">&#x27;38&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;3号办公室&#x27;</span>,<span class=\"string\">&#x27;30018&#x27;</span>)</span><br><span class=\"line\">    tea1.eat()</span><br><span class=\"line\">    tea1.sleep()</span><br><span class=\"line\">    tea1.interest()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、多态\"><a href=\"#6、多态\" class=\"headerlink\" title=\"6、多态\"></a>6、多态</h3><ul>\n<li>多态：父类的引用指向子类的对象<ul>\n<li>Animal animal &#x3D; new Dog()</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 多态：父类的引用指向子类的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;animal is running&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog is running and baking&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat is running and jumping&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">animal_run</span>(<span class=\"params\">animal: Animal</span>):</span><br><span class=\"line\">    animal.run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父类的引用指向子类的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    animal_run(Dog)  <span class=\"comment\"># Animal animal = new Dog()</span></span><br><span class=\"line\">    animal_run(Cat)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、鸭子类型\"><a href=\"#7、鸭子类型\" class=\"headerlink\" title=\"7、鸭子类型\"></a>7、鸭子类型</h3><ul>\n<li>鸭子类型，因为python的数据类型是动态的，没有严格类型检查，所以Goose这个类具有和Duck这个类相同的方法，duck_show这个函数也可以对ee进行作用，故Python其数据类型属于鸭子类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Duck</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">swim</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;A duck named <span class=\"subst\">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">call</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ga ga ga ...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Goose</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">swim</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;A goose named <span class=\"subst\">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">call</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;goo goo goo ...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">duck_show</span>(<span class=\"params\">duck:Duck</span>):</span><br><span class=\"line\">    duck.swim()</span><br><span class=\"line\">    duck.call()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    duck = Duck(<span class=\"string\">&quot;丑小鸭&quot;</span>)</span><br><span class=\"line\">    duck_show(duck)</span><br><span class=\"line\">    goose = Goose(<span class=\"string\">&quot;白天鹅&quot;</span>)</span><br><span class=\"line\">    duck_show(goose)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二部分-异常处理\"><a href=\"#第二部分-异常处理\" class=\"headerlink\" title=\"第二部分 异常处理\"></a>第二部分 异常处理</h2><h3 id=\"1、基本异常类型\"><a href=\"#1、基本异常类型\" class=\"headerlink\" title=\"1、基本异常类型\"></a>1、基本异常类型</h3><ul>\n<li><img src=\"/posts/c00b24b1/image-20230718201445587.png\" class=\"\"></li>\n</ul>\n<h5 id=\"keyboardInterrupt\"><a href=\"#keyboardInterrupt\" class=\"headerlink\" title=\"keyboardInterrupt\"></a>keyboardInterrupt</h5><ul>\n<li>终止此代码后会抛出异常keyboardInterrupt<ul>\n<li><img src=\"/posts/c00b24b1/image-20230718202052338.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SyntaxError\"><a href=\"#SyntaxError\" class=\"headerlink\" title=\"SyntaxError\"></a>SyntaxError</h5><ul>\n<li>语法异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ZeroDivisionError\"><a href=\"#ZeroDivisionError\" class=\"headerlink\" title=\"ZeroDivisionError\"></a>ZeroDivisionError</h5><ul>\n<li>除数为0异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ZeroDivisionError</span></span><br><span class=\"line\">sum_1 = <span class=\"number\">100</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">    sum_1 /= n</span><br><span class=\"line\">    n -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"NameError\"><a href=\"#NameError\" class=\"headerlink\" title=\"NameError\"></a>NameError</h5><ul>\n<li>命名异常，一般是变量没有赋值就被引用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NameError</span></span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TypeError\"><a href=\"#TypeError\" class=\"headerlink\" title=\"TypeError\"></a>TypeError</h5><ul>\n<li>类型错误，下面为int和str相加报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TypeError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> + <span class=\"string\">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ValueError\"><a href=\"#ValueError\" class=\"headerlink\" title=\"ValueError\"></a>ValueError</h5><ul>\n<li>值错误</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ValueError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IndexError\"><a href=\"#IndexError\" class=\"headerlink\" title=\"IndexError\"></a>IndexError</h5><ul>\n<li>索引异常，一般为索引越界异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># IndexError</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span> = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>[-<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AttributeError\"><a href=\"#AttributeError\" class=\"headerlink\" title=\"AttributeError\"></a>AttributeError</h5><ul>\n<li>属性异常，一般是调用不存在的方法或变量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># AttributeError</span></span><br><span class=\"line\">tuple_1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">tuple_1.append(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">tom = Cat()</span><br><span class=\"line\">tom.run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、捕获和抛出异常\"><a href=\"#2、捕获和抛出异常\" class=\"headerlink\" title=\"2、捕获和抛出异常\"></a>2、捕获和抛出异常</h3><h5 id=\"忽略警告\"><a href=\"#忽略警告\" class=\"headerlink\" title=\"忽略警告\"></a>忽略警告</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230718202931072.png\" class=\"\"></li>\n<li>发生异常时，try块中的异常代码的下面代码不会执行，但是try&#x2F;except代码块外的代码会执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行</span></span><br><span class=\"line\">sum_1 = <span class=\"number\">100</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        sum_1 /= n</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(sum_1)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;没有异常会执行的代码&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;有没有异常都会执行的代码&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;try/except代码块外的代码&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>try&#x2F;except不会引入新的作用域，只不过没有异常的时候，except中的代码块就不会执行<ul>\n<li>如果没有异常在这里尝试访问 error_message 变量会引发 NameError</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"number\">10</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    error_message_0 = <span class=\"string\">&quot;除数不能为零&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error_message_0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(error_message_0)  <span class=\"comment\"># 除数不能为零，</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没有异常在这里尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>try代码块中，发生异常的代码的上方变量还是可以引用的<ul>\n<li>result &#x3D; x&#x2F;y  # 如果该段代码有异常，result 变量就不被定义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"number\">10</span></span><br><span class=\"line\">    y = <span class=\"number\">0</span></span><br><span class=\"line\">    result = x/y  <span class=\"comment\"># 如果该段代码有异常，该变量就不被定义</span></span><br><span class=\"line\">    u = <span class=\"number\">100</span>   <span class=\"comment\"># 上面代码有异常，try中下面的代码就不会执行</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)  <span class=\"comment\"># 10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)  <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(u)</span><br><span class=\"line\"><span class=\"comment\">#尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果数值加法中，有字符串可以把其转为ASCii码值再进行加</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果数值加法中，有字符串可以把其转为ASCii码值再进行加</span></span><br><span class=\"line\">list_a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list_a:</span><br><span class=\"line\">        operand = i + <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;操作数为<span class=\"subst\">&#123;operand&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Exception 错误&quot;</span>,e)</span><br><span class=\"line\">    operand = <span class=\"built_in\">ord</span>(i) + <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;操作数为<span class=\"subst\">&#123;i&#125;</span>，数值为<span class=\"subst\">&#123;operand&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h5><ul>\n<li>抛出异常会终止程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 抛出异常</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">f&quot;x不能大于5，x的值为<span class=\"subst\">&#123;x&#125;</span>&quot;</span>)  <span class=\"comment\"># Exception: x不能大于5，x的值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义异常\"><a href=\"#3、自定义异常\" class=\"headerlink\" title=\"3、自定义异常\"></a>3、自定义异常</h3><ul>\n<li>自定义异常的原因<ul>\n<li>Python提供的内建异常不够用 </li>\n<li>可以预估某个错误的产生</li>\n</ul>\n</li>\n<li>定义异常类<ul>\n<li>异常类继承自 Exception 类，可以直接继承，或者间接继承</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AgeError</span>(<span class=\"title class_ inherited__\">Exception</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 间接继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AgeErrorSub</span>(<span class=\"title class_ inherited__\">AgeError</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"comment\"># raise AgeError(f&quot;年龄异常，年龄为&#123;age&#125;&quot;)  # __main__.AgeError: 年龄异常，年龄为-1</span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AgeErrorSub(<span class=\"string\">f&quot;年龄异常，年龄为<span class=\"subst\">&#123;age&#125;</span>&quot;</span>)  <span class=\"comment\"># __main__.AgeErrorSub: 年龄异常，年龄为-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三部分-文件读写\"><a href=\"#第三部分-文件读写\" class=\"headerlink\" title=\"第三部分 文件读写\"></a>第三部分 文件读写</h2><h4 id=\"文件打开\"><a href=\"#文件打开\" class=\"headerlink\" title=\"文件打开\"></a>文件打开</h4><ul>\n<li><p>with open语句的好处：无论文件操作是否有异常都会执行.close操作，</p>\n<p>关闭文件读写，防止阻塞，和try…finally: .close 一个作用</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ValueError: must have exactly one of create&#x2F;read&#x2F;write&#x2F;append mode</p>\n<ul>\n<li>上述错误表示：x&#x2F;r&#x2F;w&#x2F;a这四个模式不能同时出现</li>\n</ul>\n</li>\n<li><p>‘w’ open for writing, truncating（清空） the file first</p>\n<ul>\n<li>会清空原有文件的内容，然后再写</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><h5 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h5><ul>\n<li>默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）<br>对于同一个文件对象，后面的read方法会接着上一个read方法 继续读</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># read()</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）</span></span><br><span class=\"line\">    <span class=\"comment\"># 对于同一个文件对象，后面的read方法会接着上一个read方法继续读</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"readline\"><a href=\"#readline\" class=\"headerlink\" title=\"readline()\"></a>readline()</h5><ul>\n<li><p>默认读取一行，传入整型参数代表读的字符的个数，</p>\n<p>如果这一行只有一个字符那就会读出一个字符并不会往后读</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># readline()</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认读取一行，传入整型参数代表读的字符的个数，如果这一行只有一个字符那就会读出一个字符并不会往后读</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"readlines\"><a href=\"#readlines\" class=\"headerlink\" title=\"readlines()\"></a>readlines()</h5><ul>\n<li>默认全部行，并返回一个列表，元素为每一行<br>传入整型参数，只会读取一行的全部内容，并返会一个列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><h5 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># write()</span></span><br><span class=\"line\">    fp.write(<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>)</span><br><span class=\"line\">    fp.write(<span class=\"string\">&quot;007,dl,21,male&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"writelines\"><a href=\"#writelines\" class=\"headerlink\" title=\"writelines()\"></a>writelines()</h5><ul>\n<li>传入可以迭代的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:    </span><br><span class=\"line\">    <span class=\"comment\"># writelines()</span></span><br><span class=\"line\">    <span class=\"comment\"># 传入可以迭代的参数</span></span><br><span class=\"line\">    fp.writelines([<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>, <span class=\"string\">&quot;007,dl,21,male&quot;</span>])</span><br><span class=\"line\">    fp.writelines(<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四部分-正则表达式\"><a href=\"#第四部分-正则表达式\" class=\"headerlink\" title=\"第四部分 正则表达式\"></a>第四部分 正则表达式</h2><h3 id=\"1、正则表达式中的元字符\"><a href=\"#1、正则表达式中的元字符\" class=\"headerlink\" title=\"1、正则表达式中的元字符\"></a>1、正则表达式中的元字符</h3><ul>\n<li><code>.</code> <strong>匹配任何字符，但不包括换行符。</strong></li>\n<li><code>[\\s\\S]</code>  <strong>匹配任何字符，包括换行符和空白字符。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; 正则表达式中的元字符</span></span><br><span class=\"line\"><span class=\"string\">\\d \t\t 可以匹配一个数字 \t\t\t\t\t  等价于[0-9] </span></span><br><span class=\"line\"><span class=\"string\">\\D(大写)  可以匹配一个非数字 \t\t\t\t\t 等价于[^0-9] </span></span><br><span class=\"line\"><span class=\"string\">\\d\\d \t 可以匹配两个数字 </span></span><br><span class=\"line\"><span class=\"string\">\\w \t\t 可以匹配一个数字或字母或下划线                 等价于[A-Za-z0-9_] </span></span><br><span class=\"line\"><span class=\"string\">\\W(大写) \t可以匹配一个非数字非字母非下划线的符号          等价于[^A-Za-z0-9_]</span></span><br><span class=\"line\"><span class=\"string\">\\w\\w \t 可以 匹配 00 或者 0a等</span></span><br><span class=\"line\"><span class=\"string\">. \t\t 可以匹配任意字符，特殊字符除外如:\\n</span></span><br><span class=\"line\"><span class=\"string\">\\s \t\t 可以匹配空白字符 如：一个空格或\\n或\\r等   等价于[\\f\\n\\r\\v]  </span></span><br><span class=\"line\"><span class=\"string\">\\S(大写)\t可以匹配一个非空白字符 \t\t\t\t等价于[^\\f\\n\\r\\v]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、匹配长字符\"><a href=\"#2、匹配长字符\" class=\"headerlink\" title=\"2、匹配长字符\"></a>2、匹配长字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; 匹配长字符</span></span><br><span class=\"line\"><span class=\"string\">*代表0-无穷个字符</span></span><br><span class=\"line\"><span class=\"string\">+代表1-无穷个字符</span></span><br><span class=\"line\"><span class=\"string\">?代表0-1个字符</span></span><br><span class=\"line\"><span class=\"string\">&#123;n,m&#125;代表n-m个字符 （左闭右闭）</span></span><br><span class=\"line\"><span class=\"string\">\\d&#123;3&#125;-\\d&#123;3,8&#125; 可以匹配001-123或001-12345等</span></span><br><span class=\"line\"><span class=\"string\">^表示行的开头，^\\d表示必须以数字开头</span></span><br><span class=\"line\"><span class=\"string\">$表示行的结束，\\d$表示必须以数字结束</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、match方法\"><a href=\"#3、match方法\" class=\"headerlink\" title=\"3、match方法\"></a>3、match方法</h3><ul>\n<li>匹配到了返回Match对象</li>\n<li>匹配不到返回None</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;001-12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\d&#123;3&#125;-\\d&#123;3,8&#125;&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>match结合if结构进行判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:  <span class=\"comment\"># 匹配成功</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ok&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:  <span class=\"comment\"># 匹配失败</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;failed&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、re-split-切分字符串\"><a href=\"#4、re-split-切分字符串\" class=\"headerlink\" title=\"4、re.split()切分字符串\"></a>4、re.split()切分字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;切分字符串</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">str_a = <span class=\"string\">&quot;a,b;; c  d&quot;</span></span><br><span class=\"line\">splits = re.split(<span class=\"string\">r&quot;\\W+&quot;</span>, str_a)  <span class=\"comment\"># 匹配0-n个非数字非字母符号作为切分符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(splits)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、group分组提取\"><a href=\"#5、group分组提取\" class=\"headerlink\" title=\"5、group分组提取\"></a>5、group分组提取</h3><ul>\n<li><p>通过() 提取匹配到的内容</p>\n<p>group(0) 代表匹配到的字符串<br>group(1) 代表提取出的第一个子字符串<br>group(2) 代表提取出的第二个子字符串<br>groups() 将所有提取的字符串串存储到元组中</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;001-12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、匹配时间19-05-30\"><a href=\"#6、匹配时间19-05-30\" class=\"headerlink\" title=\"6、匹配时间19:05:30\"></a>6、匹配时间19:05:30</h3><ul>\n<li>注意时间的格式和规则：<br>h : 00-23<br>m : 00-59<br>s : 00-59</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;19:05:30&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-P-name-变量赋值\"><a href=\"#7、-P-name-变量赋值\" class=\"headerlink\" title=\"7、(?P&lt; name &gt; ) 变量赋值\"></a>7、(?P&lt; name &gt; ) 变量赋值</h3><ul>\n<li>将提取到的数据赋值给name变量<br>再利用group(“name”)提取</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_card = <span class=\"string\">&quot;20051001&quot;</span></span><br><span class=\"line\">re_pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;(?P&lt;year&gt;[1-2]\\d&#123;3&#125;)(?P&lt;month&gt;[0][1-9]|[1][0-2])(?P&lt;day&gt;[0][1-9]|[1-2][0-9])&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 提取 年 月 日</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re_pattern.<span class=\"keyword\">match</span>(id_card)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;year&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;month&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;day&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、贪婪匹配\"><a href=\"#8、贪婪匹配\" class=\"headerlink\" title=\"8、贪婪匹配\"></a>8、贪婪匹配</h3><ul>\n<li>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符<br>\\d+则是贪婪匹配<br>\\d+?则是非贪婪匹配</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&#x27;(\\d+)(0*)&#x27;</span>, <span class=\"string\">&#x27;102300&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&#x27;^(\\d+?)(0*)$&#x27;</span>, <span class=\"string\">&#x27;102300&#x27;</span>)  <span class=\"comment\"># 加上$符才会匹配到尾部的0，否则只会停在第一个0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、-的区别\"><a href=\"#9、-的区别\" class=\"headerlink\" title=\"9、.  .*  .*? 的区别\"></a>9、.  .*  .*? 的区别</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;xxIxxjshdxxlovexxsffaxxpythonxx&#x27;</span></span><br><span class=\"line\">infos1 = re.findall(<span class=\"string\">&#x27;xx(.)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos1)</span><br><span class=\"line\">infos2 = re.findall(<span class=\"string\">&#x27;xx(.*)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos2)</span><br><span class=\"line\">infos3 = re.findall(<span class=\"string\">&#x27;xx(.*?)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、re-match和re-search的区别\"><a href=\"#10、re-match和re-search的区别\" class=\"headerlink\" title=\"10、re.match和re.search的区别\"></a>10、re.match和re.search的区别</h3><ul>\n<li>re.match(pattern, string)：<ul>\n<li>re.match 只从字符串的 <em><strong>开头开始匹配</strong></em>，如果字符串的开头符合正则表达式的模式，则返回匹配对象；如果字符串开头不匹配，则返回 None。<br>适合用于检查字符串的开头是否符合某种模式。</li>\n</ul>\n</li>\n<li>re.search(pattern, string)：<ul>\n<li>re.search 在 <em><strong>整个字符串中搜索</strong></em> ，只要找到第一个匹配的子串，就返回匹配对象；如果没有找到匹配的子串，则返回 None。<br>适合用于在整个字符串中查找某种模式的出现。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;a12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\d+&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>)  <span class=\"comment\"># 返回None</span></span><br><span class=\"line\">search = re.search(<span class=\"string\">r&quot;\\d+&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(search)  <span class=\"comment\"># 返回Search对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、预编译\"><a href=\"#11、预编译\" class=\"headerlink\" title=\"11、预编译\"></a>11、预编译</h3><ul>\n<li>re.compile(正则表达式)<br>便于修改正则表达式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;19:05:30&quot;</span></span><br><span class=\"line\">re_pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">match</span> = re_pattern.<span class=\"keyword\">match</span>(str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五部分-爬虫\"><a href=\"#第五部分-爬虫\" class=\"headerlink\" title=\"第五部分 爬虫\"></a>第五部分 爬虫</h2><ul>\n<li>爬虫是一种模仿浏览器上网过程的一种程序，可以获取一些网页的数据</li>\n</ul>\n<h3 id=\"1、URL\"><a href=\"#1、URL\" class=\"headerlink\" title=\"1、URL\"></a>1、URL</h3><ul>\n<li>统一资源定位符  uniform resource locator</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/posts/c00b24b1/LjTR2tNPAO81cnU.png\" class=\"\"></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http: 超文本传输协议  HyperText Transfer Protocol  默认端口 80</span><br><span class=\"line\">https: 安全的超文本传输协议  security               默认端口 443</span><br><span class=\"line\">www.example.com  域名</span><br><span class=\"line\">80  端口 port</span><br><span class=\"line\">/path/to/myfile.html 资源路径</span><br><span class=\"line\">?key1=value1&amp;key2=value2  参数 &amp; 表示多个参数的拼接</span><br><span class=\"line\"># 锚点</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、准备\"><a href=\"#2、准备\" class=\"headerlink\" title=\"2、准备\"></a>2、准备</h3><ul>\n<li>安装requests包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pip 换源<ul>\n<li>改写该文件内容 <code>C:\\Users\\dongjiaxin\\AppData\\Roaming\\pip\\pip.ini</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> <span class=\"keyword\">global</span>.index-url http://pypi.douban.com/simple/</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> install.trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>User-Agent： 身份标识  表示你是哪个浏览器</p>\n</li>\n<li><p>status_code：状态码</p>\n<ul>\n<li>200 OK：请求成功，服务器成功返回请求的数据。</li>\n<li>201 Created：请求成功，服务器成功创建了新的资源。</li>\n<li>204 No Content：请求成功，服务器成功处理了请求，但没有返回任何内容。</li>\n<li>400 Bad Request：客户端请求错误，服务器无法理解请求。</li>\n<li>401 Unauthorized：请求要求用户认证，用户没有提供有效的认证信息。</li>\n<li>403 Forbidden：服务器拒绝请求，通常是因为没有足够的权限。</li>\n<li>404 Not Found：请求的资源不存在。</li>\n<li>500 Internal Server Error：服务器内部错误，无法完成请求。</li>\n</ul>\n</li>\n<li><p>使用随机生成的user-agnet</p>\n<ul>\n<li>下载包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fake_useragent</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fake_useragent <span class=\"keyword\">import</span> UserAgnet</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class=\"line\">  py  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"获取百度网页源码\"><a href=\"#获取百度网页源码\" class=\"headerlink\" title=\"获取百度网页源码\"></a>获取百度网页源码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description:  获取百度搜索源代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\">    header = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-agent&quot;</span>:<span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url, headers=header)</span><br><span class=\"line\">    response.encoding = <span class=\"string\">&quot;utf-8&quot;</span>  <span class=\"comment\"># 修改编码形式，防止中文乱码</span></span><br><span class=\"line\">    <span class=\"comment\"># print(response.content)  # 网页代码二进制</span></span><br><span class=\"line\">    <span class=\"comment\"># print(response.text)  # 网页代码文本</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response.status_code)  <span class=\"comment\"># 状态码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-http-httpbin-org-get-网站测试get请求\"><a href=\"#使用-http-httpbin-org-get-网站测试get请求\" class=\"headerlink\" title=\"使用 http://httpbin.org/get 网站测试get请求\"></a>使用 <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a> 网站测试get请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 使用 http://httpbin.org/get 网站测试get请求</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://httpbin.org/get&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、豆瓣top250\"><a href=\"#3、豆瓣top250\" class=\"headerlink\" title=\"3、豆瓣top250\"></a>3、豆瓣top250</h3><ul>\n<li><strong>可以把获取的html保存到本地，然后用浏览器打开，查看是否正确</strong></li>\n</ul>\n<h3 id=\"4、Xpath解析（静态页面）\"><a href=\"#4、Xpath解析（静态页面）\" class=\"headerlink\" title=\"4、Xpath解析（静态页面）\"></a>4、Xpath解析（静态页面）</h3><ul>\n<li><p>XPath 是一种用于在 XML 和 HTML 文档中定位和选择节点的查询语言。可以帮助开发者轻松地从 XML 和 HTML 数据中提取、过滤和处理所需的信息，是数据解析和处理中的重要工具之一。</p>\n</li>\n<li><p>下载相关包</p>\n<ul>\n<li><pre><code class=\"python\">pip install lxml\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 导入相关包</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    from lxml import etree</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>两种创建解析对象的方式</p>\n<ul>\n<li><p>解析本地html</p>\n<ul>\n<li><pre><code class=\"python\">html = etree.parse(本地文件路径)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 解析爬取下来的html</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    html = etree.HTML(response.text)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Xpath相关语法\"><a href=\"#Xpath相关语法\" class=\"headerlink\" title=\"Xpath相关语法\"></a>Xpath相关语法</h4><ul>\n<li><p>.xpath()，获取所有符号规则的内容，并返回一个列表</p>\n</li>\n<li><p><strong>.xpath() 返回的元素对象，还可以继续进行xpath解析</strong></p>\n</li>\n<li><pre><code class=\"python\">/\t表示从根节点选取\n//\t从当前节点选取子孙节点\n.\t选取当前节点\n./\t表示从当前节点\n..\t选取当前节点的父节点\n@\t选取属性\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 基本语法</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class=\"line\">  &lt;html&gt;&lt;body&gt;&lt;div&gt;&amp;#13;</span><br><span class=\"line\">      &lt;ul&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&amp;#13;</span><br><span class=\"line\">  &lt;/li&gt;&lt;/ul&gt;&amp;#13;</span><br><span class=\"line\">  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  html = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())</span><br><span class=\"line\">  result = etree.tostring(html).decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">  # 基本语法</span><br><span class=\"line\">  result = html.xpath(&#x27;.&#x27;)  # .获取当前节点 html</span><br><span class=\"line\">  result = html.xpath(&#x27;..&#x27;)  # .. 获取当前节点的父节点 空</span><br><span class=\"line\">  result = html.xpath(&#x27;./body&#x27;)  # 选取子节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//div&#x27;)  # 选取所有的子孙节点div</span><br><span class=\"line\">  result = html.xpath(&#x27;//body&#x27;)  # 选取子孙节点body</span><br><span class=\"line\">  result = html.xpath(&#x27;//*&#x27;)  # //* 选取所有节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//li&#x27;)  # //li 获取所有的li节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//li/a&#x27;)  # //li/a 获取li节点的所有的子节点a</span><br><span class=\"line\">  result = html.xpath(&#x27;//ul/a&#x27;)  # //ul/a 无返回结果，因为ul的子节点不是a</span><br><span class=\"line\">  result = html.xpath(&#x27;//ul//a&#x27;)  # //ul//a 获取ul的所有孙子节点a</span><br><span class=\"line\">  result = html.xpath(&#x27;/html/body/div&#x27;)  # 逐层定位body的所有的div子节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//div&#x27;)  # 定位到所有的div节点</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"获取父节点\"><a href=\"#获取父节点\" class=\"headerlink\" title=\"获取父节点\"></a>获取父节点</h5><ul>\n<li><p>获取a父节点li的class属性值</p>\n</li>\n<li><pre><code>result = html.xpath(&#39;//a[@href=&quot;link5.html&quot;]/../@class&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 索引定位</span><br><span class=\"line\"></span><br><span class=\"line\">- ```</span><br><span class=\"line\">  result = html.xpath(&#x27;//li[1]&#x27;)  # 定位到第一个li节点</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"属性定位\"><a href=\"#属性定位\" class=\"headerlink\" title=\"属性定位\"></a>属性定位</h5><ul>\n<li><p>定位class属性值为[“item-0”]的li节点</p>\n</li>\n<li><pre><code class=\"python\">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 属性获取</span><br><span class=\"line\"></span><br><span class=\"line\">- 获取li节点下所有字节点a的href属性值</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  result = html.xpath(&#x27;//li/a/@href&#x27;)  # </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"文本获取\"><a href=\"#文本获取\" class=\"headerlink\" title=\"文本获取\"></a>文本获取</h5><ul>\n<li><p>通过 &#x2F;text()方法获取指定节点中的文本</p>\n<ul>\n<li><pre><code class=\"python\">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]/a/text()&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 通过 //text()获取所有指定节点的所有子节点的文本，包括节点本身的文本（包含缩进换行等字符）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;)  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"属性多值匹配\"><a href=\"#属性多值匹配\" class=\"headerlink\" title=\"属性多值匹配\"></a>属性多值匹配</h5><ul>\n<li><p>使用<strong>contains函数</strong>进行属性多值匹配</p>\n</li>\n<li><p>这里的li节点的class属性有两个属性值li、li-first</p>\n</li>\n<li><pre><code class=\"python\">text = &#39;&#39;&#39;\n&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;\n&#39;&#39;&#39;\nhtml = etree.HTML(text)\nresult = html.xpath(&#39;//li[contains(@class, &quot;li&quot;)]/a/text()&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 多属性匹配</span><br><span class=\"line\"></span><br><span class=\"line\">- 通过 and 连接class属性和name属性</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  text = &#x27;&#x27;&#x27;</span><br><span class=\"line\">  &lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">  &#x27;&#x27;&#x27;</span><br><span class=\"line\">  html = etree.HTML(text)</span><br><span class=\"line\">  result = html.xpath(&#x27;//li[contains(@class,&quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;)  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"5、数据格式\"><a href=\"#5、数据格式\" class=\"headerlink\" title=\"5、数据格式\"></a>5、数据格式</h3><ul>\n<li>查看网页包文件中，响应标头中的Content-Type</li>\n<li><img src=\"/posts/c00b24b1/image-20230723143523063.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230723143638690.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230723144731031.png\" class=\"\"></li>\n</ul>\n<h4 id=\"5-1-text\"><a href=\"#5-1-text\" class=\"headerlink\" title=\"5.1 text\"></a>5.1 text</h4><ul>\n<li>使用.text方法接收，接收的是网页的html</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\">html = response.text</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-json\"><a href=\"#5-2-json\" class=\"headerlink\" title=\"5.2 json\"></a>5.2 json</h4><ul>\n<li>使用.json()方法接收，接收json字符串，并返回一个dict</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\">data = response.json()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json和dict的区别<ul>\n<li>可以复制网页的json数据，在json在线解析器上解析，注意dict不能用json的在线解析</li>\n<li><strong>输出时，json字符串中的字符被双引号引着，dict中的字符被单引号引着</strong></li>\n<li>在python中，json数据被识别为字符串，所以不能像字典一样访问其中的元素</li>\n<li>在json文件中，可以存放json字符串，并且可以用通过ctrl+alt+l的方式，将json字符串正确的格式化</li>\n</ul>\n</li>\n<li>json和dict的相互转换</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"comment\"># dict转为json字符串</span></span><br><span class=\"line\"><span class=\"comment\"># ensure_ascii默认为True，转为进制数据</span></span><br><span class=\"line\"><span class=\"comment\"># ensure_ascii为False，返回正常数据</span></span><br><span class=\"line\">js = json.dumps(response.json(), ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(js))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># json字符串转为dict</span></span><br><span class=\"line\">di = json.loads(js)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-二进制（图片和视频）\"><a href=\"#5-3-二进制（图片和视频）\" class=\"headerlink\" title=\"5.3 二进制（图片和视频）\"></a>5.3 二进制（图片和视频）</h4><ul>\n<li>请求图片和视频时，会返回二进制数据，可以使用.content接收</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url<span class=\"punctuation\">,</span> headers=headers)</span><br><span class=\"line\">con = response.content</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用’wb’模式，写入对应后缀（jsp&#x2F;png&#x2F;mp4）的文件中，就可以正常打开了</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">\tfp.write(con)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、get和post请求\"><a href=\"#6、get和post请求\" class=\"headerlink\" title=\"6、get和post请求\"></a>6、get和post请求</h3><h4 id=\"6-1-get请求\"><a href=\"#6-1-get请求\" class=\"headerlink\" title=\"6.1 get请求\"></a>6.1 get请求</h4><ul>\n<li>大多数网页都是get请求，可以通过.get()方法的params参数，传入请求参数</li>\n</ul>\n<h4 id=\"6-2-post（百度翻译）\"><a href=\"#6-2-post（百度翻译）\" class=\"headerlink\" title=\"6.2 post（百度翻译）\"></a>6.2 post（百度翻译）</h4><ul>\n<li>部分网页是post请求，可以通过.post()方法的data参数，传入表单数据</li>\n</ul>\n<h3 id=\"7、BeautifulSoup解析（静态页面）\"><a href=\"#7、BeautifulSoup解析（静态页面）\" class=\"headerlink\" title=\"7、BeautifulSoup解析（静态页面）\"></a>7、BeautifulSoup解析（静态页面）</h3><ul>\n<li><p>爬取豆瓣读书时，使用了bs4解析方式</p>\n</li>\n<li><p>下载bs4解析包</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install bs4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先解析html。然后定位标签，返回列表。最后正则匹配数据，也返回一个列表。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bs = bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">element = re.findall(<span class=\"string\">r&#x27;&lt;a class=&quot;nbg&quot; href=&quot;.*?&quot; title=&quot;(?P&lt;book&gt;.*?)&quot;&gt;\\n&#x27;</span>, bs)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、京东评论（动态抓包）\"><a href=\"#8、京东评论（动态抓包）\" class=\"headerlink\" title=\"8、京东评论（动态抓包）\"></a>8、京东评论（动态抓包）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo04JDComment.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、豆瓣Top250（非详情页）\"><a href=\"#9、豆瓣Top250（非详情页）\" class=\"headerlink\" title=\"9、豆瓣Top250（非详情页）\"></a>9、豆瓣Top250（非详情页）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo05SpiderDouBan.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、豆瓣读书（详情页）\"><a href=\"#10、豆瓣读书（详情页）\" class=\"headerlink\" title=\"10、豆瓣读书（详情页）\"></a>10、豆瓣读书（详情页）</h3><ul>\n<li>代码文件</li>\n<li>使用了xpath解析和bs4解析方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo01DoubanReadBook.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、WallHaven（高清图片）\"><a href=\"#11、WallHaven（高清图片）\" class=\"headerlink\" title=\"11、WallHaven（高清图片）\"></a>11、WallHaven（高清图片）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo06WallHaven.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、大麦网（selenium）\"><a href=\"#11、大麦网（selenium）\" class=\"headerlink\" title=\"11、大麦网（selenium）\"></a>11、大麦网（selenium）</h3><ul>\n<li>代码文件</li>\n<li>由于大麦网网页跳转时的网址不会改变，该方式获取的数据量很少</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo02SeleniumDaMai.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、大麦网（动态抓包）\"><a href=\"#12、大麦网（动态抓包）\" class=\"headerlink\" title=\"12、大麦网（动态抓包）\"></a>12、大麦网（动态抓包）</h3><ul>\n<li>代码文件</li>\n<li>大麦网采用的是，异步加载数据的方式，然后js渲染，所以动态抓包可以获取更多的数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo03JsonDamai.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、遇到的坑\"><a href=\"#13、遇到的坑\" class=\"headerlink\" title=\"13、遇到的坑\"></a>13、遇到的坑</h3><h4 id=\"13-1-显示字符串中特殊字符\"><a href=\"#13-1-显示字符串中特殊字符\" class=\"headerlink\" title=\"13.1 显示字符串中特殊字符\"></a>13.1 显示字符串中特殊字符</h4><ul>\n<li>使用””” … “””包含字符串，并放到列表，打印输出</li>\n<li>‘’’ … ‘’’ 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">f&quot;&quot;&quot;<span class=\"subst\">&#123;bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)[<span class=\"number\">0</span>]&#125;</span>&quot;&quot;&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-2-替换字符串中的转义字符不要加-r\"><a href=\"#13-2-替换字符串中的转义字符不要加-r\" class=\"headerlink\" title=\"13.2 替换字符串中的转义字符不要加 r\"></a>13.2 替换字符串中的转义字符不要加 r</h4><ul>\n<li>替换转义字符不要加 r</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.replace(<span class=\"string\">&quot;\\xa0&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-3-xpath二次解析尽量开头带上\"><a href=\"#13-3-xpath二次解析尽量开头带上\" class=\"headerlink\" title=\"13.3 xpath二次解析尽量开头带上 .&#x2F;\"></a>13.3 xpath二次解析尽量开头带上 .&#x2F;</h4><ul>\n<li>如果不带可能会导致二次解析定位不到</li>\n<li>selenium的xpath解析可以直接  div&#x2F;div[@class&#x3D;’info’]&#x2F;&#x2F;a&#x2F;span[1]</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li_list = tree.xpath(<span class=\"string\">r&quot;//ol[@class=&#x27;grid_view&#x27;]/li&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">    title = li.xpath(<span class=\"string\">&quot;./div/div[@class=&#x27;info&#x27;]//a/span[1]/text()&quot;</span>)[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-4-正则匹配的字符串一般不要含有\"><a href=\"#13-4-正则匹配的字符串一般不要含有\" class=\"headerlink\" title=\"13.4 正则匹配的字符串一般不要含有 |\"></a>13.4 正则匹配的字符串一般不要含有 |</h4><ul>\n<li>如果带了，会匹配不到，可以先使用.replace()方法替换掉</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一般不要匹配 | ，不然匹配不到</span></span><br><span class=\"line\"> <span class=\"comment\"># directore = &quot;|&quot;.join(列表)</span></span><br><span class=\"line\">directo = <span class=\"string\">&quot;#&quot;</span>.join(列表)</span><br><span class=\"line\">search = re.search(<span class=\"string\">r&quot;导演: (?P&lt;director&gt;.*?) .*?主演: (?P&lt;actor&gt;.*?) .*?#(?P&lt;time&gt;.*?) (?P&lt;country&gt;.*?) (?P&lt;type_&gt;.*)&quot;</span>,director)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-5-正则匹配表达式中不要含有-span-或-span\"><a href=\"#13-5-正则匹配表达式中不要含有-span-或-span\" class=\"headerlink\" title=\"13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;\"></a>13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;</h4><ul>\n<li>可以使用 .*? 忽略它，不然匹配不到</li>\n</ul>\n<h4 id=\"13-6-反爬导致解析获取的列表为空，造成-list-out-of-range\"><a href=\"#13-6-反爬导致解析获取的列表为空，造成-list-out-of-range\" class=\"headerlink\" title=\"13.6 反爬导致解析获取的列表为空，造成 list out of range\"></a>13.6 反爬导致解析获取的列表为空，造成 list out of range</h4><ul>\n<li>反爬导致解析获取的列表为空，由于索引取值，造成列表越界异常</li>\n<li>可以捕获该异常代码，保证后续的url请求不受阻</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27; ... &#x27;&#x27;&#x27; 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    bs = bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    bs = bs[<span class=\"number\">0</span>]  <span class=\"comment\"># 提取列表中的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;反爬机制&quot;</span>, e)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-7-应对部分元素为空，导致list-out-of-range错误\"><a href=\"#13-7-应对部分元素为空，导致list-out-of-range错误\" class=\"headerlink\" title=\"13.7 应对部分元素为空，导致list out of range错误\"></a>13.7 应对部分元素为空，导致list out of range错误</h4><ul>\n<li><p>导致此错误的原因一般都是列表为空，但是使用了索引获取其中的元素</p>\n</li>\n<li><p><strong>可以自定义一个函数，用来捕获这类错误</strong>，</p>\n<p>如果报错，则返回一个空值；如果不报错，则返回处理好的值</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 捕获元素不存在时的错误</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">element, by, pattern, split</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.find_element(by, pattern).text.split(split)[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-8-通过xpath获取标签外的文本内容\"><a href=\"#13-8-通过xpath获取标签外的文本内容\" class=\"headerlink\" title=\"13.8 通过xpath获取标签外的文本内容\"></a>13.8 通过xpath获取标签外的文本内容</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230724090823259.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree.xpath( <span class=\"string\">&quot;//div[@class=&#x27;subject clearfix&#x27;]/div[@id=&#x27;info&#x27;]/span[@class=&#x27;pl&#x27;][contains(text(), &#x27;页数:&#x27;)]/following-sibling::text()[1]&quot;</span>,html)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>或者使用bs4解析</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.findall(r&#x27;定价:.*? (?P&lt;money&gt;.*?)&lt;br/&gt;&#x27;, bs)[0]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"13-9-遇到无法避免的异常\"><a href=\"#13-9-遇到无法避免的异常\" class=\"headerlink\" title=\"13.9 遇到无法避免的异常\"></a>13.9 遇到无法避免的异常</h4><ul>\n<li>遇到无法避免的异常时，可以捕获该异常信息，确保后续程序正常运行</li>\n</ul>\n<h2 id=\"第六部分-selenium半自动化工具\"><a href=\"#第六部分-selenium半自动化工具\" class=\"headerlink\" title=\"第六部分 selenium半自动化工具\"></a>第六部分 selenium半自动化工具</h2><ul>\n<li>首先下载selenium包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>下载对应浏览器版本的浏览器驱动，并放到处于环境变量的包中</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230723151140532.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>导入包</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenuim <span class=\"keyword\">import</span> webdriver</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、等待网页js渲染\"><a href=\"#1、等待网页js渲染\" class=\"headerlink\" title=\"1、等待网页js渲染\"></a>1、等待网页js渲染</h3><h3 id=\"2、通过cookie免密登录\"><a href=\"#2、通过cookie免密登录\" class=\"headerlink\" title=\"2、通过cookie免密登录\"></a>2、通过cookie免密登录</h3><h2 id=\"第七部分-Pandas\"><a href=\"#第七部分-Pandas\" class=\"headerlink\" title=\"第七部分 Pandas\"></a>第七部分 Pandas</h2><ul>\n<li>安装pandas包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll pandas</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装jupyter notebook</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在pycharm终端启动jupyter notebook</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\BigData26\\Code\\python\\bigdata26&gt;jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入pandas的包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔索引\"><a href=\"#布尔索引\" class=\"headerlink\" title=\"布尔索引\"></a>布尔索引</h3><ul>\n<li>使用布尔索引可以提取指定条件的值</li>\n<li>df[‘Age’] &gt; 32的值</li>\n</ul>\n<img src=\"/posts/c00b24b1/image-20230724212046687.png\" class=\"\">\n\n<ul>\n<li>如下代码，可以获取次df的Age列，值大于32的行</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[<span class=\"string\">&#x27;Age&#x27;</span>] &gt; <span class=\"number\">32</span>]</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c00b24b1/image-20230724212222545.png\" class=\"\">\n\n<h3 id=\"pandas-读取文件\"><a href=\"#pandas-读取文件\" class=\"headerlink\" title=\"pandas 读取文件\"></a>pandas 读取文件</h3><ul>\n<li><p>pd.read_csv()方法中，index_col参数和names参数的区别</p>\n<ul>\n<li><p>index_col需要指定，文件中已有的head信息，才能够读取</p>\n<ul>\n<li><pre><code class=\"python\">id,name,age,gender,clazz\n1500100001,施笑槐,22,女,文科六班\n\ndf_student = pd.read_csv(&#39;../data/student.csv&#39;,index_col=[&quot;id&quot;,&quot;name&quot;,&quot;age&quot;,&quot;gender&quot;,&quot;clazz&quot;])\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - names参数，会当作读取文件的列名</span><br><span class=\"line\"></span><br><span class=\"line\">### DF取值</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1、取列</span><br><span class=\"line\"></span><br><span class=\"line\">- df[&quot;name&quot;]，注意是两对中括号</span><br><span class=\"line\">  - 取列名为name的列</span><br><span class=\"line\">- df[[&quot;name1&quot;,&quot;name2&quot;,&quot;name3]]</span><br><span class=\"line\">  - 取列名为name1、name2、name3的列</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2、取行</span><br><span class=\"line\"></span><br><span class=\"line\">- df.iloc[[0,1]]，注意是两对中括号</span><br><span class=\"line\">  - 取行索引为0，为1的行</span><br><span class=\"line\">- df.loc[[&quot;name1&quot;,&quot;name2&quot;]]</span><br><span class=\"line\">  - 取行名为name1，name2的行</span><br><span class=\"line\">- df_student[1:3]</span><br><span class=\"line\">  - 取行索引，[2,3)的所有行</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3、取行列</span><br><span class=\"line\"></span><br><span class=\"line\">- 可以通过.iloc[ 行索引切片, 列索引切片 ]的方式取行列</span><br><span class=\"line\">  - df_student.iloc[1:4,0:2]</span><br><span class=\"line\">    - 取[1,4)行，且[0,2)列</span><br><span class=\"line\">      - ![](python笔记/image-20230724214335918.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 连接</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1、join</span><br><span class=\"line\"></span><br><span class=\"line\">- 默认情况下他是把行索引相同的数据合并到一起</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724153228728.png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2、merge:</span><br><span class=\"line\"></span><br><span class=\"line\">- 按照指定的列把数据按照一定的方式合并到一起</span><br><span class=\"line\">  \t左外连接、右外连接、全外连接、内连接、</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724153243607.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 分组聚合</span><br><span class=\"line\"></span><br><span class=\"line\">- df.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])</span><br><span class=\"line\">  - 先根据clazz列进行分组和默认的排序</span><br><span class=\"line\">  - 然后再根据subject_id列，在clazz分组的基础上，再进行分组和默认的排序</span><br><span class=\"line\">  - 最后聚合的聚合，根据分的各个组进行的聚合操作</span><br><span class=\"line\">  - 除了指定列，其他未分组的列也会进行聚合操作</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724215256243.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- df_result.groupby([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;name&quot;]).sum(&quot;score&quot;)</span><br><span class=\"line\">  -  由于分组列太多（分组过后，各组只有一条数据），聚合不起作用，可以用来显示分组过后的情况</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223358859](python笔记/image-20230724223358859.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- rank()聚合</span><br><span class=\"line\">  - rank只会排名，不会改变原来数据的顺序</span><br><span class=\"line\">  - 可以根据如下代码，取各个班级各个学科得前三名</span><br><span class=\"line\">  - ascending=False，代表值降序，从1开始排序</span><br><span class=\"line\"></span><br><span class=\"line\">df_merge[&quot;rank&quot;] = df_merge.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])[&#x27;score&#x27;].rank(&quot;dense&quot;,ascending=False)</span><br><span class=\"line\"></span><br><span class=\"line\">df_result = df_merge[df_merge[&quot;rank&quot;]&lt;=3]  # 取各班各科前三名的行</span><br><span class=\"line\"></span><br><span class=\"line\">如图，代码结果（在day11的homework文件中）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223247119](python笔记/image-20230724223247119.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223315189](python笔记/image-20230724223315189.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### sort_values()分组排序</span><br><span class=\"line\"></span><br><span class=\"line\">- df_result.sort_values([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;rank&quot;],ascending=[False,False,False]).reset_index(drop=True)</span><br><span class=\"line\">  - 使用sort_valus()方法进行分组排序</span><br><span class=\"line\">  - reset_index并重置索引，drop=Ture删除原来的乱序索引</span><br><span class=\"line\">  - 传给ascending参数一个bool列表，指定每列的排序方式，默认为True(升序)</span><br><span class=\"line\">  - **sort_values() 会先排序指定的第一列，然后在此基础上继续排序其他列，有分组的作用，并按每列指定的规则排序**</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230725102707716](python笔记/image-20230725102707716.png)</span><br><span class=\"line\"></span><br><span class=\"line\"># Python 内存管理和垃圾回收</span><br><span class=\"line\"></span><br><span class=\"line\">基于C源码 </span><br><span class=\"line\"></span><br><span class=\"line\">- 引用计数器</span><br><span class=\"line\">- 标记清除</span><br><span class=\"line\">- 分代回收</span><br><span class=\"line\">- 缓存机制</span><br><span class=\"line\"></span><br><span class=\"line\">## 1. 引用计数器</span><br><span class=\"line\"></span><br><span class=\"line\">### 环状双向链表 refchain</span><br><span class=\"line\"></span><br><span class=\"line\">python创建对象时会把任何对象放在refchain中</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">name = &#x27;西西&#x27;</span><br><span class=\"line\">age = 18</span><br><span class=\"line\">height = 1.81</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数】</span><br><span class=\"line\">name = <span class=\"string\">&#x27;西西&#x27;</span></span><br><span class=\"line\">new_name = name</span><br><span class=\"line\"></span><br><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、val=<span class=\"number\">18</span>】</span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、元素个数、值】</span><br><span class=\"line\">hobby = [<span class=\"string\">&#x27;唱&#x27;</span>,<span class=\"string\">&#x27;跳&#x27;</span>,<span class=\"string\">&#x27;rap&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>C源码中每个对象都有不一样的存储结构数据   PyObject结构体（4个值） PyVarObject &#x3D; PyObject + ob_size</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\">内部会创建：</span><br><span class=\"line\">\t_ob_next = refchain中的下一个对象</span><br><span class=\"line\">    _ob_prev = refchain中的上一个对象</span><br><span class=\"line\">    ob_refcnt = <span class=\"number\">1</span> 引用计数  </span><br><span class=\"line\">    ob_type = <span class=\"built_in\">float</span></span><br><span class=\"line\">    ob_fval = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用计数器\"><a href=\"#引用计数器\" class=\"headerlink\" title=\"引用计数器\"></a>引用计数器</h3><p>创建一个对象的时候 默认refcnt是1</p>\n<ul>\n<li>引用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">9999</span>   <span class=\"comment\"># refcnt = 1</span></span><br><span class=\"line\">b = a      <span class=\"comment\"># refcnt + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除引用</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b      <span class=\"comment\"># refcnt - 1</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a      <span class=\"comment\"># refcnt - 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当一个对象的引用计数器为0时，表示这个对象不存在了，这个对象就是一个垃圾  就回收了</span></span><br><span class=\"line\"><span class=\"comment\"># 回收</span></span><br><span class=\"line\">\t<span class=\"comment\"># 1.对象从refchain中移除</span></span><br><span class=\"line\">    <span class=\"comment\"># 2.对象销毁，内存归还</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>但是会出现以下问题</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]   <span class=\"comment\"># a\\refcnt = 1</span></span><br><span class=\"line\">b = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]   <span class=\"comment\"># b\\refcnt = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(b)   <span class=\"comment\"># b\\refcnt + 1</span></span><br><span class=\"line\">b.append(a)   <span class=\"comment\"># a\\refcnt + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> a         <span class=\"comment\"># a\\refcnt - 1</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b         <span class=\"comment\"># b\\refcnt - 1   值都还是1   没有实现回收的功能</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-标记清除\"><a href=\"#2-标记清除\" class=\"headerlink\" title=\"2. 标记清除\"></a>2. 标记清除</h2><ul>\n<li>目的： 解决引用计数器出现的循环引用的问题</li>\n<li>实现：在底层再次维护一个链表，用于存放可能出现循环引用的对象（list,tuple,dict,set）</li>\n</ul>\n<img src=\"/posts/c00b24b1/hZ9SjgCDRMUGOxT.png\" class=\"\" title=\"hZ9SjgCDRMUGOxT\">\n\n<blockquote>\n<p>在python内部<code>某种情况</code>下触发，回头触发扫描<code>可能出现循环引用的链表</code>中的每个元素，检查该对象是否出现一个循环引用的现象，如果出现，refcnt - 1 ；如果refcnt&#x3D;0，垃圾回收。</p>\n</blockquote>\n<ul>\n<li><p>问题：</p>\n<p>​\t什么时候扫描？</p>\n<p>​\t可能存在扫描循环引用的链表代价大，耗时久。</p>\n</li>\n</ul>\n<h2 id=\"3-分代回收\"><a href=\"#3-分代回收\" class=\"headerlink\" title=\"3. 分代回收\"></a>3. 分代回收</h2><img src=\"/posts/c00b24b1/hZ9SjgCDRMUGOxT.png\" class=\"\" title=\"image.png\">\n\n<ul>\n<li>0代 ： 0代中对象到达700个，记录循环引用的链表扫描一次</li>\n<li>1代 ： 0代扫描十次，1代扫描一次</li>\n<li>2代 ： 1代扫描十次，2代扫描一次</li>\n</ul>\n<h2 id=\"Python缓存池\"><a href=\"#Python缓存池\" class=\"headerlink\" title=\"Python缓存池\"></a>Python缓存池</h2><p>为了避免重复和创建一些常见对象，维护池。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动解释器时，python会内部创建 ： -5、-4 ...... 257，值在次范围的int对象会被放到缓存池中</span></span><br><span class=\"line\">v1 = <span class=\"number\">7</span></span><br><span class=\"line\">v2 = <span class=\"number\">9</span></span><br><span class=\"line\">v3 = <span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存地址</span></span><br><span class=\"line\"><span class=\"built_in\">id</span>(v1)</span><br><span class=\"line\"><span class=\"built_in\">id</span>(v2)</span><br><span class=\"line\"></span><br><span class=\"line\">v4 = <span class=\"number\">9999</span></span><br><span class=\"line\">v5 = <span class=\"number\">9999</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"free-list\"><a href=\"#free-list\" class=\"headerlink\" title=\"free_list\"></a>free_list</h3><blockquote>\n<p>refcnt &#x3D; 0 按道理来说是不是应该会回收，但是内部不会直接回收，他会把这个对象存到一个free_list的链表中当缓存，之后取创建一个相同对象的时候，不重新开辟内存，而是从free_list中取一个对象</p>\n</blockquote>\n<img src=\"/posts/c00b24b1/bxmZRYfl4UXaeB6.png\" class=\"\" title=\"image.png\">\n\n<h3 id=\"缓存机制（自己理解）\"><a href=\"#缓存机制（自己理解）\" class=\"headerlink\" title=\"缓存机制（自己理解）\"></a>缓存机制（自己理解）</h3><ul>\n<li><p>即使删除了值，但是对象并不会删除，会放到该对象对应的缓存池中，（如果值得范围，在缓存范围内）</p>\n<p>如上图的cmd中的例子，虽然删除了v1的值，但是v1对应的float对象并没有被清除内存，而是被放到缓存池中（所在内存不变）</p>\n<p>所以下下一个定义的v3对应的float对象可能是v1的float对象，只是值有所改变</p>\n<p>打印内存地址发现，v3和已经被放入缓存池的v1的的地址相同，所以v3和v1使用的是同一个float对象</p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"CSDN","link":"https://blog.csdn.net/a2752454047?spm=1010.2135.3001.5343","avatar":"https://img.alicdn.com/img/bao/uploaded/i4/https://img.alicdn.com/imgextra/i3/6000000001987/O1CN01S7EzzC1QY5db05BcD_!!6000000001987-2-shopmanager.png","descr":"博客网站"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"一、python基础\"><a href=\"#一、python基础\" class=\"headerlink\" title=\"一、python基础\"></a>一、python基础</h1><h2 id=\"前言-python所学内容\"><a href=\"#前言-python所学内容\" class=\"headerlink\" title=\"前言 python所学内容\"></a>前言 python所学内容</h2><ul>\n<li>基础语法<ul>\n<li>变量、注释、基本数据类型、格式化字符串、反转字符、数据类型转化、if\\elif选择结构、for\\while循环</li>\n<li>str的常用方法、运算符</li>\n<li>命名空间、作用域</li>\n</ul>\n</li>\n<li>数据容器<ul>\n<li>list列表、tuple元组、dict字典、set集合</li>\n<li>遍历数据容器、列表推导式</li>\n<li>杨辉三角、冒泡排序</li>\n</ul>\n</li>\n<li>函数<ul>\n<li>函数参数<ul>\n<li>必选参数、 默认参数、可选参数、关键字参数、命名关键字参数</li>\n</ul>\n</li>\n<li>递归函数<ul>\n<li>阶乘、斐波拉契数列、汉诺塔</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>面向对象<ul>\n<li>类、私有变量和方法、封装、继承、多态、猴子补丁、鸭子类型、兔子问题</li>\n</ul>\n</li>\n<li>异常处理<ul>\n<li>基本异常类型、捕获和抛出异常、自定义异常</li>\n</ul>\n</li>\n<li>文件读写<ul>\n<li>文件打开open、文件读写、with语句</li>\n</ul>\n</li>\n<li>正则表达式</li>\n<li>常用模块</li>\n</ul>\n<h2 id=\"第一部分-python简介\"><a href=\"#第一部分-python简介\" class=\"headerlink\" title=\"第一部分 python简介\"></a>第一部分 python简介</h2><ul>\n<li>Python是一门解释性、面向对象以及类型动态的高级程序语言<ul>\n<li>解释型：Python代码在运行时没有了编译这个环节，类似PHP</li>\n<li>面向对象：Python支持面向对象的风格或代码封装在对象的编程技术</li>\n<li>动态数据类型：Python中没有对变量类型进行限制，代码非常灵活</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、python的垃圾回收机制\"><a href=\"#1、python的垃圾回收机制\" class=\"headerlink\" title=\"1、python的垃圾回收机制\"></a>1、python的垃圾回收机制</h4><ul>\n<li>引用计数（Reference Counting）</li>\n<li>标记清除（Mark and Sweep）<ul>\n<li>标记清除解决循环引用</li>\n</ul>\n</li>\n<li>分代回收（Generational Collection）</li>\n</ul>\n<h4 id=\"2、python环境安装\"><a href=\"#2、python环境安装\" class=\"headerlink\" title=\"2、python环境安装\"></a>2、python环境安装</h4><ul>\n<li><p>首先官网下载安装程序</p>\n<ul>\n<li>选择状态为security的版本，并且选择此版本中小版本不是最后一个的版本</li>\n<li><img src=\"/posts/c00b24b1/image-20230710193122871.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710193646276.png\" class=\"\" title=\"image-20230710193646276\"></li>\n<li><img src=\"python笔记/image-20230710193716304.png\" alt=\"image-20230710193716304\" style=\"zoom:50%;\" /></li>\n</ul>\n</li>\n<li><p>安装时，选择客制化安装（自定义路径）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710193859950.png\" class=\"\" title=\"image-20230710193859950\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710194234672.png\" class=\"\" title=\"image-20230710194234672\"></li>\n</ul>\n</li>\n<li><p>完成安装后，查看python的环境变量（勾选上述选项后，自动添加）</p>\n<ul>\n<li>系统会优先调用位于<strong>系统环境变量（所有用户都可以使用）下最上面的文件路径下的程序</strong></li>\n<li>目的<ul>\n<li>把第一个路径下的pip.exe文件添加到全局变量中</li>\n<li>把第二个路径下的python.exe（python解释器）添加到全局变量中</li>\n</ul>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230710194400177.png\" class=\"\" title=\"image-20230710194400177.png\"></li>\n</ul>\n</li>\n<li><p>验证是否安装成功</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V  //查看版本</span><br><span class=\"line\">pip <span class=\"built_in\">list</span>   //查看使用pip命令所下载的包</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710194742530.png\" class=\"\" title=\"image-20230710194742530\"></li>\n</ul>\n</li>\n<li><p>pip命令下载包的位置</p>\n<ul>\n<li>刚开始之后两个，pip和setuptools</li>\n<li>pip list可以查看pip命令下载的包，如上图</li>\n<li><img src=\"/posts/c00b24b1/image-20230710200739516.png\" class=\"\" title=\"image-20230710200739516\"></li>\n</ul>\n</li>\n<li><p>python自带的组件</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200539139.png\" class=\"\" title=\"image-20230710200539139.png\"></li>\n<li><p>Moudle Docs（把python的安装环境变为网页形式）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200312751.png\" class=\"\" title=\"image-20230710200312751\"></li>\n</ul>\n</li>\n<li><p>IDLE（python自带的集成开发环境）</p>\n</li>\n<li><p>python（命令行模式）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、pycharm安装\"><a href=\"#3、pycharm安装\" class=\"headerlink\" title=\"3、pycharm安装\"></a>3、pycharm安装</h4><ul>\n<li><p>官网找到pycharm社区版（免费版）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710195406248.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>安装程序的介绍</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710195906290.png\" class=\"\" title=\"python笔记&#x2F;image-20230710195906290.png\"></li>\n<li>鼠标右击桌面的显示框<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200010566.png\" class=\"\"></li>\n</ul>\n</li>\n<li>关联py后缀的文件<ul>\n<li><img src=\"/posts/c00b24b1/image-20230710200106371.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710200130611.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>创建项目时的注意事项</p>\n<ul>\n<li>虚拟环境<ul>\n<li>创建为虚拟环境的项目，相当于把项目放在一个独立的环境中，所下载的包是独立于其他项目的</li>\n</ul>\n</li>\n<li>非虚拟环境<ul>\n<li>非虚拟环境的项目，所下载的包，是可以和其他非虚拟环境的项目所共用</li>\n<li><img src=\"/posts/c00b24b1/image-20230710201025426.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230710201900839.png\" class=\"\" title=\"python笔记&#x2F;image-20230710201900839.png\"></li>\n<li>Conda Environment 是以Anocanda的环境为基础的选择</li>\n<li>Anocanda一个集成所有python的第三方库的工具，一般作为离线使用</li>\n</ul>\n</li>\n<li>一般选择非虚拟环境</li>\n</ul>\n</li>\n<li><p>python第三方库</p>\n<ul>\n<li>位于官网的PyPI</li>\n<li>Docs为python官方文档</li>\n<li>python为应用程序</li>\n<li><img src=\"/posts/c00b24b1/image-20230710202256691.png\" class=\"\" title=\"image-20230710202256691\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二部分-python基础语法\"><a href=\"#第二部分-python基础语法\" class=\"headerlink\" title=\"第二部分 python基础语法\"></a>第二部分 python基础语法</h2><h4 id=\"1、相对路径和绝对路径\"><a href=\"#1、相对路径和绝对路径\" class=\"headerlink\" title=\"1、相对路径和绝对路径\"></a>1、相对路径和绝对路径</h4><ul>\n<li><p>..表示退出当前文件夹到当前文件夹的上一级文件夹中</p>\n</li>\n<li><p>.表示当前文件夹</p>\n</li>\n<li><p>相对路径（在print_test.py文件中helloworld.py的相对路径）</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711103427935.png\" class=\"\" title=\"python笔记&#x2F;image-20230711103427935.png\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../day01/helloworld.py</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>利用相对路径执行文件的例子</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711103411381.png\" class=\"\" title=\"image-20230711103411381\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>绝对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\BigData26\\Code\\python\\bigdata26\\day01</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2、print函数、cmd命令、注释\"><a href=\"#2、print函数、cmd命令、注释\" class=\"headerlink\" title=\"2、print函数、cmd命令、注释\"></a>2、print函数、cmd命令、注释</h4><ul>\n<li><p>print函数</p>\n<ul>\n<li><p>源代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print</span>(<span class=\"params\">self, *args, sep=<span class=\"string\">&#x27; &#x27;</span>, end=<span class=\"string\">&#x27;\\n&#x27;</span>, file=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>*args是参数化变量，也就是可以传入多个参数</p>\n</li>\n<li><p>sep是间隔符</p>\n</li>\n<li><p>end代表结尾</p>\n</li>\n</ul>\n</li>\n<li><p>cmd命令</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711150851404.png\" class=\"\"></li>\n<li>在文件的路径上输入cmd就可以直接进入命令行模式<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711151030189.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230711151053019.png\" class=\"\" title=\"python笔记&#x2F;image-20230711151053019.png\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230711151134903.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>注释</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释快捷键 ctrl + /</span></span><br><span class=\"line\"><span class=\"comment\"># 单行注释，他是给人看的，编辑器不识别</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释、</span></span><br><span class=\"line\"><span class=\"string\">可以在很多行中</span></span><br><span class=\"line\"><span class=\"string\">写文字</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">这个也是多行注释</span></span><br><span class=\"line\"><span class=\"string\">也是个字符串</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3、变量\"><a href=\"#3、变量\" class=\"headerlink\" title=\"3、变量\"></a>3、变量</h4><ul>\n<li><p>变量的命名规则</p>\n<ul>\n<li>必须是大小写字母、数字、下划线</li>\n<li>不能以数字开头</li>\n<li>不能是关键字<ul>\n<li>如何查看关键字<ul>\n<li><img src=\"/posts/c00b24b1/image-20230711182305418.png\" class=\"\" title=\"image-20230711182305418\"></li>\n</ul>\n</li>\n<li>所有的python关键字<ul>\n<li>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量命名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 驼峰命名法</span></span><br><span class=\"line\"><span class=\"comment\"># 在python中驼峰命名法一般用于文件命名</span></span><br><span class=\"line\">trainHead = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下划线命名法</span></span><br><span class=\"line\"><span class=\"comment\"># python中下划线命名法一般用于变量命名</span></span><br><span class=\"line\">train_head = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在python可以用中文给变量命名，但是不符合规则</span></span><br><span class=\"line\"><span class=\"comment\"># 火车头 = 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python中可以以下划线开头</span></span><br><span class=\"line\"><span class=\"comment\"># 但是，一般不用，因为下划线开头的方法代表私有化方法，不能改动</span></span><br><span class=\"line\">_class_a = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4、数据类型和转义字符\"><a href=\"#4、数据类型和转义字符\" class=\"headerlink\" title=\"4、数据类型和转义字符\"></a>4、数据类型和转义字符</h4><ul>\n<li><p>如果一个变量是全大写形式，就会被认为<strong>常量</strong>，如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>python的四大基本类型</p>\n<ul>\n<li>int 整型</li>\n<li>float 浮点型</li>\n<li>str 字符串类型型</li>\n<li>bool 布尔类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(变量名)) <span class=\"comment\"># 查看变量类型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊类型None</p>\n<ul>\n<li>注意：None类型不能转换为其他基本数据类型</li>\n</ul>\n</li>\n<li><p>转义字符 \\ ，\\n，\\t，\\r</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转义字符以及&#x27;&#x27;和&quot;&quot;的套用</span></span><br><span class=\"line\"><span class=\"comment\"># 输出I&#x27;m OK</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;I&#x27;m OK&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;I\\&#x27;m OK&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出I\\&#x27;m OK</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;I\\&#x27;m OK&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;I\\\\\\&#x27;m OK&#x27;</span>) <span class=\"comment\"># 第一个\\把第二个\\进行转义：\\\\输出\\。第三个\\把&#x27;进行转义：\\&#x27;输出&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转义字符\\r：覆盖前面的字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a\\rb&quot;</span>)  <span class=\"comment\"># b</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a\\rb\\rcd&quot;</span>)  <span class=\"comment\"># cd</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5、格式化字符串\"><a href=\"#5、格式化字符串\" class=\"headerlink\" title=\"5、格式化字符串\"></a>5、格式化字符串</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">year = <span class=\"number\">2023</span></span><br><span class=\"line\">month = <span class=\"number\">7</span></span><br><span class=\"line\">day = <span class=\"number\">11</span></span><br><span class=\"line\">money = <span class=\"number\">200.23445</span></span><br><span class=\"line\">deadline = <span class=\"number\">5</span></span><br><span class=\"line\">percent = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>fstring  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.fstring</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\">words1 = <span class=\"string\">f&quot;亲爱的客户<span class=\"subst\">&#123;name&#125;</span>，截至<span class=\"subst\">&#123;year&#125;</span>年<span class=\"subst\">&#123;month:02d&#125;</span>月<span class=\"subst\">&#123;day&#125;</span>日，你已经欠费<span class=\"subst\">&#123;money:<span class=\"number\">08.2</span>f&#125;</span>，&quot;</span> \\</span><br><span class=\"line\"><span class=\"string\">f&quot;请在<span class=\"subst\">&#123;deadline&#125;</span>日内，尽快缴清话费，否则将扣除<span class=\"subst\">&#123;percent&#125;</span>%的费用&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(words1)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>占位符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.占位符</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\"># 使用占位符的坑：%d%，会报错，%d%%即可解决</span></span><br><span class=\"line\">words2 = <span class=\"string\">&quot;亲爱的客户%s，截至%d年%02d月%d日，你已经欠费%08.2f，请在%d日内，尽快缴清话费，否则将扣除%d%%的费用&quot;</span> \\</span><br><span class=\"line\">% (name, year, month, day, money, deadline, percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>format</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.format</span></span><br><span class=\"line\"><span class=\"comment\"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class=\"line\"><span class=\"comment\"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class=\"line\">words3 = <span class=\"string\">&quot;亲爱的客户&#123;&#125;，截至&#123;&#125;年&#123;:02d&#125;月&#123;&#125;日，你已经欠费&#123;:08.2f&#125;，请在&#123;&#125;日内，尽快缴清话费，否则将扣除&#123;&#125;%的费用&quot;</span> \\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(name, year, month, day, money, deadline, percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words3)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种format</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4.第二种format</span></span><br><span class=\"line\">words4 = <span class=\"string\">&quot;亲爱的客户&#123;name&#125;，截至&#123;year&#125;年&#123;month:02d&#125;月&#123;day&#125;日，你已经欠费&#123;money:08.2f&#125;，请在&#123;deadline&#125;日内，尽快缴清话费，否则将扣除&#123;percent&#125;%的费用&quot;</span> \\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(name=name, year=year, month=month, day=day, money=money,deadline=deadline, percent=percent)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(words4)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 5.字符串拼接</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：python中整型不可以和字符串拼接</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;亲爱的客户&quot;</span>+name+<span class=\"string\">&quot;，截至&quot;</span>+<span class=\"built_in\">str</span>(year)+<span class=\"string\">&quot;年&quot;</span>+<span class=\"built_in\">str</span>(month)+<span class=\"string\">&quot;月&quot;</span>+<span class=\"built_in\">str</span>(day)+<span class=\"string\">&quot;日&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"6、反转字符串\"><a href=\"#6、反转字符串\" class=\"headerlink\" title=\"6、反转字符串\"></a>6、反转字符串</h4><ul>\n<li><p>索引实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&#x27;hello Tuesday!&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 起始位置:结束位置:步长</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[::-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olleh</span></span><br><span class=\"line\"><span class=\"comment\"># 区间左闭右开[起始位置,结束位置)，所以取不到0位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[<span class=\"number\">14</span>:<span class=\"number\">0</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olle</span></span><br><span class=\"line\"><span class=\"comment\"># 可以不给结束位置，默认就可以取到最后一位0位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_a[<span class=\"number\">14</span>::-<span class=\"number\">1</span>])  <span class=\"comment\"># !yadseuT olleh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<strong>lambda匿名函数</strong>实现反转字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">srt_a = <span class=\"string\">&quot;hello Tuesday!&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># eh-&gt;leh-&gt;lleh-&gt;...-&gt;!yadseuT olleh</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(reduce(<span class=\"keyword\">lambda</span> x,y:y+x,str_a))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7、数据类型转化\"><a href=\"#7、数据类型转化\" class=\"headerlink\" title=\"7、数据类型转化\"></a>7、数据类型转化</h4><ul>\n<li><p>整型int</p>\n<ul>\n<li>所有非0的整型转为bool类型后都会转为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整型int</span></span><br><span class=\"line\">int_1 = <span class=\"number\">1</span></span><br><span class=\"line\">int_2 = -<span class=\"number\">0</span></span><br><span class=\"line\">int_3 = <span class=\"number\">0</span></span><br><span class=\"line\">int_4 = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(int_1), <span class=\"built_in\">float</span>(int_2), <span class=\"built_in\">float</span>(int_3), <span class=\"built_in\">float</span>(int_4))  <span class=\"comment\"># 1.0 0.0 0.0 2.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(int_1), <span class=\"built_in\">str</span>(int_2), <span class=\"built_in\">str</span>(int_3), <span class=\"built_in\">str</span>(int_4))  <span class=\"comment\"># 1 0 0 2</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非0的整型转为bool类型后都会转为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(int_1), <span class=\"built_in\">bool</span>(int_2), <span class=\"built_in\">bool</span>(int_3), <span class=\"built_in\">bool</span>(int_4))  <span class=\"comment\"># True False False True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浮点型float</p>\n<ul>\n<li>浮点型转为int类型是向下取整</li>\n<li>所有非0的浮点型转为bool类型后都会转为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 浮点型float</span></span><br><span class=\"line\">float_1 = <span class=\"number\">1.0</span></span><br><span class=\"line\">float_2 = <span class=\"number\">1.6</span></span><br><span class=\"line\">float_3 = -<span class=\"number\">1.0</span></span><br><span class=\"line\">float_4 = -<span class=\"number\">0.0</span></span><br><span class=\"line\">float_5 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"comment\"># 浮点型转为int类型的正数是向下取整</span></span><br><span class=\"line\"><span class=\"comment\"># 浮点型转为int类型的负数是向上取整 int(-1.1) == -1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(float_1), <span class=\"built_in\">int</span>(float_2), <span class=\"built_in\">int</span>(float_3), <span class=\"built_in\">int</span>(float_4), <span class=\"built_in\">int</span>(float_5))  <span class=\"comment\"># 1 1 -1 0 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(float_1), <span class=\"built_in\">str</span>(float_2), <span class=\"built_in\">str</span>(float_3), <span class=\"built_in\">str</span>(float_4), <span class=\"built_in\">str</span>(float_5))  <span class=\"comment\"># 1.0 1.6 -1.0 -0.0 0.0</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非0的浮点型转为bool类型后都会转为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(float_1), <span class=\"built_in\">bool</span>(float_2), <span class=\"built_in\">bool</span>(float_3), <span class=\"built_in\">bool</span>(float_4), <span class=\"built_in\">bool</span>(float_5))  <span class=\"comment\"># True True True False False</span></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>字符型str</p>\n<ul>\n<li>只有字符为整数才能转为整型</li>\n<li>只有字符为数值类型才能转为浮点型</li>\n<li>所有非空（非””）的字符串转为bool时，都为True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符型str</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">str_2 = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">str_3 = <span class=\"string\">&quot;2a&quot;</span></span><br><span class=\"line\">str_4 = <span class=\"string\">&quot;Ture&quot;</span></span><br><span class=\"line\">str_5 = <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">str_6 = <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">str_7 = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 只有字符为整数才能转为整型，如：str_1、str_5</span></span><br><span class=\"line\"><span class=\"comment\"># print(int(str_1),int(str_2),int(str_3),int(str_4),int(str_5),int(str_6),int(str_7))</span></span><br><span class=\"line\"><span class=\"comment\"># 只有字符为数值类型才能转为浮点型，如：str_1、str_2、str_5</span></span><br><span class=\"line\"><span class=\"comment\"># print(float(str_1),float(str_2),float(str_3),float(str_4),float(str_5),float(str_6),float(str_7))</span></span><br><span class=\"line\"><span class=\"comment\"># 所有非空（非&quot;&quot;）的字符串转为bool时，都为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(str_1), <span class=\"built_in\">bool</span>(str_2), <span class=\"built_in\">bool</span>(str_3), <span class=\"built_in\">bool</span>(str_4), <span class=\"built_in\">bool</span>(str_5), <span class=\"built_in\">bool</span>(str_6),</span><br><span class=\"line\">      <span class=\"built_in\">bool</span>(str_7))  <span class=\"comment\"># True True True True True True False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>布尔bool</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool_1 = <span class=\"literal\">True</span></span><br><span class=\"line\">bool_2 = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(bool_1), <span class=\"built_in\">int</span>(bool_2))  <span class=\"comment\"># 1 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(bool_1), <span class=\"built_in\">float</span>(bool_2))  <span class=\"comment\"># 1.0 0.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(bool_1), <span class=\"built_in\">str</span>(bool_2))  <span class=\"comment\"># &quot;True&quot; &quot;False&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>None类型</p>\n<ul>\n<li>转为int和str时都会报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">None_1 = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: int() argument must be a string, a bytes-like object or a real number, not &#x27;NoneType&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># print(int(None_1))</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: float() argument must be a string or a real number, not &#x27;NoneType&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># print(float(None_1))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(None_1))  <span class=\"comment\"># &quot;None&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(None_1))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"8、九九乘法表\"><a href=\"#8、九九乘法表\" class=\"headerlink\" title=\"8、九九乘法表\"></a>8、九九乘法表</h4><ul>\n<li><p>使用嵌套for循环实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,i+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1*1=1\t</span><br><span class=\"line\">1*2=2\t2*2=4\t</span><br><span class=\"line\">1*3=3\t2*3=6\t3*3=9\t</span><br><span class=\"line\">1*4=4\t2*4=8\t3*4=12\t4*4=16\t</span><br><span class=\"line\">1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t</span><br><span class=\"line\">1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t</span><br><span class=\"line\">1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t</span><br><span class=\"line\">1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t</span><br><span class=\"line\">1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<strong>列表推导式</strong>实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join([<span class=\"string\">&quot;\\t&quot;</span>.join([<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,i+<span class=\"number\">1</span>)])<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>)]))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1*1=1\t</span><br><span class=\"line\">1*2=2\t2*2=4\t</span><br><span class=\"line\">1*3=3\t2*3=6\t3*3=9\t</span><br><span class=\"line\">1*4=4\t2*4=8\t3*4=12\t4*4=16\t</span><br><span class=\"line\">1*5=5\t2*5=10\t3*5=15\t4*5=20\t5*5=25\t</span><br><span class=\"line\">1*6=6\t2*6=12\t3*6=18\t4*6=24\t5*6=30\t6*6=36\t</span><br><span class=\"line\">1*7=7\t2*7=14\t3*7=21\t4*7=28\t5*7=35\t6*7=42\t7*7=49\t</span><br><span class=\"line\">1*8=8\t2*8=16\t3*8=24\t4*8=32\t5*8=40\t6*8=48\t7*8=56\t8*8=64\t</span><br><span class=\"line\">1*9=9\t2*9=18\t3*9=27\t4*9=36\t5*9=45\t6*9=54\t7*9=63\t8*9=72\t9*9=81\t</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"9、str的常用方法\"><a href=\"#9、str的常用方法\" class=\"headerlink\" title=\"9、str的常用方法\"></a>9、str的常用方法</h4><h5 id=\"split-切分\"><a href=\"#split-切分\" class=\"headerlink\" title=\"split() - 切分\"></a>split() - 切分</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照指定字符进行切分，返回一个列表。如果不传入第二个参数（maxSplit），默认全部切分</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_split = str_1.split(<span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_split)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"strip-剥离、去除、脱离\"><a href=\"#strip-剥离、去除、脱离\" class=\"headerlink\" title=\"strip() - 剥离、去除、脱离\"></a>strip() - 剥离、去除、脱离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 去除前后空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala  \\r\\n &quot;</span></span><br><span class=\"line\">str_1_strip = str_1.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 传入字符串参数，去除前后指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_strip = str_1.strip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"lstrip-左剥离\"><a href=\"#lstrip-左剥离\" class=\"headerlink\" title=\"lstrip() - 左剥离\"></a>lstrip() - 左剥离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认去除左边头的空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala   &quot;</span></span><br><span class=\"line\">str_1_lstrip = str_1.lstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lstrip(参数)</span></span><br><span class=\"line\"><span class=\"comment\"># 去除左边头，指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_lstrip = str_1.lstrip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"rstrip-右剥离\"><a href=\"#rstrip-右剥离\" class=\"headerlink\" title=\"rstrip() - 右剥离\"></a>rstrip() - 右剥离</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认去除右边头的空格和特殊字符</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot; \\r\\n  python,java,scala   \\r\\n&quot;</span></span><br><span class=\"line\">str_1_rstrip = str_1.rstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rstrip(参数) - 右剥离</span></span><br><span class=\"line\"><span class=\"comment\"># 去除左边头，指定字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala,py&quot;</span></span><br><span class=\"line\">str_1_rstrip = str_1.rstrip(<span class=\"string\">&quot;py&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"lower-小写\"><a href=\"#lower-小写\" class=\"headerlink\" title=\"lower() - 小写\"></a>lower() - 小写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大写字母转为小写</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_lower = str_1.lower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_lower)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"upper-大写\"><a href=\"#upper-大写\" class=\"headerlink\" title=\"upper() - 大写\"></a>upper() - 大写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 小写字母转为大写</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;Python,Java,Scala&quot;</span></span><br><span class=\"line\">str_1_upper = str_1.upper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_upper)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"islower-是否为小写\"><a href=\"#islower-是否为小写\" class=\"headerlink\" title=\"islower() - 是否为小写\"></a>islower() - 是否为小写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断所有字母是否是小写，如果是返回Ture，如果不是返回false</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_islower = str_1.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_islower)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"isupper-是否为大写\"><a href=\"#isupper-是否为大写\" class=\"headerlink\" title=\"isupper() - 是否为大写\"></a>isupper() - 是否为大写</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断所有字母是否是大写，如果是返回Ture，如果不是返回false</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class=\"line\">str_1_isupper = str_1.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_isupper)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"replace-替换\"><a href=\"#replace-替换\" class=\"headerlink\" title=\"replace() - 替换\"></a>replace() - 替换</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把前一个参数的值替换为后一个参数的值，默认将字符串中所有 为前一个参数的子字符串都替换为后一个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 2代表替换前两个值为前一个参数的子字符串</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_replace_1 = str_1.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">str_1_replace_2 = str_1.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_replace_1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_replace_2)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"index-索引\"><a href=\"#index-索引\" class=\"headerlink\" title=\"index() - 索引\"></a>index() - 索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回指定区间的指定元素的索引值，默认返回第一个指定元素的索引值</span></span><br><span class=\"line\">str_1 = <span class=\"string\">&quot;python,java,scala&quot;</span></span><br><span class=\"line\">str_1_index_1 = str_1.index(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">str_1_index_2 = str_1.index(<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_index_1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_1_index_2)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ord-字符转换为ASCii码值\"><a href=\"#ord-字符转换为ASCii码值\" class=\"headerlink\" title=\"ord() - 字符转换为ASCii码值\"></a>ord() - 字符转换为ASCii码值</h5><ul>\n<li><code>ord</code> 函数的全称是 “ordinal”, 它是从 “ordinal number”（序数）一词中衍生而来</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;A&quot;</span>))  <span class=\"comment\"># 65</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"chr-ASCii码转换为字符\"><a href=\"#chr-ASCii码转换为字符\" class=\"headerlink\" title=\"chr() - ASCii码转换为字符\"></a>chr() - ASCii码转换为字符</h5><ul>\n<li><code>chr</code> 函数的全程是 “character”，它是从 “character”（字符）一词中衍生而来。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(<span class=\"number\">65</span>))  <span class=\"comment\"># A</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10、运算符\"><a href=\"#10、运算符\" class=\"headerlink\" title=\"10、运算符\"></a>10、运算符</h4><h5 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201620205.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201620205.png\"></li>\n</ul>\n<h5 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201653705.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较运算符 ==</span></span><br><span class=\"line\"><span class=\"comment\"># 只有 1（整型或者浮点行）等与 False</span></span><br><span class=\"line\"><span class=\"comment\"># 只有 0（整型或者浮点行）等与 False</span></span><br><span class=\"line\"><span class=\"comment\"># 其他数字及不等于False也不等于False，但是强转为bool型时，只有0才能转为False，其他皆为True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> == <span class=\"literal\">False</span>)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> == <span class=\"literal\">False</span>)  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201728513.png\" class=\"\"></li>\n</ul>\n<h5 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201804728.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201804728.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 逻辑运算符 and or not</span></span><br><span class=\"line\"><span class=\"comment\"># 注意 逻辑运算符中 非0的数皆为True</span></span><br><span class=\"line\"><span class=\"comment\"># and 若前者为False，则返回前者的值，否则返回后者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> == <span class=\"literal\">False</span>)   <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>)  <span class=\"comment\"># 30</span></span><br><span class=\"line\"><span class=\"comment\"># or 若前者为Ture，则返回前面的值，否则返回前者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> == <span class=\"literal\">True</span>)  <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">20</span> <span class=\"keyword\">or</span> <span class=\"number\">30</span>)  <span class=\"comment\"># 20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">not</span> <span class=\"number\">0</span>)  <span class=\"comment\"># True 注意这个除0之外都是</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713201909704.png\" class=\"\" title=\"python笔记&#x2F;image-20230713201909704.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">49</span></span><br><span class=\"line\">b = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位与运算符&amp; 同一则 1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b </span></span><br><span class=\"line\"><span class=\"string\">000000 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &amp; b)  <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位或运算符| 有1则1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b     </span></span><br><span class=\"line\"><span class=\"string\">111011 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a | b)  <span class=\"comment\"># 59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位异或运算符^ 相异为1，否则为0</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">001011 b     </span></span><br><span class=\"line\"><span class=\"string\">111010 a&amp;b</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a ^ b)  <span class=\"comment\"># 58</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按位取反运算符~ 把1变为0，把0变为1 ，结果为-a-1</span></span><br><span class=\"line\"><span class=\"string\">1 110001 a</span></span><br><span class=\"line\"><span class=\"string\">0 001110 ~a</span></span><br><span class=\"line\"><span class=\"string\">要计算负数的补码，需要先将其二进制表示按位取反，然后再加 1。</span></span><br><span class=\"line\"><span class=\"string\">对于 001110，按位取反得到 110001。</span></span><br><span class=\"line\"><span class=\"string\">然后，将 110001 加 1，得到 110010。</span></span><br><span class=\"line\"><span class=\"string\">最终的结果 110010 对应十进制的 -50。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(~a)  <span class=\"comment\"># -50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;左移运算符&lt;&lt; 二进制全部往前若干位，高位往前低位补0，如果补0后的整体达到32位，则舍弃高位保留32位</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">11000100 a&lt;&lt;2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &lt;&lt; <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;右移运算符&gt;&gt; 二进制全部往后若干位，舍弃低位</span></span><br><span class=\"line\"><span class=\"string\">110001 a</span></span><br><span class=\"line\"><span class=\"string\">1100 a&gt;&gt;2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a &gt;&gt; <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11、if-elif选择结构\"><a href=\"#11、if-elif选择结构\" class=\"headerlink\" title=\"11、if&#x2F;elif选择结构\"></a>11、if&#x2F;elif选择结构</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713212833658.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由薪水判断心情</span></span><br><span class=\"line\">    salary = <span class=\"number\">2500</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> salary &gt;= <span class=\"number\">10000</span>:  <span class=\"comment\"># 区间 [10000,正无穷)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> salary &gt;= <span class=\"number\">5000</span>:  <span class=\"comment\"># 区间 [5000,10000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 区间 (负无穷,5000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反着写</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span>:  <span class=\"comment\"># 区间 (负无穷,5000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> salary &lt; <span class=\"number\">10000</span>:  <span class=\"comment\"># 区间 [5000,10000)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 区间 [10000,正无穷)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 三元运算符</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span> <span class=\"keyword\">else</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过不去了&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">5000</span> <span class=\"keyword\">else</span> (<span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子还能过的去&quot;</span>) <span class=\"keyword\">if</span> salary &lt; <span class=\"number\">10000</span> <span class=\"keyword\">else</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日子过的非常好&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12、while-for循环结构\"><a href=\"#12、while-for循环结构\" class=\"headerlink\" title=\"12、while&#x2F;for循环结构\"></a>12、while&#x2F;for循环结构</h4><p>while循环语句小练习：</p>\n<ul>\n<li><p>1.计算1~100中奇数的和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 判断为基数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">            summ += i</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\">    <span class=\"comment\"># 简化</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 判断为基数</span></span><br><span class=\"line\">        summ += i</span><br><span class=\"line\">        i += <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.break continue</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.break continue</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面的代码会陷入死循环</span></span><br><span class=\"line\">    i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">90</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.给定一个字符串s &#x3D; ‘beautifulCode’<br>从前到后检查每个字母<br>如果是大写字母则停止检查并输出：有大写字母，第一个大写字母为%s<br>否则输出：无大写字母</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;beautifulCode&#x27;</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i].isupper():</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;有大写字母，第一个大写字母<span class=\"subst\">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 由 i 值判断判断无大写字母</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;无大写字母&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 由 i 值判断判断无大写字母</span></span><br><span class=\"line\">    flag = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(s):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i].isupper():</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;有大写字母，第一个大写字母<span class=\"subst\">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class=\"line\">            flag = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;无大写字母&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"13、命名空间\"><a href=\"#13、命名空间\" class=\"headerlink\" title=\"13、命名空间\"></a>13、命名空间</h4><ul>\n<li><p>Python中一般有三种命名空间：</p>\n<ul>\n<li>内置名称（built-in names）<ul>\n<li>Python 语言内置的名称，比如函数名 abs、chr 和异常名称 BaseException、Exception 等等</li>\n</ul>\n</li>\n<li>全局名称（global names）<ul>\n<li>模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li>\n</ul>\n</li>\n<li>局部名称（local names）<ul>\n<li>函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230713215248858.png\" class=\"\" title=\"python笔记&#x2F;image-20230713215248858.png\"></li>\n<li><p>命名空间查找顺序:  由内往外</p>\n<ul>\n<li>假设我们要使用变量 money，则 Python 的查找顺序为：<ul>\n<li>局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</li>\n<li>如果找不到变量 money，它将放弃查找并引发一个错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"14、作用域\"><a href=\"#14、作用域\" class=\"headerlink\" title=\"14、作用域\"></a>14、作用域</h4><ul>\n<li><p>Python 的作用域一共有4种：</p>\n<ul>\n<li>L（Local）：包含局部变量，比如一个函数&#x2F;方法内部</li>\n<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量</li>\n<li>G（Global）：最外层，比如当前模块的全局变量</li>\n<li>B（Built-in）：包含内建变量&#x2F;关键字等，最后被搜索</li>\n<li><strong>在局部找不到，便会去局部外的局部找（例如闭包Enclosing），再找不到就会去全局找，再者去内置中找</strong></li>\n</ul>\n</li>\n<li><p><strong>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if&#x2F;elif&#x2F;else&#x2F;、try&#x2F;except、for&#x2F;while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = <span class=\"string\">&quot;i am from Runnob&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(msg)  <span class=\"comment\"># if不会形成新的作用域</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"第三部分-数据容器\"><a href=\"#第三部分-数据容器\" class=\"headerlink\" title=\"第三部分 数据容器\"></a>第三部分 数据容器</h2><h4 id=\"todo用法\"><a href=\"#todo用法\" class=\"headerlink\" title=\"todo用法\"></a>todo用法</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230713220504552.png\" class=\"\"></li>\n</ul>\n<h4 id=\"ctrl-p-可以让参数提示重新出现\"><a href=\"#ctrl-p-可以让参数提示重新出现\" class=\"headerlink\" title=\"ctrl + p 可以让参数提示重新出现\"></a><strong>ctrl + p 可以让参数提示重新出现</strong></h4><h4 id=\"id-元素-返回元素内存地址\"><a href=\"#id-元素-返回元素内存地址\" class=\"headerlink\" title=\"id(元素) - 返回元素内存地址\"></a>id(元素) - 返回元素内存地址</h4><ul>\n<li><p>list列表、tuple元组、dict字典、set集合</p>\n</li>\n<li><p>在 Python 中，<code>sort()</code> 方法是列表对象的内置方法，用于对列表进行原地排序。<code>sort()</code> 方法的底层实现使用一种名为 <strong>Timsort 的排序算法</strong>。</p>\n</li>\n</ul>\n<h4 id=\"1、list列表\"><a href=\"#1、list列表\" class=\"headerlink\" title=\"1、list列表\"></a>1、list列表</h4><ul>\n<li>list的特点：有序的集合、可以有重复值、值类型不唯一、可变</li>\n</ul>\n<h5 id=\"append-追加\"><a href=\"#append-追加\" class=\"headerlink\" title=\"append - 追加\"></a>append - 追加</h5><ul>\n<li>添加元素，在末尾添加</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.append(<span class=\"string\">&quot;Irving&quot;</span>)  <span class=\"comment\"># 添加元素，在末尾添加</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"inster-插入\"><a href=\"#inster-插入\" class=\"headerlink\" title=\"inster - 插入\"></a>inster - 插入</h5><ul>\n<li>在指定索引位置，插入指定元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;Irving&quot;</span>)  <span class=\"comment\"># 在指定索引位置，插入指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"extend-继承\"><a href=\"#extend-继承\" class=\"headerlink\" title=\"extend - 继承\"></a>extend - 继承</h5><ul>\n<li>再末尾追加可迭代容器中的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])  <span class=\"comment\"># 再末尾追加可迭代容器中的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)  <span class=\"comment\"># [&#x27;James&#x27;, &#x27;Kobe&#x27;, &#x27;Polo&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"remove-删除\"><a href=\"#remove-删除\" class=\"headerlink\" title=\"remove - 删除\"></a>remove - 删除</h5><ul>\n<li>删除指定元素，但不返回删除的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates.remove(<span class=\"string\">&quot;James&quot;</span>)  <span class=\"comment\"># 删除指定元素，但不返回删除的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"pop-弹出、删除\"><a href=\"#pop-弹出、删除\" class=\"headerlink\" title=\"pop - 弹出、删除\"></a>pop - 弹出、删除</h5><ul>\n<li>删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_pop = class_mates.pop()  <span class=\"comment\"># 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates_pop)</span><br><span class=\"line\"></span><br><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_pop_1 = class_mates.pop(<span class=\"number\">1</span>)  <span class=\"comment\"># 删除，索引为1的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates_pop_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"del-关键字删除、清除内存空间\"><a href=\"#del-关键字删除、清除内存空间\" class=\"headerlink\" title=\"del - 关键字删除、清除内存空间\"></a>del - 关键字删除、清除内存空间</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> class_mates[<span class=\"number\">1</span>]  <span class=\"comment\"># 使用del关键字进行删除</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br><span class=\"line\"></span><br><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> class_mates</span><br><span class=\"line\"><span class=\"comment\"># print(class_mates)  # NameError: name &#x27;class_mates&#x27; is not defined.</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"index-索引-1\"><a href=\"#index-索引-1\" class=\"headerlink\" title=\"index - 索引\"></a>index - 索引</h5><ul>\n<li>查询指定元素，返回索引值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">index_num = class_mates.index(<span class=\"string\">&#x27;James&#x27;</span>)  <span class=\"comment\"># 查询指定元素，返回索引值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"count-统计\"><a href=\"#count-统计\" class=\"headerlink\" title=\"count - 统计\"></a>count - 统计</h5><ul>\n<li>统计指定元素出现的次数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1_count = list_1.count(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1_count)  <span class=\"comment\"># 统计指定元素出现的次数</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort - 排序\"></a>sort - 排序</h5><ul>\n<li>默认为升序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.sort()  <span class=\"comment\"># 默认为升序排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定参数revers为True，设置为降序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.sort(reverse=<span class=\"literal\">True</span>)  <span class=\"comment\"># 指定参数revers为True，设置为降序排序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reverse-反转\"><a href=\"#reverse-反转\" class=\"headerlink\" title=\"reverse - 反转\"></a>reverse - 反转</h5><ul>\n<li>列表中的元素进行反转</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">list_1.reverse()  <span class=\"comment\"># 将列表中的元素进行反转</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"copy-复制\"><a href=\"#copy-复制\" class=\"headerlink\" title=\"copy - 复制\"></a>copy - 复制</h5><ul>\n<li>复制列表，重新开辟一片新的内存空间</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates_copy = class_mates.copy()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(class_mates))  <span class=\"comment\"># 2294213590208</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(class_mates_copy))  <span class=\"comment\"># 2294213319104</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"join-连接-列表转为字符串\"><a href=\"#join-连接-列表转为字符串\" class=\"headerlink\" title=\"join - 连接  列表转为字符串\"></a>join - 连接  列表转为字符串</h5><ul>\n<li>把列表中的字符串元素以指定字符连接起来，转换为字符串</li>\n<li><strong>请注意：如果列表中的元素不是字符串，使用此方法则会报错</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join(class_mates))  <span class=\"comment\"># 把列表中的字符串元素以指定字符连接起来</span></span><br><span class=\"line\">                                <span class=\"comment\"># 请注意：如果列表中的元素不是字符串，使用此方法则会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>通过索引的方式，对列表中的元素进行查找</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_2 = [<span class=\"string\">&#x27;Hadoop&#x27;</span>, <span class=\"string\">&#x27;Hive&#x27;</span>, <span class=\"string\">&#x27;2006&#x27;</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list_2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_2[<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># print(list_2[4])  # list index out of range</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过索引的方式，对列表中的元素进行修改\"><a href=\"#通过索引的方式，对列表中的元素进行修改\" class=\"headerlink\" title=\"通过索引的方式，对列表中的元素进行修改\"></a>通过索引的方式，对列表中的元素进行修改</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_mates = [<span class=\"string\">&#x27;James&#x27;</span>, <span class=\"string\">&#x27;Kobe&#x27;</span>, <span class=\"string\">&#x27;Polo&#x27;</span>]</span><br><span class=\"line\">class_mates[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Kobe Bryant&quot;</span>  <span class=\"comment\"># 通过索引的方式，对列表中的元素进行修改</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_mates)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"len-长度\"><a href=\"#len-长度\" class=\"headerlink\" title=\"len - 长度\"></a>len - 长度</h5><ul>\n<li>输出列表的长度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_2 = [<span class=\"string\">&#x27;Hadoop&#x27;</span>, <span class=\"string\">&#x27;Hive&#x27;</span>, <span class=\"string\">&#x27;2006&#x27;</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(list_2))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h5><ul>\n<li>起始位置、结束位置、步长都可以省略，如省略则等于默认值</li>\n<li>如果想要将列表的顺序颠倒，则可以使用::-1 </li>\n<li>切片操作同样适用于：字符串、元组中，以及后续numpy、pandas中的数据结构</li>\n<li><img src=\"/posts/c00b24b1/image-20230713221852883.png\" class=\"\" title=\"python笔记&#x2F;image-20230713221852883.png\"></li>\n</ul>\n<h4 id=\"2、tuple元组\"><a href=\"#2、tuple元组\" class=\"headerlink\" title=\"2、tuple元组\"></a>2、tuple元组</h4><ul>\n<li>tuple 类似与列表 、 <strong>不可变（没有list哪些改变增删改的方法）</strong></li>\n<li>查找tuple中的元素，其方法也是切片</li>\n<li>注意定义一个元素的元组时，在元素后加上一个英文逗号,</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_a = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;dasd&quot;</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 注意定义一个元素的元组时，在元素后加上一个英文逗号,</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不追加，则为int类型</span></span><br><span class=\"line\">tuple_b = (<span class=\"number\">1</span>,)</span><br><span class=\"line\">tuple_c = (<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple_b), <span class=\"built_in\">type</span>(tuple_c))  <span class=\"comment\">#  &lt;class &#x27;tuple&#x27;&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tuple的使用可以使得代码更安全，防止错误赋值导致重要对象的改变</li>\n</ul>\n<h4 id=\"3、dict字典\"><a href=\"#3、dict字典\" class=\"headerlink\" title=\"3、dict字典\"></a>3、dict字典</h4><ul>\n<li><p>dict字典中，</p>\n<ul>\n<li>键必须是唯一的，但值可以重复</li>\n<li>值可以取任何数据类型，但键必须是不可变的类型<ul>\n<li>如基本数据类型、元组（列表不可以、字典也不可以）</li>\n</ul>\n</li>\n<li>dict字典中的KV键值对可以动态增减</li>\n<li>dict字典是无序的（无索引）</li>\n</ul>\n</li>\n<li><p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。</p>\n<ul>\n<li><p>假设字典包含了1万个汉字，需要再其中查询某一个字</p>\n</li>\n<li><p>第一种方式是把字典从第一页往后翻，直到找到所需的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢</p>\n</li>\n<li><p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，dict字典就是该种方式</p>\n<ul>\n<li><p>dict会把元素的键转换为hash值存储在内存中，查询时根据hash值查询</p>\n</li>\n<li><p><strong>请注意：在 Python 中，不同的哈希函数和数据类型都可能产生哈希冲突（不同元素的哈希值相同），尽管冲突的概率非常低。这是因为哈希函数的输出空间有限，而输入数据的空间是无限的。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"新增一个键值对\"><a href=\"#新增一个键值对\" class=\"headerlink\" title=\"新增一个键值对\"></a>新增一个键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一个键值对</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1[<span class=\"string\">&#x27;Luck&#x27;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"更改键值对\"><a href=\"#更改键值对\" class=\"headerlink\" title=\"更改键值对\"></a>更改键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1[<span class=\"string\">&#x27;Michael&#x27;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询键值对\"><a href=\"#查询键值对\" class=\"headerlink\" title=\"查询键值对\"></a>查询键值对</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(dict_1[<span class=\"string\">&#x27;Michael&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"get-k-通过键获取值\"><a href=\"#get-k-通过键获取值\" class=\"headerlink\" title=\"get(k) - 通过键获取值\"></a>get(k) - 通过键获取值</h5><ul>\n<li>返回指定key的value</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get() - 获取</span></span><br><span class=\"line\">    dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dict_1.get(<span class=\"string\">&#x27;Michael&#x27;</span>))  <span class=\"comment\"># 返回指定key的value</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"pop-k-通过键删除值\"><a href=\"#pop-k-通过键删除值\" class=\"headerlink\" title=\"pop(k) - 通过键删除值\"></a>pop(k) - 通过键删除值</h5><ul>\n<li>删除指定键值对</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pop - 弹出</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1.pop(<span class=\"string\">&#x27;Michael&#x27;</span>)  <span class=\"comment\"># 删除指定键值对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"keys-获取所有的键，并返回一个列表\"><a href=\"#keys-获取所有的键，并返回一个列表\" class=\"headerlink\" title=\"keys() - 获取所有的键，并返回一个列表\"></a>keys() - 获取所有的键，并返回一个列表</h5><ul>\n<li>获取所有键的集合，并返回一个集合：dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])</li>\n<li><strong>请注意</strong><ul>\n<li>dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])不是列表类型，因此不能通过索引访问</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.keys())  <span class=\"comment\"># 获取所有键的集合，并返回一个集合：dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1.keys():  <span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1:  <span class=\"comment\"># 遍历所有键</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;请注意</span></span><br><span class=\"line\"><span class=\"string\">dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])不是列表类型，因此不能通过索引访问</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"values-获取所有的值，并返回一个列表\"><a href=\"#values-获取所有的值，并返回一个列表\" class=\"headerlink\" title=\"values() - 获取所有的值，并返回一个列表\"></a>values() - 获取所有的值，并返回一个列表</h5><ul>\n<li>获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.values())  <span class=\"comment\"># 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> dict_1.values():  <span class=\"comment\"># 遍历所有的值</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"items-常用于dict的遍历\"><a href=\"#items-常用于dict的遍历\" class=\"headerlink\" title=\"items() - 常用于dict的遍历\"></a>items() - 常用于dict的遍历</h5><ul>\n<li>把所有的键值对转换为二元组</li>\n<li>并返回一个集合：dict_items([(‘Michael’, 95), (‘Bob’, 75), (‘Tracy’, 85)])</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(dict_1.items())  <span class=\"comment\"># 以二元组的方式获取所有的键值，并返回一个集合：dict_items([(&#x27;Michael&#x27;, 95), (&#x27;Bob&#x27;, 75), (&#x27;Tracy&#x27;, 85)])</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict_1.items():  <span class=\"comment\"># 遍历所有的键和值</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k, v)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"len-长度-1\"><a href=\"#len-长度-1\" class=\"headerlink\" title=\"len_() - 长度\"></a><em>len</em>_() - 长度</h5><ul>\n<li>返回dict的长度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1.__len__())  <span class=\"comment\"># 返回dict的长度</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"clear-清空字典\"><a href=\"#clear-清空字典\" class=\"headerlink\" title=\"clear - 清空字典\"></a>clear - 清空字典</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;Michael&#x27;</span>: <span class=\"number\">95</span>, <span class=\"string\">&#x27;Bob&#x27;</span>: <span class=\"number\">75</span>, <span class=\"string\">&#x27;Tracy&#x27;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\">dict_1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict_1)  <span class=\"comment\"># 返回一个空字典&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"in-判断是否包含\"><a href=\"#in-判断是否包含\" class=\"headerlink\" title=\"in - 判断是否包含\"></a>in - 判断是否包含</h5><ul>\n<li>A in B(iterable) ：判断A是否在B中，B一般为一个可迭代的数据容器，如列表，元组，字典 ，set集合</li>\n<li>如果B为字典，则A只能为键，但是可以通过其他方法取出字典中的值，再判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># in 判断是否包含</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Michael&#x27;</span> <span class=\"keyword\">in</span> dict_1)  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Michael&#x27;</span> <span class=\"keyword\">in</span> dict_1.keys())  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">95</span> <span class=\"keyword\">in</span> dict_1.values())  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&#x27;Michael&#x27;</span>,<span class=\"number\">95</span>) <span class=\"keyword\">in</span> dict_1.items())  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意：字典中的字符串输出都是以单引号输出\"><a href=\"#注意：字典中的字符串输出都是以单引号输出\" class=\"headerlink\" title=\"注意：字典中的字符串输出都是以单引号输出\"></a>注意：字典中的字符串输出都是以单引号输出</h5><h4 id=\"4、set集合\"><a href=\"#4、set集合\" class=\"headerlink\" title=\"4、set集合\"></a>4、set集合</h4><ul>\n<li><p>set集合的特点：值是唯一的，会去重，会排序，无序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(set_1)  <span class=\"comment\"># &#123;False, 1, 2, 3, 1.2, 5, &#x27;a&#x27;&#125;，1就是True，0就是False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建空的set集合 {}是空字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1, <span class=\"built_in\">type</span>(set_1))  <span class=\"comment\"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">set_1 = <span class=\"built_in\">set</span>([])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1, <span class=\"built_in\">type</span>(set_1))  <span class=\"comment\"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h5><ul>\n<li>这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.pop()  <span class=\"comment\"># 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h5><ul>\n<li>删除指定元素，没有返回值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.remove(<span class=\"number\">1</span>)  <span class=\"comment\"># 删除指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"discard-抛弃\"><a href=\"#discard-抛弃\" class=\"headerlink\" title=\"discard - 抛弃\"></a>discard - 抛弃</h5><ul>\n<li>抛弃，删除指定元素，如果元素不存在，也不会报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"literal\">False</span>, <span class=\"literal\">True</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1.3</span>, <span class=\"number\">1.2</span>&#125;</span><br><span class=\"line\">set_1.discard(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\"># 抛弃，删除指定元素，如果元素不存在，也不会报错</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h5><ul>\n<li>添加指定元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">set_1.add(<span class=\"string\">&#x27;a&#x27;</span>)  <span class=\"comment\"># 添加指定元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set_1)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"intersection-交\"><a href=\"#intersection-交\" class=\"headerlink\" title=\"intersection - 交\"></a>intersection - 交</h5><h5 id=\"union-并\"><a href=\"#union-并\" class=\"headerlink\" title=\"union - 并\"></a>union - 并</h5><h5 id=\"difference-差\"><a href=\"#difference-差\" class=\"headerlink\" title=\"difference - 差\"></a>difference - 差</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交、并、差</span></span><br><span class=\"line\">set_1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set_2 = &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># intersection - 交</span></span><br><span class=\"line\">inter = set_1.intersection(set_2)  <span class=\"comment\"># A 交 B</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(inter)</span><br><span class=\"line\"><span class=\"comment\"># union - 并</span></span><br><span class=\"line\">uni = set_1.union(set_2)  <span class=\"comment\"># A 并 B</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(uni)</span><br><span class=\"line\"><span class=\"comment\"># different - 差</span></span><br><span class=\"line\">dif = set_1.difference(set_2)  <span class=\"comment\"># A-B ，返回A中不是B中元素的集合</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dif)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、遍历数据容器\"><a href=\"#5、遍历数据容器\" class=\"headerlink\" title=\"5、遍历数据容器\"></a>5、遍历数据容器</h4><ul>\n<li><p>1.遍历列表、元组、set、直接遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> list_1_sub <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_1_sub:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span> * <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.遍历列表、元组 通过索引遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_1 = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_1)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_1[i])):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(list_1[i][j])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.遍历字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.遍历字典</span></span><br><span class=\"line\">dict_1 = &#123;<span class=\"string\">&#x27;k1&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;k2&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;k3&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 遍历key值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> dict_1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> dict_1.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"><span class=\"comment\"># 遍历value值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> dict_1.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"comment\"># 遍历key,value</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> dict_1.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k, v)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"6、列表推导式\"><a href=\"#6、列表推导式\" class=\"headerlink\" title=\"6、列表推导式\"></a>6、列表推导式</h4><ul>\n<li>生成一个 1~10的奇数 的列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个 1~10的奇数 的列表</span></span><br><span class=\"line\">list_1 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">list_1.append(i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_1)</span><br><span class=\"line\"><span class=\"comment\"># 使用列表推到式方式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>列表推导式中嵌入for和if语句</p>\n<ul>\n<li>由于列表推导式的语法规则，正确的顺序应该是先定义外层循环（i 循环），然后在内层循环（j 循环）中引用外层循环的变量，从左到右嵌套，要生成的变量写在最左边</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复杂嵌套的列表推导式</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(j, end=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>([j <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>) <span class=\"keyword\">if</span> j % <span class=\"number\">2</span> == <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>九九乘法表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 99乘法表变为列表推导式的形式</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过join方法把列表转换为字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i*j&#125;</span>&quot;</span>, end=<span class=\"string\">&quot;\\t&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>.join([<span class=\"string\">&quot;\\t&quot;</span>.join([<span class=\"string\">f&quot;<span class=\"subst\">&#123;j&#125;</span>*<span class=\"subst\">&#123;i&#125;</span>=<span class=\"subst\">&#123;i * j&#125;</span>&quot;</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i + <span class=\"number\">1</span>)]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>)]))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7、冒泡排序\"><a href=\"#7、冒泡排序\" class=\"headerlink\" title=\"7、冒泡排序\"></a>7、冒泡排序</h4><ul>\n<li><p>冒泡排序思想</p>\n<ul>\n<li>循环遍历（遍历n-1次）</li>\n<li>两两比较</li>\n<li>大的往后挪</li>\n</ul>\n</li>\n<li><p>代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># num_list = [213, 3415, 3466, 247, 241, 86, 589, 222, 1]</span></span><br><span class=\"line\">num_list = [<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span>):  <span class=\"comment\"># 只需要进行 n-1 轮排序即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span> - i):  <span class=\"comment\"># -1-i代表不需要动的数值的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num_list[j] &gt; num_list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 只有python才会有的交换方式</span></span><br><span class=\"line\">            num_list[j], num_list[j + <span class=\"number\">1</span>] = num_list[j + <span class=\"number\">1</span>], num_list[j]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num_list)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"flag优化\"><a href=\"#flag优化\" class=\"headerlink\" title=\"flag优化\"></a>flag优化</h5><ul>\n<li>优化思想，当某一次循环遍历时，没有数据进行交换，说明此时已经排序完成，flag是检查每次循环遍历时，】&#x3D;】是否发生了数据交换的工具</li>\n</ul>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num_list = [<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">    flag = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(num_list) - <span class=\"number\">1</span> - i):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num_list[j] &gt; num_list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 只有python才会有的交换方式</span></span><br><span class=\"line\">            num_list[j], num_list[j + <span class=\"number\">1</span>] = num_list[j + <span class=\"number\">1</span>], num_list[j]</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flag == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num_list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8、杨辉三角\"><a href=\"#8、杨辉三角\" class=\"headerlink\" title=\"8、杨辉三角\"></a>8、杨辉三角</h4><ul>\n<li><p>构建杨辉三角并打印，每一行用list列表接收，期望的最终结果如下所示：</p>\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230714090438935.png\" class=\"\">\n</li>\n<li><img src=\"/posts/c00b24b1/image-20230714090457699.png\" class=\"\">\n</li>\n<li><p>第一种方法（自己实现）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 定义一个空列表，用来存储杨辉三角</span></span><br><span class=\"line\">    big_list = []</span><br><span class=\"line\">    <span class=\"comment\"># i 代表每一行的索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空列表，用来动态存储杨辉三角的每一行</span></span><br><span class=\"line\">        small_list = []</span><br><span class=\"line\">        <span class=\"comment\"># j 代表索引元素位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, i + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 起始位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                small_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == i:</span><br><span class=\"line\">                small_list.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 遍历当前行的上一行列表元素</span></span><br><span class=\"line\">            <span class=\"comment\"># 杨辉三角中除第一个元素和最后一个元素，其他元素的值：皆是上一行中，此位置的元素 和 前一个位置元素的值 之和</span></span><br><span class=\"line\">            k1 = big_list[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">            k2 = big_list[i - <span class=\"number\">1</span>][j]</span><br><span class=\"line\">            small_list.append(k1 + k2)</span><br><span class=\"line\">        <span class=\"comment\"># 打印杨辉三角每一行</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(small_list)</span><br><span class=\"line\">        <span class=\"comment\"># 把杨辉三角每一行添加到大列表中</span></span><br><span class=\"line\">        big_list.append(small_list)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方法（gpt）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    triangle = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 保证每一行的起始位置为1，结束位置为1</span></span><br><span class=\"line\">        row = [<span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 请注意range的默认步长为1</span></span><br><span class=\"line\">        <span class=\"comment\"># range(1,0) 表示一个空范围，因为默认步长为1，起始值 1 大于或等于终止值 0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i):</span><br><span class=\"line\">            row[j] = triangle[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + triangle[i-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\">        triangle.append(row)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法（上课教的）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">triangle = [[<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):  <span class=\"comment\"># i表示行数</span></span><br><span class=\"line\">\tpre_list = triangle[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">\tnew_list = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(pre_list) - <span class=\"number\">1</span>):  <span class=\"comment\"># 会循环本行长度的n-2次，也就是头和尾不会出现</span></span><br><span class=\"line\">\t\tnew_list.append(pre_list[j] + pre_list[j + <span class=\"number\">1</span>])  <span class=\"comment\"># 去除头尾后，本行的j位置的值为上一行j位置和j+1位置的值之和</span></span><br><span class=\"line\">\tnew_list = [<span class=\"number\">1</span>] + new_list + [<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(new_list)</span><br><span class=\"line\">\ttriangle.append(new_list)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法列表推导式写法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用列表推导式实现（一维数组形式）</span></span><br><span class=\"line\">pre_list = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>):  <span class=\"comment\"># i 表示执行次数</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(pre_list)</span><br><span class=\"line\">\tnew_list = [<span class=\"number\">1</span>]+ [ pre_list[j] + pre_list[j + <span class=\"number\">1</span>] <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(pre_list) - <span class=\"number\">1</span>)] + [<span class=\"number\">1</span>]</span><br><span class=\"line\">\tpre_list = new_list</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"第四部分-函数\"><a href=\"#第四部分-函数\" class=\"headerlink\" title=\"第四部分 函数\"></a>第四部分 函数</h2><ul>\n<li><p>函数定义</p>\n<ul>\n<li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段</li>\n<li>函数能提高应用的模块性，和代码的重复利用率</li>\n<li>Python提供了许多内建函数，比如print()、type()、类型转换函数等等</li>\n<li>用户也可以自己创建函数，这被叫做用户自定义函数（user difined function，简称UDF）</li>\n</ul>\n</li>\n<li><p>函数结构</p>\n<ul>\n<li>可选择性地使用return返回一个值给调用方，<strong>不 return 相当于返回 None</strong></li>\n<li><strong>def</strong> 是定义函数的关键字</li>\n<li><img src=\"/posts/c00b24b1/image-20230714204312252.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>定义函数，求圆的面积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\"># 求圆的面积</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">circle_area</span>(<span class=\"params\">r</span>):</span><br><span class=\"line\">    S = PI * r * r</span><br><span class=\"line\">    <span class=\"comment\"># 不写return默认返回空值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(S)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    s = circle_area(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><h5 id=\"必选参数\"><a href=\"#必选参数\" class=\"headerlink\" title=\"必选参数\"></a>必选参数</h5><ul>\n<li>必须传参</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必选参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_1</span>(<span class=\"params\">name, gender</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param name: 必选参数</span></span><br><span class=\"line\"><span class=\"string\">    :param gender: 必选参数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">person(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(name=<span class=\"string\">&#x27;小王&#x27;</span>,gender=<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(gender=<span class=\"string\">&#x27;小王&#x27;</span>,name=<span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">person(gender=<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>)  <span class=\"comment\"># 错误写法</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h5><ul>\n<li>传参时，可传可不传，不传使用默认值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_2</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param clazz: 默认参数，顺序赋值，如果不赋值，将按照默认值</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clazz)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">person_2(name, gender, clazz=<span class=\"string\">&#x27;02&#x27;</span>)</span><br><span class=\"line\">person_2(name, gender)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h5><ul>\n<li>可变参数，可以传入0到多个值，并以元组的形式存储</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_3</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span>, *args</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param args: 可变参数，可以传入0到多个值，并以元组的形式存储</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">person_3(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>) <span class=\"comment\"># (1, 2, 5, &#x27;6&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h5><ul>\n<li>关键字参数，需要以 参数名(参数中没有出现的参数名)&#x3D;值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_4</span>(<span class=\"params\">name, gender, clazz=<span class=\"string\">&#x27;01&#x27;</span>, *args,**kwargs</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param kwargs: 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)</span><br><span class=\"line\">person_4(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>,weight=<span class=\"number\">180</span>,high=<span class=\"number\">150</span>)  <span class=\"comment\"># &#123;&#x27;weight&#x27;: 180, &#x27;high&#x27;: 150&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h5><ul>\n<li>命名关键字参数，跟在args后面的有名参数或者跟在*后面赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值、</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命名关键字参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person_5</span>(<span class=\"params\">name,gender,clazz=<span class=\"string\">&#x27;01&#x27;</span>,*args,weight=<span class=\"number\">180</span>,high,**kwargs</span>):</span><br><span class=\"line\"><span class=\"comment\"># def person_5(name,gender,clazz=&#x27;01&#x27;,*,weight=180,high):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param weight:  命名关键字参数，跟在*args后面的有名参数或者跟在*后面</span></span><br><span class=\"line\"><span class=\"string\">    :param high:    赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clazz)  <span class=\"comment\"># 02</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(args)  <span class=\"comment\"># (1, 2, 5, &#x27;6&#x27;)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(weight)  <span class=\"comment\"># 190</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(high)  <span class=\"comment\"># 150</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(kwargs)  <span class=\"comment\"># &#123;&#x27;city&#x27;: &#x27;合肥&#x27;, &#x27;number&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class=\"line\">person_5(<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;6&#x27;</span>,weight=<span class=\"number\">190</span>,high=<span class=\"number\">150</span>,city=<span class=\"string\">&#x27;合肥&#x27;</span>,number=<span class=\"string\">&#x27;12345&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数组合\"><a href=\"#参数组合\" class=\"headerlink\" title=\"参数组合\"></a>参数组合</h5><ul>\n<li><p>定义函数时，各参数的位置</p>\n<ul>\n<li>先写必选参数,再写默认参数,再写可选参数,命名关键词参数,关键字参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">gender, cardId, clazz=<span class=\"string\">&quot;01&quot;</span>, *args, weight=<span class=\"number\">181</span>, height, **kwargs</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"递归函数-Recursive-Function\"><a href=\"#递归函数-Recursive-Function\" class=\"headerlink\" title=\"递归函数(Recursive Function)\"></a>递归函数(Recursive Function)</h4><ul>\n<li><p>如果一个函数在内部调用自身本身，这个函数就是递归函数</p>\n</li>\n<li><p>递归函数需要满足两个条件：</p>\n<ul>\n<li>自己调用自己</li>\n<li>有停止条件</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"DeBug\"><a href=\"#DeBug\" class=\"headerlink\" title=\"DeBug\"></a>DeBug</h5><img src=\"/posts/c00b24b1/image-20230715193157730.png\" class=\"\">\n\n<h5 id=\"求阶乘\"><a href=\"#求阶乘\" class=\"headerlink\" title=\"求阶乘\"></a>求阶乘</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 停止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial(n-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"求斐波拉契数列\"><a href=\"#求斐波拉契数列\" class=\"headerlink\" title=\"求斐波拉契数列\"></a>求斐波拉契数列</h5><ul>\n<li><p>著名的斐波拉契数列（Fibonacci）</p>\n<p>1, 1, 2, 3, 5, 8, 13, 21, 34, … 除第一、二个数之外，后一个数等于前两个数之和</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># todo:斐波拉契数列</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span> <span class=\"keyword\">or</span> n == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factorial(n-<span class=\"number\">1</span>) + factorial(n-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"汉诺塔（Hanoi）\"><a href=\"#汉诺塔（Hanoi）\" class=\"headerlink\" title=\"汉诺塔（Hanoi）\"></a>汉诺塔（Hanoi）</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230715194720536.png\" class=\"\">\n</li>\n<li><p>思路</p>\n<ul>\n<li>把A柱子上面的n-1个盘子看成整体</li>\n<li>第一步：这n-1个盘子由：A柱子–&gt;C柱子–&gt;B柱子</li>\n<li>第二步：把A柱子剩余的1个大盘子由：A–&gt;C</li>\n<li>第三步：把B柱子的n-1个盘子由：B–&gt;C</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 汉诺塔</span></span><br><span class=\"line\"><span class=\"comment\"># n是A柱子的盘子数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hanoi</span>(<span class=\"params\">n, a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a + <span class=\"string\">&#x27;--&gt;&#x27;</span> + c)</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, a, c, b)  <span class=\"comment\"># 把A柱子上面的n-1个盘子看成整体，第一步：这n-1个盘子由：A柱子--&gt;C柱子--&gt;B柱子</span></span><br><span class=\"line\">    hanoi(<span class=\"number\">1</span>, a, b, c)      <span class=\"comment\"># 第二步：把A柱子剩余的1个大盘子由：A--&gt;C</span></span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, b, a, c)  <span class=\"comment\"># 第三步：把B柱子的n-1个盘子由：B--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;执行过程</span></span><br><span class=\"line\"><span class=\"string\">hanoi(3,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; hanoi(2,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                                                hanoi(1,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; A--&gt;B</span></span><br><span class=\"line\"><span class=\"string\">                                                hanoi(1,&#x27;C&#x27;,&#x27;A&#x27;,&#x27;B&#x27;) -&gt; C--&gt;B</span></span><br><span class=\"line\"><span class=\"string\">                     -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                     -&gt; hanoi(2,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; hanoi(1,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;A&#x27;) -&gt; B--&gt;A</span></span><br><span class=\"line\"><span class=\"string\">                                             -&gt; hanoi(1,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; B--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">                                             -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python练习题-一\"><a href=\"#Python练习题-一\" class=\"headerlink\" title=\"Python练习题 一\"></a>Python练习题 一</h2><p><strong>1、有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1</span>():</span><br><span class=\"line\">    list_1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    three_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:  <span class=\"comment\"># 防止第一位与第二位重复，如果第一位与第二位重复，那么第三位就不需要循环了</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> list_1:</span><br><span class=\"line\">                <span class=\"comment\"># if i != j and i != k and j != k</span></span><br><span class=\"line\">                <span class=\"comment\"># \tthree_1 = str(i) + str(j) + str(k)</span></span><br><span class=\"line\">                <span class=\"comment\"># \tthree_list.append(three_1)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == k <span class=\"keyword\">or</span> j == k:  <span class=\"comment\"># 防止第一位与第三位重复  防止第二位与第三位重复</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                three_1 = <span class=\"built_in\">str</span>(i) + <span class=\"built_in\">str</span>(j) + <span class=\"built_in\">str</span>(k)</span><br><span class=\"line\">                three_list.append(three_1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(three_list)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(three_list))</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、企业发放的奖金根据利润提成</strong></p>\n<ul>\n<li><p>利润(I)低于或等于10万元时，奖金可提10%；</p>\n</li>\n<li><p>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</p>\n</li>\n<li><p>20万到40万之间时，高于20万元的部分，可提成5%；</p>\n</li>\n<li><p>40万到60万之间时高于40万元的部分，可提成3%；</p>\n</li>\n<li><p>60万到100万之间时，高于60万元的部分，可提成1.5%；</p>\n</li>\n<li><p>高于100万元时，超过100万元的部分按1%提成；</p>\n</li>\n</ul>\n<p><strong>从键盘输入当月利润I，求应发放奖金总数？</strong></p>\n<ul>\n<li><strong>第一种</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2</span>():</span><br><span class=\"line\">    I = <span class=\"number\">3000000</span></span><br><span class=\"line\">    reward = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> I &lt;= <span class=\"number\">100000</span>:</span><br><span class=\"line\">        reward = I * <span class=\"number\">0.1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">200000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + (I - <span class=\"number\">100000</span>) * <span class=\"number\">0.075</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">400000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + (I - <span class=\"number\">200000</span>) * <span class=\"number\">0.05</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">600000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + (I - <span class=\"number\">400000</span>) * <span class=\"number\">0.03</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> I &lt;= <span class=\"number\">1000000</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.03</span> + (I - <span class=\"number\">600000</span>) * <span class=\"number\">0.015</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        reward = <span class=\"number\">100000</span> * <span class=\"number\">0.1</span> + <span class=\"number\">100000</span> * <span class=\"number\">0.075</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.05</span> + <span class=\"number\">200000</span> * <span class=\"number\">0.03</span> + <span class=\"number\">400000</span> * <span class=\"number\">0.015</span> + (I - <span class=\"number\">1000000</span>) * <span class=\"number\">0.01</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(reward)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>第二种</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用区间边界值匹配提成率</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_2</span>(<span class=\"params\">I</span>):</span><br><span class=\"line\">    reward = <span class=\"number\">0</span></span><br><span class=\"line\">    money_edge = [<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">60</span>, <span class=\"number\">100</span>, <span class=\"number\">10000000000</span>]  <span class=\"comment\"># 最后一个表示无穷大，目的是取到超出100的值</span></span><br><span class=\"line\">    percent = [<span class=\"number\">0.1</span>, <span class=\"number\">0.075</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.03</span>, <span class=\"number\">0.015</span>, <span class=\"number\">0.01</span>]  <span class=\"comment\"># percent的值的位置与money中的区间对应</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(money_edge)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> I &lt; money_edge[i]:  <span class=\"comment\"># 计算的是超出的部分</span></span><br><span class=\"line\">            reward += (I - money_edge[i - <span class=\"number\">1</span>]) * percent[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span>  <span class=\"comment\"># 找到值对应的区间，退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 计算的是每超出的内部分对应的提成</span></span><br><span class=\"line\">            reward += (money_edge[i] - money_edge[i - <span class=\"number\">1</span>]) * percent[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reward</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</span></span><br><span class=\"line\"><span class=\"comment\"># 3.1%1=0.1  3%1=0 判断是否是整数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3</span>():</span><br><span class=\"line\">    <span class=\"keyword\">import</span> math</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        m = i + <span class=\"number\">100</span></span><br><span class=\"line\">        n = i + <span class=\"number\">268</span></span><br><span class=\"line\">        <span class=\"comment\"># if int(math.pow(m, 0.5)) == math.pow(m, 0.5) and int(math.pow(n, 0.5)) == math.pow(n, 0.5):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m**<span class=\"number\">0.5</span>) % <span class=\"number\">1</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> (n**<span class=\"number\">0.5</span>) % <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模拟用户登录，检测用户输入的用户名和密码</strong></p>\n<ul>\n<li>准备一个字典，保存用户名及对应的密码</li>\n<li>若用户名不存在，则提示’User Not Allowed’</li>\n<li>若用户名存在，但密码不正确，则提示’Authentication failure’</li>\n<li>若用户名和密码都正确，则登录成功，输出：xxx@localhost:~$</li>\n<li>当用户登录失败后可重试3次，每次重试需间隔5s钟，累计3次失败后，退出登录程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4.模拟用户登录，检测用户输入的用户名和密码</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">dict_1 = &#123;&#x27;user&#x27;: &#x27;123&#x27;, &#x27;user2&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"string\">user = &#x27;user&#x27;</span></span><br><span class=\"line\"><span class=\"string\">print(user in dict_1)</span></span><br><span class=\"line\"><span class=\"string\">print(user in dict_1 != True)  # True </span></span><br><span class=\"line\"><span class=\"string\">问：为什么第二个print返回True</span></span><br><span class=\"line\"><span class=\"string\">答：在 Python 中，比较运算符 != 具有比成员运算符 in 更高的优先级，</span></span><br><span class=\"line\"><span class=\"string\">因此 user in dict_1 != True 的表达式会先进行 user in dict_1 的判断，然后再将结果与 True 进行比较。</span></span><br><span class=\"line\"><span class=\"string\">改：print((user in dict_1) != True)  # False </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4</span>():</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\">    dict_1 = &#123;<span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;123&#x27;</span>, <span class=\"string\">&#x27;user2&#x27;</span>: <span class=\"string\">&#x27;12345&#x27;</span>&#125;</span><br><span class=\"line\">    n = <span class=\"number\">0</span>  <span class=\"comment\"># 计数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        user = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入用户名：&#x27;</span>)</span><br><span class=\"line\">        password = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入密码：&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (user <span class=\"keyword\">in</span> dict_1):  <span class=\"comment\"># 避免运算符优先级的影响 用括号括起来</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;User Not Allowed&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> password != dict_1.get(user):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Authentication failure&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(user + <span class=\"string\">&#x27;@localhost:~$&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">分析</span></span><br><span class=\"line\"><span class=\"string\">    月   兔子年龄    兔子对数    </span></span><br><span class=\"line\"><span class=\"string\">    1     1         1  </span></span><br><span class=\"line\"><span class=\"string\">    2     2         1</span></span><br><span class=\"line\"><span class=\"string\">    3     31        2</span></span><br><span class=\"line\"><span class=\"string\">    4     412       3</span></span><br><span class=\"line\"><span class=\"string\">    5     51231     5 </span></span><br><span class=\"line\"><span class=\"string\">    6     61231412  8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 根据上述分析，兔子对数是斐波拉契数列</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> month == <span class=\"number\">1</span> <span class=\"keyword\">or</span> month == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question5(month - <span class=\"number\">1</span>) + question5(month - <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 但是上述解法太过理想</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5_2</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    rabbit_list = [&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>&#125;]  <span class=\"comment\"># 初始化第一对兔子</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> rabbit <span class=\"keyword\">in</span> rabbit_list:</span><br><span class=\"line\">            rabbit[<span class=\"string\">&#x27;age&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rabbit[<span class=\"string\">&#x27;age&#x27;</span>] &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">                rabbit_list.append(&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>&#125;)  <span class=\"comment\"># 生兔子</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(rabbit_list)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python练习题-二\"><a href=\"#python练习题-二\" class=\"headerlink\" title=\"python练习题 二\"></a>python练习题 二</h2><p>1、输入三个整数x,y,z，请把这三个数由小到大输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、输入三个整数x,y,z，请把这三个数由小到大输出</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    list_1 = []</span><br><span class=\"line\">    list_1.append(x)</span><br><span class=\"line\">    list_1.append(y)</span><br><span class=\"line\">    list_1.append(z)</span><br><span class=\"line\">    list_1.sort()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list_1)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 最基本的排序方式，比较排序</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1_2</span>(<span class=\"params\">x, y, z</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> y &gt; z:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(z, y, x)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># y &lt; z</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; z:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(y, z, x, )</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; z</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(y, x, z)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> y &lt; z:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># y &gt; z</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; z:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(z, x, y)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  <span class=\"comment\"># x &lt; z</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(z, x, y)</span><br><span class=\"line\"><span class=\"comment\"># 冒泡排序</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question1_3</span>(<span class=\"params\">x,y,z</span>):</span><br><span class=\"line\">    list_a = [x,y,z]</span><br><span class=\"line\">    flag = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_a)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list_a)-<span class=\"number\">1</span>-i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list_a[j] &gt; list_a[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                list_a[j],list_a[j+<span class=\"number\">1</span>] = list_a[j+<span class=\"number\">1</span>],list_a[j]</span><br><span class=\"line\">                flag = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(list_a)</span><br></pre></td></tr></table></figure>\n\n<p>2、输入某年某月某日，判断这一天是这一年的第几天</p>\n<ul>\n<li>datetime模块的应用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2.输入某年某月某日，判断这一天是这一年的第几天</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2</span>(<span class=\"params\">year, month, day</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 创建日期对象</span></span><br><span class=\"line\">    date = datetime.date(year, month, day)</span><br><span class=\"line\">    <span class=\"comment\"># timetuple().tm_yday获取日期对象在年份中的第几天</span></span><br><span class=\"line\">    y_day = date.timetuple().tm_yday</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(y_day)</span><br><span class=\"line\"><span class=\"comment\"># 面向过程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_2</span>(<span class=\"params\">year, month, day</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 首先判断日期是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> year &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> (month &gt; <span class=\"number\">12</span> <span class=\"keyword\">or</span> month &lt; <span class=\"number\">0</span>) <span class=\"keyword\">or</span> (day &gt; <span class=\"number\">31</span> <span class=\"keyword\">or</span> day &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日期不合法！！！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否是闰年</span></span><br><span class=\"line\">    <span class=\"comment\"># 能被4整除，但是不能被100整除</span></span><br><span class=\"line\">    <span class=\"comment\"># 能被400整除</span></span><br><span class=\"line\">    month_31day = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    month_30day = [<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">    ydays = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">100</span> != <span class=\"number\">0</span>) <span class=\"keyword\">or</span> (year % <span class=\"number\">400</span>) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (month == <span class=\"number\">2</span> <span class=\"keyword\">and</span> day &gt; <span class=\"number\">29</span>) <span class=\"keyword\">or</span> ((month <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> month_30day) <span class=\"keyword\">and</span> day &gt; <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;日期不合法&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, month):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_31day:</span><br><span class=\"line\">                ydays += <span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">29</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">30</span></span><br><span class=\"line\">        ydays += day</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, month):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> month_31day:</span><br><span class=\"line\">                ydays += <span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">28</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ydays += <span class=\"number\">30</span></span><br><span class=\"line\">        ydays += day</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ydays)</span><br><span class=\"line\"><span class=\"comment\"># datetime的应用</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question2_3</span>():</span><br><span class=\"line\">    time = <span class=\"string\">&quot;2020年7月12日&quot;</span></span><br><span class=\"line\">    date = datetime.datetime.strptime(time, <span class=\"string\">&quot;%Y年%m月%d日&quot;</span>)  <span class=\"comment\"># strptime：字符串解析为datetime</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(date)</span><br><span class=\"line\">    y = date.year</span><br><span class=\"line\">    m = date.month</span><br><span class=\"line\">    d = date.day</span><br><span class=\"line\"></span><br><span class=\"line\">    str_time = datetime.datetime.strftime(date, <span class=\"string\">&quot;%Y/%m/%d&quot;</span>)  <span class=\"comment\"># strftime：字符串格式化datetime，也就是datetime转为字符串</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(date.timetuple().tm_yday)  <span class=\"comment\"># 求一年当中的第几天</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># question2_2优化</span></span><br><span class=\"line\">    month_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">    day_list_r = [<span class=\"number\">31</span>, <span class=\"number\">29</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>]  <span class=\"comment\"># 对应闰年</span></span><br><span class=\"line\">    day_list_p = [<span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>]  <span class=\"comment\"># 对应平年</span></span><br><span class=\"line\">    yday = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m - <span class=\"number\">1</span>):  <span class=\"comment\"># 0,1,2,3,4,5</span></span><br><span class=\"line\">        yday += day_list_r[i]</span><br><span class=\"line\">    yday += d</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(yday)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 再优化</span></span><br><span class=\"line\">    yday = <span class=\"built_in\">sum</span>(day_list_r[<span class=\"number\">0</span>:m - <span class=\"number\">1</span>])</span><br><span class=\"line\">    yday += d</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(yday)</span><br></pre></td></tr></table></figure>\n\n<p>3、有一分数序列：2&#x2F;1,3&#x2F;2,5&#x2F;3,8&#x2F;5,13&#x2F;8,21&#x2F;13…求出这个数列的前20项之和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3.有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">m</span>(<span class=\"params\">k</span>):  <span class=\"comment\"># 分母  注意要给出前两项的返回值，不然m(2-2)=m(0)=报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(k - <span class=\"number\">1</span>) + m(k - <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">n</span>(<span class=\"params\">k</span>):  <span class=\"comment\"># 分子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n(k - <span class=\"number\">1</span>) + n(k - <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3</span>(<span class=\"params\">k</span>):</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, k + <span class=\"number\">1</span>):</span><br><span class=\"line\">        summ += m(i) / n(i)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"><span class=\"comment\"># 二维数组求解问题三</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_2</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [[<span class=\"number\">2</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        summ += list_a[i][<span class=\"number\">0</span>] / list_a[i][<span class=\"number\">1</span>]</span><br><span class=\"line\">        list_a.append([list_a[i][<span class=\"number\">0</span>]+list_a[i][<span class=\"number\">1</span>],list_a[i][<span class=\"number\">0</span>]])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个一维数组求解问题三</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">1 2 3 5</span></span><br><span class=\"line\"><span class=\"string\">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class=\"line\"><span class=\"string\">2 4 6 8</span></span><br><span class=\"line\"><span class=\"string\">2/4,6/2,8/6,14/8</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 本方法只适用：分子大于分母，不适用：2/4,6/2,8/6</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_3</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    summ = list_a[<span class=\"number\">1</span>]/list_a[<span class=\"number\">0</span>]  <span class=\"comment\"># 加第一项</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;list_a[<span class=\"number\">1</span>]&#125;</span>/<span class=\"subst\">&#123;list_a[<span class=\"number\">0</span>]&#125;</span>&#x27;</span>)  <span class=\"comment\"># 第一项</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">        list_a.append(list_a[i-<span class=\"number\">1</span>]+list_a[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        summ += list_a[i]/list_a[i-<span class=\"number\">1</span>]  <span class=\"comment\"># 加第i项</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;list_a[i]&#125;</span>/<span class=\"subst\">&#123;list_a[i-<span class=\"number\">1</span>]&#125;</span>&#x27;</span>)  <span class=\"comment\"># 第i项</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br><span class=\"line\"><span class=\"comment\"># question3_3(3)</span></span><br><span class=\"line\"><span class=\"comment\"># 两个一维数组求解问题三</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question3_4</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    list_a = [<span class=\"number\">2</span>]  <span class=\"comment\"># 分子</span></span><br><span class=\"line\">    list_b = [<span class=\"number\">1</span>]  <span class=\"comment\"># 分母</span></span><br><span class=\"line\">    summ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        summ += list_a[i] / list_b[i]  <span class=\"comment\"># 第i+1项</span></span><br><span class=\"line\">        list_a.append(list_a[i]+list_b[i])</span><br><span class=\"line\">        list_b.append(list_a[i])</span><br><span class=\"line\">    <span class=\"comment\"># print(list_a)  # 最后list_a和list_b中的元素会比 summ的累加项 多一项</span></span><br><span class=\"line\">    <span class=\"comment\"># print(list_b)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(summ)</span><br></pre></td></tr></table></figure>\n\n<p>4、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;分析</span></span><br><span class=\"line\"><span class=\"string\">次数    反弹高度     经历高度</span></span><br><span class=\"line\"><span class=\"string\">1       50         100</span></span><br><span class=\"line\"><span class=\"string\">2       25         100+50*2</span></span><br><span class=\"line\"><span class=\"string\">3       25/2      100+50*2+25*2</span></span><br><span class=\"line\"><span class=\"string\">4       25/4      100+50*2+25*2+25/2*2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    height = <span class=\"number\">50</span>        <span class=\"comment\"># 初始化第一次反弹高度</span></span><br><span class=\"line\">    sum_height = <span class=\"number\">100</span>  <span class=\"comment\"># 初始化第一次落地经历高度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        sum_height += height*<span class=\"number\">2</span></span><br><span class=\"line\">        height /= <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(sum_height)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(height)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 递归求反弹高度</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;初始高度100</span></span><br><span class=\"line\"><span class=\"string\">反弹次数 反弹高度</span></span><br><span class=\"line\"><span class=\"string\">1       50</span></span><br><span class=\"line\"><span class=\"string\">2       25</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question4_2</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question4_2(n - <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># 两种方式</span></span><br><span class=\"line\">    <span class=\"comment\"># if n==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#     return 100</span></span><br><span class=\"line\">    <span class=\"comment\"># return question4_2(n-1)/2</span></span><br><span class=\"line\"><span class=\"comment\"># print(question4_2(2))</span></span><br></pre></td></tr></table></figure>\n\n<p>5、有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;分析</span></span><br><span class=\"line\"><span class=\"string\">1      10</span></span><br><span class=\"line\"><span class=\"string\">2      age(1)+2</span></span><br><span class=\"line\"><span class=\"string\">3      age(2)+2</span></span><br><span class=\"line\"><span class=\"string\">4      age(2)+2</span></span><br><span class=\"line\"><span class=\"string\">5      age(4)+2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> question5(n-<span class=\"number\">1</span>)+<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(question5(<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n\n<p>6、猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">天数 剩余桃子数</span></span><br><span class=\"line\"><span class=\"string\">1   n/2-1 </span></span><br><span class=\"line\"><span class=\"string\">2   (n/2 - 1)/2-1</span></span><br><span class=\"line\"><span class=\"string\">3   ((n/2 - 1)/2-1)/2-1</span></span><br><span class=\"line\"><span class=\"string\">4   (((n/2 - 1)/2-1)/2-1)/2-1   n(d-1)=(n(d)+1)*2   </span></span><br><span class=\"line\"><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">.   </span></span><br><span class=\"line\"><span class=\"string\">10  1</span></span><br><span class=\"line\"><span class=\"string\">n(d-1)=(n(d)+1)*2</span></span><br><span class=\"line\"><span class=\"string\">n(d)=(n(d+1)+1)*2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question6</span>():</span><br><span class=\"line\">    peach = <span class=\"number\">1</span>  <span class=\"comment\"># 第十天剩下的桃子数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        peach = (peach+<span class=\"number\">1</span>)*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(peach)</span><br><span class=\"line\"><span class=\"comment\"># 也可以递归写</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question6_2</span>(<span class=\"params\">day</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> day == <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (question6_2(day+<span class=\"number\">1</span>)+<span class=\"number\">1</span>)*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(question6_2(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、python进阶\"><a href=\"#二、python进阶\" class=\"headerlink\" title=\"二、python进阶\"></a>二、python进阶</h1><h2 id=\"第一部分-面向对象\"><a href=\"#第一部分-面向对象\" class=\"headerlink\" title=\"第一部分 面向对象\"></a>第一部分 面向对象</h2><ul>\n<li><p>面向对象编程OOP——Object Oriented Programming，是一种程序设计思想</p>\n</li>\n<li><p>面向对象的三大特点：封装、继承、多态</p>\n</li>\n<li><p>多态：父类的引用指向子类的对象</p>\n</li>\n</ul>\n<h3 id=\"1、类（class）\"><a href=\"#1、类（class）\" class=\"headerlink\" title=\"1、类（class）\"></a>1、类（class）</h3><ul>\n<li><p>类的定义</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230717203553391.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>类的实例化</p>\n<ul>\n<li>类的实例化会调用初始化方法  init()方法，传入的实参也都会传到 init()方法中</li>\n</ul>\n</li>\n<li><p>类的方法和属性的调用</p>\n<ul>\n<li>在类里面通过  self.  的方式调用方法和属性</li>\n<li>在类外面通过 实例对象. 的方式调用方法和属性</li>\n</ul>\n</li>\n<li><p>定义在函数体外的属性（如chinese_name），被认为是默认属性，可以通过 self. 的方式再次赋值</p>\n</li>\n<li><p><strong>self 传入的是实例对象stu1</strong>，self. 参数名&#x3D;值  的方式赋值的参数都可以上述方式调用</p>\n</li>\n<li><p>重载：python中没有这种实现方式，会默认调用后面出现的同名方法，如果不传入后面方法对应的参数就会报错</p>\n</li>\n<li><p>重写：重写父类已有的方法，在此基础上获得新功能</p>\n<ul>\n<li>重写object类中的__str__方法，自定义打印实列输出的内容</li>\n</ul>\n</li>\n<li><p>从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“<strong>封装</strong>”起来了，调用很容易，但却不用知道内部实现的细节</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):  <span class=\"comment\"># 默认继承object类（所有类的父类）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 直接被添加到self里面</span></span><br><span class=\"line\">    chinese_name = <span class=\"string\">&#x27;小王&#x27;</span>  <span class=\"comment\"># 默认属性值，在类里面通过 self. 的方式调用，在类外面通过 实例对象. 的方式调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, score, chinese_name</span>):  <span class=\"comment\"># 构造方法，实例化时调用</span></span><br><span class=\"line\">        self.name = name  <span class=\"comment\"># 通过init方法被添加到self里面的</span></span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">        self.chinese_name = chinese_name  <span class=\"comment\"># 可以通过init方法传入参数，修改默认的属性值</span></span><br><span class=\"line\">        <span class=\"comment\"># self.print_score()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_score</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 打印学生成绩</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;self.name&#125;</span>的成绩<span class=\"subst\">&#123;self.score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;中文名为：<span class=\"subst\">&#123;self.chinese_name&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)  <span class=\"comment\"># self是类自己，等同于类外的 stu1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重载（python中没有这种实现方式，会默认调用后面出现的方法，如果不传入后面方法对应的参数就会报错）</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_score</span>(<span class=\"params\">self,value</span>):  <span class=\"comment\"># 打印学生成绩</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;value&#125;</span> 不传参，就报错&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写：object类中的__str__方法，自定义打印实列输出的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">self 传入的是实例对象stu1</span></span><br><span class=\"line\"><span class=\"string\">self是类的实例对象自己，等同于类外的 stu1</span></span><br><span class=\"line\"><span class=\"string\">在类中是通过 self. 的方式调用类的属性和方法</span></span><br><span class=\"line\"><span class=\"string\">在类外是通过 实例化对象. 的方式调用类的属性和方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"number\">99</span>, <span class=\"string\">&#x27;小刘&#x27;</span>)  <span class=\"comment\"># Student类的实例化</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.chinese_name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1)  <span class=\"comment\"># 默认打印内存地址</span></span><br><span class=\"line\">stu1.print_score(<span class=\"number\">250</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、私有方法和属性\"><a href=\"#2、私有方法和属性\" class=\"headerlink\" title=\"2、私有方法和属性\"></a>2、私有方法和属性</h3><ul>\n<li>要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，只有内部可以访问，外部不能访问<ul>\n<li>强制访问私有变量方法一<ul>\n<li>stu1._Student__secret</li>\n</ul>\n</li>\n<li>强制访问私有变量方法二<ul>\n<li>类的内部可以访问私有变量</li>\n<li>通过getter方法，返回私有变量的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一般约定俗成的是 变量，_方法名 是私有的 不要随意访问和修改</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        <span class=\"comment\"># __开头的变量为私有变量，不能被外部的实例化对象访问，但是可以强制访问或在类内访问</span></span><br><span class=\"line\">        self.__secret = <span class=\"string\">&quot;This is a secret!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">study</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span>每天都学习&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># __开头的方法为私有方法，外部实例对象不能访问</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__play_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;self.name&#125;</span>今年<span class=\"subst\">&#123;self.age&#125;</span>天天去网吧打游戏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getter_secret</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__secret  <span class=\"comment\"># 类内访问私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stu1 = Student(<span class=\"string\">&#x27;Jack&#x27;</span>, <span class=\"string\">&#x27;15&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 强制访问私有变量方法1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(stu1._Student__secret)</span><br><span class=\"line\">    <span class=\"comment\"># 强制访问 私有变量访问2：通过类中的getter方法</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(stu1.getter_secret())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、兔子问题\"><a href=\"#3、兔子问题\" class=\"headerlink\" title=\"3、兔子问题\"></a>3、兔子问题</h3><ul>\n<li>使用类的思想实现：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rabbit</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">growth</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.age += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">question5</span>(<span class=\"params\">month</span>):</span><br><span class=\"line\">    total = [Rabbit()]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(month):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> rabbit <span class=\"keyword\">in</span> total:</span><br><span class=\"line\">            rabbit.growth()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rabbit.age &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">                total.append(Rabbit())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(total))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    question5(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、猴子补丁（Monkey-patch）\"><a href=\"#4、猴子补丁（Monkey-patch）\" class=\"headerlink\" title=\"4、猴子补丁（Monkey patch）\"></a>4、猴子补丁（Monkey patch）</h3><ul>\n<li><p>猴子补丁是对Python中模块和类可以在外部被动态修改这种特性的一个比喻 </p>\n<p>将对类中没有的方法和属性进行赋值后，就可以调用，破坏了代码的封装性，造成了python代码的不安全</p>\n</li>\n<li><p>在模块和类的外部对模块和类进行修改是一种非常耍赖的做法，会破坏代码的封装结构，这种事情大概只有淘气的猴子喜欢去做，因此形象地称之为猴子补丁</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个Dog类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sleep</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Zzz... Zzz... Zzz...&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Dog类外的方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">speak</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;wang wang wang&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对Python中模块和类可以在外部被动态修改</span></span><br><span class=\"line\">Dog.speak = speak  <span class=\"comment\"># 猴子补丁</span></span><br><span class=\"line\">Dog.home = <span class=\"string\">&quot;Earth&quot;</span>  <span class=\"comment\"># 猴子补丁</span></span><br><span class=\"line\">spike = Dog(<span class=\"string\">&#x27;spike&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">spike.home = <span class=\"string\">&quot;HeFei&quot;</span></span><br><span class=\"line\">spike.sleep()</span><br><span class=\"line\">spike.speak()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(spike.home)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、继承\"><a href=\"#5、继承\" class=\"headerlink\" title=\"5、继承\"></a>5、继承</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 抽取学生类和教室类的共同特征，抽象为一个Person类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender</span>):</span><br><span class=\"line\">        self.id_card = id_card</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.gender = gender</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eat</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;吃饭&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sleep</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;睡觉&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;喜欢玩游戏&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">Person</span>):  <span class=\"comment\"># 继承Person类</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender,clazz,sid</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_card,name,age,gender)  <span class=\"comment\"># 调用父类的初始化方法对共性内容初始化</span></span><br><span class=\"line\">        self.clazz = clazz</span><br><span class=\"line\">        self.sid = sid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写了父类的interest方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;学生喜欢写试卷&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span>(<span class=\"title class_ inherited__\">Person</span>):  <span class=\"comment\"># 继承Person类</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,id_card,name,age,gender,office,tid</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(id_card,name,age,gender)</span><br><span class=\"line\">        self.office = office</span><br><span class=\"line\">        self.tid = tid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写了父类的interest方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">interest</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;老师喜欢讲知识&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    stu1 = Student(<span class=\"string\">&#x27;341281&#x27;</span>,<span class=\"string\">&#x27;小王&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;一班&#x27;</span>,<span class=\"string\">&#x27;010017&#x27;</span>)</span><br><span class=\"line\">    stu1.eat()</span><br><span class=\"line\">    stu1.sleep()</span><br><span class=\"line\">    stu1.interest()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    tea1 = Teacher(<span class=\"string\">&#x27;341281&#x27;</span>,<span class=\"string\">&#x27;刘老师&#x27;</span>,<span class=\"string\">&#x27;38&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;3号办公室&#x27;</span>,<span class=\"string\">&#x27;30018&#x27;</span>)</span><br><span class=\"line\">    tea1.eat()</span><br><span class=\"line\">    tea1.sleep()</span><br><span class=\"line\">    tea1.interest()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、多态\"><a href=\"#6、多态\" class=\"headerlink\" title=\"6、多态\"></a>6、多态</h3><ul>\n<li>多态：父类的引用指向子类的对象<ul>\n<li>Animal animal &#x3D; new Dog()</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 多态：父类的引用指向子类的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;animal is running&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog is running and baking&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat is running and jumping&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">animal_run</span>(<span class=\"params\">animal: Animal</span>):</span><br><span class=\"line\">    animal.run()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父类的引用指向子类的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    animal_run(Dog)  <span class=\"comment\"># Animal animal = new Dog()</span></span><br><span class=\"line\">    animal_run(Cat)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、鸭子类型\"><a href=\"#7、鸭子类型\" class=\"headerlink\" title=\"7、鸭子类型\"></a>7、鸭子类型</h3><ul>\n<li>鸭子类型，因为python的数据类型是动态的，没有严格类型检查，所以Goose这个类具有和Duck这个类相同的方法，duck_show这个函数也可以对ee进行作用，故Python其数据类型属于鸭子类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Duck</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">swim</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;A duck named <span class=\"subst\">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">call</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ga ga ga ...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Goose</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">swim</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;A goose named <span class=\"subst\">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">call</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;goo goo goo ...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">duck_show</span>(<span class=\"params\">duck:Duck</span>):</span><br><span class=\"line\">    duck.swim()</span><br><span class=\"line\">    duck.call()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    duck = Duck(<span class=\"string\">&quot;丑小鸭&quot;</span>)</span><br><span class=\"line\">    duck_show(duck)</span><br><span class=\"line\">    goose = Goose(<span class=\"string\">&quot;白天鹅&quot;</span>)</span><br><span class=\"line\">    duck_show(goose)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二部分-异常处理\"><a href=\"#第二部分-异常处理\" class=\"headerlink\" title=\"第二部分 异常处理\"></a>第二部分 异常处理</h2><h3 id=\"1、基本异常类型\"><a href=\"#1、基本异常类型\" class=\"headerlink\" title=\"1、基本异常类型\"></a>1、基本异常类型</h3><ul>\n<li><img src=\"/posts/c00b24b1/image-20230718201445587.png\" class=\"\"></li>\n</ul>\n<h5 id=\"keyboardInterrupt\"><a href=\"#keyboardInterrupt\" class=\"headerlink\" title=\"keyboardInterrupt\"></a>keyboardInterrupt</h5><ul>\n<li>终止此代码后会抛出异常keyboardInterrupt<ul>\n<li><img src=\"/posts/c00b24b1/image-20230718202052338.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SyntaxError\"><a href=\"#SyntaxError\" class=\"headerlink\" title=\"SyntaxError\"></a>SyntaxError</h5><ul>\n<li>语法异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ZeroDivisionError\"><a href=\"#ZeroDivisionError\" class=\"headerlink\" title=\"ZeroDivisionError\"></a>ZeroDivisionError</h5><ul>\n<li>除数为0异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ZeroDivisionError</span></span><br><span class=\"line\">sum_1 = <span class=\"number\">100</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">    sum_1 /= n</span><br><span class=\"line\">    n -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"NameError\"><a href=\"#NameError\" class=\"headerlink\" title=\"NameError\"></a>NameError</h5><ul>\n<li>命名异常，一般是变量没有赋值就被引用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NameError</span></span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TypeError\"><a href=\"#TypeError\" class=\"headerlink\" title=\"TypeError\"></a>TypeError</h5><ul>\n<li>类型错误，下面为int和str相加报错</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TypeError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> + <span class=\"string\">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ValueError\"><a href=\"#ValueError\" class=\"headerlink\" title=\"ValueError\"></a>ValueError</h5><ul>\n<li>值错误</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ValueError</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IndexError\"><a href=\"#IndexError\" class=\"headerlink\" title=\"IndexError\"></a>IndexError</h5><ul>\n<li>索引异常，一般为索引越界异常</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># IndexError</span></span><br><span class=\"line\"><span class=\"built_in\">tuple</span> = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>[-<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AttributeError\"><a href=\"#AttributeError\" class=\"headerlink\" title=\"AttributeError\"></a>AttributeError</h5><ul>\n<li>属性异常，一般是调用不存在的方法或变量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># AttributeError</span></span><br><span class=\"line\">tuple_1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">tuple_1.append(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">tom = Cat()</span><br><span class=\"line\">tom.run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、捕获和抛出异常\"><a href=\"#2、捕获和抛出异常\" class=\"headerlink\" title=\"2、捕获和抛出异常\"></a>2、捕获和抛出异常</h3><h5 id=\"忽略警告\"><a href=\"#忽略警告\" class=\"headerlink\" title=\"忽略警告\"></a>忽略警告</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h5><ul>\n<li><img src=\"/posts/c00b24b1/image-20230718202931072.png\" class=\"\"></li>\n<li>发生异常时，try块中的异常代码的下面代码不会执行，但是try&#x2F;except代码块外的代码会执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行</span></span><br><span class=\"line\">sum_1 = <span class=\"number\">100</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        sum_1 /= n</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(sum_1)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;没有异常会执行的代码&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;有没有异常都会执行的代码&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;try/except代码块外的代码&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>try&#x2F;except不会引入新的作用域，只不过没有异常的时候，except中的代码块就不会执行<ul>\n<li>如果没有异常在这里尝试访问 error_message 变量会引发 NameError</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"number\">10</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    error_message_0 = <span class=\"string\">&quot;除数不能为零&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error_message_0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(error_message_0)  <span class=\"comment\"># 除数不能为零，</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没有异常在这里尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>try代码块中，发生异常的代码的上方变量还是可以引用的<ul>\n<li>result &#x3D; x&#x2F;y  # 如果该段代码有异常，result 变量就不被定义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"number\">10</span></span><br><span class=\"line\">    y = <span class=\"number\">0</span></span><br><span class=\"line\">    result = x/y  <span class=\"comment\"># 如果该段代码有异常，该变量就不被定义</span></span><br><span class=\"line\">    u = <span class=\"number\">100</span>   <span class=\"comment\"># 上面代码有异常，try中下面的代码就不会执行</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)  <span class=\"comment\"># 10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)  <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(u)</span><br><span class=\"line\"><span class=\"comment\">#尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果数值加法中，有字符串可以把其转为ASCii码值再进行加</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果数值加法中，有字符串可以把其转为ASCii码值再进行加</span></span><br><span class=\"line\">list_a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list_a:</span><br><span class=\"line\">        operand = i + <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;操作数为<span class=\"subst\">&#123;operand&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Exception 错误&quot;</span>,e)</span><br><span class=\"line\">    operand = <span class=\"built_in\">ord</span>(i) + <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;操作数为<span class=\"subst\">&#123;i&#125;</span>，数值为<span class=\"subst\">&#123;operand&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h5><ul>\n<li>抛出异常会终止程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 抛出异常</span></span><br><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">f&quot;x不能大于5，x的值为<span class=\"subst\">&#123;x&#125;</span>&quot;</span>)  <span class=\"comment\"># Exception: x不能大于5，x的值为10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、自定义异常\"><a href=\"#3、自定义异常\" class=\"headerlink\" title=\"3、自定义异常\"></a>3、自定义异常</h3><ul>\n<li>自定义异常的原因<ul>\n<li>Python提供的内建异常不够用 </li>\n<li>可以预估某个错误的产生</li>\n</ul>\n</li>\n<li>定义异常类<ul>\n<li>异常类继承自 Exception 类，可以直接继承，或者间接继承</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AgeError</span>(<span class=\"title class_ inherited__\">Exception</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 间接继承</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AgeErrorSub</span>(<span class=\"title class_ inherited__\">AgeError</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"comment\"># raise AgeError(f&quot;年龄异常，年龄为&#123;age&#125;&quot;)  # __main__.AgeError: 年龄异常，年龄为-1</span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AgeErrorSub(<span class=\"string\">f&quot;年龄异常，年龄为<span class=\"subst\">&#123;age&#125;</span>&quot;</span>)  <span class=\"comment\"># __main__.AgeErrorSub: 年龄异常，年龄为-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三部分-文件读写\"><a href=\"#第三部分-文件读写\" class=\"headerlink\" title=\"第三部分 文件读写\"></a>第三部分 文件读写</h2><h4 id=\"文件打开\"><a href=\"#文件打开\" class=\"headerlink\" title=\"文件打开\"></a>文件打开</h4><ul>\n<li><p>with open语句的好处：无论文件操作是否有异常都会执行.close操作，</p>\n<p>关闭文件读写，防止阻塞，和try…finally: .close 一个作用</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ValueError: must have exactly one of create&#x2F;read&#x2F;write&#x2F;append mode</p>\n<ul>\n<li>上述错误表示：x&#x2F;r&#x2F;w&#x2F;a这四个模式不能同时出现</li>\n</ul>\n</li>\n<li><p>‘w’ open for writing, truncating（清空） the file first</p>\n<ul>\n<li>会清空原有文件的内容，然后再写</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><h5 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read()\"></a>read()</h5><ul>\n<li>默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）<br>对于同一个文件对象，后面的read方法会接着上一个read方法 继续读</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># read()</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认全部读取，传入整型参数代表读的字符个数（转义字符：\\n \\t 等算一个字符）</span></span><br><span class=\"line\">    <span class=\"comment\"># 对于同一个文件对象，后面的read方法会接着上一个read方法继续读</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(fp.read(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"readline\"><a href=\"#readline\" class=\"headerlink\" title=\"readline()\"></a>readline()</h5><ul>\n<li><p>默认读取一行，传入整型参数代表读的字符的个数，</p>\n<p>如果这一行只有一个字符那就会读出一个字符并不会往后读</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># readline()</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认读取一行，传入整型参数代表读的字符的个数，如果这一行只有一个字符那就会读出一个字符并不会往后读</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readline(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"readlines\"><a href=\"#readlines\" class=\"headerlink\" title=\"readlines()\"></a>readlines()</h5><ul>\n<li>默认全部行，并返回一个列表，元素为每一行<br>传入整型参数，只会读取一行的全部内容，并返会一个列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fp.readlines(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><h5 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write()\"></a>write()</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"comment\"># write()</span></span><br><span class=\"line\">    fp.write(<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>)</span><br><span class=\"line\">    fp.write(<span class=\"string\">&quot;007,dl,21,male&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"writelines\"><a href=\"#writelines\" class=\"headerlink\" title=\"writelines()\"></a>writelines()</h5><ul>\n<li>传入可以迭代的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;../data/data_student.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> fp:    </span><br><span class=\"line\">    <span class=\"comment\"># writelines()</span></span><br><span class=\"line\">    <span class=\"comment\"># 传入可以迭代的参数</span></span><br><span class=\"line\">    fp.writelines([<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>, <span class=\"string\">&quot;007,dl,21,male&quot;</span>])</span><br><span class=\"line\">    fp.writelines(<span class=\"string\">&quot;006,dbh,22,male\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四部分-正则表达式\"><a href=\"#第四部分-正则表达式\" class=\"headerlink\" title=\"第四部分 正则表达式\"></a>第四部分 正则表达式</h2><h3 id=\"1、正则表达式中的元字符\"><a href=\"#1、正则表达式中的元字符\" class=\"headerlink\" title=\"1、正则表达式中的元字符\"></a>1、正则表达式中的元字符</h3><ul>\n<li><code>.</code> <strong>匹配任何字符，但不包括换行符。</strong></li>\n<li><code>[\\s\\S]</code>  <strong>匹配任何字符，包括换行符和空白字符。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; 正则表达式中的元字符</span></span><br><span class=\"line\"><span class=\"string\">\\d \t\t 可以匹配一个数字 \t\t\t\t\t  等价于[0-9] </span></span><br><span class=\"line\"><span class=\"string\">\\D(大写)  可以匹配一个非数字 \t\t\t\t\t 等价于[^0-9] </span></span><br><span class=\"line\"><span class=\"string\">\\d\\d \t 可以匹配两个数字 </span></span><br><span class=\"line\"><span class=\"string\">\\w \t\t 可以匹配一个数字或字母或下划线                 等价于[A-Za-z0-9_] </span></span><br><span class=\"line\"><span class=\"string\">\\W(大写) \t可以匹配一个非数字非字母非下划线的符号          等价于[^A-Za-z0-9_]</span></span><br><span class=\"line\"><span class=\"string\">\\w\\w \t 可以 匹配 00 或者 0a等</span></span><br><span class=\"line\"><span class=\"string\">. \t\t 可以匹配任意字符，特殊字符除外如:\\n</span></span><br><span class=\"line\"><span class=\"string\">\\s \t\t 可以匹配空白字符 如：一个空格或\\n或\\r等   等价于[\\f\\n\\r\\v]  </span></span><br><span class=\"line\"><span class=\"string\">\\S(大写)\t可以匹配一个非空白字符 \t\t\t\t等价于[^\\f\\n\\r\\v]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、匹配长字符\"><a href=\"#2、匹配长字符\" class=\"headerlink\" title=\"2、匹配长字符\"></a>2、匹配长字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; 匹配长字符</span></span><br><span class=\"line\"><span class=\"string\">*代表0-无穷个字符</span></span><br><span class=\"line\"><span class=\"string\">+代表1-无穷个字符</span></span><br><span class=\"line\"><span class=\"string\">?代表0-1个字符</span></span><br><span class=\"line\"><span class=\"string\">&#123;n,m&#125;代表n-m个字符 （左闭右闭）</span></span><br><span class=\"line\"><span class=\"string\">\\d&#123;3&#125;-\\d&#123;3,8&#125; 可以匹配001-123或001-12345等</span></span><br><span class=\"line\"><span class=\"string\">^表示行的开头，^\\d表示必须以数字开头</span></span><br><span class=\"line\"><span class=\"string\">$表示行的结束，\\d$表示必须以数字结束</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、match方法\"><a href=\"#3、match方法\" class=\"headerlink\" title=\"3、match方法\"></a>3、match方法</h3><ul>\n<li>匹配到了返回Match对象</li>\n<li>匹配不到返回None</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;001-12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\d&#123;3&#125;-\\d&#123;3,8&#125;&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>match结合if结构进行判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:  <span class=\"comment\"># 匹配成功</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ok&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:  <span class=\"comment\"># 匹配失败</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;failed&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、re-split-切分字符串\"><a href=\"#4、re-split-切分字符串\" class=\"headerlink\" title=\"4、re.split()切分字符串\"></a>4、re.split()切分字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;切分字符串</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">str_a = <span class=\"string\">&quot;a,b;; c  d&quot;</span></span><br><span class=\"line\">splits = re.split(<span class=\"string\">r&quot;\\W+&quot;</span>, str_a)  <span class=\"comment\"># 匹配0-n个非数字非字母符号作为切分符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(splits)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、group分组提取\"><a href=\"#5、group分组提取\" class=\"headerlink\" title=\"5、group分组提取\"></a>5、group分组提取</h3><ul>\n<li><p>通过() 提取匹配到的内容</p>\n<p>group(0) 代表匹配到的字符串<br>group(1) 代表提取出的第一个子字符串<br>group(2) 代表提取出的第二个子字符串<br>groups() 将所有提取的字符串串存储到元组中</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;001-12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、匹配时间19-05-30\"><a href=\"#6、匹配时间19-05-30\" class=\"headerlink\" title=\"6、匹配时间19:05:30\"></a>6、匹配时间19:05:30</h3><ul>\n<li>注意时间的格式和规则：<br>h : 00-23<br>m : 00-59<br>s : 00-59</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;19:05:30&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-P-name-变量赋值\"><a href=\"#7、-P-name-变量赋值\" class=\"headerlink\" title=\"7、(?P&lt; name &gt; ) 变量赋值\"></a>7、(?P&lt; name &gt; ) 变量赋值</h3><ul>\n<li>将提取到的数据赋值给name变量<br>再利用group(“name”)提取</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_card = <span class=\"string\">&quot;20051001&quot;</span></span><br><span class=\"line\">re_pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;(?P&lt;year&gt;[1-2]\\d&#123;3&#125;)(?P&lt;month&gt;[0][1-9]|[1][0-2])(?P&lt;day&gt;[0][1-9]|[1-2][0-9])&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 提取 年 月 日</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re_pattern.<span class=\"keyword\">match</span>(id_card)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;year&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;month&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.group(<span class=\"string\">&quot;day&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、贪婪匹配\"><a href=\"#8、贪婪匹配\" class=\"headerlink\" title=\"8、贪婪匹配\"></a>8、贪婪匹配</h3><ul>\n<li>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符<br>\\d+则是贪婪匹配<br>\\d+?则是非贪婪匹配</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&#x27;(\\d+)(0*)&#x27;</span>, <span class=\"string\">&#x27;102300&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&#x27;^(\\d+?)(0*)$&#x27;</span>, <span class=\"string\">&#x27;102300&#x27;</span>)  <span class=\"comment\"># 加上$符才会匹配到尾部的0，否则只会停在第一个0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、-的区别\"><a href=\"#9、-的区别\" class=\"headerlink\" title=\"9、.  .*  .*? 的区别\"></a>9、.  .*  .*? 的区别</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;xxIxxjshdxxlovexxsffaxxpythonxx&#x27;</span></span><br><span class=\"line\">infos1 = re.findall(<span class=\"string\">&#x27;xx(.)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos1)</span><br><span class=\"line\">infos2 = re.findall(<span class=\"string\">&#x27;xx(.*)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos2)</span><br><span class=\"line\">infos3 = re.findall(<span class=\"string\">&#x27;xx(.*?)xx&#x27;</span>, a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(infos3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、re-match和re-search的区别\"><a href=\"#10、re-match和re-search的区别\" class=\"headerlink\" title=\"10、re.match和re.search的区别\"></a>10、re.match和re.search的区别</h3><ul>\n<li>re.match(pattern, string)：<ul>\n<li>re.match 只从字符串的 <em><strong>开头开始匹配</strong></em>，如果字符串的开头符合正则表达式的模式，则返回匹配对象；如果字符串开头不匹配，则返回 None。<br>适合用于检查字符串的开头是否符合某种模式。</li>\n</ul>\n</li>\n<li>re.search(pattern, string)：<ul>\n<li>re.search 在 <em><strong>整个字符串中搜索</strong></em> ，只要找到第一个匹配的子串，就返回匹配对象；如果没有找到匹配的子串，则返回 None。<br>适合用于在整个字符串中查找某种模式的出现。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;a12345&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\d+&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>)  <span class=\"comment\"># 返回None</span></span><br><span class=\"line\">search = re.search(<span class=\"string\">r&quot;\\d+&quot;</span>, str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(search)  <span class=\"comment\"># 返回Search对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、预编译\"><a href=\"#11、预编译\" class=\"headerlink\" title=\"11、预编译\"></a>11、预编译</h3><ul>\n<li>re.compile(正则表达式)<br>便于修改正则表达式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_a = <span class=\"string\">&quot;19:05:30&quot;</span></span><br><span class=\"line\">re_pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;([0-1]\\d|[2][0-3]):([0-5]\\d):([0-5]\\d)&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">match</span> = re_pattern.<span class=\"keyword\">match</span>(str_a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">match</span>.groups())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五部分-爬虫\"><a href=\"#第五部分-爬虫\" class=\"headerlink\" title=\"第五部分 爬虫\"></a>第五部分 爬虫</h2><ul>\n<li>爬虫是一种模仿浏览器上网过程的一种程序，可以获取一些网页的数据</li>\n</ul>\n<h3 id=\"1、URL\"><a href=\"#1、URL\" class=\"headerlink\" title=\"1、URL\"></a>1、URL</h3><ul>\n<li>统一资源定位符  uniform resource locator</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/posts/c00b24b1/LjTR2tNPAO81cnU.png\" class=\"\"></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http: 超文本传输协议  HyperText Transfer Protocol  默认端口 80</span><br><span class=\"line\">https: 安全的超文本传输协议  security               默认端口 443</span><br><span class=\"line\">www.example.com  域名</span><br><span class=\"line\">80  端口 port</span><br><span class=\"line\">/path/to/myfile.html 资源路径</span><br><span class=\"line\">?key1=value1&amp;key2=value2  参数 &amp; 表示多个参数的拼接</span><br><span class=\"line\"># 锚点</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、准备\"><a href=\"#2、准备\" class=\"headerlink\" title=\"2、准备\"></a>2、准备</h3><ul>\n<li>安装requests包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pip 换源<ul>\n<li>改写该文件内容 <code>C:\\Users\\dongjiaxin\\AppData\\Roaming\\pip\\pip.ini</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> <span class=\"keyword\">global</span>.index-url http://pypi.douban.com/simple/</span><br><span class=\"line\">pip config <span class=\"built_in\">set</span> install.trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>User-Agent： 身份标识  表示你是哪个浏览器</p>\n</li>\n<li><p>status_code：状态码</p>\n<ul>\n<li>200 OK：请求成功，服务器成功返回请求的数据。</li>\n<li>201 Created：请求成功，服务器成功创建了新的资源。</li>\n<li>204 No Content：请求成功，服务器成功处理了请求，但没有返回任何内容。</li>\n<li>400 Bad Request：客户端请求错误，服务器无法理解请求。</li>\n<li>401 Unauthorized：请求要求用户认证，用户没有提供有效的认证信息。</li>\n<li>403 Forbidden：服务器拒绝请求，通常是因为没有足够的权限。</li>\n<li>404 Not Found：请求的资源不存在。</li>\n<li>500 Internal Server Error：服务器内部错误，无法完成请求。</li>\n</ul>\n</li>\n<li><p>使用随机生成的user-agnet</p>\n<ul>\n<li>下载包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fake_useragent</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fake_useragent <span class=\"keyword\">import</span> UserAgnet</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class=\"line\">  py  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"获取百度网页源码\"><a href=\"#获取百度网页源码\" class=\"headerlink\" title=\"获取百度网页源码\"></a>获取百度网页源码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description:  获取百度搜索源代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span></span><br><span class=\"line\">    header = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-agent&quot;</span>:<span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url, headers=header)</span><br><span class=\"line\">    response.encoding = <span class=\"string\">&quot;utf-8&quot;</span>  <span class=\"comment\"># 修改编码形式，防止中文乱码</span></span><br><span class=\"line\">    <span class=\"comment\"># print(response.content)  # 网页代码二进制</span></span><br><span class=\"line\">    <span class=\"comment\"># print(response.text)  # 网页代码文本</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response.status_code)  <span class=\"comment\"># 状态码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-http-httpbin-org-get-网站测试get请求\"><a href=\"#使用-http-httpbin-org-get-网站测试get请求\" class=\"headerlink\" title=\"使用 http://httpbin.org/get 网站测试get请求\"></a>使用 <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a> 网站测试get请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Description: 使用 http://httpbin.org/get 网站测试get请求</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://httpbin.org/get&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、豆瓣top250\"><a href=\"#3、豆瓣top250\" class=\"headerlink\" title=\"3、豆瓣top250\"></a>3、豆瓣top250</h3><ul>\n<li><strong>可以把获取的html保存到本地，然后用浏览器打开，查看是否正确</strong></li>\n</ul>\n<h3 id=\"4、Xpath解析（静态页面）\"><a href=\"#4、Xpath解析（静态页面）\" class=\"headerlink\" title=\"4、Xpath解析（静态页面）\"></a>4、Xpath解析（静态页面）</h3><ul>\n<li><p>XPath 是一种用于在 XML 和 HTML 文档中定位和选择节点的查询语言。可以帮助开发者轻松地从 XML 和 HTML 数据中提取、过滤和处理所需的信息，是数据解析和处理中的重要工具之一。</p>\n</li>\n<li><p>下载相关包</p>\n<ul>\n<li><pre><code class=\"python\">pip install lxml\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 导入相关包</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    from lxml import etree</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>两种创建解析对象的方式</p>\n<ul>\n<li><p>解析本地html</p>\n<ul>\n<li><pre><code class=\"python\">html = etree.parse(本地文件路径)\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 解析爬取下来的html</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    html = etree.HTML(response.text)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Xpath相关语法\"><a href=\"#Xpath相关语法\" class=\"headerlink\" title=\"Xpath相关语法\"></a>Xpath相关语法</h4><ul>\n<li><p>.xpath()，获取所有符号规则的内容，并返回一个列表</p>\n</li>\n<li><p><strong>.xpath() 返回的元素对象，还可以继续进行xpath解析</strong></p>\n</li>\n<li><pre><code class=\"python\">/\t表示从根节点选取\n//\t从当前节点选取子孙节点\n.\t选取当前节点\n./\t表示从当前节点\n..\t选取当前节点的父节点\n@\t选取属性\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 基本语法</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class=\"line\">  &lt;html&gt;&lt;body&gt;&lt;div&gt;&amp;#13;</span><br><span class=\"line\">      &lt;ul&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class=\"line\">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&amp;#13;</span><br><span class=\"line\">  &lt;/li&gt;&lt;/ul&gt;&amp;#13;</span><br><span class=\"line\">  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  html = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())</span><br><span class=\"line\">  result = etree.tostring(html).decode(&#x27;utf-8&#x27;)</span><br><span class=\"line\">  # 基本语法</span><br><span class=\"line\">  result = html.xpath(&#x27;.&#x27;)  # .获取当前节点 html</span><br><span class=\"line\">  result = html.xpath(&#x27;..&#x27;)  # .. 获取当前节点的父节点 空</span><br><span class=\"line\">  result = html.xpath(&#x27;./body&#x27;)  # 选取子节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//div&#x27;)  # 选取所有的子孙节点div</span><br><span class=\"line\">  result = html.xpath(&#x27;//body&#x27;)  # 选取子孙节点body</span><br><span class=\"line\">  result = html.xpath(&#x27;//*&#x27;)  # //* 选取所有节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//li&#x27;)  # //li 获取所有的li节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//li/a&#x27;)  # //li/a 获取li节点的所有的子节点a</span><br><span class=\"line\">  result = html.xpath(&#x27;//ul/a&#x27;)  # //ul/a 无返回结果，因为ul的子节点不是a</span><br><span class=\"line\">  result = html.xpath(&#x27;//ul//a&#x27;)  # //ul//a 获取ul的所有孙子节点a</span><br><span class=\"line\">  result = html.xpath(&#x27;/html/body/div&#x27;)  # 逐层定位body的所有的div子节点</span><br><span class=\"line\">  result = html.xpath(&#x27;//div&#x27;)  # 定位到所有的div节点</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"获取父节点\"><a href=\"#获取父节点\" class=\"headerlink\" title=\"获取父节点\"></a>获取父节点</h5><ul>\n<li><p>获取a父节点li的class属性值</p>\n</li>\n<li><pre><code>result = html.xpath(&#39;//a[@href=&quot;link5.html&quot;]/../@class&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 索引定位</span><br><span class=\"line\"></span><br><span class=\"line\">- ```</span><br><span class=\"line\">  result = html.xpath(&#x27;//li[1]&#x27;)  # 定位到第一个li节点</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"属性定位\"><a href=\"#属性定位\" class=\"headerlink\" title=\"属性定位\"></a>属性定位</h5><ul>\n<li><p>定位class属性值为[“item-0”]的li节点</p>\n</li>\n<li><pre><code class=\"python\">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 属性获取</span><br><span class=\"line\"></span><br><span class=\"line\">- 获取li节点下所有字节点a的href属性值</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  result = html.xpath(&#x27;//li/a/@href&#x27;)  # </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h5 id=\"文本获取\"><a href=\"#文本获取\" class=\"headerlink\" title=\"文本获取\"></a>文本获取</h5><ul>\n<li><p>通过 &#x2F;text()方法获取指定节点中的文本</p>\n<ul>\n<li><pre><code class=\"python\">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]/a/text()&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 通过 //text()获取所有指定节点的所有子节点的文本，包括节点本身的文本（包含缩进换行等字符）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```python</span><br><span class=\"line\">    result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;)  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"属性多值匹配\"><a href=\"#属性多值匹配\" class=\"headerlink\" title=\"属性多值匹配\"></a>属性多值匹配</h5><ul>\n<li><p>使用<strong>contains函数</strong>进行属性多值匹配</p>\n</li>\n<li><p>这里的li节点的class属性有两个属性值li、li-first</p>\n</li>\n<li><pre><code class=\"python\">text = &#39;&#39;&#39;\n&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;\n&#39;&#39;&#39;\nhtml = etree.HTML(text)\nresult = html.xpath(&#39;//li[contains(@class, &quot;li&quot;)]/a/text()&#39;) \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 多属性匹配</span><br><span class=\"line\"></span><br><span class=\"line\">- 通过 and 连接class属性和name属性</span><br><span class=\"line\"></span><br><span class=\"line\">- ```python</span><br><span class=\"line\">  text = &#x27;&#x27;&#x27;</span><br><span class=\"line\">  &lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">  &#x27;&#x27;&#x27;</span><br><span class=\"line\">  html = etree.HTML(text)</span><br><span class=\"line\">  result = html.xpath(&#x27;//li[contains(@class,&quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;)  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"5、数据格式\"><a href=\"#5、数据格式\" class=\"headerlink\" title=\"5、数据格式\"></a>5、数据格式</h3><ul>\n<li>查看网页包文件中，响应标头中的Content-Type</li>\n<li><img src=\"/posts/c00b24b1/image-20230723143523063.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230723143638690.png\" class=\"\"></li>\n<li><img src=\"/posts/c00b24b1/image-20230723144731031.png\" class=\"\"></li>\n</ul>\n<h4 id=\"5-1-text\"><a href=\"#5-1-text\" class=\"headerlink\" title=\"5.1 text\"></a>5.1 text</h4><ul>\n<li>使用.text方法接收，接收的是网页的html</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\">html = response.text</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-json\"><a href=\"#5-2-json\" class=\"headerlink\" title=\"5.2 json\"></a>5.2 json</h4><ul>\n<li>使用.json()方法接收，接收json字符串，并返回一个dict</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url, headers=headers)</span><br><span class=\"line\">data = response.json()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json和dict的区别<ul>\n<li>可以复制网页的json数据，在json在线解析器上解析，注意dict不能用json的在线解析</li>\n<li><strong>输出时，json字符串中的字符被双引号引着，dict中的字符被单引号引着</strong></li>\n<li>在python中，json数据被识别为字符串，所以不能像字典一样访问其中的元素</li>\n<li>在json文件中，可以存放json字符串，并且可以用通过ctrl+alt+l的方式，将json字符串正确的格式化</li>\n</ul>\n</li>\n<li>json和dict的相互转换</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"comment\"># dict转为json字符串</span></span><br><span class=\"line\"><span class=\"comment\"># ensure_ascii默认为True，转为进制数据</span></span><br><span class=\"line\"><span class=\"comment\"># ensure_ascii为False，返回正常数据</span></span><br><span class=\"line\">js = json.dumps(response.json(), ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(js))  <span class=\"comment\"># &lt;class &#x27;str&#x27;&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># json字符串转为dict</span></span><br><span class=\"line\">di = json.loads(js)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-二进制（图片和视频）\"><a href=\"#5-3-二进制（图片和视频）\" class=\"headerlink\" title=\"5.3 二进制（图片和视频）\"></a>5.3 二进制（图片和视频）</h4><ul>\n<li>请求图片和视频时，会返回二进制数据，可以使用.content接收</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = requests.get(url<span class=\"punctuation\">,</span> headers=headers)</span><br><span class=\"line\">con = response.content</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用’wb’模式，写入对应后缀（jsp&#x2F;png&#x2F;mp4）的文件中，就可以正常打开了</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">\tfp.write(con)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、get和post请求\"><a href=\"#6、get和post请求\" class=\"headerlink\" title=\"6、get和post请求\"></a>6、get和post请求</h3><h4 id=\"6-1-get请求\"><a href=\"#6-1-get请求\" class=\"headerlink\" title=\"6.1 get请求\"></a>6.1 get请求</h4><ul>\n<li>大多数网页都是get请求，可以通过.get()方法的params参数，传入请求参数</li>\n</ul>\n<h4 id=\"6-2-post（百度翻译）\"><a href=\"#6-2-post（百度翻译）\" class=\"headerlink\" title=\"6.2 post（百度翻译）\"></a>6.2 post（百度翻译）</h4><ul>\n<li>部分网页是post请求，可以通过.post()方法的data参数，传入表单数据</li>\n</ul>\n<h3 id=\"7、BeautifulSoup解析（静态页面）\"><a href=\"#7、BeautifulSoup解析（静态页面）\" class=\"headerlink\" title=\"7、BeautifulSoup解析（静态页面）\"></a>7、BeautifulSoup解析（静态页面）</h3><ul>\n<li><p>爬取豆瓣读书时，使用了bs4解析方式</p>\n</li>\n<li><p>下载bs4解析包</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install bs4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先解析html。然后定位标签，返回列表。最后正则匹配数据，也返回一个列表。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bs = bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">element = re.findall(<span class=\"string\">r&#x27;&lt;a class=&quot;nbg&quot; href=&quot;.*?&quot; title=&quot;(?P&lt;book&gt;.*?)&quot;&gt;\\n&#x27;</span>, bs)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、京东评论（动态抓包）\"><a href=\"#8、京东评论（动态抓包）\" class=\"headerlink\" title=\"8、京东评论（动态抓包）\"></a>8、京东评论（动态抓包）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo04JDComment.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、豆瓣Top250（非详情页）\"><a href=\"#9、豆瓣Top250（非详情页）\" class=\"headerlink\" title=\"9、豆瓣Top250（非详情页）\"></a>9、豆瓣Top250（非详情页）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo05SpiderDouBan.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、豆瓣读书（详情页）\"><a href=\"#10、豆瓣读书（详情页）\" class=\"headerlink\" title=\"10、豆瓣读书（详情页）\"></a>10、豆瓣读书（详情页）</h3><ul>\n<li>代码文件</li>\n<li>使用了xpath解析和bs4解析方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo01DoubanReadBook.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、WallHaven（高清图片）\"><a href=\"#11、WallHaven（高清图片）\" class=\"headerlink\" title=\"11、WallHaven（高清图片）\"></a>11、WallHaven（高清图片）</h3><ul>\n<li>代码文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day09/demo06WallHaven.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、大麦网（selenium）\"><a href=\"#11、大麦网（selenium）\" class=\"headerlink\" title=\"11、大麦网（selenium）\"></a>11、大麦网（selenium）</h3><ul>\n<li>代码文件</li>\n<li>由于大麦网网页跳转时的网址不会改变，该方式获取的数据量很少</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo02SeleniumDaMai.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、大麦网（动态抓包）\"><a href=\"#12、大麦网（动态抓包）\" class=\"headerlink\" title=\"12、大麦网（动态抓包）\"></a>12、大麦网（动态抓包）</h3><ul>\n<li>代码文件</li>\n<li>大麦网采用的是，异步加载数据的方式，然后js渲染，所以动态抓包可以获取更多的数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day10/demo03JsonDamai.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、遇到的坑\"><a href=\"#13、遇到的坑\" class=\"headerlink\" title=\"13、遇到的坑\"></a>13、遇到的坑</h3><h4 id=\"13-1-显示字符串中特殊字符\"><a href=\"#13-1-显示字符串中特殊字符\" class=\"headerlink\" title=\"13.1 显示字符串中特殊字符\"></a>13.1 显示字符串中特殊字符</h4><ul>\n<li>使用””” … “””包含字符串，并放到列表，打印输出</li>\n<li>‘’’ … ‘’’ 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">f&quot;&quot;&quot;<span class=\"subst\">&#123;bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)[<span class=\"number\">0</span>]&#125;</span>&quot;&quot;&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-2-替换字符串中的转义字符不要加-r\"><a href=\"#13-2-替换字符串中的转义字符不要加-r\" class=\"headerlink\" title=\"13.2 替换字符串中的转义字符不要加 r\"></a>13.2 替换字符串中的转义字符不要加 r</h4><ul>\n<li>替换转义字符不要加 r</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.replace(<span class=\"string\">&quot;\\xa0&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-3-xpath二次解析尽量开头带上\"><a href=\"#13-3-xpath二次解析尽量开头带上\" class=\"headerlink\" title=\"13.3 xpath二次解析尽量开头带上 .&#x2F;\"></a>13.3 xpath二次解析尽量开头带上 .&#x2F;</h4><ul>\n<li>如果不带可能会导致二次解析定位不到</li>\n<li>selenium的xpath解析可以直接  div&#x2F;div[@class&#x3D;’info’]&#x2F;&#x2F;a&#x2F;span[1]</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li_list = tree.xpath(<span class=\"string\">r&quot;//ol[@class=&#x27;grid_view&#x27;]/li&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">    title = li.xpath(<span class=\"string\">&quot;./div/div[@class=&#x27;info&#x27;]//a/span[1]/text()&quot;</span>)[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-4-正则匹配的字符串一般不要含有\"><a href=\"#13-4-正则匹配的字符串一般不要含有\" class=\"headerlink\" title=\"13.4 正则匹配的字符串一般不要含有 |\"></a>13.4 正则匹配的字符串一般不要含有 |</h4><ul>\n<li>如果带了，会匹配不到，可以先使用.replace()方法替换掉</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一般不要匹配 | ，不然匹配不到</span></span><br><span class=\"line\"> <span class=\"comment\"># directore = &quot;|&quot;.join(列表)</span></span><br><span class=\"line\">directo = <span class=\"string\">&quot;#&quot;</span>.join(列表)</span><br><span class=\"line\">search = re.search(<span class=\"string\">r&quot;导演: (?P&lt;director&gt;.*?) .*?主演: (?P&lt;actor&gt;.*?) .*?#(?P&lt;time&gt;.*?) (?P&lt;country&gt;.*?) (?P&lt;type_&gt;.*)&quot;</span>,director)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-5-正则匹配表达式中不要含有-span-或-span\"><a href=\"#13-5-正则匹配表达式中不要含有-span-或-span\" class=\"headerlink\" title=\"13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;\"></a>13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;</h4><ul>\n<li>可以使用 .*? 忽略它，不然匹配不到</li>\n</ul>\n<h4 id=\"13-6-反爬导致解析获取的列表为空，造成-list-out-of-range\"><a href=\"#13-6-反爬导致解析获取的列表为空，造成-list-out-of-range\" class=\"headerlink\" title=\"13.6 反爬导致解析获取的列表为空，造成 list out of range\"></a>13.6 反爬导致解析获取的列表为空，造成 list out of range</h4><ul>\n<li>反爬导致解析获取的列表为空，由于索引取值，造成列表越界异常</li>\n<li>可以捕获该异常代码，保证后续的url请求不受阻</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bt = bs4.BeautifulSoup(html2, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27; ... &#x27;&#x27;&#x27; 在列表中，并把列表输出会显示字符串中的特殊字符，如 \\n、\\r等</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    bs = bt.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&quot;subject clearfix&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    bs = bs[<span class=\"number\">0</span>]  <span class=\"comment\"># 提取列表中的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;反爬机制&quot;</span>, e)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-7-应对部分元素为空，导致list-out-of-range错误\"><a href=\"#13-7-应对部分元素为空，导致list-out-of-range错误\" class=\"headerlink\" title=\"13.7 应对部分元素为空，导致list out of range错误\"></a>13.7 应对部分元素为空，导致list out of range错误</h4><ul>\n<li><p>导致此错误的原因一般都是列表为空，但是使用了索引获取其中的元素</p>\n</li>\n<li><p><strong>可以自定义一个函数，用来捕获这类错误</strong>，</p>\n<p>如果报错，则返回一个空值；如果不报错，则返回处理好的值</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 捕获元素不存在时的错误</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">element, by, pattern, split</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element.find_element(by, pattern).text.split(split)[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-8-通过xpath获取标签外的文本内容\"><a href=\"#13-8-通过xpath获取标签外的文本内容\" class=\"headerlink\" title=\"13.8 通过xpath获取标签外的文本内容\"></a>13.8 通过xpath获取标签外的文本内容</h4><ul>\n<li><img src=\"/posts/c00b24b1/image-20230724090823259.png\" class=\"\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree.xpath( <span class=\"string\">&quot;//div[@class=&#x27;subject clearfix&#x27;]/div[@id=&#x27;info&#x27;]/span[@class=&#x27;pl&#x27;][contains(text(), &#x27;页数:&#x27;)]/following-sibling::text()[1]&quot;</span>,html)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>或者使用bs4解析</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.findall(r&#x27;定价:.*? (?P&lt;money&gt;.*?)&lt;br/&gt;&#x27;, bs)[0]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"13-9-遇到无法避免的异常\"><a href=\"#13-9-遇到无法避免的异常\" class=\"headerlink\" title=\"13.9 遇到无法避免的异常\"></a>13.9 遇到无法避免的异常</h4><ul>\n<li>遇到无法避免的异常时，可以捕获该异常信息，确保后续程序正常运行</li>\n</ul>\n<h2 id=\"第六部分-selenium半自动化工具\"><a href=\"#第六部分-selenium半自动化工具\" class=\"headerlink\" title=\"第六部分 selenium半自动化工具\"></a>第六部分 selenium半自动化工具</h2><ul>\n<li>首先下载selenium包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install selenium</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>下载对应浏览器版本的浏览器驱动，并放到处于环境变量的包中</p>\n<ul>\n<li><img src=\"/posts/c00b24b1/image-20230723151140532.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>导入包</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenuim <span class=\"keyword\">import</span> webdriver</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、等待网页js渲染\"><a href=\"#1、等待网页js渲染\" class=\"headerlink\" title=\"1、等待网页js渲染\"></a>1、等待网页js渲染</h3><h3 id=\"2、通过cookie免密登录\"><a href=\"#2、通过cookie免密登录\" class=\"headerlink\" title=\"2、通过cookie免密登录\"></a>2、通过cookie免密登录</h3><h2 id=\"第七部分-Pandas\"><a href=\"#第七部分-Pandas\" class=\"headerlink\" title=\"第七部分 Pandas\"></a>第七部分 Pandas</h2><ul>\n<li>安装pandas包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll pandas</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装jupyter notebook</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在pycharm终端启动jupyter notebook</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\BigData26\\Code\\python\\bigdata26&gt;jupyter notebook</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入pandas的包</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔索引\"><a href=\"#布尔索引\" class=\"headerlink\" title=\"布尔索引\"></a>布尔索引</h3><ul>\n<li>使用布尔索引可以提取指定条件的值</li>\n<li>df[‘Age’] &gt; 32的值</li>\n</ul>\n<img src=\"/posts/c00b24b1/image-20230724212046687.png\" class=\"\">\n\n<ul>\n<li>如下代码，可以获取次df的Age列，值大于32的行</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[<span class=\"string\">&#x27;Age&#x27;</span>] &gt; <span class=\"number\">32</span>]</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c00b24b1/image-20230724212222545.png\" class=\"\">\n\n<h3 id=\"pandas-读取文件\"><a href=\"#pandas-读取文件\" class=\"headerlink\" title=\"pandas 读取文件\"></a>pandas 读取文件</h3><ul>\n<li><p>pd.read_csv()方法中，index_col参数和names参数的区别</p>\n<ul>\n<li><p>index_col需要指定，文件中已有的head信息，才能够读取</p>\n<ul>\n<li><pre><code class=\"python\">id,name,age,gender,clazz\n1500100001,施笑槐,22,女,文科六班\n\ndf_student = pd.read_csv(&#39;../data/student.csv&#39;,index_col=[&quot;id&quot;,&quot;name&quot;,&quot;age&quot;,&quot;gender&quot;,&quot;clazz&quot;])\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - names参数，会当作读取文件的列名</span><br><span class=\"line\"></span><br><span class=\"line\">### DF取值</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1、取列</span><br><span class=\"line\"></span><br><span class=\"line\">- df[&quot;name&quot;]，注意是两对中括号</span><br><span class=\"line\">  - 取列名为name的列</span><br><span class=\"line\">- df[[&quot;name1&quot;,&quot;name2&quot;,&quot;name3]]</span><br><span class=\"line\">  - 取列名为name1、name2、name3的列</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2、取行</span><br><span class=\"line\"></span><br><span class=\"line\">- df.iloc[[0,1]]，注意是两对中括号</span><br><span class=\"line\">  - 取行索引为0，为1的行</span><br><span class=\"line\">- df.loc[[&quot;name1&quot;,&quot;name2&quot;]]</span><br><span class=\"line\">  - 取行名为name1，name2的行</span><br><span class=\"line\">- df_student[1:3]</span><br><span class=\"line\">  - 取行索引，[2,3)的所有行</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3、取行列</span><br><span class=\"line\"></span><br><span class=\"line\">- 可以通过.iloc[ 行索引切片, 列索引切片 ]的方式取行列</span><br><span class=\"line\">  - df_student.iloc[1:4,0:2]</span><br><span class=\"line\">    - 取[1,4)行，且[0,2)列</span><br><span class=\"line\">      - ![](python笔记/image-20230724214335918.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 连接</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1、join</span><br><span class=\"line\"></span><br><span class=\"line\">- 默认情况下他是把行索引相同的数据合并到一起</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724153228728.png)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2、merge:</span><br><span class=\"line\"></span><br><span class=\"line\">- 按照指定的列把数据按照一定的方式合并到一起</span><br><span class=\"line\">  \t左外连接、右外连接、全外连接、内连接、</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724153243607.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 分组聚合</span><br><span class=\"line\"></span><br><span class=\"line\">- df.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])</span><br><span class=\"line\">  - 先根据clazz列进行分组和默认的排序</span><br><span class=\"line\">  - 然后再根据subject_id列，在clazz分组的基础上，再进行分组和默认的排序</span><br><span class=\"line\">  - 最后聚合的聚合，根据分的各个组进行的聚合操作</span><br><span class=\"line\">  - 除了指定列，其他未分组的列也会进行聚合操作</span><br><span class=\"line\"></span><br><span class=\"line\">![](python笔记/image-20230724215256243.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- df_result.groupby([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;name&quot;]).sum(&quot;score&quot;)</span><br><span class=\"line\">  -  由于分组列太多（分组过后，各组只有一条数据），聚合不起作用，可以用来显示分组过后的情况</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223358859](python笔记/image-20230724223358859.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- rank()聚合</span><br><span class=\"line\">  - rank只会排名，不会改变原来数据的顺序</span><br><span class=\"line\">  - 可以根据如下代码，取各个班级各个学科得前三名</span><br><span class=\"line\">  - ascending=False，代表值降序，从1开始排序</span><br><span class=\"line\"></span><br><span class=\"line\">df_merge[&quot;rank&quot;] = df_merge.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])[&#x27;score&#x27;].rank(&quot;dense&quot;,ascending=False)</span><br><span class=\"line\"></span><br><span class=\"line\">df_result = df_merge[df_merge[&quot;rank&quot;]&lt;=3]  # 取各班各科前三名的行</span><br><span class=\"line\"></span><br><span class=\"line\">如图，代码结果（在day11的homework文件中）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223247119](python笔记/image-20230724223247119.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230724223315189](python笔记/image-20230724223315189.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### sort_values()分组排序</span><br><span class=\"line\"></span><br><span class=\"line\">- df_result.sort_values([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;rank&quot;],ascending=[False,False,False]).reset_index(drop=True)</span><br><span class=\"line\">  - 使用sort_valus()方法进行分组排序</span><br><span class=\"line\">  - reset_index并重置索引，drop=Ture删除原来的乱序索引</span><br><span class=\"line\">  - 传给ascending参数一个bool列表，指定每列的排序方式，默认为True(升序)</span><br><span class=\"line\">  - **sort_values() 会先排序指定的第一列，然后在此基础上继续排序其他列，有分组的作用，并按每列指定的规则排序**</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20230725102707716](python笔记/image-20230725102707716.png)</span><br><span class=\"line\"></span><br><span class=\"line\"># Python 内存管理和垃圾回收</span><br><span class=\"line\"></span><br><span class=\"line\">基于C源码 </span><br><span class=\"line\"></span><br><span class=\"line\">- 引用计数器</span><br><span class=\"line\">- 标记清除</span><br><span class=\"line\">- 分代回收</span><br><span class=\"line\">- 缓存机制</span><br><span class=\"line\"></span><br><span class=\"line\">## 1. 引用计数器</span><br><span class=\"line\"></span><br><span class=\"line\">### 环状双向链表 refchain</span><br><span class=\"line\"></span><br><span class=\"line\">python创建对象时会把任何对象放在refchain中</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">name = &#x27;西西&#x27;</span><br><span class=\"line\">age = 18</span><br><span class=\"line\">height = 1.81</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数】</span><br><span class=\"line\">name = <span class=\"string\">&#x27;西西&#x27;</span></span><br><span class=\"line\">new_name = name</span><br><span class=\"line\"></span><br><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、val=<span class=\"number\">18</span>】</span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、元素个数、值】</span><br><span class=\"line\">hobby = [<span class=\"string\">&#x27;唱&#x27;</span>,<span class=\"string\">&#x27;跳&#x27;</span>,<span class=\"string\">&#x27;rap&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>C源码中每个对象都有不一样的存储结构数据   PyObject结构体（4个值） PyVarObject &#x3D; PyObject + ob_size</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\">内部会创建：</span><br><span class=\"line\">\t_ob_next = refchain中的下一个对象</span><br><span class=\"line\">    _ob_prev = refchain中的上一个对象</span><br><span class=\"line\">    ob_refcnt = <span class=\"number\">1</span> 引用计数  </span><br><span class=\"line\">    ob_type = <span class=\"built_in\">float</span></span><br><span class=\"line\">    ob_fval = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用计数器\"><a href=\"#引用计数器\" class=\"headerlink\" title=\"引用计数器\"></a>引用计数器</h3><p>创建一个对象的时候 默认refcnt是1</p>\n<ul>\n<li>引用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">9999</span>   <span class=\"comment\"># refcnt = 1</span></span><br><span class=\"line\">b = a      <span class=\"comment\"># refcnt + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除引用</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b      <span class=\"comment\"># refcnt - 1</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> a      <span class=\"comment\"># refcnt - 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当一个对象的引用计数器为0时，表示这个对象不存在了，这个对象就是一个垃圾  就回收了</span></span><br><span class=\"line\"><span class=\"comment\"># 回收</span></span><br><span class=\"line\">\t<span class=\"comment\"># 1.对象从refchain中移除</span></span><br><span class=\"line\">    <span class=\"comment\"># 2.对象销毁，内存归还</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>但是会出现以下问题</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]   <span class=\"comment\"># a\\refcnt = 1</span></span><br><span class=\"line\">b = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]   <span class=\"comment\"># b\\refcnt = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.append(b)   <span class=\"comment\"># b\\refcnt + 1</span></span><br><span class=\"line\">b.append(a)   <span class=\"comment\"># a\\refcnt + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> a         <span class=\"comment\"># a\\refcnt - 1</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> b         <span class=\"comment\"># b\\refcnt - 1   值都还是1   没有实现回收的功能</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-标记清除\"><a href=\"#2-标记清除\" class=\"headerlink\" title=\"2. 标记清除\"></a>2. 标记清除</h2><ul>\n<li>目的： 解决引用计数器出现的循环引用的问题</li>\n<li>实现：在底层再次维护一个链表，用于存放可能出现循环引用的对象（list,tuple,dict,set）</li>\n</ul>\n<img src=\"/posts/c00b24b1/hZ9SjgCDRMUGOxT.png\" class=\"\" title=\"hZ9SjgCDRMUGOxT\">\n\n<blockquote>\n<p>在python内部<code>某种情况</code>下触发，回头触发扫描<code>可能出现循环引用的链表</code>中的每个元素，检查该对象是否出现一个循环引用的现象，如果出现，refcnt - 1 ；如果refcnt&#x3D;0，垃圾回收。</p>\n</blockquote>\n<ul>\n<li><p>问题：</p>\n<p>​\t什么时候扫描？</p>\n<p>​\t可能存在扫描循环引用的链表代价大，耗时久。</p>\n</li>\n</ul>\n<h2 id=\"3-分代回收\"><a href=\"#3-分代回收\" class=\"headerlink\" title=\"3. 分代回收\"></a>3. 分代回收</h2><img src=\"/posts/c00b24b1/hZ9SjgCDRMUGOxT.png\" class=\"\" title=\"image.png\">\n\n<ul>\n<li>0代 ： 0代中对象到达700个，记录循环引用的链表扫描一次</li>\n<li>1代 ： 0代扫描十次，1代扫描一次</li>\n<li>2代 ： 1代扫描十次，2代扫描一次</li>\n</ul>\n<h2 id=\"Python缓存池\"><a href=\"#Python缓存池\" class=\"headerlink\" title=\"Python缓存池\"></a>Python缓存池</h2><p>为了避免重复和创建一些常见对象，维护池。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动解释器时，python会内部创建 ： -5、-4 ...... 257，值在次范围的int对象会被放到缓存池中</span></span><br><span class=\"line\">v1 = <span class=\"number\">7</span></span><br><span class=\"line\">v2 = <span class=\"number\">9</span></span><br><span class=\"line\">v3 = <span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内存地址</span></span><br><span class=\"line\"><span class=\"built_in\">id</span>(v1)</span><br><span class=\"line\"><span class=\"built_in\">id</span>(v2)</span><br><span class=\"line\"></span><br><span class=\"line\">v4 = <span class=\"number\">9999</span></span><br><span class=\"line\">v5 = <span class=\"number\">9999</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"free-list\"><a href=\"#free-list\" class=\"headerlink\" title=\"free_list\"></a>free_list</h3><blockquote>\n<p>refcnt &#x3D; 0 按道理来说是不是应该会回收，但是内部不会直接回收，他会把这个对象存到一个free_list的链表中当缓存，之后取创建一个相同对象的时候，不重新开辟内存，而是从free_list中取一个对象</p>\n</blockquote>\n<img src=\"/posts/c00b24b1/bxmZRYfl4UXaeB6.png\" class=\"\" title=\"image.png\">\n\n<h3 id=\"缓存机制（自己理解）\"><a href=\"#缓存机制（自己理解）\" class=\"headerlink\" title=\"缓存机制（自己理解）\"></a>缓存机制（自己理解）</h3><ul>\n<li><p>即使删除了值，但是对象并不会删除，会放到该对象对应的缓存池中，（如果值得范围，在缓存范围内）</p>\n<p>如上图的cmd中的例子，虽然删除了v1的值，但是v1对应的float对象并没有被清除内存，而是被放到缓存池中（所在内存不变）</p>\n<p>所以下下一个定义的v3对应的float对象可能是v1的float对象，只是值有所改变</p>\n<p>打印内存地址发现，v3和已经被放入缓存池的v1的的地址相同，所以v3和v1使用的是同一个float对象</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/Flink 处理迟到数据/29667c7b2c474359bdcea93d920fb133.png","slug":"29667c7b2c474359bdcea93d920fb133.png","post":"clllqbzir0009mcuxgn2u3ew7","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725164332151.png","slug":"image-20230725164332151.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725164534031.png","slug":"image-20230725164534031.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725190147422.png","slug":"image-20230725190147422.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725190639601.png","slug":"image-20230725190639601.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725190743350.png","slug":"image-20230725190743350.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725190958440.png","slug":"image-20230725190958440.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725191041627.png","slug":"image-20230725191041627.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725191430990.png","slug":"image-20230725191430990.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725191757477.png","slug":"image-20230725191757477.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725191831967.png","slug":"image-20230725191831967.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192038917.png","slug":"image-20230725192038917.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192233909.png","slug":"image-20230725192233909.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192317190.png","slug":"image-20230725192317190.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192330984.png","slug":"image-20230725192330984.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192651359.png","slug":"image-20230725192651359.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725192937089.png","slug":"image-20230725192937089.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725193128431.png","slug":"image-20230725193128431.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725193304333.png","slug":"image-20230725193304333.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725193756322.png","slug":"image-20230725193756322.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725193917275.png","slug":"image-20230725193917275.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725194021377.png","slug":"image-20230725194021377.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725194117040.png","slug":"image-20230725194117040.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725194432819.png","slug":"image-20230725194432819.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725194536832.png","slug":"image-20230725194536832.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725195157685.png","slug":"image-20230725195157685.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725195717493.png","slug":"image-20230725195717493.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725200304363.png","slug":"image-20230725200304363.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725200621688.png","slug":"image-20230725200621688.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201026739.png","slug":"image-20230725201026739.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201051683.png","slug":"image-20230725201051683.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201613953-1692155153717.png","slug":"image-20230725201613953-1692155153717.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201613953-1692155175847.png","slug":"image-20230725201613953-1692155175847.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201613953.png","slug":"image-20230725201613953.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201655502-1692155155569.png","slug":"image-20230725201655502-1692155155569.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201655502.png","slug":"image-20230725201655502.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725201748442.png","slug":"image-20230725201748442.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725202522782.png","slug":"image-20230725202522782.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725202727704.png","slug":"image-20230725202727704.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725202853702.png","slug":"image-20230725202853702.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725203045211.png","slug":"image-20230725203045211.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725204854629.png","slug":"image-20230725204854629.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725204949968.png","slug":"image-20230725204949968.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725205030096.png","slug":"image-20230725205030096.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725210604931.png","slug":"image-20230725210604931.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725210839326.png","slug":"image-20230725210839326.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725212127382.png","slug":"image-20230725212127382.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725213809973.png","slug":"image-20230725213809973.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725213825941.png","slug":"image-20230725213825941.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725214040146.png","slug":"image-20230725214040146.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725214239212.png","slug":"image-20230725214239212.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725220926475.png","slug":"image-20230725220926475.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725221157481.png","slug":"image-20230725221157481.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725221833744.png","slug":"image-20230725221833744.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725222004113.png","slug":"image-20230725222004113.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725222708447.png","slug":"image-20230725222708447.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725223150054.png","slug":"image-20230725223150054.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725224604750.png","slug":"image-20230725224604750.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725224740961.png","slug":"image-20230725224740961.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725225041772.png","slug":"image-20230725225041772.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725225334022.png","slug":"image-20230725225334022.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725225905638.png","slug":"image-20230725225905638.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230725230129222.png","slug":"image-20230725230129222.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726141327993.png","slug":"image-20230726141327993.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726141424420.png","slug":"image-20230726141424420.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726210518731.png","slug":"image-20230726210518731.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726210638937.png","slug":"image-20230726210638937.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726212127488.png","slug":"image-20230726212127488.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726212412260.png","slug":"image-20230726212412260.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230726212756839.png","slug":"image-20230726212756839.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727151820522.png","slug":"image-20230727151820522.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727183225209.png","slug":"image-20230727183225209.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727184316885.png","slug":"image-20230727184316885.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727184609219.png","slug":"image-20230727184609219.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727193418935.png","slug":"image-20230727193418935.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727193920519.png","slug":"image-20230727193920519.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727194425502-1692155580085.png","slug":"image-20230727194425502-1692155580085.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727194425502.png","slug":"image-20230727194425502.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727194517260.png","slug":"image-20230727194517260.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727194724286-1692155590711.png","slug":"image-20230727194724286-1692155590711.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727194724286.png","slug":"image-20230727194724286.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727200849580.png","slug":"image-20230727200849580.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727200919785.png","slug":"image-20230727200919785.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727200934622.png","slug":"image-20230727200934622.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727201038649.png","slug":"image-20230727201038649.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727201607999.png","slug":"image-20230727201607999.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727205255514.png","slug":"image-20230727205255514.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727211150030.png","slug":"image-20230727211150030.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727213145890.png","slug":"image-20230727213145890.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230727214739399.png","slug":"image-20230727214739399.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230728100939773.png","slug":"image-20230728100939773.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230728101006301.png","slug":"image-20230728101006301.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230728101020819.png","slug":"image-20230728101020819.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230729145832928.png","slug":"image-20230729145832928.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730163321077.png","slug":"image-20230730163321077.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730164249051.png","slug":"image-20230730164249051.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730164334687.png","slug":"image-20230730164334687.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730164816754.png","slug":"image-20230730164816754.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730165344441.png","slug":"image-20230730165344441.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730170533372.png","slug":"image-20230730170533372.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730171241699.png","slug":"image-20230730171241699.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730172211211.png","slug":"image-20230730172211211.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230730174650797.png","slug":"image-20230730174650797.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Linux笔记/image-20230731090649262.png","slug":"image-20230731090649262.png","post":"clllqbziu000bmcux3m5j3n5n","modified":0,"renderable":0},{"_id":"source/_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/11841aceda8e43e8adfbeac278967917.png","slug":"11841aceda8e43e8adfbeac278967917.png","post":"clllqbziy000fmcux5ztd02z5","modified":0,"renderable":0},{"_id":"source/_posts/Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries/2ea6f2e3bd9047b5b492e25b1ade73dd.png","slug":"2ea6f2e3bd9047b5b492e25b1ade73dd.png","post":"clllqbziy000fmcux5ztd02z5","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728194954237.png","slug":"image-20230728194954237.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728204933405.png","slug":"image-20230728204933405.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728211130724.png","slug":"image-20230728211130724.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728213352217.png","slug":"image-20230728213352217.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728213452920.png","slug":"image-20230728213452920.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728213715198.png","slug":"image-20230728213715198.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728214023978.png","slug":"image-20230728214023978.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728215607642.png","slug":"image-20230728215607642.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728220325735.png","slug":"image-20230728220325735.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728220333688.png","slug":"image-20230728220333688.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728220405690.png","slug":"image-20230728220405690.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728220459641.png","slug":"image-20230728220459641.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728220538400.png","slug":"image-20230728220538400.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230728221059362.png","slug":"image-20230728221059362.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230729100834110.png","slug":"image-20230729100834110.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730151025266.png","slug":"image-20230730151025266.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730151208807.png","slug":"image-20230730151208807.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730151543568.png","slug":"image-20230730151543568.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730152240408.png","slug":"image-20230730152240408.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730153053695.png","slug":"image-20230730153053695.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730153345945.png","slug":"image-20230730153345945.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730153913576.png","slug":"image-20230730153913576.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730154054651.png","slug":"image-20230730154054651.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/Shell笔记/image-20230730160038334.png","slug":"image-20230730160038334.png","post":"clllqbziz000hmcux0l9shrid","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731161918891.png","slug":"image-20230731161918891.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731191501709.png","slug":"image-20230731191501709.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731191806584.png","slug":"image-20230731191806584.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731192045754.png","slug":"image-20230731192045754.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731192623335.png","slug":"image-20230731192623335.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731194630101-1692105959933.png","slug":"image-20230731194630101-1692105959933.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731194630101.png","slug":"image-20230731194630101.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731195153935.png","slug":"image-20230731195153935.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731201052074.png","slug":"image-20230731201052074.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731201237975.png","slug":"image-20230731201237975.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731204742543.png","slug":"image-20230731204742543.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731204818468.png","slug":"image-20230731204818468.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731204854988.png","slug":"image-20230731204854988.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731205050008.png","slug":"image-20230731205050008.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731205204993.png","slug":"image-20230731205204993.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731205244443.png","slug":"image-20230731205244443.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731212623170.png","slug":"image-20230731212623170.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731213059217.png","slug":"image-20230731213059217.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230731213327762.png","slug":"image-20230731213327762.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230801190255233.png","slug":"image-20230801190255233.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230801191635470.png","slug":"image-20230801191635470.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230801191658112.png","slug":"image-20230801191658112.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230801195946980.png","slug":"image-20230801195946980.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230801200055431.png","slug":"image-20230801200055431.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230803140232355.png","slug":"image-20230803140232355.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/MySQL笔记/image-20230803213442968.png","slug":"image-20230803213442968.png","post":"clllqbzj0000imcux22j9cu4g","modified":0,"renderable":0},{"_id":"source/_posts/test/hZ9SjgCDRMUGOxT.png","slug":"hZ9SjgCDRMUGOxT.png","post":"clllqbzj2000nmcux4xxbavov","modified":0,"renderable":0},{"_id":"source/_posts/test/image-20230710200106371.png","slug":"image-20230710200106371.png","post":"clllqbzj2000nmcux4xxbavov","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/0d1b5a8572aa47119e603c7cd291307d.png","slug":"0d1b5a8572aa47119e603c7cd291307d.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/14142856df9b4ceb91c3d85b4b017eb4.png","slug":"14142856df9b4ceb91c3d85b4b017eb4.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/416d1b9dd07d4e43bbaabeb02047e809.png","slug":"416d1b9dd07d4e43bbaabeb02047e809.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/5a3bc3a8ba45423d94fa4fbe005973b3.png","slug":"5a3bc3a8ba45423d94fa4fbe005973b3.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/5c0301edb3124c6191bc2a33c805eddc.png","slug":"5c0301edb3124c6191bc2a33c805eddc.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/7d1527b8fdd14ee3a942f5df899f9327.png","slug":"7d1527b8fdd14ee3a942f5df899f9327.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/ac873024932c4287ab8205db9afe0584.png","slug":"ac873024932c4287ab8205db9afe0584.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/flume实时采集mysql数据库的数据到kafka/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png","slug":"dd8a0362ea6a42ff9fa8b5b8a92f42aa.png","post":"clllqbzj2000mmcuxgcio378u","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/bxmZRYfl4UXaeB6.png","slug":"bxmZRYfl4UXaeB6.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/hZ9SjgCDRMUGOxT.png","slug":"hZ9SjgCDRMUGOxT.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710193122871.png","slug":"image-20230710193122871.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710193646276.png","slug":"image-20230710193646276.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710193716304.png","slug":"image-20230710193716304.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710193859950.png","slug":"image-20230710193859950.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710194234672.png","slug":"image-20230710194234672.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710194400177.png","slug":"image-20230710194400177.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710194742530.png","slug":"image-20230710194742530.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710195406248.png","slug":"image-20230710195406248.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710195906290.png","slug":"image-20230710195906290.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200010566.png","slug":"image-20230710200010566.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200106371.png","slug":"image-20230710200106371.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200130611.png","slug":"image-20230710200130611.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200312751.png","slug":"image-20230710200312751.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200539139.png","slug":"image-20230710200539139.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710200739516.png","slug":"image-20230710200739516.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710201025426.png","slug":"image-20230710201025426.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710201900839.png","slug":"image-20230710201900839.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230710202256691.png","slug":"image-20230710202256691.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711103411381.png","slug":"image-20230711103411381.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711103427935.png","slug":"image-20230711103427935.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711150851404.png","slug":"image-20230711150851404.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711151030189.png","slug":"image-20230711151030189.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711151053019.png","slug":"image-20230711151053019.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711151134903.png","slug":"image-20230711151134903.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230711182305418.png","slug":"image-20230711182305418.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713201620205.png","slug":"image-20230713201620205.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713201653705.png","slug":"image-20230713201653705.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713201728513.png","slug":"image-20230713201728513.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713201804728.png","slug":"image-20230713201804728.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713201909704.png","slug":"image-20230713201909704.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713212833658.png","slug":"image-20230713212833658.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713215248858.png","slug":"image-20230713215248858.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713220504552.png","slug":"image-20230713220504552.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230713221852883.png","slug":"image-20230713221852883.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230714090438935.png","slug":"image-20230714090438935.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230714090457699.png","slug":"image-20230714090457699.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230714204312252.png","slug":"image-20230714204312252.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230715193157730.png","slug":"image-20230715193157730.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230715194720536.png","slug":"image-20230715194720536.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230717203553391.png","slug":"image-20230717203553391.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230718201445587.png","slug":"image-20230718201445587.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230718202052338.png","slug":"image-20230718202052338.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230718202931072.png","slug":"image-20230718202931072.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230723143523063.png","slug":"image-20230723143523063.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230723143638690.png","slug":"image-20230723143638690.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230723144731031.png","slug":"image-20230723144731031.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230723151140532.png","slug":"image-20230723151140532.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724090823259.png","slug":"image-20230724090823259.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724153228728.png","slug":"image-20230724153228728.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724153243607.png","slug":"image-20230724153243607.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724212046687.png","slug":"image-20230724212046687.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724212222545.png","slug":"image-20230724212222545.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724214335918.png","slug":"image-20230724214335918.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724215256243.png","slug":"image-20230724215256243.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724223247119.png","slug":"image-20230724223247119.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724223315189.png","slug":"image-20230724223315189.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230724223358859.png","slug":"image-20230724223358859.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230725102707716.png","slug":"image-20230725102707716.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/image-20230815135457898.png","slug":"image-20230815135457898.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/knIXUFbEWBLwZJa.png","slug":"knIXUFbEWBLwZJa.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0},{"_id":"source/_posts/python笔记/LjTR2tNPAO81cnU.png","slug":"LjTR2tNPAO81cnU.png","post":"clllqbzj4000rmcuxelz8331l","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clllqbzir0009mcuxgn2u3ew7","category_id":"clllqbziw000cmcux9xqa5ioc","_id":"clllqbzj3000omcuxf90bckpl"},{"post_id":"clllqbzj2000mmcuxgcio378u","category_id":"clllqbziw000cmcux9xqa5ioc","_id":"clllqbzj4000tmcuxej8qggry"},{"post_id":"clllqbziu000bmcux3m5j3n5n","category_id":"clllqbzj1000jmcux0lz59spo","_id":"clllqbzj6000xmcuxajphaz24"},{"post_id":"clllqbziy000fmcux5ztd02z5","category_id":"clllqbzj3000pmcux05p38fou","_id":"clllqbzj6000zmcux084xgthh"},{"post_id":"clllqbziz000hmcux0l9shrid","category_id":"clllqbzj1000jmcux0lz59spo","_id":"clllqbzj70012mcux9fkwhdsw"},{"post_id":"clllqbzj0000imcux22j9cu4g","category_id":"clllqbzj6000ymcux5znr33fl","_id":"clllqbzj80018mcuxfgho2y10"},{"post_id":"clllqbzj2000nmcux4xxbavov","category_id":"clllqbzj3000pmcux05p38fou","_id":"clllqbzj8001bmcuxgmquffrw"},{"post_id":"clllqbzj4000rmcuxelz8331l","category_id":"clllqbzj80017mcuxdmj24n2x","_id":"clllqbzj9001dmcux4mdoekbi"}],"PostTag":[{"post_id":"clllqbzir0009mcuxgn2u3ew7","tag_id":"clllqbzix000dmcux94xr2zc1","_id":"clllqbzj1000lmcux4dh22rcy"},{"post_id":"clllqbziu000bmcux3m5j3n5n","tag_id":"clllqbzj1000kmcux2630cm2v","_id":"clllqbzj4000smcux6cim1nct"},{"post_id":"clllqbzj4000rmcuxelz8331l","tag_id":"clllqbzix000dmcux94xr2zc1","_id":"clllqbzj5000wmcuxgvgfc51j"},{"post_id":"clllqbziy000fmcux5ztd02z5","tag_id":"clllqbzj3000qmcuxbj8u2ivu","_id":"clllqbzj70011mcuxg6w3h4d5"},{"post_id":"clllqbziy000fmcux5ztd02z5","tag_id":"clllqbzj5000vmcux57ic27od","_id":"clllqbzj70013mcux5v5dcp58"},{"post_id":"clllqbziz000hmcux0l9shrid","tag_id":"clllqbzj1000kmcux2630cm2v","_id":"clllqbzj80016mcuxhd1i1w01"},{"post_id":"clllqbzj0000imcux22j9cu4g","tag_id":"clllqbzj70015mcux7io4a6si","_id":"clllqbzj8001amcuxezdaevkr"},{"post_id":"clllqbzj2000mmcuxgcio378u","tag_id":"clllqbzj80019mcux0komb8k0","_id":"clllqbzj9001gmcux47xoe5d5"},{"post_id":"clllqbzj2000mmcuxgcio378u","tag_id":"clllqbzj70015mcux7io4a6si","_id":"clllqbzj9001hmcux5lm84ao1"},{"post_id":"clllqbzj2000mmcuxgcio378u","tag_id":"clllqbzj9001emcuxau5z7fg1","_id":"clllqbzj9001imcuxfaxh1idk"},{"post_id":"clllqbzj2000nmcux4xxbavov","tag_id":"clllqbzj9001fmcuxgb0rfcfu","_id":"clllqbzj9001jmcuxebkyc8qd"}],"Tag":[{"name":"Python","_id":"clllqbzix000dmcux94xr2zc1"},{"name":"Linux","_id":"clllqbzj1000kmcux2630cm2v"},{"name":"Spark","_id":"clllqbzj3000qmcuxbj8u2ivu"},{"name":"Bug","_id":"clllqbzj5000vmcux57ic27od"},{"name":"MySQL","_id":"clllqbzj70015mcux7io4a6si"},{"name":"Flink","_id":"clllqbzj80019mcux0komb8k0"},{"name":"Kafaka","_id":"clllqbzj9001emcuxau5z7fg1"},{"name":"测试","_id":"clllqbzj9001fmcuxgb0rfcfu"}]}}