<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flink 处理迟到数据</title>
    <url>/posts/51e65fa8.html</url>
    <content><![CDATA[<h5 id="Flink-处理迟到数据（★）"><a href="#Flink-处理迟到数据（★）" class="headerlink" title="Flink 处理迟到数据（★）"></a>Flink 处理迟到数据（★）</h5><ul>
<li><p>处理迟到数据之前首先了解<strong>Lambda架构</strong></p>
<ul>
<li>Lambda架构的实现是：一个批处理器、一个流处理器。流处理器首先实时输出近似正确的结果（因为乱序流，可能导致流处理结果不准确，所以是近似正确），然后当批处理器处理处理完后，把最终结果更新为批处理的结果。</li>
</ul>
</li>
<li><p>Flink处理迟到数据的实现，其实是相当于Lambda架构的流程实现。</p>
</li>
<li><p>只不过，Flink实现Lambda架构的流程更为简单，只不过是调用几个API而已。</p>
</li>
<li><p><strong>处理迟到数据代码实现：</strong>统计每个url的访问量。</p>
<ul>
<li><p>分析：</p>
<ul>
<li><p>1.首先添加Socket数据源，实现乱序流的输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.socketTextStream(<span class="string">&quot;master&quot;</span>, <span class="number">7777</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.实现乱序流水位线生成策略，延迟时间设为2秒</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.分区、开窗</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分区</span></span><br><span class="line">    .keyBy(data -&gt; data.url)</span><br><span class="line"><span class="comment">//滑动事件时间窗口，大小为10秒                .window(TumblingEventTimeWindows.of(Time.seconds(10)))</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4.设置最大延迟时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">10</span>)))</span><br><span class="line">    <span class="comment">//4.设置最大延迟时间，1分钟</span></span><br><span class="line">.allowedLateness(Time.minutes(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>


</li>
<li><p>5.创建标签，开启侧输出流</p>
<ul>
<li><strong>注意</strong>：由于泛型擦除，要把标签定义成匿名内部类的形式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class="line">    OutputTag&lt;Event&gt; outputTag = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;Event&gt;(<span class="string">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class="line">.allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//5.开启侧输出流</span></span><br><span class="line">.sideOutputLateData(outputTag)</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    .sideOutputLateData(outputTag)</span><br><span class="line">    <span class="comment">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class="line">.aggregate(<span class="keyword">new</span> <span class="title class_">MyAggregateFunction</span>(), <span class="keyword">new</span> <span class="title class_">MyProcessWindowFunction</span>());</span><br></pre></td></tr></table></figure>
</li>
<li><p>7.获取侧输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7.获取侧输出流</span></span><br><span class="line">streamAggregate.getSideOutput(outputTag);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>完整代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">package</span> finkDemo.Watermark_Windows;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//导入自定义POJO类：Event、UrlViewCount</span></span><br><span class="line">  <span class="keyword">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.Case.UrlViewCount;</span><br><span class="line"><span class="keyword">import</span> finkDemo.Watermark_Windows.Windows.WindowsFunction.IncrementalAggregateFunction.Event;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.api.common.functions.MapFunction;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.TimeWindow;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.util.OutputTag;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.time.Duration;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 实际应用中Flink处理迟到数据，就相当于实现了Lambda架构的流程</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 案例：统计每个url访问量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessLaterData</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">          env.setParallelism(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//设置水位线生成周期:100ms</span></span><br><span class="line">          env.getConfig().setAutoWatermarkInterval(<span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//1.首先添加Socket数据源，实现乱序流的输入</span></span><br><span class="line">          <span class="comment">//nc端输入：Marry ./pid=1 2000等</span></span><br><span class="line">          SingleOutputStreamOperator&lt;Event&gt; streamSource = env.socketTextStream(<span class="string">&quot;master&quot;</span>, <span class="number">7777</span>)</span><br><span class="line">                  <span class="comment">//转换数据结构为Event</span></span><br><span class="line">                  .map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, Event&gt;() &#123;</span><br><span class="line">                      <span class="meta">@Override</span></span><br><span class="line">                      <span class="keyword">public</span> Event <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                          <span class="comment">//切分nc端输入的字符串</span></span><br><span class="line">                          String[] split = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                          <span class="comment">//返回Event</span></span><br><span class="line">                          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Event</span>(split[<span class="number">0</span>].trim(), split[<span class="number">1</span>].trim(), Long.valueOf(split[<span class="number">2</span>].trim()));</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//2.实现乱序流水位线生成策略，延迟时间设为2秒</span></span><br><span class="line">          SingleOutputStreamOperator&lt;Event&gt; streamWatermark = streamSource</span><br><span class="line">                  .assignTimestampsAndWatermarks(</span><br><span class="line">                          <span class="comment">//创建乱序流水位线生成器，延迟时间为 2秒</span></span><br><span class="line">                          WatermarkStrategy.&lt;Event&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">2</span>))</span><br><span class="line">                                  <span class="comment">//提取、分配时间戳</span></span><br><span class="line">                                  .withTimestampAssigner(<span class="keyword">new</span> <span class="title class_">SerializableTimestampAssigner</span>&lt;Event&gt;() &#123;</span><br><span class="line">                                      <span class="meta">@Override</span></span><br><span class="line">                                      <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">extractTimestamp</span><span class="params">(Event element, <span class="type">long</span> recordTimestamp)</span> &#123;</span><br><span class="line">                                          <span class="comment">//提取时间戳</span></span><br><span class="line">                                          <span class="keyword">return</span> element.timestamps;</span><br><span class="line">                                      &#125;</span><br><span class="line">                                  &#125;)</span><br><span class="line">                  );</span><br><span class="line">  </span><br><span class="line">          streamWatermark.print(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//5.创建标签，**注意**：由于泛型擦除，要把标签定义成匿名内部类的形式。</span></span><br><span class="line">          OutputTag&lt;Event&gt; outputTag = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;Event&gt;(<span class="string">&quot;later&quot;</span>) &#123;&#125;;</span><br><span class="line">          <span class="comment">//3.分区、开窗</span></span><br><span class="line">          SingleOutputStreamOperator&lt;UrlViewCount&gt; streamAggregate = streamWatermark</span><br><span class="line">                  <span class="comment">//分区</span></span><br><span class="line">                  .keyBy(data -&gt; data.url)</span><br><span class="line">                  <span class="comment">//滑动事件时间窗口，大小为10秒</span></span><br><span class="line">                  .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">10</span>)))</span><br><span class="line">                  <span class="comment">//4.设置最大延迟时间，1分钟</span></span><br><span class="line">                  .allowedLateness(Time.minutes(<span class="number">1</span>))</span><br><span class="line">                  <span class="comment">//5.开启侧输出流</span></span><br><span class="line">                  .sideOutputLateData(outputTag)</span><br><span class="line">                  <span class="comment">//6.调用aggregate方法，传入AggregateFunction和ProcessWindowFunction</span></span><br><span class="line">                  .aggregate(<span class="keyword">new</span> <span class="title class_">MyAggregateFunction</span>(), <span class="keyword">new</span> <span class="title class_">MyProcessWindowFunction</span>());</span><br><span class="line">  </span><br><span class="line">          streamAggregate.print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">          <span class="comment">//7.获取侧输出流</span></span><br><span class="line">          DataStream&lt;Event&gt; streamSideOutput = streamAggregate.getSideOutput(outputTag);</span><br><span class="line">          streamSideOutput.print(<span class="string">&quot;later&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          env.execute();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//自定义AggregateFunction</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyAggregateFunction</span> <span class="keyword">implements</span> <span class="title class_">AggregateFunction</span>&lt;Event,Long,Long&gt;&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Long <span class="title function_">createAccumulator</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Long <span class="title function_">add</span><span class="params">(Event value, Long accumulator)</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> accumulator+<span class="number">1L</span>;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Long <span class="title function_">getResult</span><span class="params">(Long accumulator)</span> &#123;</span><br><span class="line">              <span class="comment">//返回url的访问量</span></span><br><span class="line">              <span class="keyword">return</span> accumulator;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//由于不是会话窗口，可以不用写merge方法</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> Long <span class="title function_">merge</span><span class="params">(Long a, Long b)</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//自定义ProcessWindowFunction</span></span><br><span class="line">      <span class="comment">//由于这里的IN是getResult方法的返回值，所以IN类型为Long</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyProcessWindowFunction</span> <span class="keyword">extends</span> <span class="title class_">ProcessWindowFunction</span>&lt;Long, UrlViewCount,String, TimeWindow&gt;&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String url, ProcessWindowFunction&lt;Long, UrlViewCount, String, TimeWindow&gt;.Context context, Iterable&lt;Long&gt; elements, Collector&lt;UrlViewCount&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">              <span class="comment">//窗口开启时间</span></span><br><span class="line">              <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> context.window().getStart();</span><br><span class="line">              <span class="comment">//窗口关闭时间</span></span><br><span class="line">              <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> context.window().getEnd();</span><br><span class="line">              <span class="comment">//获取每个url的访问量</span></span><br><span class="line">              <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> elements.iterator().next();</span><br><span class="line">  </span><br><span class="line">              <span class="comment">//分装为UrlViewCount类型输出</span></span><br><span class="line">              out.collect(<span class="keyword">new</span> <span class="title class_">UrlViewCount</span>(url,count,start,end));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果分析<img src="/posts/51e65fa8/29667c7b2c474359bdcea93d920fb133.png" class=""></li>
</ul>
</li>
<li><p>第一个result结果输出，count &#x3D; 3</p>
<ul>
<li>第一个窗口的范围为[0 , 10000)。<strong>因为窗口默认右边值为 end-1，由于窗口大小为10000，所以end-1&#x3D;9999</strong></li>
<li>前面的数据，只有三条数据的时间戳，在[0 , 10000)之内，所以count&#x3D;3</li>
<li>由于数据时间戳为12000</li>
<li>延迟时间为2秒</li>
<li>水位线的时间戳为10000</li>
<li>水位线推动窗口，触发结果输出。<strong>由于最大延迟时间，此时第一个窗口没有关闭。</strong></li>
</ul>
</li>
<li><p>第二个result结果输出，count &#x3D; 4</p>
<ul>
<li>由于最大延迟时间为，1分钟，也就是60000毫秒，所以<strong>第一个窗口延迟关闭60000毫秒</strong></li>
<li>由于前面一条数据的时间戳为4000，在第一个窗口范围之内，所以被第一个窗口收集，并更新输出的结果，为count&#x3D;4</li>
</ul>
</li>
<li><p>第三个result结果，count &#x3D; 2</p>
<ul>
<li>第二个窗口范围为[ 10000, 20000)</li>
<li>前面数据的时间戳，在[10000 , 20000)之内的数据共有两条，所以count&#x3D;2</li>
</ul>
</li>
<li><p>第一个later，count&#x3D;1</p>
<ul>
<li>在时间戳为72000的数据的推动下，水位线为70000&#x3D;最大延迟时间+end1，推动了第一个窗口的关闭、销毁。</li>
<li>最后一条数据的时间戳为2000，但是第一个窗口已经关闭，所以该数据会流入侧输出流，并输出。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>linux笔记</title>
    <url>/posts/638d4d8a.html</url>
    <content><![CDATA[<h1 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h1><ul>
<li>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的</li>
<li>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</li>
</ul>
<img src="/posts/638d4d8a/image-20230726141327993.png" class="">

<img src="/posts/638d4d8a/image-20230726141424420.png" class="">

<ul>
<li>2020 年 12 月，CentOS 社区宣布 CentOS 服务器操作系统 8 和 7 系列分别于 2021 年底和 2024 年 6 月底停止服务。<ul>
<li>龙蜥操作系统（Anolis OS）100% 兼容 RHEL&#x2F;CentOS Linux 8；支持 x86_64 和 aarch64 架构及飞腾、海光、兆芯、鲲鹏等芯片，适配 x86 及 arm64 主流服务器硬件；提供 CentOS Linux 到 Anolis OS 迁移工具，帮助系统及应用的顺滑迁移</li>
</ul>
</li>
</ul>
<h1 id="Linux虚拟机安装与配置"><a href="#Linux虚拟机安装与配置" class="headerlink" title="Linux虚拟机安装与配置"></a>Linux虚拟机安装与配置</h1><h2 id="1、安装VMware"><a href="#1、安装VMware" class="headerlink" title="1、安装VMware"></a>1、安装VMware</h2><ul>
<li>取消检查更新，下一步即可</li>
</ul>
<img src="/posts/638d4d8a/image-20230725190639601.png" class="">

<ul>
<li>安装完成后，输入产品密钥</li>
</ul>
<img src="/posts/638d4d8a/image-20230725164332151.png" class="">

<ul>
<li>查看网络适配器，检查是否安装成功</li>
</ul>
<img src="/posts/638d4d8a/image-20230725190743350.png" class="">

<h2 id="2、配置虚拟机"><a href="#2、配置虚拟机" class="headerlink" title="2、配置虚拟机"></a>2、配置虚拟机</h2><ul>
<li><p>新建虚拟机</p>
</li>
<li><p>选择典型模式</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725164534031.png" class="">

<ul>
<li>配置CentOS-7.ios镜像</li>
</ul>
<img src="/posts/638d4d8a/image-20230725190147422.png" class="">

<ul>
<li>选择虚拟机位置和名称</li>
</ul>
<img src="/posts/638d4d8a/image-20230725190958440.png" class="">

<ul>
<li>分配内存，并选中磁盘存储为单个文件</li>
</ul>
<img src="/posts/638d4d8a/image-20230725191041627.png" class="">

<ul>
<li><p>进入到虚拟机界面，回车即可</p>
</li>
<li><p>等待加载</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725191430990.png" class="">

<h2 id="3、虚拟机中的软件配置"><a href="#3、虚拟机中的软件配置" class="headerlink" title="3、虚拟机中的软件配置"></a>3、虚拟机中的软件配置</h2><ul>
<li>虚拟机配置完成后，会进入到可视化界面中</li>
<li>选择语言</li>
<li>选中安装位置，点击完成</li>
</ul>
<img src="/posts/638d4d8a/image-20230725191757477.png" class="">

<ul>
<li>下载GHOME桌面</li>
</ul>
<img src="/posts/638d4d8a/image-20230725191831967.png" class="">

<ul>
<li>打开网络和主机名中的以太网，并记住当前主机ip<ul>
<li>192.168.175.128</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725192038917.png" class="">

<ul>
<li>开始安装</li>
<li>设置root密码，可以创建普通用户，可以不创建</li>
</ul>
<img src="/posts/638d4d8a/image-20230725192233909.png" class="">

<img src="/posts/638d4d8a/image-20230725192317190.png" class="" title="image-20230725192317190">

<img src="/posts/638d4d8a/image-20230725192330984.png" class="">

<ul>
<li>重启虚拟机</li>
</ul>
<img src="/posts/638d4d8a/image-20230725193756322.png" class="">

<ul>
<li>重启完成后，进行初始化设置，接收许可证</li>
</ul>
<img src="/posts/638d4d8a/image-20230725193917275.png" class="">

<ul>
<li>在用户登录时，选择未列出中的root用户进行登录</li>
</ul>
<img src="/posts/638d4d8a/image-20230725194021377.png" class="">

<ul>
<li>跳过登录后的选项</li>
</ul>
<img src="/posts/638d4d8a/image-20230725194117040.png" class="">

<ul>
<li>点击应用软件中的Firefox，访问百度，测试网络是否连接</li>
</ul>
<img src="/posts/638d4d8a/image-20230725194432819.png" class="">

<ul>
<li>网络连接成功，记得连接前关闭VPN</li>
</ul>
<img src="/posts/638d4d8a/image-20230725194536832.png" class="">

<h2 id="4、虚拟机设置"><a href="#4、虚拟机设置" class="headerlink" title="4、虚拟机设置"></a>4、虚拟机设置</h2><ul>
<li>进入到虚拟机设置中</li>
<li>指定内存和处理器核数</li>
<li>如果没有指定镜像文件，可以在这里指定</li>
<li>网络适配器选择NAT模式</li>
<li>删除声卡和打印机</li>
</ul>
<img src="/posts/638d4d8a/image-20230725195157685.png" class="">

<ul>
<li>如果关机后重新启动打不开或者打开出现错误，在进入到master文件夹，删除前三个文件夹，重新打开即可</li>
</ul>
<img src="/posts/638d4d8a/image-20230725195717493.png" class="">

<h2 id="5、家目录"><a href="#5、家目录" class="headerlink" title="5、家目录"></a>5、家目录</h2><h3 id="5-1-root用户的家目录"><a href="#5-1-root用户的家目录" class="headerlink" title="5.1 root用户的家目录"></a>5.1 root用户的家目录</h3><ul>
<li>桌面上的主文件就是root用户的家目录</li>
</ul>
<img src="/posts/638d4d8a/image-20230725200304363.png" class="" title="image-20230725200304363">

<ul>
<li>在其他位置选项中，点击计算机位置，也可以看到root文件夹上也有个房子标志，表明root文件夹也是root用户的家目录</li>
</ul>
<img src="/posts/638d4d8a/image-20230725200621688.png" class="">

<h3 id="5-2-普通用户的家目录"><a href="#5-2-普通用户的家目录" class="headerlink" title="5.2 普通用户的家目录"></a>5.2 普通用户的家目录</h3><ul>
<li><p>切换到普通用户的登录</p>
</li>
<li><p>和root用户一样，桌面上的目录是普通用户的家目录</p>
</li>
<li><p>在计算机中普通用户的家目录，在home文件夹中</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201026739.png" class="">

<img src="/posts/638d4d8a/image-20230725201051683.png" class="">

<ul>
<li>并且，普通用户对root文件的访问需要root密码</li>
</ul>
<h2 id="6、静态网络配置"><a href="#6、静态网络配置" class="headerlink" title="6、静态网络配置"></a>6、静态网络配置</h2><ul>
<li><p>通过网络管理工具进行配置</p>
<ul>
<li>这个<strong>网络管理工具就是NetworkManager</strong></li>
<li>关闭NetworkManager后，会发现图形化界面中的网络管理工具也会消失</li>
</ul>
<img src="/posts/638d4d8a/image-20230726210518731.png" class="">

<ul>
<li>开启NetworkManager后，就会重新启动，说明两者是同一个东西</li>
</ul>
<img src="/posts/638d4d8a/image-20230726210638937.png" class="">

<ul>
<li><p>关闭，在开启NetworkManager后，如果连接不上xshell，可以重启虚拟机试一下</p>
</li>
<li><p>在这里配置的静态网络设置的地址，可以在ifcfg-ens33 文件中找到</p>
</li>
</ul>
</li>
</ul>
<h4 id="6-1-查看各个地址"><a href="#6-1-查看各个地址" class="headerlink" title="6.1 查看各个地址"></a>6.1 查看各个地址</h4><ul>
<li>在图中的有线设置中找到，网络的设置</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201613953.png" class="">

<ul>
<li>点击齿轮，可以查看DNS和路由地址</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201655502.png" class="">

<ul>
<li>在次设置中可以看到主机的<strong>路由地址</strong>和<strong>DNS地址</strong><ul>
<li>后面配置网关时，可以把路由地址当作网关地址<ul>
<li>网关和路由虽然是两个不同的概念。有时候网关实际上就是一个路由器，负责将本地网络和外部网络连接起来<strong>。在这种情况下，网关的IP地址也充当着路由器的IP地址</strong>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201748442.png" class="">

<ul>
<li>点击虚拟网络编辑器中，<strong>更改设置</strong>选项</li>
</ul>
<img src="/posts/638d4d8a/image-20230725192937089.png" class="">

<ul>
<li>可以选择DHCP选项，查看<strong>广播地址</strong><ul>
<li>192.175.168.255</li>
</ul>
</li>
<li><strong>DHCP</strong>（Dynamic Host Configuration Protocol），即动态主机配置协议<ul>
<li>DHCP服务器会从预先设置的IP地址池（在起始ip和结束ip之间的地址中选择）中选择一个可用的IP地址分配给虚拟机，然后将其他相关配置信息一并发送给虚拟机，使虚拟机能够正确地连接到网络。</li>
<li>后面会配置静态的主机ip地址</li>
<li>动态的ip会导致连接xhell的时候，需要重新配置主机ip地址</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725193304333.png" class="">

<ul>
<li>可以查看window的VMware8的ipv4地址<ul>
<li>192.168.175.1</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725193128431.png" class="">

<ul>
<li>点击编辑中的虚拟网络编辑器，查看<strong>VMware8的子网和子网掩码</strong><ul>
<li>网络适配器中VM8子网<ul>
<li>192.168.175.0</li>
</ul>
</li>
<li>网络适配器中VM8的子网掩码<ul>
<li>255.255.255.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725192651359.png" class="">

<h4 id="6-2-静态网络配置"><a href="#6-2-静态网络配置" class="headerlink" title="6.2 静态网络配置"></a>6.2 静态网络配置</h4><ul>
<li>在图中的有线设置中找到，网络管理工具</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201613953-1692155153717.png" class="">

<ul>
<li>点击齿轮，可以进行静态网络的配置</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201655502-1692155155569.png" class="">

<ul>
<li>由于0、1、2、255已经被占用，所以配置主机的静态ip时要避开这几个地址</li>
<li>进行静态网络配置：<strong>ipv4地址、子网掩码、网关（路由）、DNS</strong><ul>
<li><strong>在此配置的各个地址，都会记录到ifcfg-ens33文件中</strong></li>
<li>192.168.175.100、255.255.255.0、192.168.175.2、192.168.175.2</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725202522782.png" class="">

<ul>
<li><strong>关闭网络管理工具，并重新连接有线设置，使配置生效</strong><ul>
<li>关闭后三个点消失，在同位置可以开启</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725202727704.png" class="">

<ul>
<li>打开终端，输入ifconfig命令查看主机ip</li>
</ul>
<img src="/posts/638d4d8a/image-20230725202853702.png" class="">

<ul>
<li>测试网络连接，打开应用程序中Firefox，访问baidu</li>
</ul>
<img src="/posts/638d4d8a/image-20230725203045211.png" class="">

<ul>
<li>配置完成后，可以在此终端配置ifcfg-ens33文件，这里配置完成后，后面就不需要对网络配置文件进行修改了<ul>
<li>BOOTPROTO&#x3D;static</li>
<li>PERFIX&#x3D;24  –&gt;  NETMASK&#x3D;255.255.255.0</li>
</ul>
</li>
</ul>
<h2 id="7、连接xshell"><a href="#7、连接xshell" class="headerlink" title="7、连接xshell"></a>7、连接xshell</h2><ul>
<li><p>安装xshell5</p>
</li>
<li><p>配置主机地址</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725204854629.png" class="">

<ul>
<li>配置root用户和密码</li>
</ul>
<img src="/posts/638d4d8a/image-20230725205030096.png" class="">

<ul>
<li>接收并保存密钥</li>
</ul>
<img src="/posts/638d4d8a/image-20230725204949968.png" class="">

<ul>
<li>xshell平替<ul>
<li>electerm</li>
<li>FinalShell</li>
</ul>
</li>
</ul>
<h2 id="8、关闭CentOS图形化界面"><a href="#8、关闭CentOS图形化界面" class="headerlink" title="8、关闭CentOS图形化界面"></a>8、关闭CentOS图形化界面</h2><ul>
<li><p>关闭图形化界面，节省内存</p>
</li>
<li><p>命令解释</p>
<ul>
<li><code>multi-user.target</code> 是 Linux 系统的一个目标单元（target unit），表示系统默认运行级别为多用户模式，即只启动多用户命令行界面，不启动图形界面。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在终端输入下面命令</span></span><br><span class="line"><span class="comment"># system control </span></span><br><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<ul>
<li>查看centOS 7的默认启动模式（命令行模式显示：multi-user.target）</li>
<li>修改centOS 7的默认启动模式（图形化界面显示：graphical.target）</li>
</ul>
<h2 id="9、网络文件配置以及关闭防火墙"><a href="#9、网络文件配置以及关闭防火墙" class="headerlink" title="9、网络文件配置以及关闭防火墙"></a>9、网络文件配置以及关闭防火墙</h2><ul>
<li>配置网络连接文件<ul>
<li>PREFIX&#x3D;24 改为 NETMASK&#x3D;255.255.255.0<ul>
<li>PREFIX&#x3D;24 表示子网掩码二进制1的个数</li>
<li>中文意思：前缀</li>
</ul>
</li>
<li>BOOTPROTO&#x3D;static<ul>
<li>BOOTPROTO是Boot Protocol的缩写，表示引导协议。</li>
<li>常见的BOOTPROTO值包括：<ol>
<li>DHCP：动态主机配置协议 (Dynamic Host Configuration Protocol)。使用DHCP时，网络接口会向网络中的DHCP服务器请求IP地址、子网掩码、网关、DNS等配置信息，并自动获取适配的网络配置。</li>
<li>Static：<strong>静态配置</strong>。设置网络接口的IP地址、子网掩码、网关等信息为手动配置，不通过DHCP获取。</li>
<li>None：无协议。不进行网络接口的自动配置，需要手动设置IP地址等信息。</li>
</ol>
</li>
</ul>
</li>
<li>IPADDR&#x3D;192.168.175.100  <ul>
<li>ip address</li>
<li>ip地址</li>
</ul>
</li>
<li>NETMASK&#x3D;255.255.255.0   <ul>
<li>network mask</li>
<li>子网掩码</li>
</ul>
</li>
<li>GATEWAY&#x3D;192.168.175.2    <ul>
<li>它是一个网络设备（通常是路由器）的IP地址，用于将数据包从本地网络转发到其他网络。</li>
<li>网关的IP地址可能和路由器的IP地址是一样的。这可能是因为网关实际上就是一个路由器，负责将本地网络和外部网络连接起来。在这种情况下，网关的IP地址也充当着路由器的IP地址。</li>
<li>网关</li>
</ul>
</li>
<li>DNS1&#x3D;192.168.175.2<ul>
<li>“Domain Name System”，即域名系统</li>
<li>它是互联网上用于将域名（例如<a href="http://www.example.com)转换为ip地址(例如192.0.2.1)的一种系统./">www.example.com）转换为IP地址（例如192.0.2.1）的一种系统。</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改的内容</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.175</span><span class="number">.100</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>  </span><br><span class="line">GATEWAY=<span class="number">192.169</span><span class="number">.175</span><span class="number">.2</span></span><br><span class="line">DNS1=<span class="number">192.169</span><span class="number">.175</span><span class="number">.2</span></span><br><span class="line"><span class="comment"># 进入网络连接文件中</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<ul>
<li>没改之前</li>
</ul>
<img src="/posts/638d4d8a/image-20230725222708447.png" class="">

<ul>
<li>改之后</li>
</ul>
<img src="/posts/638d4d8a/image-20230725223150054.png" class="">

<ul>
<li><p>为什么要关闭NetworkManager</p>
<ul>
<li>对应图形化界面中的三个点</li>
</ul>
<img src="/posts/638d4d8a/image-20230725201613953-1692155175847.png" class="">

<ul>
<li>NetworkManager是一个在Linux系统中管理网络连接的工具。<ul>
<li>避免冲突<ul>
<li>在某些情况下，可能会与其他网络管理工具或服务产生冲突，导致网络连接问题。关闭NetworkManager可能是为了避免这些潜在的冲突。</li>
</ul>
</li>
<li>提高性能<ul>
<li>在一些资源有限的系统中，关闭不需要的服务可以节省系统资源，从而<strong>提高系统性能</strong>。</li>
</ul>
</li>
<li>关闭图形化界面后，就不能使用此工具，需要手动在ifcfg-ens33文件中进行网络配置，关闭NetworkManager服务可以节省系统资源</li>
</ul>
</li>
<li>关闭后通过手动配置网络连接的文件</li>
</ul>
</li>
<li><p>关闭NetworkManager</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示NetworkManager的状态</span></span><br><span class="line">systemctl status NetworkManager</span><br><span class="line"><span class="comment"># 关闭NetworkManager</span></span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line"><span class="comment"># 关闭NetworkManager的开机自启</span></span><br><span class="line">systemctl disble NetworkManager</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230725221833744.png" class="">



<img src="/posts/638d4d8a/image-20230725222004113.png" class="">

<ul>
<li>启动network服务<ul>
<li>network”通常指计算机网络”</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看network状态</span></span><br><span class="line">systemctl status network</span><br><span class="line"><span class="comment"># 修改ifcfg-ens33文件后重启network服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="comment"># 设置network开机自启</span></span><br><span class="line"><span class="comment"># 在ifcfg-ens33文件中的ONBOOT设置里</span></span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230726212127488.png" class="">

<ul>
<li>关闭防火墙<ul>
<li>关闭防火墙，以便软件可以正常连接到网络或下载所需的文件、以便特定的网络通信。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 关闭防火墙开机自启</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h2 id="10、修改主机名"><a href="#10、修改主机名" class="headerlink" title="10、修改主机名"></a>10、修改主机名</h2><ul>
<li>主机名<ul>
<li>主机的名字</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725224604750.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到hostaname文件中修改</span></span><br><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230725224740961.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过命令修改</span></span><br><span class="line">hostnamectl --<span class="built_in">help</span>   <span class="comment"># 查看命令参数</span></span><br><span class="line"></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname master</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230725225041772.png" class="">

<ul>
<li>重启生效</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="11、映射"><a href="#11、映射" class="headerlink" title="11、映射"></a>11、映射</h2><ul>
<li>虚拟机映射<ul>
<li>ip地址映射为一个名字</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入映射文件</span></span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230725225334022.png" class="">

<ul>
<li>映射后可以通过别名访问该地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试是否映射成功</span></span><br><span class="line">ping master</span><br></pre></td></tr></table></figure>

<ul>
<li>window本机映射<ul>
<li>映射文件路径：C:\Windows\System32\drivers\etc</li>
<li>同样的如果在此文件配置虚拟机的映射，在window系统中的浏览器（或连接时）可以通过master访问虚拟机或连接虚拟机</li>
<li><strong>因为xshell是安装在windows中的软件，所以配置windows本机映射，可以用映射连接xshell</strong></li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725225905638.png" class="">



<img src="/posts/638d4d8a/image-20230725230129222.png" class="">

<h2 id="12、解决异常退出文件时，再进入会出现下图情况"><a href="#12、解决异常退出文件时，再进入会出现下图情况" class="headerlink" title="12、解决异常退出文件时，再进入会出现下图情况"></a>12、解决异常退出文件时，再进入会出现下图情况</h2><ul>
<li>下图为，异常退出文件会出现的情况</li>
</ul>
<img src="/posts/638d4d8a/image-20230726212412260.png" class="">

<ul>
<li>删除下图中的文件即可解决</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除该文件</span></span><br><span class="line">rm -rf  /etc/sysconfig/network-scripts/.ifcfg-ens33.swp</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230726212756839.png" class="">

<h1 id="Linux基本功能"><a href="#Linux基本功能" class="headerlink" title="Linux基本功能"></a>Linux基本功能</h1><h2 id="1、根目录下的文件夹"><a href="#1、根目录下的文件夹" class="headerlink" title="1、根目录下的文件夹"></a>1、根目录下的文件夹</h2><ul>
<li><p>linux本质上就是一个文件系统，所有的东西都以文件的形式保存</p>
</li>
<li><p>根目录下的各个文件夹，及其作用</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725212127382.png" class="">

<ul>
<li>bin<ul>
<li>存放二进制可执行文件（就是命令，如：ls、cat、mkdir）</li>
</ul>
</li>
<li>boot<ul>
<li>存放用于系统引导（启动）时使用的各种文件</li>
</ul>
</li>
<li>dev（devices）<ul>
<li>存放设备文件</li>
</ul>
</li>
<li>etc（etcetera）<ul>
<li>存放所有系统配置文件</li>
</ul>
</li>
<li>hom<ul>
<li>存放所有用户文件的根目录</li>
</ul>
</li>
<li>lib<ul>
<li>存放跟文件系统中的程序运行所需要的共享库及内核模块</li>
</ul>
</li>
<li>proc  <ul>
<li>虚拟文件系统，存放当前内存的映射</li>
</ul>
</li>
<li>usr  <ul>
<li>存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 管理员软件安装目录</li>
</ul>
</li>
<li>var  <ul>
<li>存放运行时需要改变数据的文件*</li>
</ul>
</li>
<li>mnt  <ul>
<li>挂载目录</li>
</ul>
</li>
<li>sbin  <ul>
<li>存储管理级别的二进制执行文件</li>
</ul>
</li>
<li>root  <ul>
<li>超级用户主目录（家目录）</li>
</ul>
</li>
<li>opt <ul>
<li>额外安装的可选应用程序包安装位置</li>
</ul>
</li>
</ul>
<h2 id="2、文件权限"><a href="#2、文件权限" class="headerlink" title="2、文件权限"></a>2、文件权限</h2><ul>
<li>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定</li>
</ul>
<img src="/posts/638d4d8a/image-20230725213809973.png" class="">

<ul>
<li>对应权限划分如下<ul>
<li>d表示文件夹</li>
<li>后面9个字母，每3个对应一个身份的权限<ul>
<li>r表示读，w表示写，x(execute)表示执行，如果命令文件中，该用户有x权限，则可以调用该命令<ul>
<li>如果加了rw后，还是没有权限，可以加上x</li>
</ul>
</li>
<li><strong>owner</strong>对应的当前用户，<strong>group</strong>对应的是用户组，<strong>other users</strong>对应的是其他普通用户<ul>
<li>第一个root表示root用户，第个root表示root用户组</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725214040146.png" class="">

<img src="/posts/638d4d8a/image-20230725213825941.png" class="">

<ul>
<li>使用 u, g, o 来代表三种身份的权限，此外还有a，代表all，即所有用户</li>
<li>chmod（change mode）<ul>
<li>修改文件权限</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725214239212.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件的root用户的读权限</span></span><br><span class="line">chmod u+r 文件名</span><br><span class="line">chmod u-r 文件名</span><br><span class="line">chmod u+rx 文件名</span><br><span class="line">chmod u-rx 文件名</span><br><span class="line"><span class="comment"># 修改文件的root用户的写权限</span></span><br><span class="line">chmod u+w 文件名</span><br><span class="line">chmod u-w 文件名</span><br><span class="line">chmod u+wx 文件名</span><br><span class="line">chmod u-wx 文件名</span><br><span class="line"><span class="comment"># 修改文件的root用户的读写权限</span></span><br><span class="line">chmod u+rw 文件名</span><br><span class="line">chmod u-rw 文件名</span><br><span class="line">chmod u+rwx 文件名</span><br><span class="line">chmod u-rwx 文件名</span><br><span class="line"><span class="comment"># 修改文件的用户组的读写权限</span></span><br><span class="line">chmod g+r 文件名</span><br><span class="line">chmod g-r 文件名</span><br><span class="line"><span class="comment"># 修改文件的普通用户的读写权限</span></span><br><span class="line">chmod o+r 文件名</span><br><span class="line">chmod o-r 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果用户相对文件进行读写操作，除了文件本身的权限，文件所处文件夹的读写权限也要有</p>
</li>
<li><p>chmod   xxx   文件夹</p>
<ul>
<li>xxx可以用数字代替</li>
<li>rwx  r-x    r-x</li>
<li>111 101   101</li>
<li>7        5       5</li>
<li>chmod 755 文件名  会赋予文件rwx  r-x    r-x的权限</li>
</ul>
</li>
<li><p>chmod –help  查看命令的帮助文档</p>
<ul>
<li>chmod -R 755  文件夹，此命令会递归的把指定文件夹里所有的文件和文件夹都赋予 755的权限</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725220926475.png" class="">

<ul>
<li>chmod命令的匹配方式其实是正则表达式</li>
</ul>
<img src="/posts/638d4d8a/image-20230725221157481.png" class="">

<ul>
<li>通过chown命令可以修改文件所有者和文件关联组，进而也能影响权限<ul>
<li>命令格式：chown [-cfhvR] [–help] [–version] user[:group] file</li>
</ul>
</li>
</ul>
<h2 id="3、用户和用户组"><a href="#3、用户和用户组" class="headerlink" title="3、用户和用户组"></a>3、用户和用户组</h2><ul>
<li><p>Linux系统是一个多用户多任务的分时操作系统</p>
</li>
<li><p>可以创建一个有一定权限的组，然后把普通用户放入进入</p>
</li>
<li><p>添加的用户所在文件 &#x2F;etc&#x2F;passwd</p>
<ul>
<li><code>djx</code>：用户名</li>
<li><code>x</code>：加密后的密码，通常是 ‘x’ 或 ‘*’ 表示密码以加密形式存储在 <code>/etc/shadow</code> 文件中</li>
<li><code>1000</code>：用户 ID (UID)，用于标识用户的唯一标识符</li>
<li><code>1000</code>：组 ID (GID)，用于标识用户所属的主要用户组</li>
<li><code>djx</code>：用户的全名或描述</li>
<li><code>/home/djx</code>：用户的主目录路径</li>
<li><code>/bin/bash</code>：用户的默认 shell，这里指定为 Bash 解释器。</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727213145890.png" class="" title="image-20230727213145890">

<ul>
<li>添加的用户组所在文件 &#x2F;etc&#x2F;group</li>
<li>新创建的用户和用户组的，uid和gid默认从1000开始</li>
</ul>
<h2 id="4、添加用户"><a href="#4、添加用户" class="headerlink" title="4、添加用户"></a>4、添加用户</h2><ul>
<li><p>使用useradd即可增加一个用户</p>
</li>
<li><p>命令格式：<strong>useradd</strong> 选项 用户名</p>
</li>
<li><p>选项:</p>
<p>-c comment 指定一段注释性描述。</p>
<p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p>
<p>-g 用户组 指定用户所属的用户组。</p>
<p>-G 用户组，用户组 指定用户所属的附加组。</p>
<p>-s Shell文件 指定用户的登录Shell。</p>
<p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">useradd lg</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd lg</span><br><span class="line"><span class="comment"># -m 将家目录内容移至新位置 (仅于 -d 一起使用)</span></span><br><span class="line">usermod -m -d /home/lg3 lg</span><br></pre></td></tr></table></figure>

<h2 id="5、修改或删除用户"><a href="#5、修改或删除用户" class="headerlink" title="5、修改或删除用户"></a>5、修改或删除用户</h2><h3 id="5-1修改用户"><a href="#5-1修改用户" class="headerlink" title="5.1修改用户"></a>5.1修改用户</h3><ul>
<li>命令格式：usermod 选项 用户名</li>
<li>选项与useradd命令中的选项一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改sam用户的shell文件为/bin/ksh，主目录为/home/z，用户组为developer</span></span><br><span class="line">usermod -s /<span class="built_in">bin</span>/ksh -d /home/z -g developer sam</span><br></pre></td></tr></table></figure>

<h3 id="5-2删除用户"><a href="#5-2删除用户" class="headerlink" title="5.2删除用户"></a>5.2删除用户</h3><ul>
<li>命令格式：userdel 选项 用户名</li>
<li>常用的选项是 -r，它的作用是把用户的主目录一起删除</li>
</ul>
<h2 id="6、修改密码"><a href="#6、修改密码" class="headerlink" title="6、修改密码"></a>6、修改密码</h2><ul>
<li>命令格式：：<strong>passwd</strong> 选项 用户名</li>
<li>一般passwd 用户名即可</li>
</ul>
<h2 id="7、增加用户组"><a href="#7、增加用户组" class="headerlink" title="7、增加用户组"></a>7、增加用户组</h2><ul>
<li>其格式：groupadd 选项 用户组</li>
<li>选项<ul>
<li>-g GID 指定新用户组的组标识号（GID）</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li>
</ul>
</li>
</ul>
<h2 id="8、删除或修改用户组"><a href="#8、删除或修改用户组" class="headerlink" title="8、删除或修改用户组"></a>8、删除或修改用户组</h2><h3 id="8-1删除用户组"><a href="#8-1删除用户组" class="headerlink" title="8.1删除用户组"></a>8.1删除用户组</h3><ul>
<li>其格式：groupdel 用户组</li>
</ul>
<h3 id="8-2修改用户组"><a href="#8-2修改用户组" class="headerlink" title="8.2修改用户组"></a>8.2修改用户组</h3><ul>
<li>格式：groupmod 选项 用户组</li>
<li>常用的选项有：<ul>
<li>-g GID 为用户组指定新的组标识号</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n 新用户组 将用户组的名字改为新名字</li>
</ul>
</li>
<li>例如：groupmod –g 10000 -n group3 group2<ul>
<li>此命令将组group2的标识号改为10000，组名修改为group3</li>
</ul>
</li>
</ul>
<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="1、清空显示内容"><a href="#1、清空显示内容" class="headerlink" title="1、清空显示内容"></a>1、清空显示内容</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><ul>
<li>清除全屏内容</li>
</ul>
<h2 id="2、查看路径"><a href="#2、查看路径" class="headerlink" title="2、查看路径"></a>2、查看路径</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul>
<li>Print Working Directory  打印工作目录</li>
<li>显示当前文件的路径</li>
</ul>
<h2 id="3、显示文件"><a href="#3、显示文件" class="headerlink" title="3、显示文件"></a>3、显示文件</h2><h3 id="ls-list"><a href="#ls-list" class="headerlink" title="ls   (list)"></a>ls   (list)</h3><ul>
<li>列出当前目录所有文件夹和文件</li>
</ul>
<img src="/posts/638d4d8a/image-20230725210604931.png" class="">

<h3 id="ll-list-long"><a href="#ll-list-long" class="headerlink" title="ll    (list long)"></a>ll    (list long)</h3><ul>
<li>列出当前目录所有文件和文件夹的详细信息</li>
</ul>
<h3 id="ls-a-list-all"><a href="#ls-a-list-all" class="headerlink" title="ls -a   (list all)"></a>ls -a   (list all)</h3><ul>
<li>列出当前目录所有的文件包括隐藏文件</li>
</ul>
<h3 id="ll-a"><a href="#ll-a" class="headerlink" title="ll - a"></a>ll - a</h3><ul>
<li><p>(列出当前目录所有的文件包括隐藏文件得详细信息)</p>
</li>
<li><p>前面带 . 的为隐藏文件</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230725210839326.png" class="">

<h3 id="ls-–help"><a href="#ls-–help" class="headerlink" title="ls –help"></a>ls –help</h3><ul>
<li>ls –help” 是用于查看 ls 命令的<strong>帮助文档</strong>。在 Linux 终端中，这个命令可以显示 ls 命令的使用方法、选项和参数说明，以及其他相关的信息。</li>
</ul>
<h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><ul>
<li><p>统计</p>
</li>
<li><p>查看文件信息</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727184316885.png" class="">

<h3 id="不同的文件，有不同的颜色"><a href="#不同的文件，有不同的颜色" class="headerlink" title="不同的文件，有不同的颜色"></a>不同的文件，有不同的颜色</h3><img src="/posts/638d4d8a/image-20230727184609219.png" class="">

<h2 id="4、文件及目录操作"><a href="#4、文件及目录操作" class="headerlink" title="4、文件及目录操作"></a>4、文件及目录操作</h2><ul>
<li>创建、切换路径、复制粘贴、剪切、重命名、显示文件内容、显示文件大小</li>
</ul>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><ul>
<li>创建空文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch newfile</span><br></pre></td></tr></table></figure>

<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul>
<li>make directory  创建文件夹</li>
<li>mkdir -p 可以创建多级文件夹<ul>
<li>p	–parents，递归创建目录</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir aa</span><br><span class="line"><span class="comment"># 创建多级目录</span></span><br><span class="line">mkdir aa/bb/cc/dd</span><br></pre></td></tr></table></figure>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul>
<li><p>change directory   切换目录</p>
</li>
<li><p>切换目录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户的家目录</span></span><br><span class="line">cd</span><br><span class="line">cd /root</span><br><span class="line">cd ~</span><br><span class="line"><span class="comment"># 切换到普通用户的家目录</span></span><br><span class="line">cd /home/普通用户</span><br><span class="line"><span class="comment"># 切换到根目录</span></span><br><span class="line">cd /</span><br><span class="line"><span class="comment"># 切换到上一级</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="comment"># 切换到上一级的上一级</span></span><br><span class="line">cd ../../</span><br><span class="line"><span class="comment"># 绝对路径切换</span></span><br><span class="line">cd /user/local</span><br><span class="line"><span class="comment"># 相对路径</span></span><br><span class="line">cd ../文件夹</span><br><span class="line"><span class="comment"># 进入当前文件夹下的其他文件夹</span></span><br><span class="line">cd ./文件夹</span><br><span class="line">cd 文件夹</span><br><span class="line"><span class="comment"># 返回上一次所处文件夹</span></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure>

<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul>
<li><p>remove  移除</p>
</li>
<li><p>删除文件\文件夹</p>
</li>
<li><p>使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rm 文件名</span><br><span class="line"><span class="comment"># 强制删除文件</span></span><br><span class="line"><span class="comment"># force</span></span><br><span class="line">rm -f 文件名</span><br><span class="line"><span class="comment"># 删除目录（递归删除），需要确认</span></span><br><span class="line"><span class="comment"># recursive</span></span><br><span class="line">rm -r  aa/bb/cc</span><br><span class="line"><span class="comment"># 强制删除目录</span></span><br><span class="line">rm -rf aa/bb/cc</span><br></pre></td></tr></table></figure>

<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul>
<li><p>copy</p>
</li>
<li><p>复制粘贴</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制粘贴文件到aa目录中</span></span><br><span class="line">cp a.txt aa/</span><br><span class="line"><span class="comment"># 复制粘贴aa文件夹到bb中</span></span><br><span class="line"><span class="comment"># -r  recursive</span></span><br><span class="line">cp -r aa bb/</span><br></pre></td></tr></table></figure>

<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><ul>
<li>move </li>
<li>剪切的意思，如果指定新的文件名，则移动过去，并会重命名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果path2/newname不存在，则会创建出来</span></span><br><span class="line">mv  &lt;path1/oldname&gt;    &lt;path2/newname&gt;</span><br></pre></td></tr></table></figure>

<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><ul>
<li>Secure Copy Protocol 安全复制协议</li>
<li>远程复制</li>
<li>它是一个用于在本地主机和远程主机之间进行安全复制文件的命令行工具。scp 命令使用 SSH 协议进行数据传输，因此文件在传输过程中是被加密的，提供了更高的安全性。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从本地复制到远程 </span></span><br><span class="line">scp /home/test/*.sh    root@<span class="number">172.19</span><span class="number">.2</span><span class="number">.75</span>:/home/root </span><br><span class="line"><span class="comment"># 从远程复制到本地 </span></span><br><span class="line">scp root@/<span class="number">172.19</span><span class="number">.2</span><span class="number">.75</span>:/home/root/*.txt   /home/test</span><br><span class="line"><span class="comment"># 从远程到远程 </span></span><br><span class="line">scp root@<span class="number">192.168</span><span class="number">.21</span><span class="number">.1</span>:/root/test/*.sh root@<span class="number">192.168</span><span class="number">.31</span><span class="number">.1</span>:/root/test</span><br><span class="line"><span class="comment"># 显示进度在scp后添加-v； verbose 冗长的</span></span><br><span class="line"><span class="comment"># 复制目录在scp后添加-r： recursive </span></span><br></pre></td></tr></table></figure>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul>
<li>concatenate  连接</li>
<li>显示文本文件的内容</li>
<li>也可以用于将多个文件内容合并输出，或者将内容重定向到其他文件中。<ul>
<li>重定向<ul>
<li>“&gt;”  ：覆盖重写</li>
<li>“&gt;&gt;”：追加写</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示文件内容</span></span><br><span class="line">cat 文件名</span><br><span class="line"><span class="comment"># 将a.txt和b.txt的内容覆盖写到/追加到c.txt中</span></span><br><span class="line">cat a.txt b.txt &gt; c.txt</span><br><span class="line">cat a.txt b.txt &gt;&gt; c.txt</span><br><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line"><span class="comment"># number</span></span><br><span class="line">cat -b a.txt</span><br></pre></td></tr></table></figure>

<h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><ul>
<li>显示文本内容（cat的倒序输出）</li>
</ul>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul>
<li>tail 尾巴</li>
<li>显示末尾文本内容</li>
<li>显示完成后并不会停止，需要终止程序运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示末尾10行</span></span><br><span class="line">tail -10f a.txt</span><br></pre></td></tr></table></figure>

<h3 id="tailf"><a href="#tailf" class="headerlink" title="tailf"></a>tailf</h3><ul>
<li>和tail一样的作用，只不过表达不一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示末尾10行</span></span><br><span class="line">tailf <span class="number">10</span> a.txt</span><br></pre></td></tr></table></figure>

<h3 id="more-less"><a href="#more-less" class="headerlink" title="more&#x2F;less"></a>more&#x2F;less</h3><ul>
<li>回车一次显示一部分</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">more a.txt</span><br><span class="line">less a.txt</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230727193418935.png" class="">

<h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><ul>
<li>disk usage 磁盘使用情况</li>
<li>显示文件大小<ul>
<li>模4k，达不到4k大小的文件，也会占用4k的空间</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计全部目录及其子目录下的每个档案所占的磁盘空间</span></span><br><span class="line"><span class="comment"># -h   human；以人们习惯的方式进行展示</span></span><br><span class="line">du -h</span><br><span class="line"><span class="comment"># 统计对应文件的磁盘空间</span></span><br><span class="line">du -h directory</span><br></pre></td></tr></table></figure>

<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><ul>
<li>disk free 空闲磁盘</li>
<li>显示文件系统的磁盘空间使用情况。df 命令会列出文件系统的挂载点、总大小、已使用空间、可用空间以及文件系统类型等</li>
</ul>
<img src="/posts/638d4d8a/image-20230727193920519.png" class="">

<h3 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h3><ul>
<li>进行文本编辑</li>
<li>vi和vim的区别是，vim进入文件，会显示颜色</li>
<li>vim总共有三种模式：命令模式、插入模式、末行模式<ul>
<li>通过vim命令打开文件即进入<strong>命令模式</strong>，命令模式下可以进行复制粘贴删除等功能</li>
<li>在命令模式按i，可以进入<strong>插入模式</strong>，插入模式可以进行文件编辑</li>
<li>在插入模式按ESC键</li>
<li>命令模式按:冒号，可以进入<strong>末行模式</strong>，末行模式主要进行文件保存、退出或查找替换</li>
</ul>
</li>
</ul>
<h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><ul>
<li><code>who</code> 是一个用于显示当前登录到系统的用户信息的命令。在 Linux&#x2F;Unix 系统中，<code>who</code> 命令通常用于查看当前登录用户的详细列表，包括用户名、终端、登录时间等信息。</li>
</ul>
<img src="/posts/638d4d8a/image-20230729145832928.png" class="">

<h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><ul>
<li><p>wordcount</p>
</li>
<li><p><code>wc</code> 是一个用于统计文件中行数、单词数和字符数的命令。在 Linux&#x2F;Unix 系统中，<code>wc</code> 命令通常用于查看文件的文本统计信息。</p>
<p>常用的选项包括：</p>
<ul>
<li><code>-l</code>：统计行数。</li>
<li><code>-w</code>：统计单词数。</li>
<li><code>-c</code>：统计字符数。</li>
</ul>
</li>
</ul>
<h1 id="Linux常用工具"><a href="#Linux常用工具" class="headerlink" title="Linux常用工具"></a>Linux常用工具</h1><h2 id="1、vim"><a href="#1、vim" class="headerlink" title="1、vim"></a>1、vim</h2><ul>
<li><p>Vim（Vi IMproved）文本编辑器</p>
</li>
<li><p>nohlsearch 关闭文本搜索后的黄色光标</p>
<ul>
<li>no highlight search  关闭突出搜索</li>
<li>在末行模式下输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:nohlsearch</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="/posts/638d4d8a/image-20230727194724286-1692155590711.png" class="">



<img src="/posts/638d4d8a/image-20230727194425502-1692155580085.png" class="">



<img src="/posts/638d4d8a/image-20230727194517260.png" class="">



<img src="/posts/638d4d8a/image-20230727200849580.png" class="">



<img src="/posts/638d4d8a/image-20230727200919785.png" class="">



<img src="/posts/638d4d8a/image-20230727200934622.png" class="">



<img src="/posts/638d4d8a/image-20230727201038649.png" class="">



<img src="/posts/638d4d8a/image-20230731090649262.png" class="" title="image-20230731090649262">

<ul>
<li>Home行首</li>
<li>End行尾</li>
</ul>
<h4 id="文件中永久显示行号"><a href="#文件中永久显示行号" class="headerlink" title="文件中永久显示行号"></a>文件中永久显示行号</h4><ul>
<li>创建 .vimrc文件（隐藏文件）</li>
<li>“vimrc” 的全称是 “Vim Run Commands”。</li>
<li>用户可以在 vimrc 文件中设置各种选项，例如设置缩进、语法高亮、键盘映射、颜色方案等</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 步骤</span></span><br><span class="line">cd ~</span><br><span class="line">vim .vimrc</span><br><span class="line"><span class="comment"># 在其中添加</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure>

<h2 id="2、压缩解压"><a href="#2、压缩解压" class="headerlink" title="2、压缩解压"></a>2、压缩解压</h2><ul>
<li>命令：tar  [选项]  文件&#x2F;目录</li>
</ul>
<h4 id="2-1-打包"><a href="#2-1-打包" class="headerlink" title="2.1 打包"></a>2.1 打包</h4><ul>
<li><p>选项 “-cvf” 一般是习惯用法</p>
</li>
<li><p>打包时需要指定打包之后的文件名，而且要用 “.tar” 作为扩展名</p>
</li>
<li><p>注意 f 后面一定要跟包名</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727201607999.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">tar -cvf 包名 文件<span class="number">1</span>/目录<span class="number">1</span> 文件<span class="number">2</span>/目录</span><br></pre></td></tr></table></figure>

<h4 id="2-2-压缩"><a href="#2-2-压缩" class="headerlink" title="2.2 压缩"></a>2.2 压缩</h4><ul>
<li><strong>gzip压缩命令不能直接压缩目录</strong>，必须先用 tar 命令将目录打包，然后才能用 gzip 命令对打包文件进行压缩</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip aa.tar</span><br></pre></td></tr></table></figure>

<ul>
<li>tar -zcvf xxx.tar.gz  目录 ，这种格式可以直接压缩目录</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包目录</span></span><br><span class="line">tar -zcvf ee.tar.gz aa</span><br></pre></td></tr></table></figure>

<h4 id="2-3-解打包操作"><a href="#2-3-解打包操作" class="headerlink" title="2.3 解打包操作"></a>2.3 解打包操作</h4><ul>
<li><p>对 tar 包做解打包操作</p>
</li>
<li><p>打包和打包相比，只是把打包选项 “-cvf” 更换为 “-xvf”</p>
</li>
<li><p>想要指定解压位置，则需要使用 “-C(大写)” 选项</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解打包操作</span></span><br><span class="line">tar -xvf aa.tar -C /temp</span><br></pre></td></tr></table></figure>

<h4 id="2-4解压缩操作"><a href="#2-4解压缩操作" class="headerlink" title="2.4解压缩操作"></a>2.4解压缩操作</h4><ul>
<li><p>-z：压缩和解压缩 “.tar.gz” 格式；</p>
<p>-j：压缩和解压缩 “.tar.bz2”格式。</p>
</li>
<li><p>常用 tar -zxvf 包名 -C  解压路径</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压到当前目录的aa目录下</span><br><span class="line">tar -zxvf bb.tar.gz ./aa</span><br></pre></td></tr></table></figure>

<h2 id="3、netstat"><a href="#3、netstat" class="headerlink" title="3、netstat"></a>3、netstat</h2><ul>
<li>netstat命令是一个监控TCP&#x2F;IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。</li>
<li>常用选项：-nplt<ul>
<li><code>-n</code>: numeric，以数值形式显示 IP 地址和端口号。</li>
<li><code>-p</code>: process，显示对应的进程信息，即查看占用端口的进程名称。</li>
<li><code>-l</code>: listen，只显示监听状态的端口。</li>
<li><code>-t</code>: TCP，只显示 TCP 协议相关的连接。</li>
<li><code>-u</code>: UDP，只显示 UDP 协议相关的连接。</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727205255514.png" class="">

<h2 id="4、ps"><a href="#4、ps" class="headerlink" title="4、ps"></a>4、ps</h2><ul>
<li><p>process status  进程状态</p>
</li>
<li><p>用于显示当前进程的状态，类似于 windows 的任务管理器。</p>
</li>
<li><p>常用参数：</p>
<ul>
<li><p>-aux 显示所有包含其他使用者的进程</p>
<ul>
<li><p><code>a</code>: all processes，显示所有用户的所有进程，包括其他用户的进程。</p>
<p><code>u</code>: user-oriented format，以用户为导向的格式显示进程信息。</p>
<p><code>x</code>: no controlling terminal，显示无控制终端的进程，通常用于显示后台进程。</p>
</li>
</ul>
</li>
<li><p>-ef </p>
<ul>
<li><code>-e</code>: 显示所有进程，包括其他用户的进程。</li>
<li><code>-f</code>: 显示完整的进程信息，包括进程的详细信息，如进程号、父进程号、用户、CPU 使用率、内存占用等。</li>
</ul>
</li>
</ul>
</li>
<li><p><code>ps</code>是用来查看当前进程状态的命令</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230728101020819.png" class="">

<ul>
<li>在 <code>ps -ef</code> 中，显示所有进程，包括其他用户的进程，并且不显示与终端无关的进程。</li>
</ul>
<img src="/posts/638d4d8a/image-20230728100939773.png" class="" title="image-20230728100939773">

<ul>
<li><code>ps -aux</code> 中，除了显示所有进程和完整的进程信息外，还显示与终端无关的进程。</li>
</ul>
<img src="/posts/638d4d8a/image-20230728101006301.png" class="" title="image-20230728101006301">

<h2 id="5、find"><a href="#5、find" class="headerlink" title="5、find"></a>5、find</h2><ul>
<li>命令用于在指定目录下查找文件和目录。</li>
<li>格式：find  路径  -name 文件名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在root搜索名字中含有txt的文件</span></span><br><span class="line">find /root -name a.txt</span><br></pre></td></tr></table></figure>

<h2 id="6、whereis"><a href="#6、whereis" class="headerlink" title="6、whereis"></a>6、whereis</h2><ul>
<li><code>whereis</code>是一个在Linux和Unix系统中用来查找二进制程序（可执行文件）、源代码以及帮助文档的命令。它的作用是快速定位特定命令、程序或文件在系统中的位置。</li>
<li>可以用来查找命令的位置</li>
<li>注意：whereis会查找位于环境变量中的二进制文件<ul>
<li><code>pwd</code>命令的可执行文件位于<code>/usr/bin/pwd</code>。</li>
<li>帮助文档位于<code>/usr/share/man/man1/pwd.1p.gz</code>。</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727211150030.png" class="">

<h1 id="Linux-常用操作"><a href="#Linux-常用操作" class="headerlink" title="Linux 常用操作"></a>Linux 常用操作</h1><ul>
<li>查看centos版本信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/centos-release</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230730171241699.png" class="">

<h2 id="1、yum"><a href="#1、yum" class="headerlink" title="1、yum"></a>1、yum</h2><ul>
<li><code>yum</code>可以帮助用户搜索、安装、更新和删除软件包，并管理系统的软件包依赖关系。通过 <code>yum</code>，用户可以方便地从软件源中获取所需的软件包，并在系统中安装它们。</li>
</ul>
<h4 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h4><ul>
<li>安装：<code>yum install 包名</code></li>
<li>卸载：<code>yum remove 包名</code></li>
<li>更新：<code>yum update 包名</code></li>
<li>显示已配置的源：<code>yum repolist</code></li>
<li>列出安装的包：<code>yum list</code><ul>
<li><code>yum list |grep &quot;关键字&quot;</code></li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230730163321077.png" class="" title="image-20230730163321077">

<ul>
<li><p>查看软件包的详细信息:<code>yum info 包名</code>: 。</p>
</li>
<li><p>查看帮助文档：yum –help</p>
</li>
<li><p><code>yum</code> 会自动从配置好的软件源中下载并安装软件包，因此在使用之前，请确保系统已正确配置了可用的<strong>软件源</strong>。</p>
</li>
<li><p>安装telnet</p>
<ul>
<li><p>telnet ：和ssh差不多，用来远程连接，但是安全性不高，可以用来做端口测试</p>
</li>
<li><pre><code class="sh"># 测试指定ip的端口是否被占用
# 如果被占用则会卡住，反之输出拒绝连接
telnet 192.168.175.100 22  
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 卡住，指定端口被占用</span><br><span class="line">    </span><br><span class="line">  -  master的22端口被xshell占用</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">![](Linux笔记/image-20230730164249051.png)</span><br><span class="line"></span><br><span class="line">- 没卡住，指定端口没被占用</span><br><span class="line">  </span><br><span class="line">  ![](Linux笔记/image-20230730164334687.png)</span><br><span class="line">  </span><br><span class="line">- 首先会下载一个rpm包</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">![](Linux笔记/image-20230730172211211.png)</span><br><span class="line"></span><br><span class="line">  - 可以通过yum和rpm卸载软件包</span><br><span class="line">  - yum是基于 rpm的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 yum来管理软件包。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.2 换源</span><br><span class="line"></span><br><span class="line">- 由于原网站在外网，所以换到阿里的镜像网站，提升下载速度</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>备份原有的软件源配置文件</p>
<ul>
<li>yum.repos.d   yum.repositories directory   yum的仓库目录</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<ul>
<li>从阿里官方网站下载对应系统版本的源配置文件<ul>
<li>“wget” 是一个用于从网络上下载文件的命令行工具。</li>
<li>“-O” 是 “wget” 命令的选项之一，用于指定保存下载文件的本地文件名。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>由于我们是非ECS（内部）用户，所以源配置文件中包含aliyuncs.com地址访问不了</li>
</ul>
<img src="/posts/638d4d8a/image-20230730164816754.png" class="" title="image-20230730164816754">

<ul>
<li>故移除url : aliyuncs.com<ul>
<li>“sed” 是 Stream Editor（流编辑器）的缩写，用于在文本流中进行查找、替换和编辑操作。</li>
<li>“sed -i -e” 是用于在文件中进行替换操作的 sed 命令的组合。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230730165344441.png" class="" title="image-20230730165344441">

<ul>
<li>重新构建本地缓存</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<ul>
<li>YUM 是基于 RPM 的高级包管理器，提供了更方便、自动化的软件包管理方式，并具备依赖解决的功能，因此在大多数情况下，推荐使用 YUM 来管理软件包。</li>
</ul>
<h2 id="2、systemctl"><a href="#2、systemctl" class="headerlink" title="2、systemctl"></a>2、systemctl</h2><ul>
<li><p>system control系统控制</p>
</li>
<li><p>管理系统以及用户的服务</p>
<ul>
<li><p>网络管理工具：NetworkManager</p>
<p>网络服务：network</p>
<p>防火墙：firewalld</p>
</li>
</ul>
</li>
<li><p>系统服务都在：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system该目录中</p>
<p>都是以xxx.service形式存在</p>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230730170533372.png" class="" title="image-20230730170533372">

<ul>
<li><code>lib</code>文件夹存放的是库文件（Library Files）</li>
<li>常用操作<ul>
<li>启动：<code>systemctl start firewalld</code></li>
<li>停止：<code>systemctl stop firewalld</code></li>
<li>重启：<code>systemctl restart firewalld</code></li>
<li>查看状态：<code>systemctl status firewalld</code></li>
<li>开机自启：<code>systemctl enable firewalld</code></li>
<li>取消开机自启：<code>systemctl disable firewalld</code></li>
</ul>
</li>
</ul>
<h2 id="3、更换主机名"><a href="#3、更换主机名" class="headerlink" title="3、更换主机名"></a>3、更换主机名</h2><ul>
<li>通过文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<ul>
<li>通过工具</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure>

<h2 id="4、映射"><a href="#4、映射" class="headerlink" title="4、映射"></a>4、映射</h2><ul>
<li>linux修改映射</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<ul>
<li>windows修改映射</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h2 id="5、修改环境变量"><a href="#5、修改环境变量" class="headerlink" title="5、修改环境变量"></a>5、修改环境变量</h2><ul>
<li><p>环境变量：本质上是很多路径</p>
<p>当系统执行命令时，会去环境变量中的路径里查找有无该命令，有即执行，没有就会提示命令找不到</p>
<p>配置环境变量就是告诉系统去哪些位置找我们需要的命令</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入管理环境变量的文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般配置在文件的尾部 先配置一个XXX_HOME，然后再将其HOME下的bin目录配置在环境变量PATH中</span></span><br><span class="line">XXX_HOME=/x/xx</span><br><span class="line">YYY_HOME=/y/yy</span><br><span class="line">export PATH=$XXX_HOME/bin:$YYY_HOME/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置完之后 <span class="built_in">source</span> 生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="6、安装JDK"><a href="#6、安装JDK" class="headerlink" title="6、安装JDK"></a>6、安装JDK</h2><ul>
<li><p>上传安装包到虚拟机</p>
<ul>
<li><p>rz -E</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 没有rz命令可以下载</span><br><span class="line">yum install lrzsz</span><br><span class="line">rz 是接收文件</span><br><span class="line">sz 是发送文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>xftp</p>
</li>
</ul>
</li>
<li><p>创建问价夹存放压缩包和解压后的文件</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/package</span><br><span class="line">mkdir /usr/local/soft</span><br></pre></td></tr></table></figure>

<ul>
<li>解压</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf /usr/local/package/jdk-8u171-linux-x64.tar.gz -C /usr/local/soft</span><br></pre></td></tr></table></figure>

<ul>
<li>修改环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入管理环境变量的文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件尾部加入以下内容</span></span><br><span class="line">JAVA_HOME=/usr/local/soft/jdk1.8.0_171</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出之后 <span class="built_in">source</span> 生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件（省略）</li>
<li>进行初始化工作（省略）</li>
<li>测试是否安装成功</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统中运行了哪些JAVA进程</span></span><br><span class="line">jps  <span class="comment">#  java process status 查看java进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看JAVA的版本号 </span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<img src="/posts/638d4d8a/image-20230730174650797.png" class="">

<h2 id="7、后台运行nohup"><a href="#7、后台运行nohup" class="headerlink" title="7、后台运行nohup"></a>7、后台运行nohup</h2><ul>
<li>no hang up 不挂起</li>
<li>将进程放在后台执行 不直接打印东西在控制台  一般带上重定向</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup sh test.sh &gt; xxx.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h2 id="8、定时调度crontab"><a href="#8、定时调度crontab" class="headerlink" title="8、定时调度crontab"></a>8、定时调度crontab</h2><ul>
<li><code>crontab</code> 是用于管理和设置定时任务的命令。</li>
<li>具体的选项如下<ul>
<li><code>crontab -e</code>：编辑当前用户的定时任务列表。</li>
<li><code>crontab -l</code>：列出当前用户的定时任务列表。</li>
<li><code>crontab -r</code>：删除当前用户的定时任务列表。</li>
<li><code>crontab -u &lt;user&gt;</code>：指定要操作的用户，用于以其他用户的身份管理定时任务。</li>
</ul>
</li>
<li>ctontab在线工具</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://tool.lu/crontab/</span><br></pre></td></tr></table></figure>

<ul>
<li>定时调度格式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * command</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">f1 第一个 * 分钟 (0 - 59)</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">f2 第二个 * 小时 (0 - 23)</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">第三个 * 一个月中的第几天 (1 - 31)</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">第四个 * 月份 (1 - 12)</span> </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">第五个 * 星期中星期几 (0 - 6) (星期天 为0)</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推</span></span><br><span class="line"> </span><br><span class="line"> 0 6-12/3 * 12 *   #表示 12月6点到12点 每隔三个小时的0分钟执行一次</span><br></pre></td></tr></table></figure>

<ul>
<li>进入页面写定时任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入后和vim界面一样的操作</span></span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<ul>
<li>查看已有的定时任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有的定时任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure>

<ul>
<li>定时执行脚本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入定时任务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每分钟将<span class="built_in">date</span>输出重定向到time.txt文件</span></span><br><span class="line">* * * * * date &gt; /root/time.txt</span><br></pre></td></tr></table></figure>

<h2 id="9、ssh"><a href="#9、ssh" class="headerlink" title="9、ssh"></a>9、ssh</h2><h2 id="10、免密登录"><a href="#10、免密登录" class="headerlink" title="10、免密登录"></a>10、免密登录</h2><h2 id="11、时区配置"><a href="#11、时区配置" class="headerlink" title="11、时区配置"></a>11、时区配置</h2><ul>
<li><p>查看当前时间：<code>date</code></p>
</li>
<li><p>查看当前时区：<code>timedatectl</code></p>
</li>
<li><p>查看所有时区：</p>
<ul>
<li><code>/usr/share</code> 是 Linux 系统中的一个常见目录，它主要用于存放与应用程序无关的数据文件，例如共享资源、帮助文档、图标、主题等等</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入存放时区的文件夹</span></span><br><span class="line">cd /usr/share/zoneinfo/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改时区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于阿里云NTP服务器同步时间</span></span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将时间写入硬件，避免重启失效</span></span><br><span class="line">clock -w</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="12、关键字抓取"><a href="#12、关键字抓取" class="headerlink" title="12、关键字抓取"></a>12、关键字抓取</h2><ul>
<li><p>格式：命令 | grep 关键字</p>
<ul>
<li>命令 	 表示要执行的命令，</li>
<li>|           表示管道，抓取的信息，会放入管道中</li>
<li>grep     表示抓取</li>
<li>关键字  表示要抓取信息的关键字</li>
</ul>
</li>
<li><p>ps -ef | grep 进程关键字</p>
<ul>
<li>抓取进程关键字</li>
</ul>
</li>
<li><p>ls | grep 文件关键字</p>
</li>
<li><p>等</p>
</li>
</ul>
<h1 id="Linux扩展知识"><a href="#Linux扩展知识" class="headerlink" title="Linux扩展知识"></a>Linux扩展知识</h1><h2 id="1、子网掩码"><a href="#1、子网掩码" class="headerlink" title="1、子网掩码"></a>1、子网掩码</h2><ul>
<li>三类地址</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip地址共 4个字节 32位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A类地址，第一个字节开头为0：十进制范围在0-127</span></span><br><span class="line"><span class="number">0</span> _ _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class="line"></span><br><span class="line"><span class="comment"># B类地址，第一个字节的前两位为10：十进制范围128-191</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> _ _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br><span class="line"></span><br><span class="line"><span class="comment"># C类地址，第一个字节的前三位为110：十进制范围192-223</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> _ _ _ _ _|_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _</span><br></pre></td></tr></table></figure>

<ul>
<li>子网掩码用来划分网络号和主机号<ul>
<li>ip地址分为网络号和主机号</li>
<li>数据包发送时，通过网络号找到对应的地区，再通过主机号找到对应主机接收数据</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A类地址的子网掩码</span></span><br><span class="line"><span class="comment"># 一个A类地址可以分配255*225*225个主机号，所以一个A类地址可以划分255*225*225个ip地址</span></span><br><span class="line"><span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">11111111.00000000</span><span class="number">.00000000</span><span class="number">.00000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B类地址的子网掩码</span></span><br><span class="line"><span class="comment"># 一个B类地址可以分配255*225个主机号，所以一个B类地址可以划分255*225个ip地址</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">11111111.11111111</span><span class="number">.00000000</span><span class="number">.00000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C类地址的子网掩码</span></span><br><span class="line"><span class="comment"># 一个C类地址可以分配255*225个主机号，所以一个C类地址可以划分255个ip地址</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.00000000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子网掩码划分ip的列子</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假如一个子网掩码为</span></span><br><span class="line"><span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111100</span></span><br><span class="line"><span class="comment"># 那么它可以划分4个ip地址</span></span><br><span class="line">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class="number">0</span> <span class="number">0</span>  十进制：<span class="number">0</span></span><br><span class="line">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class="number">0</span> <span class="number">1</span>  十进制：<span class="number">1</span></span><br><span class="line">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class="number">1</span> <span class="number">0</span>  十进制：<span class="number">2</span></span><br><span class="line">_ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ _ _._ _ _ _ _ _ <span class="number">1</span> <span class="number">1</span>  十进制：<span class="number">3</span></span><br><span class="line"><span class="comment"># 由此子网掩码可以看出</span></span><br><span class="line"><span class="comment"># 以下四个ip同属于一个网络号</span></span><br><span class="line">十进制：<span class="number">192.168</span><span class="number">.175</span>.</span><br><span class="line">二进制：<span class="number">11000000.10101000</span><span class="number">.10101111</span><span class="number">.000000</span>_ _</span><br><span class="line"><span class="comment"># 分别有.0 .1 .2 .3四个主机号</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.175</span><span class="number">.0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.175</span><span class="number">.1</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.175</span><span class="number">.2</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.175</span><span class="number">.3</span></span><br><span class="line"><span class="comment"># 子网掩码与ip地址进行与操作，就能判断网络号和主机号了</span></span><br><span class="line"><span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111100</span></span><br><span class="line"><span class="comment"># 与操作</span></span><br><span class="line"><span class="number">11000000.10101000</span><span class="number">.10101111</span><span class="number">.00000011</span></span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># 通过结果可以看出，子网掩码中的1会将与ip地址对应的每一位都进行锁定（不变）</span></span><br><span class="line"><span class="number">11000000.10101000</span><span class="number">.10101111</span><span class="number">.00000000</span></span><br><span class="line"><span class="comment"># 所以网络号为</span></span><br><span class="line"><span class="number">11000000.10101000</span><span class="number">.10101111</span><span class="number">.000000</span></span><br><span class="line"><span class="comment"># 主机号为</span></span><br><span class="line"><span class="comment"># 00</span></span><br><span class="line"><span class="comment"># 01</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 可以根据1的个数表示此网络号</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.175</span><span class="number">.0</span>/<span class="number">30</span></span><br></pre></td></tr></table></figure>

<h2 id="2、SSH"><a href="#2、SSH" class="headerlink" title="2、SSH"></a>2、SSH</h2><ul>
<li>全称是 “Secure Shell”，它是一种网络协议，用于在不安全的网络中建立安全的连接，通常用于远程登录到服务器或计算机，并进行安全的数据传输和远程操作。通过 <code>ssh</code>，用户可以远程执行命令、上传和下载文件，以及进行其他安全的网络操作。它提供了一种加密的方式，确保通信过程中数据的机密性和完整性，防止被中间人攻击和窃听。</li>
</ul>
<h2 id="3、xshell"><a href="#3、xshell" class="headerlink" title="3、xshell"></a>3、xshell</h2><ul>
<li>Xshell是一款Windows平台上的SSH（Secure Shell）客户端软件。它允许用户通过SSH协议连接到远程计算机或服务器，并进行命令行操作、文件传输和远程管理等任务。Xshell提供了丰富的功能和工具，如多会话管理、自动登录、端口转发、多种认证方式、会话管理、脚本支持等，使得用户能够更加方便和高效地进行远程操作和管理。Xshell广泛用于系统管理员、开发人员和网络工程师等领域，是一款功能强大的远程连接工具。</li>
</ul>
<h2 id="4、更改xshell复制粘贴方式"><a href="#4、更改xshell复制粘贴方式" class="headerlink" title="4、更改xshell复制粘贴方式"></a>4、更改xshell复制粘贴方式</h2><img src="/posts/638d4d8a/image-20230727151820522.png" class="">

<h2 id="5、usr-bin和-bin中有什么区别"><a href="#5、usr-bin和-bin中有什么区别" class="headerlink" title="5、usr&#x2F;bin和&#x2F;bin中有什么区别"></a>5、usr&#x2F;bin和&#x2F;bin中有什么区别</h2><p>首先注意 <strong>usr 指 Unix System Resource</strong>，而不是user</p>
<ul>
<li><p>&#x2F;usr&#x2F;bin<br>系统预装的一些可执行程序，随系统升级会改变</p>
</li>
<li><p>&#x2F;usr&#x2F;local&#x2F;bin<br>用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到&#x2F;usr&#x2F;local目录下</p>
</li>
<li><p>如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响</p>
<ul>
<li><p>举个栗子：echo $PATH查看当前 PATH 环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/usr/local/sbin:/usr/local/<span class="built_in">bin</span>:/usr/sbin:/usr/<span class="built_in">bin</span>:/root/<span class="built_in">bin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>这里 &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin 优先于 &#x2F;usr&#x2F;bin&#x2F;git&#x2F;bin</p>
</li>
</ul>
</li>
<li><p>&#x2F;bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 &#x2F;usr 目录时就可以使用）</p>
</li>
<li><p>&#x2F;sbin 存放超级用户才能使用的系统程序</p>
</li>
<li><p>&#x2F;usr&#x2F;bin 存放所有用户都可用的应用程序</p>
</li>
<li><p>&#x2F;usr&#x2F;sbin 存放超级用户才能使用的应用程序</p>
</li>
<li><p>&#x2F;usr&#x2F;local&#x2F;bin 存放所有用户都可用的与本地机器无关的程序</p>
</li>
<li><p>&#x2F;usr&#x2F;local&#x2F;sbin 存放超级用户才能使用的与本地机器无关的程序</p>
</li>
</ul>
<h2 id="6、挂载"><a href="#6、挂载" class="headerlink" title="6、挂载"></a>6、挂载</h2><ul>
<li><p>指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录（最好是空目录），访问此目录就等同于访问设备文件。</p>
<p>Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 inux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统（文件目录结构）。</p>
<p>因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将Linux本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一的过程称为“挂载”。</p>
<p>如果不挂载，通过Linux系统中的图形界面系统可以查看找到硬件设备，但命令行方式无法找到。</p>
<p>并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。</p>
</li>
<li><p>mount命令可以查看系统中已经挂载的文件系统</p>
<ul>
<li>sysfs on &#x2F;sys type sysfs (rw)&lt;–含义是，将 sysfs 分区挂载到了&#x2F;sys 目录上，文件系统是 sysfs ，具有读写权限</li>
</ul>
</li>
</ul>
<img src="/posts/638d4d8a/image-20230727183225209.png" class="" title="image-20230727183225209">

<h2 id="7、-bashrc"><a href="#7、-bashrc" class="headerlink" title="7、.bashrc"></a>7、.bashrc</h2><ul>
<li>位于&#x2F;etc&#x2F;bashrc</li>
<li><code>.bashrc</code> 是 Bash Shell 的配置文件，用于配置用户在登录时所用的 Bash 环境。每个用户都可以在自己的主目录下创建一个名为 <code>.bashrc</code> 的文件，该文件中包含了一系列命令、别名、环境变量和其他设置，这些设置将在每次用户登录时自动加载。</li>
<li>如下图中，[root@master ~]#的显示，也是.bashrc文件中shell命令执行后的结果</li>
</ul>
<img src="/posts/638d4d8a/image-20230727214739399.png" class="" title="image-20230727214739399">

<ul>
<li>用户可以编辑 <code>.bashrc</code> 文件来定制自己的 Shell 环境，然后重新登录或执行 <code>source ~/.bashrc</code> 命令使配置生效。这样，每次用户登录时，Bash 将加载该文件并执行其中的命令，从而为用户提供定制化的 Shell 环境。</li>
</ul>
<h2 id="8、网络适配器"><a href="#8、网络适配器" class="headerlink" title="8、网络适配器"></a>8、网络适配器</h2><ul>
<li><p>网络适配器（Network Adapter）是计算机中用于连接计算机与网络之间的设备。它也被称为网络接口卡（Network Interface Card，NIC）、网络接口控制器（Network Interface Controller，NIC）或以太网卡（Ethernet Card）。</p>
</li>
<li><p>网络适配器允许计算机与局域网（LAN）或广域网（WAN）进行通信，它负责将计算机内部的数据包转换为网络可以识别和传输的格式，并将从网络接收的数据包转换为计算机可以理解的格式。</p>
</li>
<li><p>在现代计算机中，网络适配器通常是一个物理设备，可以是插入到计算机主板上的扩展卡，也可以是集成在主板上的芯片组。此外，一些计算机还支持无线网络适配器，允许计算机通过无线连接与网络通信。</p>
</li>
</ul>
<h2 id="9、为什么重新构建本地缓存"><a href="#9、为什么重新构建本地缓存" class="headerlink" title="9、为什么重新构建本地缓存"></a>9、为什么重新构建本地缓存</h2><p>重新构建本地缓存通常是指重新生成或重建系统或应用程序使用的缓存文件，这样可以确保缓存数据是最新的、准确的，并可能提高系统或应用程序的性能。常见的场景包括：</p>
<ol>
<li>缓存文件损坏：如果本地缓存文件损坏或出现问题，可能导致应用程序无法正常工作。重新构建缓存可以解决这个问题。</li>
<li>缓存过期：缓存通常是为了提高性能而创建的，但有时缓存的数据可能过期或不再准确。重新构建缓存可以更新数据并保持缓存的有效性。</li>
<li>更改数据源：如果数据源发生了更改，例如数据库中的数据有更新，那么本地缓存可能不再反映最新的数据。重新构建缓存可以从新数据源获取最新的数据。</li>
<li>清理旧数据：在某些情况下，应用程序可能会保留过多的缓存数据，导致占用过多的磁盘空间。重新构建缓存可以清理旧的、不再使用的数据。</li>
</ol>
<p>需要注意的是，在重新构建本地缓存时，可能会导致一定的性能损失，因为系统或应用程序需要重新生成缓存。因此，通常需要在适当的时间进行重新构建，以避免对系统性能造成过多影响。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark报错java.io.IOException_ Could not locate executable null_bin_winutils.exe in the Hadoop binaries</title>
    <url>/posts/bc5825f3.html</url>
    <content><![CDATA[<h1 id="本地IDEA上运行Spark的WordCount时报错"><a href="#本地IDEA上运行Spark的WordCount时报错" class="headerlink" title="本地IDEA上运行Spark的WordCount时报错"></a>本地IDEA上运行Spark的WordCount时报错</h1><h1 id="报错原因：缺少winutils-exe编译器"><a href="#报错原因：缺少winutils-exe编译器" class="headerlink" title="报错原因：缺少winutils.exe编译器"></a>报错原因：缺少winutils.exe编译器</h1><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案：."></a>解决方案：.</h1><ul>
<li><h3 id="1-下载解压hadoop"><a href="#1-下载解压hadoop" class="headerlink" title="1.下载解压hadoop"></a>1.下载解压hadoop</h3><ul>
<li>下载链接：<a href="https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4">https://pan.baidu.com/s/1jeEKWBF3ouYQJ2mTbME8pg?pwd=hes4</a><br>提取码：hes4</li>
<li>官网上下载的hadoop中缺少winutils.exe这里我已经添加进去</li>
</ul>
</li>
<li><h3 id="2-解压后复制解压路径，进去hadoop文件后再复制路径"><a href="#2-解压后复制解压路径，进去hadoop文件后再复制路径" class="headerlink" title="2.解压后复制解压路径，进去hadoop文件后再复制路径"></a>2.解压后复制解压路径，进去hadoop文件后再复制路径</h3></li>
<li><h3 id="3-进入到IDEA中"><a href="#3-进入到IDEA中" class="headerlink" title="3.进入到IDEA中"></a>3.进入到IDEA中</h3></li>
<li><img src="/posts/bc5825f3/2ea6f2e3bd9047b5b492e25b1ade73dd.png" class="" title="在这里插入图片描述">
<img src="/posts/bc5825f3/11841aceda8e43e8adfbeac278967917.png" class="" title="在这里插入图片描述"></li>
</ul>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>Spark</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>shell笔记</title>
    <url>/posts/c3711ab9.html</url>
    <content><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="第一部分-Shell简介"><a href="#第一部分-Shell简介" class="headerlink" title="第一部分 Shell简介"></a>第一部分 Shell简介</h2><ul>
<li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</p>
<p>Shell 既是一种命令语言，又是一种程序设计语言。</p>
<p>Shell和Python类似也是一门解释性语言</p>
</li>
</ul>
<h3 id="1、脚本开头"><a href="#1、脚本开头" class="headerlink" title="1、脚本开头"></a>1、脚本开头</h3><ul>
<li>指定脚本文件的Shell程序（解释器）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">或</span><br><span class="line">#!/bin/sh</span><br></pre></td></tr></table></figure>

<h3 id="2、执行脚本"><a href="#2、执行脚本" class="headerlink" title="2、执行脚本"></a>2、执行脚本</h3><ul>
<li>sh aaa.sh<ul>
<li>常用</li>
</ul>
</li>
<li>.&#x2F; aaa.sh<ul>
<li>脚本文件需要可执行权限，并且需要在当前文件夹中</li>
</ul>
</li>
<li>aaa.sh<ul>
<li>脚本文件需要放入环境变量中</li>
</ul>
</li>
</ul>
<h2 id="第二部分-基础语法"><a href="#第二部分-基础语法" class="headerlink" title="第二部分 基础语法"></a>第二部分 基础语法</h2><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><ul>
<li>Shell中每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。</li>
<li>在默认情况下，不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串</li>
</ul>
<h4 id="1-1-定义变量"><a href="#1-1-定义变量" class="headerlink" title="1.1 定义变量"></a>1.1 定义变量</h4><ul>
<li>定义变量的三种方式<ul>
<li><strong>注意等号两边不能有空格</strong></li>
<li>单引号中，即使是特殊字符也会识别成字符串，其作用如python中的 r””</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不带引号</span></span><br><span class="line">variable=value</span><br><span class="line"><span class="comment"># 带双引号</span></span><br><span class="line">variable=<span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="comment"># 带单引号</span></span><br><span class="line">variable=<span class="string">&#x27;value&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>命名规范<ul>
<li>变量名由数字、字母、下划线组成；</li>
<li>必须以字母或者下划线开头；</li>
<li>不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。</li>
</ul>
</li>
</ul>
<h4 id="1-2-引用变量"><a href="#1-2-引用变量" class="headerlink" title="1.2 引用变量"></a>1.2 引用变量</h4><ul>
<li>可以通过:$变量名、${变量名}。一般最好要加上{}</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=$&#123;a&#125;</span><br><span class="line">echo $&#123;b&#125;</span><br><span class="line"><span class="comment"># 输出10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不加{}，可能带来的影响</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加&#123;&#125;</span></span><br><span class="line">skill=<span class="string">&quot;java&quot;</span></span><br><span class="line">echo <span class="string">&quot;I am good at $&#123;skill&#125;web&quot;</span></span><br><span class="line">输出:<span class="string">&quot;I am good at javaweb&quot;</span></span><br><span class="line"><span class="comment"># 不加&#123;&#125;</span></span><br><span class="line">skill=<span class="string">&quot;java&quot;</span></span><br><span class="line">echo <span class="string">&quot;I am good at $skillweb&quot;</span></span><br><span class="line">输出：I am good at </span><br><span class="line"><span class="comment"># 变量名被识别为skillweb，由于无此变量，对应位置为空</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-单引号和双引号的区别"><a href="#1-3-单引号和双引号的区别" class="headerlink" title="1.3 单引号和双引号的区别"></a>1.3 单引号和双引号的区别</h4><ul>
<li>单引号’ ‘包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。</li>
<li>双引号” “包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。</li>
<li>输出也可以不带引号，和双引号一样的作用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">skill=<span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="comment"># 双引号</span></span><br><span class="line">echo <span class="string">&quot;I am good at $&#123;skill&#125;&quot;</span></span><br><span class="line">输出：I am good at java</span><br><span class="line"><span class="comment"># 单引号</span></span><br><span class="line">echo <span class="string">&#x27;I am good at $&#123;skill&#125;&#x27;</span></span><br><span class="line">输出：I am good at $&#123;skill&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-将命令执行结果赋值给变量"><a href="#1-4-将命令执行结果赋值给变量" class="headerlink" title="1.4 将命令执行结果赋值给变量"></a>1.4 将命令执行结果赋值给变量</h4><ul>
<li>Shell 支持将命令的执行结果赋值给变量<ul>
<li>&#96;&#96;的方式</li>
<li>$()的方式</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">variable=`pwd`</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">variable=$()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令运行结果赋值给变量</span></span><br><span class="line">echo `pwd`  <span class="comment"># /root/shell_code</span></span><br><span class="line">echo $(pwd)  <span class="comment"># /root/shell_code</span></span><br><span class="line"><span class="comment"># 删除变量，但是不能删除readonly关键字限制的变量（只读变量）</span></span><br><span class="line">unset age</span><br><span class="line">echo $&#123;age&#125;</span><br><span class="line">输出为空</span><br></pre></td></tr></table></figure>

<h4 id="1-5-传递参数"><a href="#1-5-传递参数" class="headerlink" title="1.5 传递参数"></a>1.5 传递参数</h4><ul>
<li>在指定脚本的时候，可以在文件名后面跟上一些参数，以空格隔开</li>
<li>获取参数<ul>
<li>${0}：获取文件名（包含路径）</li>
<li>${1}：获取文件名后面第一个参数</li>
<li>${n}：获取文件名后面第n个参数</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">echo $&#123;<span class="number">0</span>&#125;</span><br><span class="line">echo $&#123;<span class="number">1</span>&#125;</span><br><span class="line">echo $&#123;<span class="number">2</span>&#125;</span><br><span class="line">echo $&#123;<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 执行命令：sh variable.sh name age weight</span></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">variable.sh</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">weight</span><br></pre></td></tr></table></figure>

<ul>
<li><p>特殊字符处理参数说明</p>
<ul>
<li><p>$#获取参数的个数，但是不包括文件名</p>
</li>
<li><p>$*获取的是一个参数拼接的字符串</p>
</li>
<li><p>$@获取的是各个参数的字符串</p>
</li>
</ul>
</li>
</ul>
<img src="/posts/c3711ab9/image-20230728194954237.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">echo $<span class="comment">#</span></span><br><span class="line">echo $*</span><br><span class="line">echo $@</span><br><span class="line">echo $$</span><br><span class="line"><span class="comment"># 指定命令：sh variable.sh name age weight</span></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">name age weight</span><br><span class="line">name age weight</span><br><span class="line"><span class="number">15905</span></span><br></pre></td></tr></table></figure>

<ul>
<li>$*和$@的区别<ul>
<li>假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line">do</span><br><span class="line"> echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line">echo <span class="string">&quot;========&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$@&quot;</span></span><br><span class="line">do</span><br><span class="line"> echo $&#123;i&#125;</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">name age weight</span><br><span class="line">========</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">weight</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不带双引号，则$*和$@的结果一样</span></span><br><span class="line"><span class="comment"># 因为为 for i in item1 item2 item3，i会分别为item1 item2 item3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line">do</span><br><span class="line"> echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line">echo <span class="string">&quot;========&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $@</span><br><span class="line">do</span><br><span class="line"> echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">weight</span><br><span class="line">========</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">weight</span><br></pre></td></tr></table></figure>

<h3 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h3><ul>
<li><p>字符串是 Shell 编程中最常用的数据类型之一</p>
<p>除了数字和字符串，也没有其他类型了</p>
</li>
</ul>
<h4 id="2-1-获取字符串长度"><a href="#2-1-获取字符串长度" class="headerlink" title="2.1 获取字符串长度"></a>2.1 获取字符串长度</h4><ul>
<li>格式：$</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql笔记</title>
    <url>/posts/cff900a3.html</url>
    <content><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><ul>
<li>excel最多存104万行，1万列、</li>
</ul>
<h2 id="第一部分-MySql介绍和安装"><a href="#第一部分-MySql介绍和安装" class="headerlink" title="第一部分 MySql介绍和安装"></a>第一部分 MySql介绍和安装</h2><h3 id="1、MySQL介绍"><a href="#1、MySQL介绍" class="headerlink" title="1、MySQL介绍"></a>1、MySQL介绍</h3><h4 id="1-1-数据库"><a href="#1-1-数据库" class="headerlink" title="1.1 数据库"></a>1.1 数据库</h4><ul>
<li>数据库是数据的仓库</li>
<li>据库依据数据结构来组织数据,因为数据结构的存在,所以看到的数据是条理化的</li>
<li>根据数据结构的不同,数据库分为关系型数据库和非关系型数据库</li>
</ul>
<h4 id="1-2-关系型数据库"><a href="#1-2-关系型数据库" class="headerlink" title="1.2 关系型数据库"></a>1.2 关系型数据库</h4><ul>
<li>关系型数据库是依据关系模型创建数据库</li>
<li>关系模型就是一对一,一对多,多对多等关系模型,关系模型就是存储格式是以行列组成的二维表格,所以一个关系型数据库就是由二维表之间的联系所组成的一个数据组织</li>
</ul>
<h4 id="1-3-非关系型数据库"><a href="#1-3-非关系型数据库" class="headerlink" title="1.3 非关系型数据库"></a>1.3 非关系型数据库</h4><ul>
<li>由于关系型太大和复杂,所以一般使用“非关系型数据”来表示其他类型的数据库<br>菲关系型的模型比如:<ul>
<li>列模型:存储的数据是一列一列,关系型数据库以一行作为一个记录，列模型数据库以一列为一个记录</li>
<li>键值对模型:存储的数据是一个个键值对,比如name:lisi</li>
<li>文档类模型:以一个个文档来存储数据,类似于键值对</li>
</ul>
</li>
</ul>
<h4 id="1-4-MySQL概述"><a href="#1-4-MySQL概述" class="headerlink" title="1.4 MySQL概述"></a>1.4 MySQL概述</h4><ul>
<li>MySQL是一种开源关系型数据库管理系统，最初由瑞典MySQL AB公司的Michael Widenius和David Axmark于1995年创建。</li>
<li>MySQL以其速度、可靠性、灵活性和易用性而闻名，并广泛用于Web应用程序开发和其他需要高度可靠数据管理的应用程序中。</li>
</ul>
<h3 id="2、MySQL安装"><a href="#2、MySQL安装" class="headerlink" title="2、MySQL安装"></a>2、MySQL安装</h3><h4 id="2-1-MySQL安装和配置"><a href="#2-1-MySQL安装和配置" class="headerlink" title="2.1 MySQL安装和配置"></a>2.1 MySQL安装和配置</h4><h5 id="2-1-1-安装mysql5-7"><a href="#2-1-1-安装mysql5-7" class="headerlink" title="2.1.1 安装mysql5.7"></a>2.1.1 安装mysql5.7</h5><ul>
<li>从网上下载<code>mysql</code>的<code>yum</code>存储库<ul>
<li>-c，未下载完成则继续下载</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>mysql</code>的<code>yum</code>存储库<ul>
<li>-y yes ，表示y&#x2F;n选项执行yes</li>
<li>通过安装此 RPM 包，可以在系统中启用 <code>MySQL 5.7</code> 的官方存储库，然后使用 <code>yum</code> 命令来安装 <code>MySQL 5.7</code> 和其他相关的软件包</li>
<li>这个 RPM 包只是为了添加存储库，它本身并不包含 <code>MySQL 5.7</code> 的实际软件包。</li>
<li>这个存储库安装后，和yum的存储库在同一个文件夹里，也就是&#x2F;etc&#x2F;yum.repos.d&#x2F;</li>
</ul>
</li>
</ul>
<img src="/posts/cff900a3/image-20230731191501709.png" class="" title="image-20230731191501709">

<img src="/posts/cff900a3/image-20230731192045754.png" class="" title="image-20230731192045754">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用yum安装<code>mysql5.7</code></p>
<ul>
<li><code>nogpgcheck</code>，不检查软件包的<code>gpg</code>签名，也就是不进行安全验证</li>
<li>下图为mysql的依赖安装</li>
</ul>
<img src="/posts/cff900a3/image-20230731191806584.png" class="" title="image-20230731191806584.png"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y --nogpgcheck install mysql-community-server</span><br></pre></td></tr></table></figure>

<ul>
<li>卸载mysql的yum 存储库(repository)<ul>
<li>防止yum操作都会自动更新，需要把这个卸载掉</li>
<li>卸载后&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹中，mysql的yum存储库就会被删掉</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-启动并配置mysql"><a href="#2-1-2-启动并配置mysql" class="headerlink" title="2.1.2 启动并配置mysql"></a>2.1.2 启动并配置mysql</h5><ul>
<li>启动mysql服务<ul>
<li>mysql的服务在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;中，所以sytemctl命令可以控制</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机自启</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>

<ul>
<li>查看状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<ul>
<li>从mysqld.log文件中获取临时密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<img src="/posts/cff900a3/image-20230731192623335.png" class="" title="image-20230731192623335">

<ul>
<li>登录mysql<ul>
<li>-p后有空格会123456会被认为是数据库名</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">请输入密码：7,&gt;+0Od:XI&lt;L</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭密码复杂验证<ul>
<li>进入mysql客户端再进行</li>
<li><code>validate_password_policy</code> 是 <code>MySQL</code> 数据库中的一个系统变量，用于设置密码策略的参数<ul>
<li><code>0</code>：低强度。不执行密码强度检查，接受任何密码。</li>
</ul>
</li>
<li>将 <code>validate_password_length</code> 设置为 <code>1</code> 是一个非常低的密码最小长度要求，它要求密码至少只需要一个字符</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置密码<ul>
<li>修改当前登录用户的密码，其中：user() 方法将返回当前用户信息</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user user() identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开放root用户远程登录</p>
<ul>
<li>赋予远程连接权限，可以用<code>navicat</code>连接操作数据库</li>
<li><code>GRANT ALL PRIVILEGES</code>：该命令表示授予所有权限，即允许用户执行数据库中的任何操作，包括 SELECT、INSERT、UPDATE、DELETE 等。</li>
<li><code>ON *.*</code>：这里的 <code>*.*</code> 表示该授权适用于所有数据库（所有库的所有表）。</li>
<li><code>TO &#39;root&#39;@&#39;%&#39;</code>：这指定了接收权限的用户。在这里，’root’ 是用户名，’%’ 表示该用户可以从任何主机（IP 地址）连接到 MySQL 服务器。</li>
<li><code>IDENTIFIED BY &#39;123456&#39;</code>：这设置了用户 ‘root’ 的密码为 ‘123456’。</li>
<li><code>WITH GRANT OPTION</code>：这个选项允许用户 ‘root’ 授予其他用户与自己相同的权限。如果没有这个选项，用户 ‘root’ 将无法将自己的权限授予其他用户。</li>
</ul>
<p>需要特别注意的是，将 ‘root’ 用户的权限设置为 “ALL PRIVILEGES” 并允许从任何主机连接，是一个安全风险。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新权限</span></span><br><span class="line">flush privileges; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-修改mysql编码"><a href="#2-1-3-修改mysql编码" class="headerlink" title="2.1.3 修改mysql编码"></a>2.1.3 修改mysql编码</h5><ul>
<li><p>修改编码防止中文乱码</p>
</li>
<li><p>编辑配置文件：<code>vim  /etc/my.cnf</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br></pre></td></tr></table></figure>

<ul>
<li>重启mysql</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<ul>
<li>登录并查看mysql编码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">123456需替换为自己的密码</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需在MySQL的shell中执行</span></span><br><span class="line">show variables like &quot;%char%&quot;;</span><br></pre></td></tr></table></figure>

<img src="/posts/cff900a3/image-20230731194630101-1692105959933.png" class="">

<h5 id="2-1-4-mysql的卸载方式"><a href="#2-1-4-mysql的卸载方式" class="headerlink" title="2.1.4 mysql的卸载方式"></a>2.1.4 mysql的卸载方式</h5><ul>
<li>删除依赖包<ul>
<li>-qa query all</li>
<li>-i  insensitive  表示不区分大小写</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找mysql相关的安装包</span></span><br><span class="line">rpm -qa |grep -i mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对mysql相关的包进行移除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum会处理依赖，所以mysql-community-client-5.7.43-1.el7.x86_64即使不写上也会被删除</span></span><br><span class="line">yum remove mysql-community-server mysql-community-libs mysql-community-common</span><br></pre></td></tr></table></figure>

<ul>
<li>清理文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询残余mysql文件</span><br><span class="line">find / -name mysql</span><br><span class="line"># 删除查找出来的问价</span><br><span class="line">rm -rf 文件名</span><br></pre></td></tr></table></figure>

<h4 id="2-2-MySQL客户端的使用"><a href="#2-2-MySQL客户端的使用" class="headerlink" title="2.2 MySQL客户端的使用"></a>2.2 MySQL客户端的使用</h4><h5 id="2-2-1-linux进入客户端"><a href="#2-2-1-linux进入客户端" class="headerlink" title="2.2.1 linux进入客户端"></a>2.2.1 linux进入客户端</h5><ul>
<li>命令：<code>mysql -uroot -p123456</code></li>
</ul>
<h5 id="2-2-2-连接navicat"><a href="#2-2-2-连接navicat" class="headerlink" title="2.2.2 连接navicat"></a>2.2.2 连接navicat</h5><img src="/posts/cff900a3/image-20230731195153935.png" class="">

<h2 id="第二部分-数据库、表、列基本概念"><a href="#第二部分-数据库、表、列基本概念" class="headerlink" title="第二部分 数据库、表、列基本概念"></a>第二部分 数据库、表、列基本概念</h2><h3 id="1、MySQL数据库服务器、数据库和数据表的关系"><a href="#1、MySQL数据库服务器、数据库和数据表的关系" class="headerlink" title="1、MySQL数据库服务器、数据库和数据表的关系"></a>1、MySQL数据库服务器、数据库和数据表的关系</h3><ul>
<li>安装MySQL的C&#x2F;S模式，Client&#x2F;Service，用户端&#x2F;服务端</li>
</ul>
<img src="/posts/cff900a3/image-20230801190255233.png" class="">

<h3 id="2、DDL操作数据库"><a href="#2、DDL操作数据库" class="headerlink" title="2、DDL操作数据库"></a>2、DDL操作数据库</h3><ul>
<li>CRUD</li>
<li>切换数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-C-create-：创建"><a href="#2-1-C-create-：创建" class="headerlink" title="2.1 C(create)：创建"></a>2.1 C(create)：创建</h4><ul>
<li>通过sql创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CTREATE DATABASES [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] students;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建时指定字符集</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTREATE DATABASES [IF NOT EXISTS] students DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-R-retrieve-：查询"><a href="#2-2-R-retrieve-：查询" class="headerlink" title="2.2 R(retrieve)：查询"></a>2.2 R(retrieve)：查询</h4><ul>
<li>显示所有数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES</span><br></pre></td></tr></table></figure>

<ul>
<li>显示数据库创建语句<ul>
<li>可以查看字符集</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_namae</span><br></pre></td></tr></table></figure>

<ul>
<li>显示当前数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>

<h4 id="2-3-U-update-：修改"><a href="#2-3-U-update-：修改" class="headerlink" title="2.3 U(update)：修改"></a>2.3 U(update)：修改</h4><ul>
<li>修改数据库的字符集</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE students CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-D-delete-：删除"><a href="#2-4-D-delete-：删除" class="headerlink" title="2.4 D(delete)：删除"></a>2.4 D(delete)：删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE  [IF EXISTS]  db_name</span><br></pre></td></tr></table></figure>

<h3 id="3、DDL操作数据表"><a href="#3、DDL操作数据表" class="headerlink" title="3、DDL操作数据表"></a>3、DDL操作数据表</h3><h4 id="3-1-C-create-：创建"><a href="#3-1-C-create-：创建" class="headerlink" title="3.1  C(create)：创建"></a>3.1  C(create)：创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]  students(</span><br><span class="line">  id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  gender <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  clazz <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>指定数据表创建和修改的时间</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">created_at DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">updated_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>复制表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student2 <span class="keyword">like</span> student</span><br></pre></td></tr></table></figure>

<ul>
<li>复制表结构和表数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student2 <span class="keyword">as</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>

<h4 id="3-2-R-retrieve-：查询"><a href="#3-2-R-retrieve-：查询" class="headerlink" title="3.2 R(retrieve)：查询"></a>3.2 R(retrieve)：查询</h4><ul>
<li>显示所有数据表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span>  tables;</span><br></pre></td></tr></table></figure>

<ul>
<li>显示建表语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure>

<ul>
<li>显示表结构(discribe)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-U-update-：修改"><a href="#3-3-U-update-：修改" class="headerlink" title="3.3  U(update)：修改"></a>3.3  U(update)：修改</h4><ul>
<li>增加列，需要指定列的类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> length <span class="type">float</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列类型,属性</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students modify length <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除列</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> length;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  student change id sid <span class="type">varchar</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rename <span class="keyword">table</span> students <span class="keyword">to</span> student;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-D-delete-：删除"><a href="#3-4-D-delete-：删除" class="headerlink" title="3.4 D(delete)：删除"></a>3.4 D(delete)：删除</h4><ul>
<li>删除数据表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span> ] students;</span><br></pre></td></tr></table></figure>

<h2 id="第三部分-数据类型和约束"><a href="#第三部分-数据类型和约束" class="headerlink" title="第三部分 数据类型和约束"></a>第三部分 数据类型和约束</h2><h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数值类型：INT、BIGINT、FLOAT、DOUBLE，DECIMAL等。</span></span><br><span class="line"><span class="comment">-- 字符串类型：CHAR、VARCHAR、TEXT等。</span></span><br><span class="line"><span class="comment">-- 日期和时间类型：DATE、DATETIME、TIMESTAMP等。</span></span><br><span class="line"><span class="comment">-- 二进制类型：BLOB、LONGBLOB、VARBINARY等。</span></span><br><span class="line"><span class="comment">-- 枚举类型：ENUM。</span></span><br><span class="line"><span class="comment">-- 集合类型：SET。</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-数值类型"><a href="#1-1-数值类型" class="headerlink" title="1.1 数值类型"></a>1.1 数值类型</h4><ul>
<li>DECIMAL(10,2)，表示小数，10为全部位数，2为小数位数</li>
</ul>
<img src="/posts/cff900a3/image-20230801191635470.png" class="">

<h4 id="1-2-字符类型"><a href="#1-2-字符类型" class="headerlink" title="1.2 字符类型"></a>1.2 字符类型</h4><ul>
<li>UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节</li>
<li>char是定长字符串，varchar为变长字符串<ul>
<li>VARCHAR(255)，表示最大长度，可以根据值的长度动态变化</li>
</ul>
</li>
</ul>
<img src="/posts/cff900a3/image-20230801191658112.png" class="">

<h4 id="1-3日期和时间类型"><a href="#1-3日期和时间类型" class="headerlink" title="1.3日期和时间类型"></a>1.3日期和时间类型</h4><img src="C:\Users\dongjiaxin\AppData\Roaming\Typora\typora-user-images\image-20230801191850098.png" alt="image-20230801191850098" style="zoom:80%;" />

<h3 id="2、约束"><a href="#2、约束" class="headerlink" title="2、约束"></a>2、约束</h3><h4 id="2-1-PRIMARY-KEY-（主键）"><a href="#2-1-PRIMARY-KEY-（主键）" class="headerlink" title="2.1 PRIMARY KEY （主键）"></a>2.1 PRIMARY KEY （主键）</h4><ul>
<li>用于唯一标识表中的每一行数据，通常使用整数类型的列。不能为空，且不能重复</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">PRIMARY</span> KEY,</span><br></pre></td></tr></table></figure>

<h4 id="2-2-FOREIGN-KEY-外键"><a href="#2-2-FOREIGN-KEY-外键" class="headerlink" title="2.2 FOREIGN KEY (外键)"></a>2.2 FOREIGN KEY (外键)</h4><ul>
<li>用于定义列与其他表的关系，保证引用完整性。</li>
<li>用于建立表与表之间的关联关系。</li>
<li>外键，关联的字段类型必须一样</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">    id <span class="type">INT</span> ,</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">	order_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customers(id)  <span class="comment">-- customer_id设置为外键</span></span><br><span class="line">    													<span class="comment">-- id被引用字段</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>外键的级联</p>
<ul>
<li><p>cascade</p>
</li>
<li><p>当设置为外键为级联方式，</p>
<p>删除或更新被引用的字段的某个值时，也会对设置为外键的字段的相同值，做出同样的删除或更新操作</p>
</li>
</ul>
</li>
</ul>
<h4 id="2-3-UNIQUE-（唯一键）"><a href="#2-3-UNIQUE-（唯一键）" class="headerlink" title="2.3 UNIQUE （唯一键）"></a>2.3 UNIQUE （唯一键）</h4><ul>
<li>保证列中的所有值都是唯一的，可以包含空值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-AUTO-INCREMENT-（自动增长）"><a href="#2-4-AUTO-INCREMENT-（自动增长）" class="headerlink" title="2.4 AUTO_INCREMENT （自动增长）"></a>2.4 AUTO_INCREMENT （自动增长）</h4><ul>
<li>自动增长只能给整数类型的主键</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT</span><br></pre></td></tr></table></figure>

<h4 id="2-5-NOT-NULL-（非空）"><a href="#2-5-NOT-NULL-（非空）" class="headerlink" title="2.5 NOT NULL （非空）"></a>2.5 NOT NULL （非空）</h4><ul>
<li>确保列中不包含空值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-DEFUALT-（默认值）"><a href="#2-6-DEFUALT-（默认值）" class="headerlink" title="2.6 DEFUALT （默认值）"></a>2.6 DEFUALT （默认值）</h4><ul>
<li>在插入新行时，如果没有指定列的值，则使用默认值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">role ENUM(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-CEACK-（检查）"><a href="#2-7-CEACK-（检查）" class="headerlink" title="2.7 CEACK （检查）"></a>2.7 CEACK （检查）</h4><ul>
<li>用于确保列中的值满足特定的条件，可以使用各种表达式和运算符来定义。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">age <span class="type">INT</span> <span class="keyword">CHECK</span>(age <span class="operator">&gt;=</span> <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h2 id="第四部分-SQL语言基础"><a href="#第四部分-SQL语言基础" class="headerlink" title="第四部分 SQL语言基础"></a>第四部分 SQL语言基础</h2><h3 id="1、SQL语言简介"><a href="#1、SQL语言简介" class="headerlink" title="1、SQL语言简介"></a>1、SQL语言简介</h3><ul>
<li>Structured Query Language, 结构化查询语言</li>
<li>SQL是用来存取关系数据库的语言，具有查询、操纵、定义和控制关系型数据库的四方面功能</li>
</ul>
<h3 id="2、SQL分类"><a href="#2、SQL分类" class="headerlink" title="2、SQL分类"></a>2、SQL分类</h3><ul>
<li>DDL<br>数据定义语言 - Data Definition Language<br>是用于定义和管理数据库、表结构的语言，如数据表、视图、索引等</li>
<li>DML<br>数据处理语言 - Data Manipulation Language<br>在数据库表中更新，增加和删除记录<br>如 update， insert， delete</li>
<li>DCL<br>数据控制语言 – Data Control Language<br>指用于设置用户权限和控制事务语句<br>如 grant，revoke，if…else，while，begin transaction</li>
<li>DQL<br>数据查询语言 – Data Query Language<br>如 select</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DDL：<span class="keyword">create</span>、<span class="keyword">alter</span>、<span class="keyword">drop</span>、<span class="keyword">truncate</span></span><br><span class="line">DML：<span class="keyword">insert</span>、<span class="keyword">update</span>、<span class="keyword">delete</span></span><br><span class="line">DQL：<span class="keyword">select</span></span><br><span class="line">DCL：</span><br></pre></td></tr></table></figure>

<h3 id="3、SQL语言的基本操作"><a href="#3、SQL语言的基本操作" class="headerlink" title="3、SQL语言的基本操作"></a>3、SQL语言的基本操作</h3><h3 id="3-DML"><a href="#3-DML" class="headerlink" title="3 DML"></a>3 DML</h3><h4 id="3-1-INSERT-（增）"><a href="#3-1-INSERT-（增）" class="headerlink" title="3.1 INSERT （增）"></a>3.1 INSERT （增）</h4><ul>
<li>一次插入一条</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100001</span>,&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>一次插入多条</p>
<ul>
<li><ol>
<li></li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100001</span>,&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100002</span>,&quot;吕金鹏&quot;,<span class="number">24</span>,&quot;男&quot;,&quot;文科六班&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100003</span>,&quot;单乐蕊&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;理科六班&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100004</span>,&quot;葛德曜&quot;,<span class="number">24</span>,&quot;男&quot;,&quot;理科三班&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100005</span>,&quot;宣谷芹&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li></li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id,name,age,gender,clazz)<span class="keyword">VALUES</span> (<span class="number">1500100001</span>,&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class="line">,(<span class="number">1500100002</span>,&quot;吕金鹏&quot;,<span class="number">24</span>,&quot;男&quot;,&quot;文科六班&quot;)</span><br><span class="line">,(<span class="number">1500100003</span>,&quot;单乐蕊&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;理科六班&quot;)</span><br><span class="line">,(<span class="number">1500100004</span>,&quot;葛德曜&quot;,<span class="number">24</span>,&quot;男&quot;,&quot;理科三班&quot;)</span><br><span class="line">,(<span class="number">1500100005</span>,&quot;宣谷芹&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;理科五班&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>入股插入的值对应字段名，字段名可以不写</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span> (<span class="number">1500100001</span>,&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>自动递增的字段名和值不用给，但是其他字段的字段名不能缺少<ul>
<li>id设置了自动递增</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name,age,gender,clazz)<span class="keyword">VALUES</span> (&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;)</span><br><span class="line"><span class="comment">-- 不给字段名用0或null占位</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">VALUES</span>(<span class="number">0</span> <span class="operator">|</span> <span class="keyword">null</span>,&quot;施笑槐&quot;,<span class="number">22</span>,&quot;女&quot;,&quot;文科六班&quot;);	</span><br></pre></td></tr></table></figure>

<ul>
<li>插入查询的数据<ul>
<li>确保两个表的结构相同，以便可以正确执行插入操作。</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">INSTER <span class="keyword">INTO</span> student  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student2</span><br></pre></td></tr></table></figure>

<h4 id="3-2-UPDATE-（更新）"><a href="#3-2-UPDATE-（更新）" class="headerlink" title="3.2 UPDATE （更新）"></a>3.2 UPDATE （更新）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name </span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> some_column <span class="operator">=</span> some_value;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-DELETE-（删）"><a href="#3-3-DELETE-（删）" class="headerlink" title="3.3 DELETE （删）"></a>3.3 DELETE （删）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE some_column = some_value;</span><br></pre></td></tr></table></figure>

<h3 id="4-DQL"><a href="#4-DQL" class="headerlink" title="4 DQL"></a>4 DQL</h3><ul>
<li>select 1+null  返回 null</li>
<li>select  “a” +null 返回null</li>
<li>select * ,1 as new from score ，会新增一个新列，值都是1</li>
</ul>
<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure>

<h4 id="dinstinct"><a href="#dinstinct" class="headerlink" title="dinstinct"></a>dinstinct</h4><ul>
<li>去重<ul>
<li>去重指定列的重复值，会去除一行</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name</span><br></pre></td></tr></table></figure>

<h4 id="IF-function"><a href="#IF-function" class="headerlink" title="IF function"></a>IF function</h4><ul>
<li>IFNULL(cid, 值1 )如果column_name为空返回 值1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT IFNULL(column_name, 值1 ) FROM table_name</span><br></pre></td></tr></table></figure>

<ul>
<li>IF(condition,值1,值2)，如果condition成立，则返回值1，否则返回值2</li>
</ul>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><ul>
<li><p>字符串拼接</p>
</li>
<li><p>select  concat (“a”,”-“,”b”,null)  返回 null</p>
</li>
</ul>
<h4 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws"></a>concat_ws</h4><ul>
<li><p>concat wiht separator 通过分隔符连接</p>
</li>
<li><p>select  concat_ws(“-“,”a”,”b”,null) 返回 a-b</p>
</li>
</ul>
<h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">22</span>;</span><br></pre></td></tr></table></figure>

<h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> clazz <span class="keyword">LIKE</span> &quot;%文科六班%&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><ul>
<li>ASC 升序</li>
<li>DESC 降序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">22</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><ul>
<li>分组的字段的必须带一个，不然报错</li>
<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>
<li>聚合函数<ul>
<li>max，min，avg，sum，count</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   clazz</span><br><span class="line">        ,gender</span><br><span class="line">        ,<span class="built_in">MAX</span>(age)</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> clazz,gender;</span><br></pre></td></tr></table></figure>

<h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><ul>
<li>join | inner join ：内连接</li>
<li>left join ：左外连接， right join：右外连接，  full join：全外连接</li>
<li>ON后面是一个condition ，表示满足该condition的时候进行关联<ul>
<li>ON t1.score &gt; t2.score  表示 当t1.score大于t2.score时，数据行进行关联</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">JOIN</span> score  <span class="keyword">ON</span> students.id<span class="operator">=</span>score.id</span><br><span class="line"><span class="keyword">JOIN</span> subject <span class="keyword">ON</span> score.subject_id<span class="operator">=</span>subject.subject_id;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>	t1.<span class="operator">*</span></span><br><span class="line">				,t2.subject_id</span><br><span class="line">				,t2.sco</span><br><span class="line">				,t3.subject_name </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    (<span class="keyword">select</span>	id</span><br><span class="line">                    ,name</span><br><span class="line">                    ,age</span><br><span class="line">                    ,gender</span><br><span class="line">                    ,clazz</span><br><span class="line">    <span class="keyword">from</span> students) <span class="keyword">as</span> t1</span><br><span class="line">    <span class="keyword">join</span> </span><br><span class="line">    (<span class="keyword">select</span>	id</span><br><span class="line">                    ,subject_id</span><br><span class="line">                    ,sco</span><br><span class="line">    <span class="keyword">from</span> score) <span class="keyword">as</span> t2</span><br><span class="line">    <span class="keyword">join</span> </span><br><span class="line">    (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> subject) <span class="keyword">as</span> t3</span><br><span class="line">    <span class="keyword">on</span> t1.id<span class="operator">=</span>t2.id <span class="keyword">and</span> t2.subject_id<span class="operator">=</span>t3.subject_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="5-DCL"><a href="#5-DCL" class="headerlink" title="5 DCL"></a>5 DCL</h3><h4 id="5-1-管理用户"><a href="#5-1-管理用户" class="headerlink" title="5.1 管理用户"></a>5.1 管理用户</h4><ul>
<li>用户所在位置   mysql.user</li>
</ul>
<ul>
<li><p>添加用户：</p>
<ul>
<li>可以用添加的用户，代替root进行登录</li>
</ul>
<img src="/posts/cff900a3/image-20230803213442968.png" class="">

<ul>
<li><p>关闭密码复杂验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法：</p>
<ul>
<li>主机名可用%代替，表示任何主机</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;lisi&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除用户：</p>
<ul>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改用户密码：</p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 老版本的写法 </span></span><br><span class="line"><span class="comment">-- UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;234567&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查询用户：</p>
<ul>
<li><p>1.切换到mysql数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.查询user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通配符： % 表示可以在任意主机使用用户登录数据库</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="5-2-权限管理"><a href="#5-2-权限管理" class="headerlink" title="5.2.权限管理"></a>5.2.权限管理</h4><ul>
<li>权限列表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT, INSERT, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查询权限：</p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>授予权限：</p>
<ul>
<li><p>语法：</p>
<blockquote>
<p>with grant option 表示带上授权的功能</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> [<span class="keyword">with</span> <span class="keyword">grant</span> option];</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将表db3.account的SELECT ,DELETE, UPDATE权限授予用户&#x27;lisi&#x27;@&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> ,<span class="keyword">DELETE</span>, <span class="keyword">UPDATE</span>  <span class="keyword">ON</span> db3.account <span class="keyword">TO</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给zhangsan用户所有权限  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span>  <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;zhangsan&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>撤销权限：</p>
<ul>
<li><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将用户&#x27;lisi&#x27;@&#x27;%&#x27;对于表db3.account的更新权限撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> db3.account <span class="keyword">FROM</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给lisi用户撤销所有权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6、其他操作"><a href="#6、其他操作" class="headerlink" title="6、其他操作"></a>6、其他操作</h3><h4 id="6-1-LOAD"><a href="#6-1-LOAD" class="headerlink" title="6.1 LOAD"></a>6.1 LOAD</h4><ul>
<li>加载数据文件（mysql shell中执行）<ul>
<li>注意转义符号 <code>\</code> ，可以换成<code>/</code>或 <code>\\</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD DATA LOCAL INFILE &#x27;G:/BigData26/MySQL/data/student.txt&#x27; INTO TABLE students FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>linux执行LOAD命令时，如果文件来自windows，可以用pycharm把换行符设置为LF，也就是\n</p>
<p>不然，会导致最后一列的值中有\r</p>
<ul>
<li>windows的换行符：\r\n  CRLF</li>
<li>linux的换行符：\n  LF</li>
</ul>
</li>
</ul>
<h4 id="6-2-mysqldump"><a href="#6-2-mysqldump" class="headerlink" title="6.2 mysqldump"></a>6.2 mysqldump</h4><ul>
<li><p>dump  转储</p>
</li>
<li><p>把数据表对应的sql文件，从linux中导出</p>
</li>
</ul>
<img src="/posts/cff900a3/image-20230731161918891.png" class="" title="image-20230731161918891">

<h4 id="6-3-source"><a href="#6-3-source" class="headerlink" title="6.3 source"></a>6.3 source</h4><ul>
<li>执行指定sql文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;  source /root/data/students.sql</span><br></pre></td></tr></table></figure>

<h4 id="6-4-取整函数"><a href="#6-4-取整函数" class="headerlink" title="6.4 取整函数"></a>6.4 取整函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">round(98.99999,2) ，保留两位小数，并且四舍五入</span><br><span class="line"></span><br><span class="line">floor(98.99999)  向下取整</span><br><span class="line"></span><br><span class="line">ceil(98.99999)   向上取整</span><br></pre></td></tr></table></figure>

<h2 id="第五部分-基本查询"><a href="#第五部分-基本查询" class="headerlink" title="第五部分 基本查询"></a>第五部分 基本查询</h2><h3 id="1、WHERE-（搜索）"><a href="#1、WHERE-（搜索）" class="headerlink" title="1、WHERE （搜索）"></a>1、WHERE （搜索）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHERE子句可以使用以下比较运算符：</span><br><span class="line">=（等于）</span><br><span class="line">&lt;（小于）</span><br><span class="line">&gt;（大于）</span><br><span class="line">&lt;=（小于或等于）</span><br><span class="line">&gt;=（大于或等于）</span><br><span class="line">&lt;&gt;或!=（不等于）</span><br><span class="line">还可以使用逻辑运算符（AND、OR和NOT）来组合多个条件。</span><br><span class="line">exist</span><br><span class="line">any，all 多指比较</span><br></pre></td></tr></table></figure>

<ul>
<li>模糊搜索<ul>
<li>通配符 ：%   _</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM students WHERE clazz like ‘%文科%’</span><br></pre></td></tr></table></figure>

<ul>
<li>in(集合)<ul>
<li>搜索符合in集合内的内容</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from students where clazz in (&#x27;文科一班&#x27;,&#x27;文科二班&#x27;,&#x27;文科三班&#x27;);</span><br></pre></td></tr></table></figure>

<ul>
<li>BETWEEN AND</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="keyword">BETWEEN</span> <span class="number">22</span> <span class="keyword">AND</span> <span class="number">24</span>;</span><br><span class="line"><span class="comment">-- 返回年龄在22到24的学生</span></span><br></pre></td></tr></table></figure>

<h3 id="2、ORDER-BY-（排序）"><a href="#2、ORDER-BY-（排序）" class="headerlink" title="2、ORDER BY  （排序）"></a>2、ORDER BY  （排序）</h3><ul>
<li>ORDER BY子句用于对查询结果按照一个或多个列进行排序。</li>
<li>默认升序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ...</span><br></pre></td></tr></table></figure>

<h3 id="3、GROUP-BY-和-HAVING-（分组和过滤）"><a href="#3、GROUP-BY-和-HAVING-（分组和过滤）" class="headerlink" title="3、GROUP BY 和 HAVING  （分组和过滤）"></a>3、GROUP BY 和 HAVING  （分组和过滤）</h3><h4 id="3-1-GROUP-BY"><a href="#3-1-GROUP-BY" class="headerlink" title="3.1 GROUP BY"></a>3.1 GROUP BY</h4><ul>
<li><p>GROUP BY子句用于将查询结果按照一个或多个列进行分组，并对每个组进行聚合计算</p>
<ul>
<li>max、min、sum、avg、count</li>
<li>count(1) 和count(*)都是统计所有的行</li>
<li>count(cid) 统计不为null的cid个数</li>
<li><strong>只有数值型的数据删除后为null    count  不能统计到 null值</strong></li>
<li><strong>varchar类型的数据删除后为空字符 ‘’”    count 能够统计到 空字符</strong></li>
</ul>
</li>
<li><p>想要group by 的排序不起作用，可以加上order by  null</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2, ... </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<ul>
<li>聚合函数运作原理<ul>
<li>聚合函数如果没有分组的情况下，就是一次查询后再进行统计，而不是对每条数据进行统计<br>如果加上分组的话，聚合函数就是在每个分组查询完成后执行<br>如果加上聚合函数中加上if判断，那么就会等符合条件的数据查询完成后，再进行统计</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(IF(score<span class="operator">&gt;=</span><span class="number">60</span> , <span class="number">1</span>, <span class="number">0</span>)) <span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="comment">-- 每组大于等60的占比</span></span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cid  </span><br><span class="line"><span class="comment">-- 每个分组所有数据IF判断结束后，再进行聚合操作</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-HAVING"><a href="#3-2-HAVING" class="headerlink" title="3.2 HAVING"></a>3.2 HAVING</h4><ul>
<li><p>HAVING子句用于对分组后的结果进行过滤，只返回符合条件的分组。它接受一个或多个聚合函数作为参数，并可指定每个函数的过滤条件。</p>
<ul>
<li><p>having  不能够过滤select 没查出来的字段</p>
<p>having 可以聚合没查的字段</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sid</span><br><span class="line"><span class="keyword">from</span> score</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">COUNT</span>(cid) <span class="comment">-- and cid=&quot;01&quot; 会报错</span></span><br><span class="line"><span class="comment">-- having  不能够过滤select 没查出来的字段</span></span><br><span class="line"><span class="comment">-- 但是having 可以聚合没查的字段</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<ul>
<li>分组的字段的必须带一个，不然报错</li>
<li>没有分组的字段，并且没有聚合的字段也不能带，不然报错</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ..., aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2, ...</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>

<p>- </p>
<h3 id="4、LIMIT-和-OFFSET-（限制和偏移量-）"><a href="#4、LIMIT-和-OFFSET-（限制和偏移量-）" class="headerlink" title="4、LIMIT 和 OFFSET  （限制和偏移量 ）"></a>4、LIMIT 和 OFFSET  （限制和偏移量 ）</h3><ul>
<li>LIMIT用于限制查询结果集的行数。</li>
<li>OFFSET用于指定查询结果集的偏移量。<ul>
<li>如偏移量为2，则会从第3行返回数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number <span class="keyword">OFFSET</span> <span class="keyword">offset</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从offset+1开始，返回number行数据</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT <span class="keyword">offset</span>,number</span><br></pre></td></tr></table></figure>

<h3 id="5、union-（行合并）"><a href="#5、union-（行合并）" class="headerlink" title="5、union （行合并）"></a>5、union （行合并）</h3><ul>
<li>union 合并行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">UNION</span> s</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">4</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>union all 不去重</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students LIMIT <span class="number">4</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6、执行顺序"><a href="#6、执行顺序" class="headerlink" title="6、执行顺序"></a>6、执行顺序</h3><ul>
<li>从上往下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM: 从表中选择数据，生成虚拟表（视图）。</span><br><span class="line">WHERE: 对虚拟表中的数据进行筛选，满足条件的数据被保留。</span><br><span class="line">GROUP BY: 将数据按照指定的字段进行分组，生成分组后的结果。</span><br><span class="line">SELECT: 对分组后的结果进行选择，并进行聚合函数的计算。</span><br><span class="line">HAVING: 对聚合函数的结果进行筛选，满足条件的分组被保留。</span><br><span class="line">ORDER BY: 对结果进行排序。</span><br><span class="line">LIMIT: 限制结果的数量。</span><br></pre></td></tr></table></figure>

<h3 id="7、子查询"><a href="#7、子查询" class="headerlink" title="7、子查询"></a>7、子查询</h3><ul>
<li>where  sid in （select sid in student），子查询的一列可以作为in的集合</li>
<li>hive不支持where子查询</li>
</ul>
<h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><h2 id="1、清空表和截断表"><a href="#1、清空表和截断表" class="headerlink" title="1、清空表和截断表"></a>1、清空表和截断表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">清空表 delete ，存在日志和记录，可以恢复</span><br><span class="line"></span><br><span class="line">截断表 truncate，没有日志</span><br></pre></td></tr></table></figure>

<h2 id="2、mysql数据表在liunx的存储位置"><a href="#2、mysql数据表在liunx的存储位置" class="headerlink" title="2、mysql数据表在liunx的存储位置"></a>2、mysql数据表在liunx的存储位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据存储位置  cd /var/lib/mysql</span><br><span class="line"></span><br><span class="line">数据存储路径配置 vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<img src="/posts/cff900a3/image-20230801200055431.png" class="">

<img src="/posts/cff900a3/image-20230801195946980.png" class="">

<h2 id="3、中文的比较"><a href="#3、中文的比较" class="headerlink" title="3、中文的比较"></a>3、中文的比较</h2><ul>
<li>中文的比较 utf8  解析为16进制比较<ul>
<li>虽然六大于四，但是解析为utf8的十六进制之后，六的十六进制小于四的十六进制</li>
</ul>
</li>
</ul>
<img src="/posts/cff900a3/image-20230803140232355.png" class="" title="image-20230803140232355">

<h2 id="4、日期函数"><a href="#4、日期函数" class="headerlink" title="4、日期函数"></a>4、日期函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取当前日期时间</span><br><span class="line"><span class="keyword">select</span> NOW(); # <span class="number">2021</span><span class="number">-04</span><span class="number">-02</span> <span class="number">09</span>:<span class="number">25</span>:<span class="number">29</span></span><br><span class="line"># 获取当前日期</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); # <span class="number">2021</span><span class="number">-04</span><span class="number">-02</span></span><br><span class="line"># 获取当前时间</span><br><span class="line"><span class="keyword">SELECT</span> CURTIME();  # <span class="number">09</span>:<span class="number">26</span>:<span class="number">10</span></span><br><span class="line"></span><br><span class="line"># 时间减少<span class="number">1</span>小时（前一小时）</span><br><span class="line"><span class="keyword">select</span> date_sub(now(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">hour</span>);</span><br><span class="line"></span><br><span class="line"># 日期增加<span class="number">1</span>天</span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">day</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期格式化、字符串转日期</span></span><br><span class="line"># 格式化参考：</span><br><span class="line"><span class="keyword">select</span> DATE_FORMAT(now(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> DATE_FORMAT(now(),<span class="string">&#x27;%Y-%m-%d %H:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#字符串转日期</span><br><span class="line"><span class="keyword">select</span> str_to_date(<span class="string">&#x27;2021-04-02 10:37:14&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>); # <span class="number">2021</span><span class="number">-04</span><span class="number">-02</span> <span class="number">10</span>:<span class="number">37</span>:<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将具体时间时间转为timestamp</span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(<span class="string">&#x27;2017-05-15 10:37:14&#x27;</span>);<span class="comment">-- 指定日期时间的时间戳：1494815834</span></span><br><span class="line"><span class="comment">-- 将时间戳转为具体时间</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1494815834</span>, <span class="string">&#x27;%Y年%m月%d日 %h时%分:%s秒&#x27;</span>);<span class="comment">-- 获取时间戳对应的格式化日期时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 截取从pos位置开始到最后的所有str字符串</span></span><br><span class="line">SUBSTR (str, pos, len)</span><br><span class="line"><span class="comment">-- 返回本周的第几天</span></span><br><span class="line"><span class="keyword">SELECT</span> WEEKDAY(<span class="string">&#x27;2017-05-21 10:37:14&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="MySQL数据常用操作"><a href="#MySQL数据常用操作" class="headerlink" title="MySQL数据常用操作"></a>MySQL数据常用操作</h1><ul>
<li>注释： – # &#x2F;**&#x2F;</li>
</ul>
<h2 id="1、navicat操作MySQL"><a href="#1、navicat操作MySQL" class="headerlink" title="1、navicat操作MySQL"></a>1、navicat操作MySQL</h2><ul>
<li>可以用dbeaver平替</li>
<li>首先连接</li>
<li>创建数据库</li>
</ul>
<h3 id="1-1-创建数据表"><a href="#1-1-创建数据表" class="headerlink" title="1.1 创建数据表"></a>1.1 创建数据表</h3><ul>
<li>创建数据表，创建完成后要保存</li>
</ul>
<img src="/posts/cff900a3/image-20230731201052074.png" class="">

<ul>
<li><p>查看元数据</p>
<ul>
<li>元数据<ul>
<li>元数据（Metadata）是关于数据的数据，用于描述数据的特征、属性和内容。</li>
</ul>
</li>
</ul>
</li>
<li><p>导出建表语句</p>
</li>
</ul>
<p><img src="C:\Users\dongjiaxin\AppData\Roaming\Typora\typora-user-images\image-20230731201343039.png" alt="image-20230731201343039"></p>
<h3 id="1-2-执行sql语句"><a href="#1-2-执行sql语句" class="headerlink" title="1.2 执行sql语句"></a>1.2 执行sql语句</h3><h3 id="1-3-导入数据文件"><a href="#1-3-导入数据文件" class="headerlink" title="1.3 导入数据文件"></a>1.3 导入数据文件</h3><ul>
<li>导入向导</li>
</ul>
<img src="/posts/cff900a3/image-20230731204742543.png" class="">

<ul>
<li>选择文件格式</li>
</ul>
<img src="/posts/cff900a3/image-20230731204854988.png" class="">

<ul>
<li>选择文件路径</li>
</ul>
<img src="/posts/cff900a3/image-20230731204818468.png" class="">

<ul>
<li>配置换行符和分隔符</li>
</ul>
<img src="/posts/cff900a3/image-20230731205050008.png" class="">

<ul>
<li>设置head</li>
</ul>
<img src="/posts/cff900a3/image-20230731205204993.png" class="">

<ul>
<li>设置对应字段</li>
</ul>
<img src="/posts/cff900a3/image-20230731205244443.png" class="">

<h3 id="1-4-导出数据文件"><a href="#1-4-导出数据文件" class="headerlink" title="1.4 导出数据文件"></a>1.4 导出数据文件</h3><ul>
<li>导出向导</li>
</ul>
<img src="/posts/cff900a3/image-20230731212623170.png" class="">

<ul>
<li>选择数据表</li>
<li></li>
</ul>
<h3 id="1-5-导出sql文件"><a href="#1-5-导出sql文件" class="headerlink" title="1.5 导出sql文件"></a>1.5 导出sql文件</h3><ul>
<li>转储SQL文件</li>
</ul>
<img src="/posts/cff900a3/image-20230731213059217.png" class="">

<h3 id="1-6-运行sql文件"><a href="#1-6-运行sql文件" class="headerlink" title="1.6 运行sql文件"></a>1.6 运行sql文件</h3><img src="/posts/cff900a3/image-20230731213327762.png" class="">

<h2 id="2、python操作MySQL"><a href="#2、python操作MySQL" class="headerlink" title="2、python操作MySQL"></a>2、python操作MySQL</h2><h3 id="2-1-准备"><a href="#2-1-准备" class="headerlink" title="2.1 准备"></a>2.1 准备</h3><ul>
<li>安装pymysql库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<ul>
<li>导入pymysql库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br></pre></td></tr></table></figure>

<ul>
<li>创建数据库连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conn = pymysql.connect(host=&#x27;master&#x27;, port=3306, user=&#x27;root&#x27;, password=&#x27;123456&#x27;, database=&#x27;school&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建数据库操作对象：游标</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor = conn.cursor()</span><br></pre></td></tr></table></figure>

<ul>
<li>执行sql</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql = &quot;select * from students where id=1500100001&quot;</span><br><span class="line">cursor.execute(sql)  # 返回指定数据</span><br></pre></td></tr></table></figure>

<ul>
<li>获取DQL返回数据<ul>
<li>值得注意的是，每次查询后的，下一次查询的起始位置就是上一次查询的结束位置<br>这点和文件读写很像</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 查询一条数据 ，返回一个元组</span></span><br><span class="line">rows1 = cursor.fetchone() </span><br><span class="line"><span class="comment"># 查询所有数据，返回一个元组</span></span><br><span class="line">rows2 = cursor.fetchall()  </span><br><span class="line"> <span class="comment"># 查询指定行数</span></span><br><span class="line">rows3 = cursor.fetchmany(<span class="number">10</span>) </span><br></pre></td></tr></table></figure>

<ul>
<li>pymysql执行DML时，需要手动提交事务</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">=</span>&quot;insert into students values(0,&#x27;name&#x27;,&#x27;age&#x27;,&#x27;gender&#x27;,&#x27;clazz&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="keyword">sql</span>)</span><br><span class="line">connect.commit()</span><br></pre></td></tr></table></figure>

<ul>
<li>回滚<ul>
<li>如果执行出错，可以通过回滚的方式，让数据恢复到执行之前的状态</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">conn.rollback()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关闭连接</p>
<ul>
<li>手动关闭</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cursor.close()</span><br><span class="line">conn.close</span><br></pre></td></tr></table></figure>

<ul>
<li>自动关闭<ul>
<li>with语句，自动执行关闭语句</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pymysql.connect() <span class="keyword">as</span> conn:  </span><br><span class="line">	<span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> <span class="keyword">cursor</span>:</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-传入参数"><a href="#2-2-传入参数" class="headerlink" title="2.2 传入参数"></a>2.2 传入参数</h3><h4 id="1、静态指定"><a href="#1、静态指定" class="headerlink" title="1、静态指定"></a>1、静态指定</h4><ul>
<li>静态指定的参数，如果是字符串要加上引号</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;select * from students where id=&#x27;1500100001&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br></pre></td></tr></table></figure>

<h4 id="2、字符串拼接"><a href="#2、字符串拼接" class="headerlink" title="2、字符串拼接"></a>2、字符串拼接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;select * from students where id=&quot;</span> +<span class="string">&quot;&#x27;1500100001&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br></pre></td></tr></table></figure>

<h4 id="3、占位符"><a href="#3、占位符" class="headerlink" title="3、占位符"></a>3、占位符</h4><ul>
<li>execute<ul>
<li>通过占位符，动态指定sql中的参数<ul>
<li>不要因为参数是 string 就在 %s 两边加引号，mysql 会自动去处理。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;select * from students where id=%s&quot;</span></span><br><span class="line">cursor.execute(sql, (<span class="string">&quot;1500100001&quot;</span>))  <span class="comment"># 返回指定数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>executemany<ul>
<li>传入可迭代的数据容器，并且元素是元组<ul>
<li>根据元素个数，决定sql执行次数</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;select * from students where id=%s&quot;</span><br><span class="line">cursor.executemany(<span class="keyword">sql</span>, [(&quot;1500100001&quot;), (&quot;1500100002&quot;)])  # 返回指定数据</span><br></pre></td></tr></table></figure>

<h3 id="2-3-sql注入"><a href="#2-3-sql注入" class="headerlink" title="2.3 sql注入"></a>2.3 sql注入</h3><ul>
<li>如果传参方式是 字符串拼接，可以通过sql注入的方式，导致where失效，获取所有数据<ul>
<li>or 1&#x3D;1 可以让where失效</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span>&quot;&#x27;1500100001&#x27; or 1=1&quot;</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;select * from where id=&quot;<span class="operator">+</span>id</span><br></pre></td></tr></table></figure>

<ul>
<li>通过占位符传参，可以避免sql注入<ul>
<li>pymysql 的 execute 支持参数化 sql，通过占位符 %s 配合参数就可以实现 sql 注入问题的避免。</li>
<li>这样参数化的方式，让 mysql 通过 预处理 的方式避免了 sql 注入的存在。</li>
<li>需要注意的是，不要因为参数是其他类型而换掉 %s，pymysql 的占位符并不是 python 的通用占位符。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对比字符串拼接和占位符</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select * from students where id=%s&quot;</span></span><br><span class="line">cursor.execute(sql, (<span class="string">&quot;1500100001 or 1=1&quot;</span>))  <span class="comment"># 返回指定数据</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = <span class="string">&quot;1500100001 or 1=1&quot;</span></span><br><span class="line">sql2 = <span class="string">&quot;select * from students where id=&quot;</span> + <span class="built_in">id</span></span><br><span class="line"><span class="comment"># cursor.execute(sql2)  # 返回所有数据</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h3 id="2-4-把文件中的数据，插入到数据库中"><a href="#2-4-把文件中的数据，插入到数据库中" class="headerlink" title="2.4 把文件中的数据，插入到数据库中"></a>2.4 把文件中的数据，插入到数据库中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Description: 把文件中的数据，插入到数据库中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./score.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        line_list = fp.readlines()</span><br><span class="line"></span><br><span class="line">    tuple_list = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> line_list:</span><br><span class="line">        line_split = line.strip().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        tuple_list.append((line_split[<span class="number">0</span>],line_split[<span class="number">1</span>],line_split[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pymysql.connect(host=<span class="string">&#x27;master&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123456&#x27;</span>,database=<span class="string">&#x27;school&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            sql = <span class="string">&quot;INSERT INTO score VALUES (%s, %s, %s)&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cursor.executemany(sql, tuple_list)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                conn.rollback()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                conn.commit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>flume实时采集mysql数据库的数据到kafka</title>
    <url>/posts/4a854bd2.html</url>
    <content><![CDATA[<blockquote>
<p>flume实时采集mysql数据到kafka的实验，做个笔记，防止忘记<br>！！！建议从头看到尾，因为一些简单的东西我在前面提了，后面没提。</p>
</blockquote>
<p>Kafka搭建：<a href="https://blog.csdn.net/cjwfinal/article/details/120803013">https://blog.csdn.net/cjwfinal/article/details/120803013</a></p>
<p>flume搭建：<a href="https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502">https://blog.csdn.net/cjwfinal/article/details/120441503?spm=1001.2014.3001.5502</a></p>
<hr>
<h1 id="一、flume写入当前文件系统"><a href="#一、flume写入当前文件系统" class="headerlink" title="一、flume写入当前文件系统"></a>一、flume写入当前文件系统</h1><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote>
<p>编写配置文件，设置文件夹mylogs为source位置，文件夹backup为sink写入位置，实现对文件夹的数据备份。<br>新建两个文本文本文件1.txt与2.txt，在1.txt中输入Hello Flume，在2.txt中输入hello flume将两个文件拖入mylog，查看backup文件夹中出现的文件及其内容。文件可用记事本打开</p>
</blockquote>
<h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><h3 id="1-flume配置文件"><a href="#1-flume配置文件" class="headerlink" title="1.flume配置文件"></a>1.flume配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#a1表示agent的名字 可以自定义</span><br><span class="line"># 给sources（在一个agent里可以定义多个source）取个名字</span><br><span class="line">a1.sources = r1</span><br><span class="line"># 给channel个名字</span><br><span class="line">a1.channels = c1</span><br><span class="line"># 给channel个名字</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"># 对source进行配置</span><br><span class="line"># agent的名字.sources.source的名字.参数 = 参数值</span><br><span class="line"></span><br><span class="line"># source的类型 spoolDir（监控一个目录下的文件的变化）</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line"># 监听哪一个目录</span><br><span class="line">a1.sources.r1.spoolDir = /root/mylogs</span><br><span class="line"># 是否在event的headers中保存文件的绝对路径</span><br><span class="line">a1.sources.r1.fileHeader = <span class="literal">true</span></span><br><span class="line"># 给拦截器取个名字 i1</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line"># 使用timestamp拦截器，将处理数据的时间保存到event的headers中</span><br><span class="line">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class="line"></span><br><span class="line"># 配置channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = <span class="number">1000</span></span><br><span class="line">a1.channels.c1.transactionCapacity = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"># 配置sink为logger</span><br><span class="line"># 直接打印到控制台</span><br><span class="line">a1.sinks.k1.type = file_roll</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.sink.directory = /root/backup</span><br><span class="line"></span><br><span class="line"># 将source、channel、sink组装成agent</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>
<h3 id="2-要保证配置文件中的文件的路径都存在，否则会报错"><a href="#2-要保证配置文件中的文件的路径都存在，否则会报错" class="headerlink" title="2.要保证配置文件中的文件的路径都存在，否则会报错"></a>2.要保证配置文件中的文件的路径都存在，否则会报错</h3><h3 id="3-启动flume"><a href="#3-启动flume" class="headerlink" title="3.启动flume"></a>3.启动flume</h3><h4 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>
<blockquote>
<p>a1是agent的名字，spoolingtest.cong是配置文件名，如果不一样请修改</p>
</blockquote>
<img src="/posts/4a854bd2/ac873024932c4287ab8205db9afe0584.png" class="" title="在这里插入图片描述">

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><h4 id="1-启动flume"><a href="#1-启动flume" class="headerlink" title="1.启动flume"></a>1.启动flume</h4><p>注意：要在配置文件所在的目录启动</p>
<h4 id="2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World"><a href="#2-在mylogs文件夹下创建两个文件1-txt，2-txt，分别写入hello-world和Hello-World" class="headerlink" title="2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World"></a>2.在mylogs文件夹下创建两个文件1.txt，2.txt，分别写入hello world和Hello World</h4><p>写入并保存，后flume打印出来的日志会发生改变。</p>
<h4 id="3-查看backup文件夹"><a href="#3-查看backup文件夹" class="headerlink" title="3.查看backup文件夹"></a>3.查看backup文件夹</h4><p>backup文件夹中，会产生许多文件，其中某个文件中会保存上面两个文件的内容，自行查找即可。</p>
<img src="/posts/4a854bd2/0d1b5a8572aa47119e603c7cd291307d.png" class="" title="在这里插入图片描述">


<h1 id="二、flume连接kafka"><a href="#二、flume连接kafka" class="headerlink" title="二、flume连接kafka"></a>二、flume连接kafka</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>把flume监听到的文件内容，输入到，kafka，并由kafka的消费着消费出来。</p>
</blockquote>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="1-flume配置文件-1"><a href="#1-flume配置文件-1" class="headerlink" title="1.flume配置文件"></a>1.flume配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a1表示agent的名字 可以自定义</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class="line">a1.sources = r1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给channel个名字</span></span></span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给channel个名字</span></span></span><br><span class="line">a1.sinks = k1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对<span class="built_in">source</span>进行配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">agent的名字.sources.source的名字.参数 = 参数值</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span>的类型 spoolDir（监控一个目录下的文件的变化）</span></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听哪一个目录</span></span><br><span class="line">a1.sources.r1.command = tail -F -c +0 /root/dir1/test.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否在event的headers中保存文件的绝对路径</span></span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给拦截器取个名字 i1</span></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用timestamp拦截器，将处理数据的时间保存到event的headers中</span></span><br><span class="line">a1.sources.r1.interceptors.i1.type = timestamp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置sinks，输出到kafka中</span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">topic是指定kafka的主题</span></span><br><span class="line">a1.sinks.k1.kafka.topic = events</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master是主机名，也可以是主机IP地址</span></span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将<span class="built_in">source</span>、channel、sink组装成agent![在这里插入图片描述](https://img-blog.csdnimg.cn/13519938e4ba42b9a4294454f2013dc2.png<span class="comment">#pic_center)</span></span></span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>
<h3 id="2测试"><a href="#2测试" class="headerlink" title="2测试"></a>2测试</h3><h4 id="1-创建指定的目录-root-dir1-test-log"><a href="#1-创建指定的目录-root-dir1-test-log" class="headerlink" title="1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log"></a>1.创建指定的目录&#x2F;root&#x2F;dir1&#x2F;test.log</h4><h4 id="2-启动flume"><a href="#2-启动flume" class="headerlink" title="2.启动flume"></a>2.启动flume</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>
<h4 id="3-启动kafka的消费者"><a href="#3-启动kafka的消费者" class="headerlink" title="3.启动kafka的消费者"></a>3.启动kafka的消费者</h4><h5 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#启动消费者之前首先要创建主题</span><br><span class="line">kafka-topics.sh --create --topic events --bootstrap-server master:<span class="number">9092</span></span><br><span class="line">#启动消费者</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server master:<span class="number">9092</span> --topic events --from-beginning</span><br></pre></td></tr></table></figure>
<h5 id="kafka主题操作命令"><a href="#kafka主题操作命令" class="headerlink" title="kafka主题操作命令"></a>kafka主题操作命令</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#删除主题</span><br><span class="line">kafka-topics.sh --delete --topic events --zookeeper localhost:<span class="number">2181</span></span><br><span class="line">#查看主题列表</span><br><span class="line">kafka-topics.sh --list --bootstrap-server master:<span class="number">9092</span></span><br></pre></td></tr></table></figure>
<h4 id="4-在test-log中写入数据"><a href="#4-在test-log中写入数据" class="headerlink" title="4.在test.log中写入数据"></a>4.在test.log中写入数据</h4><img src="/posts/4a854bd2/5a3bc3a8ba45423d94fa4fbe005973b3.png" class="" title="在这里插入图片描述">

<h4 id="5-观察kafka的消费是否消费出数据"><a href="#5-观察kafka的消费是否消费出数据" class="headerlink" title="5.观察kafka的消费是否消费出数据"></a>5.观察kafka的消费是否消费出数据</h4><img src="/posts/4a854bd2/14142856df9b4ceb91c3d85b4b017eb4.png" class="" title="在这里插入图片描述">




<h1 id="三、flume实时采集mysql数据到kafka"><a href="#三、flume实时采集mysql数据到kafka" class="headerlink" title="三、flume实时采集mysql数据到kafka"></a>三、flume实时采集mysql数据到kafka</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>在MySQL中建立数据库school，在数据库中建立表student。SQL语句如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#创建数据库</span><br><span class="line">create database school;</span><br><span class="line">#使用数据库</span><br><span class="line">use school;</span><br><span class="line">#创建数据表</span><br><span class="line">create table <span class="title function_">student</span><span class="params">(</span></span><br><span class="line"><span class="params">	id <span class="type">int</span> not <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">	name varchar(<span class="number">40</span>)</span>,</span><br><span class="line">	age <span class="type">int</span>,</span><br><span class="line">	grade <span class="type">int</span>,</span><br><span class="line">	primary <span class="title function_">key</span><span class="params">(id)</span></span><br><span class="line">);</span><br><span class="line"># 删除数据</span><br><span class="line">drop database school;</span><br><span class="line"># 删除数据表</span><br><span class="line">drop database student;</span><br><span class="line"># 查看数据表</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写配置文件，将student表中的内容输出到控制台。启动Flume，在student表中使用下列命令插入数据，在Kafka消费者中查看相应数据。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#插入数据，sql</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">1</span>,<span class="string">&#x27;Xiaoming&#x27;</span>,<span class="number">23</span>,<span class="number">98</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">2</span>,<span class="string">&#x27;Zhangsan&#x27;</span>,<span class="number">24</span>,<span class="number">96</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">3</span>,<span class="string">&#x27;Lisi&#x27;</span>,<span class="number">24</span>,<span class="number">93</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">4</span>,<span class="string">&#x27;Wangwu&#x27;</span>,<span class="number">21</span>,<span class="number">91</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">5</span>,<span class="string">&#x27;Weiliu&#x27;</span>,<span class="number">21</span>,<span class="number">91</span>);</span><br></pre></td></tr></table></figure>
<h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h2><h3 id="1-flume配置文件-2"><a href="#1-flume配置文件-2" class="headerlink" title="1.flume配置文件"></a>1.flume配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给sources（在一个agent里可以定义多个source）取个名字</span></span></span><br><span class="line">a1.sources = r1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给channel个名字</span></span></span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 给channel个名字</span></span></span><br><span class="line">a1.sinks = k1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置<span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = org.keedio.flume.source.SQLSource</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ip地址和数据库名称需要修改，如果连接的本地的mysql改成本机IP地址，如果连接虚拟机上的mysql改成虚拟机的IP地址</span></span><br><span class="line">a1.sources.r1.hibernate.connection.url = jdbc:mysql://ip地址/数据名称?useSSL=false&amp;allowPublicKeyRetrieval=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql用户名，一般都是root</span></span><br><span class="line">a1.sources.r1.hibernate.connection.user = root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码</span></span><br><span class="line">a1.sources.r1.hibernate.connection.password = 123456</span><br><span class="line">a1.sources.r1.hibernate.connection.autocommit = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql驱动</span></span><br><span class="line">a1.sources.r1.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">驱动版本过低会无法使用，驱动安装下文会提及</span></span><br><span class="line">a1.sources.r1.hibernate.connection.driver_class = com.mysql.jdbc.Driver</span><br><span class="line">a1.sources.r1.run.query.delay=5000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义查询</span></span><br><span class="line">a1.sources.r1.start.from = 0</span><br><span class="line">a1.sources.r1.table = student</span><br><span class="line">a1.sources.r1.columns.to.select = *</span><br><span class="line"></span><br><span class="line">a1.sources.r1.batch.size = 1000</span><br><span class="line">a1.sources.r1.max.rows = 1000</span><br><span class="line">a1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider</span><br><span class="line">a1.sources.r1.hibernate.c3p0.min_size=1</span><br><span class="line">a1.sources.r1.hibernate.c3p0.max_size=10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存放status文件</span></span><br><span class="line">a1.sources.r1.status.file.path = /root/dir1</span><br><span class="line">a1.sources.r1.status.file.name = r1.status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line">a1.channels.c1.byteCapacityBufferPercentage = 20</span><br><span class="line">a1.channels.c1.byteCapacity = 800000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置sinks</span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定主题名topic</span></span><br><span class="line">a1.sinks.k1.kafka.topic = events</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = master:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将<span class="built_in">source</span>、channel、sink组装成agent</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>
<h3 id="2-要保证配置中的文件路径存在，并且根据注释做出相应的修改"><a href="#2-要保证配置中的文件路径存在，并且根据注释做出相应的修改" class="headerlink" title="2.要保证配置中的文件路径存在，并且根据注释做出相应的修改"></a>2.要保证配置中的文件路径存在，并且根据注释做出相应的修改</h3><h3 id="3-导入jar包到-flume-lib文件夹下"><a href="#3-导入jar包到-flume-lib文件夹下" class="headerlink" title="3.导入jar包到&#x2F;flume&#x2F;lib文件夹下"></a>3.导入jar包到&#x2F;flume&#x2F;lib文件夹下</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flume连接mysqljar包</span></span><br><span class="line">flume-ng-sql-source-1.4.3.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql驱动jar包</span></span><br><span class="line">mysql-connector-java-5.1.49.jar</span><br></pre></td></tr></table></figure>
<h3 id="5-flume-ng-sql-source项目的官方网址"><a href="#5-flume-ng-sql-source项目的官方网址" class="headerlink" title="5.flume-ng-sql-source项目的官方网址"></a>5.flume-ng-sql-source项目的官方网址</h3><p><a href="https://github.com/keedio/flume-ng-sql-source">https://github.com/keedio/flume-ng-sql-source</a></p>
<h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><h4 id="1-创建mysql数据库、数据表"><a href="#1-创建mysql数据库、数据表" class="headerlink" title="1.创建mysql数据库、数据表"></a>1.创建mysql数据库、数据表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据库</span></span><br><span class="line">create database school;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用数据库</span></span><br><span class="line">use school;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据表</span></span><br><span class="line">create table student(</span><br><span class="line">	id int not null,</span><br><span class="line">	name varchar(40),</span><br><span class="line">	age int,</span><br><span class="line">	grade int,</span><br><span class="line">	primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="2-启动flume-1"><a href="#2-启动flume-1" class="headerlink" title="2.启动flume"></a>2.启动flume</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f spoolingtest.cong -Dflume.root.logger=DEBUG,console</span><br></pre></td></tr></table></figure>
<h4 id="3-启动kafka消费者"><a href="#3-启动kafka消费者" class="headerlink" title="3.启动kafka消费者"></a>3.启动kafka消费者</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动消费者之前首先要创建主题</span></span><br><span class="line">kafka-topics.sh --create --topic events --bootstrap-server master:9092</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动消费者</span></span><br><span class="line">kafka-console-consumer.sh --bootstrap-server master:9092 --topic events --from-beginning</span><br></pre></td></tr></table></figure>
<h4 id="4-student表中插入数据"><a href="#4-student表中插入数据" class="headerlink" title="4.student表中插入数据"></a>4.student表中插入数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#插入数据，sql</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">1</span>,<span class="string">&#x27;Xiaoming&#x27;</span>,<span class="number">23</span>,<span class="number">98</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">2</span>,<span class="string">&#x27;Zhangsan&#x27;</span>,<span class="number">24</span>,<span class="number">96</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">3</span>,<span class="string">&#x27;Lisi&#x27;</span>,<span class="number">24</span>,<span class="number">93</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">4</span>,<span class="string">&#x27;Wangwu&#x27;</span>,<span class="number">21</span>,<span class="number">91</span>);</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(id,name,age,grade)</span>value(<span class="number">5</span>,<span class="string">&#x27;Weiliu&#x27;</span>,<span class="number">21</span>,<span class="number">91</span>);</span><br></pre></td></tr></table></figure>
<h4 id="5-观察数据"><a href="#5-观察数据" class="headerlink" title="5.观察数据"></a>5.观察数据</h4><img src="/posts/4a854bd2/5c0301edb3124c6191bc2a33c805eddc.png" class="" title="在这里插入图片描述">

<img src="/posts/4a854bd2/dd8a0362ea6a42ff9fa8b5b8a92f42aa.png" class="" title="在这里插入图片描述">
<p><code> 为了方便测试我重复插入了一条数据</code></p>
<h4 id="6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错"><a href="#6-遇到的问题：消费者没有消费出来数据，且flume配置文件没错" class="headerlink" title="6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错"></a>6.遇到的问题：消费者没有消费出来数据，且flume配置文件没错</h4><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>删除存放的status文件，也就是我配置文件中&#x2F;root&#x2F;dir1文件夹中的东西</p>
<img src="/posts/4a854bd2/7d1527b8fdd14ee3a942f5df899f9327.png" class="" title="在这里插入图片描述">

<h1 id="四、Kafka链接Flume，将生产的消息存入到HDFS"><a href="#四、Kafka链接Flume，将生产的消息存入到HDFS" class="headerlink" title="四、Kafka链接Flume，将生产的消息存入到HDFS"></a>四、Kafka链接Flume，将生产的消息存入到HDFS</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>编写配置文件，将kafka作为输入，在生产者中输入“HelloFlume”或其他信息，通过Flume将Kafka生产者输入的信息存入hdfs中，存储格式hdfs:&#x2F;&#x2F;localhost:9000&#x2F;fromkafka&#x2F;%Y%m%d&#x2F;，要求存储时文件名为kafka_log。</p>
</blockquote>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="1-flume配置文件-3"><a href="#1-flume配置文件-3" class="headerlink" title="1.flume配置文件"></a>1.flume配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">agent.sources = kafka_source</span><br><span class="line">agent.channels = mem_channel</span><br><span class="line">agent.sinks = hdfs_sink</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下配置 <span class="built_in">source</span></span></span><br><span class="line">agent.sources.kafka_source.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class="line">agent.sources.kafka_source.channels = mem_channel</span><br><span class="line">agent.sources.kafka_source.batchSize = 5000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master为主机名或者主机IP</span></span><br><span class="line">agent.sources.kafka_source.kafka.bootstrap.servers = master:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要指定kafka生产者的主题</span></span><br><span class="line">agent.sources.kafka_source.kafka.topics = kafka-flume</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下配置 sink</span></span><br><span class="line">agent.sinks.hdfs_sink.type = hdfs</span><br><span class="line">agent.sinks.hdfs_sink.channel = mem_channel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到HDFS文件的路径</span></span><br><span class="line">agent.sinks.hdfs_sink.hdfs.path = /data/kafka-flume/%Y%m%d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HDFS文件前缀</span></span><br><span class="line">agent.sinks.hdfs_sink.hdfs.filePrefix = kafka_log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用时间戳</span></span><br><span class="line">a1.sinks.r1.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">agent.sinks.hdfs_sink.hdfs.rollSize = 0</span><br><span class="line">agent.sinks.hdfs_sink.hdfs.rollCount = 0</span><br><span class="line">agent.sinks.hdfs_sink.hdfs.rollInterval = 3600</span><br><span class="line">agent.sinks.hdfs_sink.hdfs.threadsPoolSize = 30</span><br><span class="line">agent.sinks.hdfs_sink.hdfs.fileType=DataStream</span><br><span class="line">agent.sinks.hdfs_sink.hdfs.writeFormat=Text</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下配置 channel</span></span><br><span class="line">agent.channels.mem_channel.type = memory</span><br><span class="line">agent.channels.mem_channel.capacity = 100000</span><br><span class="line">agent.channels.mem_channel.transactionCapacity = 10000</span><br></pre></td></tr></table></figure>
<h3 id="2-根据配置文件的注释根据自己的情况做出修改"><a href="#2-根据配置文件的注释根据自己的情况做出修改" class="headerlink" title="2.根据配置文件的注释根据自己的情况做出修改"></a>2.根据配置文件的注释根据自己的情况做出修改</h3><h3 id="3-hadoop操作文件夹命令"><a href="#3-hadoop操作文件夹命令" class="headerlink" title="3.hadoop操作文件夹命令"></a>3.hadoop操作文件夹命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件夹</span></span><br><span class="line">hadoop fs -mkdir 文件夹路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件夹</span></span><br><span class="line">hadoop fs -rm -r -skipTrash 文件夹路径</span><br></pre></td></tr></table></figure>
<h3 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h3><h4 id="1-启动flume-1"><a href="#1-启动flume-1" class="headerlink" title="1.启动flume"></a>1.启动flume</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动命令</span></span><br><span class="line">flume-ng agent -n agent -f kafka-flume-hdfs.cong -Dflume.root.logger=DEBUG,console</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数解释</span></span><br><span class="line">第二个agent为配置文件中agent的名字，kafka-flume-hdfs.cong为配置文件名，根据自己情况做出修改</span><br></pre></td></tr></table></figure>
<h4 id="2-启动kafka生产者"><a href="#2-启动kafka生产者" class="headerlink" title="2.启动kafka生产者"></a>2.启动kafka生产者</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令，根据自己配置变换主题名</span></span><br><span class="line">kafka-console-producer.sh --broker-list master:9092 --topic kafka-flume</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动后，输入HelloFlume</span></span><br></pre></td></tr></table></figure>
<h4 id="3-观察HDFS界面，寻找并下载文件，查看内容"><a href="#3-观察HDFS界面，寻找并下载文件，查看内容" class="headerlink" title="3.观察HDFS界面，寻找并下载文件，查看内容"></a>3.观察HDFS界面，寻找并下载文件，查看内容</h4><img src="/posts/4a854bd2/416d1b9dd07d4e43bbaabeb02047e809.png" class="" title="在这里插入图片描述">

<p>记得关闭flume后再下载，不然会下载出来.tmp文件</p>
<h1 id="有什么问题评论区提问！"><a href="#有什么问题评论区提问！" class="headerlink" title="有什么问题评论区提问！"></a>有什么问题评论区提问！</h1>]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Flink</tag>
        <tag>Kafaka</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/posts/d87f7e0c.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](image.jpg) # 正确引用图片的方式，在hexo中</span><br></pre></td></tr></table></figure>

<p>第一种hZ9SjgCDRMUGOxT.png在.&#x2F;test&#x2F;中</p>
<p><img src="/posts/d87f7e0c/hZ9SjgCDRMUGOxT.png"></p>
<p>第三种</p>
<img src="/posts/d87f7e0c/image-20230710200106371.png" class="" title="image-20230710200106371">

<p>- </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sssss</span><br></pre></td></tr></table></figure>

<ul>
<li>hafhhaa</li>
</ul>
]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>python笔记</title>
    <url>/posts/c00b24b1.html</url>
    <content><![CDATA[<h1 id="一、python基础"><a href="#一、python基础" class="headerlink" title="一、python基础"></a>一、python基础</h1><h2 id="前言-python所学内容"><a href="#前言-python所学内容" class="headerlink" title="前言 python所学内容"></a>前言 python所学内容</h2><ul>
<li>基础语法<ul>
<li>变量、注释、基本数据类型、格式化字符串、反转字符、数据类型转化、if\elif选择结构、for\while循环</li>
<li>str的常用方法、运算符</li>
<li>命名空间、作用域</li>
</ul>
</li>
<li>数据容器<ul>
<li>list列表、tuple元组、dict字典、set集合</li>
<li>遍历数据容器、列表推导式</li>
<li>杨辉三角、冒泡排序</li>
</ul>
</li>
<li>函数<ul>
<li>函数参数<ul>
<li>必选参数、 默认参数、可选参数、关键字参数、命名关键字参数</li>
</ul>
</li>
<li>递归函数<ul>
<li>阶乘、斐波拉契数列、汉诺塔</li>
</ul>
</li>
</ul>
</li>
<li>面向对象<ul>
<li>类、私有变量和方法、封装、继承、多态、猴子补丁、鸭子类型、兔子问题</li>
</ul>
</li>
<li>异常处理<ul>
<li>基本异常类型、捕获和抛出异常、自定义异常</li>
</ul>
</li>
<li>文件读写<ul>
<li>文件打开open、文件读写、with语句</li>
</ul>
</li>
<li>正则表达式</li>
<li>常用模块</li>
</ul>
<h2 id="第一部分-python简介"><a href="#第一部分-python简介" class="headerlink" title="第一部分 python简介"></a>第一部分 python简介</h2><ul>
<li>Python是一门解释性、面向对象以及类型动态的高级程序语言<ul>
<li>解释型：Python代码在运行时没有了编译这个环节，类似PHP</li>
<li>面向对象：Python支持面向对象的风格或代码封装在对象的编程技术</li>
<li>动态数据类型：Python中没有对变量类型进行限制，代码非常灵活</li>
</ul>
</li>
</ul>
<h4 id="1、python的垃圾回收机制"><a href="#1、python的垃圾回收机制" class="headerlink" title="1、python的垃圾回收机制"></a>1、python的垃圾回收机制</h4><ul>
<li>引用计数（Reference Counting）</li>
<li>标记清除（Mark and Sweep）<ul>
<li>标记清除解决循环引用</li>
</ul>
</li>
<li>分代回收（Generational Collection）</li>
</ul>
<h4 id="2、python环境安装"><a href="#2、python环境安装" class="headerlink" title="2、python环境安装"></a>2、python环境安装</h4><ul>
<li><p>首先官网下载安装程序</p>
<ul>
<li>选择状态为security的版本，并且选择此版本中小版本不是最后一个的版本</li>
<li><img src="/posts/c00b24b1/image-20230710193122871.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230710193646276.png" class="" title="image-20230710193646276"></li>
<li><img src="python笔记/image-20230710193716304.png" alt="image-20230710193716304" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>安装时，选择客制化安装（自定义路径）</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230710193859950.png" class="" title="image-20230710193859950"></li>
<li><img src="/posts/c00b24b1/image-20230710194234672.png" class="" title="image-20230710194234672"></li>
</ul>
</li>
<li><p>完成安装后，查看python的环境变量（勾选上述选项后，自动添加）</p>
<ul>
<li>系统会优先调用位于<strong>系统环境变量（所有用户都可以使用）下最上面的文件路径下的程序</strong></li>
<li>目的<ul>
<li>把第一个路径下的pip.exe文件添加到全局变量中</li>
<li>把第二个路径下的python.exe（python解释器）添加到全局变量中</li>
</ul>
</li>
<li><img src="/posts/c00b24b1/image-20230710194400177.png" class="" title="image-20230710194400177.png"></li>
</ul>
</li>
<li><p>验证是否安装成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -V  //查看版本</span><br><span class="line">pip <span class="built_in">list</span>   //查看使用pip命令所下载的包</span><br></pre></td></tr></table></figure>



<ul>
<li><img src="/posts/c00b24b1/image-20230710194742530.png" class="" title="image-20230710194742530"></li>
</ul>
</li>
<li><p>pip命令下载包的位置</p>
<ul>
<li>刚开始之后两个，pip和setuptools</li>
<li>pip list可以查看pip命令下载的包，如上图</li>
<li><img src="/posts/c00b24b1/image-20230710200739516.png" class="" title="image-20230710200739516"></li>
</ul>
</li>
<li><p>python自带的组件</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230710200539139.png" class="" title="image-20230710200539139.png"></li>
<li><p>Moudle Docs（把python的安装环境变为网页形式）</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230710200312751.png" class="" title="image-20230710200312751"></li>
</ul>
</li>
<li><p>IDLE（python自带的集成开发环境）</p>
</li>
<li><p>python（命令行模式）</p>
</li>
</ul>
</li>
</ul>
<h4 id="3、pycharm安装"><a href="#3、pycharm安装" class="headerlink" title="3、pycharm安装"></a>3、pycharm安装</h4><ul>
<li><p>官网找到pycharm社区版（免费版）</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230710195406248.png" class=""></li>
</ul>
</li>
<li><p>安装程序的介绍</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230710195906290.png" class="" title="python笔记&#x2F;image-20230710195906290.png"></li>
<li>鼠标右击桌面的显示框<ul>
<li><img src="/posts/c00b24b1/image-20230710200010566.png" class=""></li>
</ul>
</li>
<li>关联py后缀的文件<ul>
<li><img src="/posts/c00b24b1/image-20230710200106371.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230710200130611.png" class=""></li>
</ul>
</li>
</ul>
</li>
<li><p>创建项目时的注意事项</p>
<ul>
<li>虚拟环境<ul>
<li>创建为虚拟环境的项目，相当于把项目放在一个独立的环境中，所下载的包是独立于其他项目的</li>
</ul>
</li>
<li>非虚拟环境<ul>
<li>非虚拟环境的项目，所下载的包，是可以和其他非虚拟环境的项目所共用</li>
<li><img src="/posts/c00b24b1/image-20230710201025426.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230710201900839.png" class="" title="python笔记&#x2F;image-20230710201900839.png"></li>
<li>Conda Environment 是以Anocanda的环境为基础的选择</li>
<li>Anocanda一个集成所有python的第三方库的工具，一般作为离线使用</li>
</ul>
</li>
<li>一般选择非虚拟环境</li>
</ul>
</li>
<li><p>python第三方库</p>
<ul>
<li>位于官网的PyPI</li>
<li>Docs为python官方文档</li>
<li>python为应用程序</li>
<li><img src="/posts/c00b24b1/image-20230710202256691.png" class="" title="image-20230710202256691"></li>
</ul>
</li>
</ul>
<h2 id="第二部分-python基础语法"><a href="#第二部分-python基础语法" class="headerlink" title="第二部分 python基础语法"></a>第二部分 python基础语法</h2><h4 id="1、相对路径和绝对路径"><a href="#1、相对路径和绝对路径" class="headerlink" title="1、相对路径和绝对路径"></a>1、相对路径和绝对路径</h4><ul>
<li><p>..表示退出当前文件夹到当前文件夹的上一级文件夹中</p>
</li>
<li><p>.表示当前文件夹</p>
</li>
<li><p>相对路径（在print_test.py文件中helloworld.py的相对路径）</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230711103427935.png" class="" title="python笔记&#x2F;image-20230711103427935.png">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../day01/helloworld.py</span><br></pre></td></tr></table></figure>


</li>
<li><p>利用相对路径执行文件的例子</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230711103411381.png" class="" title="image-20230711103411381"></li>
</ul>
</li>
</ul>
</li>
<li><p>绝对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F:\BigData26\Code\python\bigdata26\day01</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2、print函数、cmd命令、注释"><a href="#2、print函数、cmd命令、注释" class="headerlink" title="2、print函数、cmd命令、注释"></a>2、print函数、cmd命令、注释</h4><ul>
<li><p>print函数</p>
<ul>
<li><p>源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self, *args, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>*args是参数化变量，也就是可以传入多个参数</p>
</li>
<li><p>sep是间隔符</p>
</li>
<li><p>end代表结尾</p>
</li>
</ul>
</li>
<li><p>cmd命令</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230711150851404.png" class=""></li>
<li>在文件的路径上输入cmd就可以直接进入命令行模式<ul>
<li><img src="/posts/c00b24b1/image-20230711151030189.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230711151053019.png" class="" title="python笔记&#x2F;image-20230711151053019.png"></li>
<li><img src="/posts/c00b24b1/image-20230711151134903.png" class=""></li>
</ul>
</li>
</ul>
</li>
<li><p>注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释快捷键 ctrl + /</span></span><br><span class="line"><span class="comment"># 单行注释，他是给人看的，编辑器不识别</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释、</span></span><br><span class="line"><span class="string">可以在很多行中</span></span><br><span class="line"><span class="string">写文字</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这个也是多行注释</span></span><br><span class="line"><span class="string">也是个字符串</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h4><ul>
<li><p>变量的命名规则</p>
<ul>
<li>必须是大小写字母、数字、下划线</li>
<li>不能以数字开头</li>
<li>不能是关键字<ul>
<li>如何查看关键字<ul>
<li><img src="/posts/c00b24b1/image-20230711182305418.png" class="" title="image-20230711182305418"></li>
</ul>
</li>
<li>所有的python关键字<ul>
<li>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>变量命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 驼峰命名法</span></span><br><span class="line"><span class="comment"># 在python中驼峰命名法一般用于文件命名</span></span><br><span class="line">trainHead = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下划线命名法</span></span><br><span class="line"><span class="comment"># python中下划线命名法一般用于变量命名</span></span><br><span class="line">train_head = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python可以用中文给变量命名，但是不符合规则</span></span><br><span class="line"><span class="comment"># 火车头 = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python中可以以下划线开头</span></span><br><span class="line"><span class="comment"># 但是，一般不用，因为下划线开头的方法代表私有化方法，不能改动</span></span><br><span class="line">_class_a = <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4、数据类型和转义字符"><a href="#4、数据类型和转义字符" class="headerlink" title="4、数据类型和转义字符"></a>4、数据类型和转义字符</h4><ul>
<li><p>如果一个变量是全大写形式，就会被认为<strong>常量</strong>，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python的四大基本类型</p>
<ul>
<li>int 整型</li>
<li>float 浮点型</li>
<li>str 字符串类型型</li>
<li>bool 布尔类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(变量名)) <span class="comment"># 查看变量类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特殊类型None</p>
<ul>
<li>注意：None类型不能转换为其他基本数据类型</li>
</ul>
</li>
<li><p>转义字符 \ ，\n，\t，\r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转义字符以及&#x27;&#x27;和&quot;&quot;的套用</span></span><br><span class="line"><span class="comment"># 输出I&#x27;m OK</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I\&#x27;m OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出I\&#x27;m OK</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;I\&#x27;m OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I\\\&#x27;m OK&#x27;</span>) <span class="comment"># 第一个\把第二个\进行转义：\\输出\。第三个\把&#x27;进行转义：\&#x27;输出&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义字符\r：覆盖前面的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a\rb&quot;</span>)  <span class="comment"># b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a\rb\rcd&quot;</span>)  <span class="comment"># cd</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5、格式化字符串"><a href="#5、格式化字符串" class="headerlink" title="5、格式化字符串"></a>5、格式化字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">year = <span class="number">2023</span></span><br><span class="line">month = <span class="number">7</span></span><br><span class="line">day = <span class="number">11</span></span><br><span class="line">money = <span class="number">200.23445</span></span><br><span class="line">deadline = <span class="number">5</span></span><br><span class="line">percent = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>fstring  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.fstring</span></span><br><span class="line"><span class="comment"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class="line"><span class="comment"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class="line">words1 = <span class="string">f&quot;亲爱的客户<span class="subst">&#123;name&#125;</span>，截至<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;month:02d&#125;</span>月<span class="subst">&#123;day&#125;</span>日，你已经欠费<span class="subst">&#123;money:<span class="number">08.2</span>f&#125;</span>，&quot;</span> \</span><br><span class="line"><span class="string">f&quot;请在<span class="subst">&#123;deadline&#125;</span>日内，尽快缴清话费，否则将扣除<span class="subst">&#123;percent&#125;</span>%的费用&quot;</span></span><br><span class="line"><span class="built_in">print</span>(words1)</span><br></pre></td></tr></table></figure>


</li>
<li><p>占位符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.占位符</span></span><br><span class="line"><span class="comment"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class="line"><span class="comment"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class="line"><span class="comment"># 使用占位符的坑：%d%，会报错，%d%%即可解决</span></span><br><span class="line">words2 = <span class="string">&quot;亲爱的客户%s，截至%d年%02d月%d日，你已经欠费%08.2f，请在%d日内，尽快缴清话费，否则将扣除%d%%的费用&quot;</span> \</span><br><span class="line">% (name, year, month, day, money, deadline, percent)</span><br><span class="line"><span class="built_in">print</span>(words2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.format</span></span><br><span class="line"><span class="comment"># 02d：2代表month变量占两个空格，2之前的0代表，如果month变量占不到2个空格，剩下的位置将会被0补充。d代表整型</span></span><br><span class="line"><span class="comment"># 08.2f：08表示同上述02。.2f代表浮点型保留两位小数</span></span><br><span class="line">words3 = <span class="string">&quot;亲爱的客户&#123;&#125;，截至&#123;&#125;年&#123;:02d&#125;月&#123;&#125;日，你已经欠费&#123;:08.2f&#125;，请在&#123;&#125;日内，尽快缴清话费，否则将扣除&#123;&#125;%的费用&quot;</span> \</span><br><span class="line">.<span class="built_in">format</span>(name, year, month, day, money, deadline, percent)</span><br><span class="line"><span class="built_in">print</span>(words3)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.第二种format</span></span><br><span class="line">words4 = <span class="string">&quot;亲爱的客户&#123;name&#125;，截至&#123;year&#125;年&#123;month:02d&#125;月&#123;day&#125;日，你已经欠费&#123;money:08.2f&#125;，请在&#123;deadline&#125;日内，尽快缴清话费，否则将扣除&#123;percent&#125;%的费用&quot;</span> \</span><br><span class="line">.<span class="built_in">format</span>(name=name, year=year, month=month, day=day, money=money,deadline=deadline, percent=percent)</span><br><span class="line"><span class="built_in">print</span>(words4)</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.字符串拼接</span></span><br><span class="line"><span class="comment"># 注意：python中整型不可以和字符串拼接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;亲爱的客户&quot;</span>+name+<span class="string">&quot;，截至&quot;</span>+<span class="built_in">str</span>(year)+<span class="string">&quot;年&quot;</span>+<span class="built_in">str</span>(month)+<span class="string">&quot;月&quot;</span>+<span class="built_in">str</span>(day)+<span class="string">&quot;日&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6、反转字符串"><a href="#6、反转字符串" class="headerlink" title="6、反转字符串"></a>6、反转字符串</h4><ul>
<li><p>索引实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&#x27;hello Tuesday!&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起始位置:结束位置:步长</span></span><br><span class="line"><span class="built_in">print</span>(str_a[::-<span class="number">1</span>])  <span class="comment"># !yadseuT olleh</span></span><br><span class="line"><span class="comment"># 区间左闭右开[起始位置,结束位置)，所以取不到0位置</span></span><br><span class="line"><span class="built_in">print</span>(str_a[<span class="number">14</span>:<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment"># !yadseuT olle</span></span><br><span class="line"><span class="comment"># 可以不给结束位置，默认就可以取到最后一位0位置</span></span><br><span class="line"><span class="built_in">print</span>(str_a[<span class="number">14</span>::-<span class="number">1</span>])  <span class="comment"># !yadseuT olleh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>lambda匿名函数</strong>实现反转字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">srt_a = <span class="string">&quot;hello Tuesday!&quot;</span></span><br><span class="line"><span class="comment"># eh-&gt;leh-&gt;lleh-&gt;...-&gt;!yadseuT olleh</span></span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x,y:y+x,str_a))</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7、数据类型转化"><a href="#7、数据类型转化" class="headerlink" title="7、数据类型转化"></a>7、数据类型转化</h4><ul>
<li><p>整型int</p>
<ul>
<li>所有非0的整型转为bool类型后都会转为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整型int</span></span><br><span class="line">int_1 = <span class="number">1</span></span><br><span class="line">int_2 = -<span class="number">0</span></span><br><span class="line">int_3 = <span class="number">0</span></span><br><span class="line">int_4 = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(int_1), <span class="built_in">float</span>(int_2), <span class="built_in">float</span>(int_3), <span class="built_in">float</span>(int_4))  <span class="comment"># 1.0 0.0 0.0 2.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(int_1), <span class="built_in">str</span>(int_2), <span class="built_in">str</span>(int_3), <span class="built_in">str</span>(int_4))  <span class="comment"># 1 0 0 2</span></span><br><span class="line"><span class="comment"># 所有非0的整型转为bool类型后都会转为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(int_1), <span class="built_in">bool</span>(int_2), <span class="built_in">bool</span>(int_3), <span class="built_in">bool</span>(int_4))  <span class="comment"># True False False True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浮点型float</p>
<ul>
<li>浮点型转为int类型是向下取整</li>
<li>所有非0的浮点型转为bool类型后都会转为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浮点型float</span></span><br><span class="line">float_1 = <span class="number">1.0</span></span><br><span class="line">float_2 = <span class="number">1.6</span></span><br><span class="line">float_3 = -<span class="number">1.0</span></span><br><span class="line">float_4 = -<span class="number">0.0</span></span><br><span class="line">float_5 = <span class="number">0.0</span></span><br><span class="line"><span class="comment"># 浮点型转为int类型的正数是向下取整</span></span><br><span class="line"><span class="comment"># 浮点型转为int类型的负数是向上取整 int(-1.1) == -1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(float_1), <span class="built_in">int</span>(float_2), <span class="built_in">int</span>(float_3), <span class="built_in">int</span>(float_4), <span class="built_in">int</span>(float_5))  <span class="comment"># 1 1 -1 0 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(float_1), <span class="built_in">str</span>(float_2), <span class="built_in">str</span>(float_3), <span class="built_in">str</span>(float_4), <span class="built_in">str</span>(float_5))  <span class="comment"># 1.0 1.6 -1.0 -0.0 0.0</span></span><br><span class="line"><span class="comment"># 所有非0的浮点型转为bool类型后都会转为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(float_1), <span class="built_in">bool</span>(float_2), <span class="built_in">bool</span>(float_3), <span class="built_in">bool</span>(float_4), <span class="built_in">bool</span>(float_5))  <span class="comment"># True True True False False</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>字符型str</p>
<ul>
<li>只有字符为整数才能转为整型</li>
<li>只有字符为数值类型才能转为浮点型</li>
<li>所有非空（非””）的字符串转为bool时，都为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符型str</span></span><br><span class="line">str_1 = <span class="string">&quot;-1&quot;</span></span><br><span class="line">str_2 = <span class="string">&quot;1.0&quot;</span></span><br><span class="line">str_3 = <span class="string">&quot;2a&quot;</span></span><br><span class="line">str_4 = <span class="string">&quot;Ture&quot;</span></span><br><span class="line">str_5 = <span class="string">&quot;0&quot;</span></span><br><span class="line">str_6 = <span class="string">&quot; &quot;</span></span><br><span class="line">str_7 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 只有字符为整数才能转为整型，如：str_1、str_5</span></span><br><span class="line"><span class="comment"># print(int(str_1),int(str_2),int(str_3),int(str_4),int(str_5),int(str_6),int(str_7))</span></span><br><span class="line"><span class="comment"># 只有字符为数值类型才能转为浮点型，如：str_1、str_2、str_5</span></span><br><span class="line"><span class="comment"># print(float(str_1),float(str_2),float(str_3),float(str_4),float(str_5),float(str_6),float(str_7))</span></span><br><span class="line"><span class="comment"># 所有非空（非&quot;&quot;）的字符串转为bool时，都为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(str_1), <span class="built_in">bool</span>(str_2), <span class="built_in">bool</span>(str_3), <span class="built_in">bool</span>(str_4), <span class="built_in">bool</span>(str_5), <span class="built_in">bool</span>(str_6),</span><br><span class="line">      <span class="built_in">bool</span>(str_7))  <span class="comment"># True True True True True True False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔bool</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bool_1 = <span class="literal">True</span></span><br><span class="line">bool_2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(bool_1), <span class="built_in">int</span>(bool_2))  <span class="comment"># 1 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(bool_1), <span class="built_in">float</span>(bool_2))  <span class="comment"># 1.0 0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(bool_1), <span class="built_in">str</span>(bool_2))  <span class="comment"># &quot;True&quot; &quot;False&quot;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>None类型</p>
<ul>
<li>转为int和str时都会报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">None_1 = <span class="literal">None</span></span><br><span class="line"><span class="comment"># TypeError: int() argument must be a string, a bytes-like object or a real number, not &#x27;NoneType&#x27;</span></span><br><span class="line"><span class="comment"># print(int(None_1))</span></span><br><span class="line"><span class="comment"># TypeError: float() argument must be a string or a real number, not &#x27;NoneType&#x27;</span></span><br><span class="line"><span class="comment"># print(float(None_1))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(None_1))  <span class="comment"># &quot;None&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(None_1))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8、九九乘法表"><a href="#8、九九乘法表" class="headerlink" title="8、九九乘法表"></a>8、九九乘法表</h4><ul>
<li><p>使用嵌套for循环实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1=1	</span><br><span class="line">1*2=2	2*2=4	</span><br><span class="line">1*3=3	2*3=6	3*3=9	</span><br><span class="line">1*4=4	2*4=8	3*4=12	4*4=16	</span><br><span class="line">1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	</span><br><span class="line">1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	</span><br><span class="line">1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	</span><br><span class="line">1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	</span><br><span class="line">1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>列表推导式</strong>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join([<span class="string">&quot;\t&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,i+<span class="number">1</span>)])<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1=1	</span><br><span class="line">1*2=2	2*2=4	</span><br><span class="line">1*3=3	2*3=6	3*3=9	</span><br><span class="line">1*4=4	2*4=8	3*4=12	4*4=16	</span><br><span class="line">1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	</span><br><span class="line">1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	</span><br><span class="line">1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	</span><br><span class="line">1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	</span><br><span class="line">1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9、str的常用方法"><a href="#9、str的常用方法" class="headerlink" title="9、str的常用方法"></a>9、str的常用方法</h4><h5 id="split-切分"><a href="#split-切分" class="headerlink" title="split() - 切分"></a>split() - 切分</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照指定字符进行切分，返回一个列表。如果不传入第二个参数（maxSplit），默认全部切分</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala&quot;</span></span><br><span class="line">str_1_split = str_1.split(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_split)</span><br></pre></td></tr></table></figure>

<h5 id="strip-剥离、去除、脱离"><a href="#strip-剥离、去除、脱离" class="headerlink" title="strip() - 剥离、去除、脱离"></a>strip() - 剥离、去除、脱离</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去除前后空格和特殊字符</span></span><br><span class="line">str_1 = <span class="string">&quot; \r\n  python,java,scala  \r\n &quot;</span></span><br><span class="line">str_1_strip = str_1.strip()</span><br><span class="line"><span class="built_in">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传入字符串参数，去除前后指定字符串</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala,py&quot;</span></span><br><span class="line">str_1_strip = str_1.strip(<span class="string">&quot;py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_strip)</span><br></pre></td></tr></table></figure>

<h5 id="lstrip-左剥离"><a href="#lstrip-左剥离" class="headerlink" title="lstrip() - 左剥离"></a>lstrip() - 左剥离</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认去除左边头的空格和特殊字符</span></span><br><span class="line">str_1 = <span class="string">&quot; \r\n  python,java,scala   &quot;</span></span><br><span class="line">str_1_lstrip = str_1.lstrip()</span><br><span class="line"><span class="built_in">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lstrip(参数)</span></span><br><span class="line"><span class="comment"># 去除左边头，指定字符串</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala,py&quot;</span></span><br><span class="line">str_1_lstrip = str_1.lstrip(<span class="string">&quot;py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_lstrip)</span><br></pre></td></tr></table></figure>

<h5 id="rstrip-右剥离"><a href="#rstrip-右剥离" class="headerlink" title="rstrip() - 右剥离"></a>rstrip() - 右剥离</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认去除右边头的空格和特殊字符</span></span><br><span class="line">str_1 = <span class="string">&quot; \r\n  python,java,scala   \r\n&quot;</span></span><br><span class="line">str_1_rstrip = str_1.rstrip()</span><br><span class="line"><span class="built_in">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rstrip(参数) - 右剥离</span></span><br><span class="line"><span class="comment"># 去除左边头，指定字符串</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala,py&quot;</span></span><br><span class="line">str_1_rstrip = str_1.rstrip(<span class="string">&quot;py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_rstrip)</span><br></pre></td></tr></table></figure>

<h5 id="lower-小写"><a href="#lower-小写" class="headerlink" title="lower() - 小写"></a>lower() - 小写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大写字母转为小写</span></span><br><span class="line">str_1 = <span class="string">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class="line">str_1_lower = str_1.lower()</span><br><span class="line"><span class="built_in">print</span>(str_1_lower)</span><br></pre></td></tr></table></figure>

<h5 id="upper-大写"><a href="#upper-大写" class="headerlink" title="upper() - 大写"></a>upper() - 大写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小写字母转为大写</span></span><br><span class="line">str_1 = <span class="string">&quot;Python,Java,Scala&quot;</span></span><br><span class="line">str_1_upper = str_1.upper()</span><br><span class="line"><span class="built_in">print</span>(str_1_upper)</span><br></pre></td></tr></table></figure>

<h5 id="islower-是否为小写"><a href="#islower-是否为小写" class="headerlink" title="islower() - 是否为小写"></a>islower() - 是否为小写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断所有字母是否是小写，如果是返回Ture，如果不是返回false</span></span><br><span class="line">str_1 = <span class="string">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class="line">str_1_islower = str_1.islower()</span><br><span class="line"><span class="built_in">print</span>(str_1_islower)</span><br></pre></td></tr></table></figure>

<h5 id="isupper-是否为大写"><a href="#isupper-是否为大写" class="headerlink" title="isupper() - 是否为大写"></a>isupper() - 是否为大写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断所有字母是否是大写，如果是返回Ture，如果不是返回false</span></span><br><span class="line">str_1 = <span class="string">&quot;PYTHON,JAVA,SCALA&quot;</span></span><br><span class="line">str_1_isupper = str_1.isupper()</span><br><span class="line"><span class="built_in">print</span>(str_1_isupper)</span><br></pre></td></tr></table></figure>

<h5 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace() - 替换"></a>replace() - 替换</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把前一个参数的值替换为后一个参数的值，默认将字符串中所有 为前一个参数的子字符串都替换为后一个参数</span></span><br><span class="line"><span class="comment"># 2代表替换前两个值为前一个参数的子字符串</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala&quot;</span></span><br><span class="line">str_1_replace_1 = str_1.replace(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>)</span><br><span class="line">str_1_replace_2 = str_1.replace(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_replace_1)</span><br><span class="line"><span class="built_in">print</span>(str_1_replace_2)</span><br></pre></td></tr></table></figure>

<h5 id="index-索引"><a href="#index-索引" class="headerlink" title="index() - 索引"></a>index() - 索引</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回指定区间的指定元素的索引值，默认返回第一个指定元素的索引值</span></span><br><span class="line">str_1 = <span class="string">&quot;python,java,scala&quot;</span></span><br><span class="line">str_1_index_1 = str_1.index(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">str_1_index_2 = str_1.index(<span class="string">&quot;a&quot;</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(str_1_index_1)</span><br><span class="line"><span class="built_in">print</span>(str_1_index_2)</span><br></pre></td></tr></table></figure>

<h5 id="ord-字符转换为ASCii码值"><a href="#ord-字符转换为ASCii码值" class="headerlink" title="ord() - 字符转换为ASCii码值"></a>ord() - 字符转换为ASCii码值</h5><ul>
<li><code>ord</code> 函数的全称是 “ordinal”, 它是从 “ordinal number”（序数）一词中衍生而来</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>))  <span class="comment"># 65</span></span><br></pre></td></tr></table></figure>

<h5 id="chr-ASCii码转换为字符"><a href="#chr-ASCii码转换为字符" class="headerlink" title="chr() - ASCii码转换为字符"></a>chr() - ASCii码转换为字符</h5><ul>
<li><code>chr</code> 函数的全程是 “character”，它是从 “character”（字符）一词中衍生而来。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># A</span></span><br></pre></td></tr></table></figure>

<h4 id="10、运算符"><a href="#10、运算符" class="headerlink" title="10、运算符"></a>10、运算符</h4><h5 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h5><ul>
<li><img src="/posts/c00b24b1/image-20230713201620205.png" class="" title="python笔记&#x2F;image-20230713201620205.png"></li>
</ul>
<h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><ul>
<li><img src="/posts/c00b24b1/image-20230713201653705.png" class=""></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较运算符 ==</span></span><br><span class="line"><span class="comment"># 只有 1（整型或者浮点行）等与 False</span></span><br><span class="line"><span class="comment"># 只有 0（整型或者浮点行）等与 False</span></span><br><span class="line"><span class="comment"># 其他数字及不等于False也不等于False，但是强转为bool型时，只有0才能转为False，其他皆为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> == <span class="literal">True</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.0</span> == <span class="literal">True</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> == <span class="literal">True</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> == <span class="literal">False</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> == <span class="literal">False</span>)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><ul>
<li><img src="/posts/c00b24b1/image-20230713201728513.png" class=""></li>
</ul>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><ul>
<li><img src="/posts/c00b24b1/image-20230713201804728.png" class="" title="python笔记&#x2F;image-20230713201804728.png"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符 and or not</span></span><br><span class="line"><span class="comment"># 注意 逻辑运算符中 非0的数皆为True</span></span><br><span class="line"><span class="comment"># and 若前者为False，则返回前者的值，否则返回后者</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">20</span> == <span class="literal">False</span>)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>)  <span class="comment"># 30</span></span><br><span class="line"><span class="comment"># or 若前者为Ture，则返回前面的值，否则返回前者</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">20</span> == <span class="literal">True</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">20</span> <span class="keyword">or</span> <span class="number">30</span>)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">0</span>)  <span class="comment"># True 注意这个除0之外都是</span></span><br></pre></td></tr></table></figure>

<h5 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h5><ul>
<li><img src="/posts/c00b24b1/image-20230713201909704.png" class="" title="python笔记&#x2F;image-20230713201909704.png"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">49</span></span><br><span class="line">b = <span class="number">11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;按位与运算符&amp; 同一则 1，否则为0</span></span><br><span class="line"><span class="string">110001 a</span></span><br><span class="line"><span class="string">001011 b </span></span><br><span class="line"><span class="string">000000 a&amp;b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;按位或运算符| 有1则1，否则为0</span></span><br><span class="line"><span class="string">110001 a</span></span><br><span class="line"><span class="string">001011 b     </span></span><br><span class="line"><span class="string">111011 a&amp;b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># 59</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;按位异或运算符^ 相异为1，否则为0</span></span><br><span class="line"><span class="string">110001 a</span></span><br><span class="line"><span class="string">001011 b     </span></span><br><span class="line"><span class="string">111010 a&amp;b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># 58</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;按位取反运算符~ 把1变为0，把0变为1 ，结果为-a-1</span></span><br><span class="line"><span class="string">1 110001 a</span></span><br><span class="line"><span class="string">0 001110 ~a</span></span><br><span class="line"><span class="string">要计算负数的补码，需要先将其二进制表示按位取反，然后再加 1。</span></span><br><span class="line"><span class="string">对于 001110，按位取反得到 110001。</span></span><br><span class="line"><span class="string">然后，将 110001 加 1，得到 110010。</span></span><br><span class="line"><span class="string">最终的结果 110010 对应十进制的 -50。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(~a)  <span class="comment"># -50</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;左移运算符&lt;&lt; 二进制全部往前若干位，高位往前低位补0，如果补0后的整体达到32位，则舍弃高位保留32位</span></span><br><span class="line"><span class="string">110001 a</span></span><br><span class="line"><span class="string">11000100 a&lt;&lt;2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;&lt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;右移运算符&gt;&gt; 二进制全部往后若干位，舍弃低位</span></span><br><span class="line"><span class="string">110001 a</span></span><br><span class="line"><span class="string">1100 a&gt;&gt;2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;&gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="11、if-elif选择结构"><a href="#11、if-elif选择结构" class="headerlink" title="11、if&#x2F;elif选择结构"></a>11、if&#x2F;elif选择结构</h4><ul>
<li><img src="/posts/c00b24b1/image-20230713212833658.png" class=""></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由薪水判断心情</span></span><br><span class="line">    salary = <span class="number">2500</span></span><br><span class="line">    <span class="keyword">if</span> salary &gt;= <span class="number">10000</span>:  <span class="comment"># 区间 [10000,正无穷)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子过的非常好&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> salary &gt;= <span class="number">5000</span>:  <span class="comment"># 区间 [5000,10000)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子还能过的去&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 区间 (负无穷,5000)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子过不去了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反着写</span></span><br><span class="line">    <span class="keyword">if</span> salary &lt; <span class="number">5000</span>:  <span class="comment"># 区间 (负无穷,5000)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子过不去了&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> salary &lt; <span class="number">10000</span>:  <span class="comment"># 区间 [5000,10000)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子还能过的去&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 区间 [10000,正无穷)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日子过的非常好&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三元运算符</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;日子过不去了&quot;</span>) <span class="keyword">if</span> salary &lt; <span class="number">5000</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;日子过的非常好&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;日子过不去了&quot;</span>) <span class="keyword">if</span> salary &lt; <span class="number">5000</span> <span class="keyword">else</span> (<span class="built_in">print</span>(<span class="string">&quot;日子还能过的去&quot;</span>) <span class="keyword">if</span> salary &lt; <span class="number">10000</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;日子过的非常好&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="12、while-for循环结构"><a href="#12、while-for循环结构" class="headerlink" title="12、while&#x2F;for循环结构"></a>12、while&#x2F;for循环结构</h4><p>while循环语句小练习：</p>
<ul>
<li><p>1.计算1~100中奇数的和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="comment"># 判断为基数</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            summ += i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br><span class="line">    <span class="comment"># 简化</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="comment"># 判断为基数</span></span><br><span class="line">        summ += i</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.break continue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.break continue</span></span><br><span class="line">    <span class="comment"># 下面的代码会陷入死循环</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.给定一个字符串s &#x3D; ‘beautifulCode’<br>从前到后检查每个字母<br>如果是大写字母则停止检查并输出：有大写字母，第一个大写字母为%s<br>否则输出：无大写字母</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;beautifulCode&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> s[i].isupper():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;有大写字母，第一个大写字母<span class="subst">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 由 i 值判断判断无大写字母</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无大写字母&#x27;</span>)</span><br><span class="line">    <span class="comment"># 由 i 值判断判断无大写字母</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> s[i].isupper():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;有大写字母，第一个大写字母<span class="subst">&#123;s[i]&#125;</span>&quot;</span>)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无大写字母&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="13、命名空间"><a href="#13、命名空间" class="headerlink" title="13、命名空间"></a>13、命名空间</h4><ul>
<li><p>Python中一般有三种命名空间：</p>
<ul>
<li>内置名称（built-in names）<ul>
<li>Python 语言内置的名称，比如函数名 abs、chr 和异常名称 BaseException、Exception 等等</li>
</ul>
</li>
<li>全局名称（global names）<ul>
<li>模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li>
</ul>
</li>
<li>局部名称（local names）<ul>
<li>函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）</li>
</ul>
</li>
</ul>
</li>
<li><img src="/posts/c00b24b1/image-20230713215248858.png" class="" title="python笔记&#x2F;image-20230713215248858.png"></li>
<li><p>命名空间查找顺序:  由内往外</p>
<ul>
<li>假设我们要使用变量 money，则 Python 的查找顺序为：<ul>
<li>局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</li>
<li>如果找不到变量 money，它将放弃查找并引发一个错误</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="14、作用域"><a href="#14、作用域" class="headerlink" title="14、作用域"></a>14、作用域</h4><ul>
<li><p>Python 的作用域一共有4种：</p>
<ul>
<li>L（Local）：包含局部变量，比如一个函数&#x2F;方法内部</li>
<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量</li>
<li>G（Global）：最外层，比如当前模块的全局变量</li>
<li>B（Built-in）：包含内建变量&#x2F;关键字等，最后被搜索</li>
<li><strong>在局部找不到，便会去局部外的局部找（例如闭包Enclosing），再找不到就会去全局找，再者去内置中找</strong></li>
</ul>
</li>
<li><p><strong>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if&#x2F;elif&#x2F;else&#x2F;、try&#x2F;except、for&#x2F;while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="string">&quot;i am from Runnob&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg)  <span class="comment"># if不会形成新的作用域</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三部分-数据容器"><a href="#第三部分-数据容器" class="headerlink" title="第三部分 数据容器"></a>第三部分 数据容器</h2><h4 id="todo用法"><a href="#todo用法" class="headerlink" title="todo用法"></a>todo用法</h4><ul>
<li><img src="/posts/c00b24b1/image-20230713220504552.png" class=""></li>
</ul>
<h4 id="ctrl-p-可以让参数提示重新出现"><a href="#ctrl-p-可以让参数提示重新出现" class="headerlink" title="ctrl + p 可以让参数提示重新出现"></a><strong>ctrl + p 可以让参数提示重新出现</strong></h4><h4 id="id-元素-返回元素内存地址"><a href="#id-元素-返回元素内存地址" class="headerlink" title="id(元素) - 返回元素内存地址"></a>id(元素) - 返回元素内存地址</h4><ul>
<li><p>list列表、tuple元组、dict字典、set集合</p>
</li>
<li><p>在 Python 中，<code>sort()</code> 方法是列表对象的内置方法，用于对列表进行原地排序。<code>sort()</code> 方法的底层实现使用一种名为 <strong>Timsort 的排序算法</strong>。</p>
</li>
</ul>
<h4 id="1、list列表"><a href="#1、list列表" class="headerlink" title="1、list列表"></a>1、list列表</h4><ul>
<li>list的特点：有序的集合、可以有重复值、值类型不唯一、可变</li>
</ul>
<h5 id="append-追加"><a href="#append-追加" class="headerlink" title="append - 追加"></a>append - 追加</h5><ul>
<li>添加元素，在末尾添加</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates.append(<span class="string">&quot;Irving&quot;</span>)  <span class="comment"># 添加元素，在末尾添加</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br></pre></td></tr></table></figure>

<h5 id="inster-插入"><a href="#inster-插入" class="headerlink" title="inster - 插入"></a>inster - 插入</h5><ul>
<li>在指定索引位置，插入指定元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates.insert(<span class="number">0</span>, <span class="string">&quot;Irving&quot;</span>)  <span class="comment"># 在指定索引位置，插入指定元素</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br></pre></td></tr></table></figure>

<h5 id="extend-继承"><a href="#extend-继承" class="headerlink" title="extend - 继承"></a>extend - 继承</h5><ul>
<li>再末尾追加可迭代容器中的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates.extend([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 再末尾追加可迭代容器中的元素</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)  <span class="comment"># [&#x27;James&#x27;, &#x27;Kobe&#x27;, &#x27;Polo&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h5 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove - 删除"></a>remove - 删除</h5><ul>
<li>删除指定元素，但不返回删除的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates.remove(<span class="string">&quot;James&quot;</span>)  <span class="comment"># 删除指定元素，但不返回删除的元素</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br></pre></td></tr></table></figure>

<h5 id="pop-弹出、删除"><a href="#pop-弹出、删除" class="headerlink" title="pop - 弹出、删除"></a>pop - 弹出、删除</h5><ul>
<li>删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates_pop = class_mates.pop()  <span class="comment"># 删除指定位置元素，并返回删除的元素，默认删除最后一个元素，如果列表为空，则会引发indexError</span></span><br><span class="line"><span class="built_in">print</span>(class_mates_pop)</span><br><span class="line"></span><br><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates_pop_1 = class_mates.pop(<span class="number">1</span>)  <span class="comment"># 删除，索引为1的元素</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br><span class="line"><span class="built_in">print</span>(class_mates_pop_1)</span><br></pre></td></tr></table></figure>

<h5 id="del-关键字删除、清除内存空间"><a href="#del-关键字删除、清除内存空间" class="headerlink" title="del - 关键字删除、清除内存空间"></a>del - 关键字删除、清除内存空间</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> class_mates[<span class="number">1</span>]  <span class="comment"># 使用del关键字进行删除</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br><span class="line"></span><br><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> class_mates</span><br><span class="line"><span class="comment"># print(class_mates)  # NameError: name &#x27;class_mates&#x27; is not defined.</span></span><br></pre></td></tr></table></figure>

<h5 id="index-索引-1"><a href="#index-索引-1" class="headerlink" title="index - 索引"></a>index - 索引</h5><ul>
<li>查询指定元素，返回索引值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">index_num = class_mates.index(<span class="string">&#x27;James&#x27;</span>)  <span class="comment"># 查询指定元素，返回索引值</span></span><br><span class="line"><span class="built_in">print</span>(index_num)</span><br></pre></td></tr></table></figure>

<h5 id="count-统计"><a href="#count-统计" class="headerlink" title="count - 统计"></a>count - 统计</h5><ul>
<li>统计指定元素出现的次数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list_1_count = list_1.count(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(list_1_count)  <span class="comment"># 统计指定元素出现的次数</span></span><br></pre></td></tr></table></figure>

<h5 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort - 排序"></a>sort - 排序</h5><ul>
<li>默认为升序排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list_1.sort()  <span class="comment"># 默认为升序排序</span></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br></pre></td></tr></table></figure>

<ul>
<li>指定参数revers为True，设置为降序排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list_1.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 指定参数revers为True，设置为降序排序</span></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br></pre></td></tr></table></figure>

<h5 id="reverse-反转"><a href="#reverse-反转" class="headerlink" title="reverse - 反转"></a>reverse - 反转</h5><ul>
<li>列表中的元素进行反转</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list_1.reverse()  <span class="comment"># 将列表中的元素进行反转</span></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br></pre></td></tr></table></figure>

<h5 id="copy-复制"><a href="#copy-复制" class="headerlink" title="copy - 复制"></a>copy - 复制</h5><ul>
<li>复制列表，重新开辟一片新的内存空间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates_copy = class_mates.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(class_mates))  <span class="comment"># 2294213590208</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(class_mates_copy))  <span class="comment"># 2294213319104</span></span><br></pre></td></tr></table></figure>

<h5 id="join-连接-列表转为字符串"><a href="#join-连接-列表转为字符串" class="headerlink" title="join - 连接  列表转为字符串"></a>join - 连接  列表转为字符串</h5><ul>
<li>把列表中的字符串元素以指定字符连接起来，转换为字符串</li>
<li><strong>请注意：如果列表中的元素不是字符串，使用此方法则会报错</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(class_mates))  <span class="comment"># 把列表中的字符串元素以指定字符连接起来</span></span><br><span class="line">                                <span class="comment"># 请注意：如果列表中的元素不是字符串，使用此方法则会报错</span></span><br></pre></td></tr></table></figure>

<p>通过索引的方式，对列表中的元素进行查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_2 = [<span class="string">&#x27;Hadoop&#x27;</span>, <span class="string">&#x27;Hive&#x27;</span>, <span class="string">&#x27;2006&#x27;</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(list_2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list_2))</span><br><span class="line"><span class="built_in">print</span>(list_2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list_2[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(list_2[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(list_2[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># print(list_2[4])  # list index out of range</span></span><br></pre></td></tr></table></figure>

<h5 id="通过索引的方式，对列表中的元素进行修改"><a href="#通过索引的方式，对列表中的元素进行修改" class="headerlink" title="通过索引的方式，对列表中的元素进行修改"></a>通过索引的方式，对列表中的元素进行修改</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_mates = [<span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;Kobe&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>]</span><br><span class="line">class_mates[<span class="number">1</span>] = <span class="string">&quot;Kobe Bryant&quot;</span>  <span class="comment"># 通过索引的方式，对列表中的元素进行修改</span></span><br><span class="line"><span class="built_in">print</span>(class_mates)</span><br></pre></td></tr></table></figure>

<h5 id="len-长度"><a href="#len-长度" class="headerlink" title="len - 长度"></a>len - 长度</h5><ul>
<li>输出列表的长度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_2 = [<span class="string">&#x27;Hadoop&#x27;</span>, <span class="string">&#x27;Hive&#x27;</span>, <span class="string">&#x27;2006&#x27;</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list_2))</span><br></pre></td></tr></table></figure>

<h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><ul>
<li>起始位置、结束位置、步长都可以省略，如省略则等于默认值</li>
<li>如果想要将列表的顺序颠倒，则可以使用::-1 </li>
<li>切片操作同样适用于：字符串、元组中，以及后续numpy、pandas中的数据结构</li>
<li><img src="/posts/c00b24b1/image-20230713221852883.png" class="" title="python笔记&#x2F;image-20230713221852883.png"></li>
</ul>
<h4 id="2、tuple元组"><a href="#2、tuple元组" class="headerlink" title="2、tuple元组"></a>2、tuple元组</h4><ul>
<li>tuple 类似与列表 、 <strong>不可变（没有list哪些改变增删改的方法）</strong></li>
<li>查找tuple中的元素，其方法也是切片</li>
<li>注意定义一个元素的元组时，在元素后加上一个英文逗号,</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple_a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&quot;dasd&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 注意定义一个元素的元组时，在元素后加上一个英文逗号,</span></span><br><span class="line"><span class="comment"># 如果不追加，则为int类型</span></span><br><span class="line">tuple_b = (<span class="number">1</span>,)</span><br><span class="line">tuple_c = (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple_b), <span class="built_in">type</span>(tuple_c))  <span class="comment">#  &lt;class &#x27;tuple&#x27;&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>tuple的使用可以使得代码更安全，防止错误赋值导致重要对象的改变</li>
</ul>
<h4 id="3、dict字典"><a href="#3、dict字典" class="headerlink" title="3、dict字典"></a>3、dict字典</h4><ul>
<li><p>dict字典中，</p>
<ul>
<li>键必须是唯一的，但值可以重复</li>
<li>值可以取任何数据类型，但键必须是不可变的类型<ul>
<li>如基本数据类型、元组（列表不可以、字典也不可以）</li>
</ul>
</li>
<li>dict字典中的KV键值对可以动态增减</li>
<li>dict字典是无序的（无索引）</li>
</ul>
</li>
<li><p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。</p>
<ul>
<li><p>假设字典包含了1万个汉字，需要再其中查询某一个字</p>
</li>
<li><p>第一种方式是把字典从第一页往后翻，直到找到所需的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢</p>
</li>
<li><p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，dict字典就是该种方式</p>
<ul>
<li><p>dict会把元素的键转换为hash值存储在内存中，查询时根据hash值查询</p>
</li>
<li><p><strong>请注意：在 Python 中，不同的哈希函数和数据类型都可能产生哈希冲突（不同元素的哈希值相同），尽管冲突的概率非常低。这是因为哈希函数的输出空间有限，而输入数据的空间是无限的。</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="新增一个键值对"><a href="#新增一个键值对" class="headerlink" title="新增一个键值对"></a>新增一个键值对</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增一个键值对</span></span><br><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">dict_1[<span class="string">&#x27;Luck&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br></pre></td></tr></table></figure>

<h5 id="更改键值对"><a href="#更改键值对" class="headerlink" title="更改键值对"></a>更改键值对</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">dict_1[<span class="string">&#x27;Michael&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br></pre></td></tr></table></figure>

<h5 id="查询键值对"><a href="#查询键值对" class="headerlink" title="查询键值对"></a>查询键值对</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(dict_1[<span class="string">&#x27;Michael&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h5 id="get-k-通过键获取值"><a href="#get-k-通过键获取值" class="headerlink" title="get(k) - 通过键获取值"></a>get(k) - 通过键获取值</h5><ul>
<li>返回指定key的value</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get() - 获取</span></span><br><span class="line">    dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(dict_1.get(<span class="string">&#x27;Michael&#x27;</span>))  <span class="comment"># 返回指定key的value</span></span><br></pre></td></tr></table></figure>

<h5 id="pop-k-通过键删除值"><a href="#pop-k-通过键删除值" class="headerlink" title="pop(k) - 通过键删除值"></a>pop(k) - 通过键删除值</h5><ul>
<li>删除指定键值对</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pop - 弹出</span></span><br><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">dict_1.pop(<span class="string">&#x27;Michael&#x27;</span>)  <span class="comment"># 删除指定键值对</span></span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br></pre></td></tr></table></figure>

<h5 id="keys-获取所有的键，并返回一个列表"><a href="#keys-获取所有的键，并返回一个列表" class="headerlink" title="keys() - 获取所有的键，并返回一个列表"></a>keys() - 获取所有的键，并返回一个列表</h5><ul>
<li>获取所有键的集合，并返回一个集合：dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])</li>
<li><strong>请注意</strong><ul>
<li>dict_keys([‘Michael’, ‘Bob’, ‘Tracy’])不是列表类型，因此不能通过索引访问</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict_1.keys())  <span class="comment"># 获取所有键的集合，并返回一个集合：dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict_1.keys():  <span class="comment"># 遍历所有键</span></span><br><span class="line">	<span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict_1:  <span class="comment"># 遍历所有键</span></span><br><span class="line">	<span class="built_in">print</span>(item)</span><br><span class="line"><span class="string">&quot;&quot;&quot;请注意</span></span><br><span class="line"><span class="string">dict_keys([&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;])不是列表类型，因此不能通过索引访问</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="values-获取所有的值，并返回一个列表"><a href="#values-获取所有的值，并返回一个列表" class="headerlink" title="values() - 获取所有的值，并返回一个列表"></a>values() - 获取所有的值，并返回一个列表</h5><ul>
<li>获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict_1.values())  <span class="comment"># 获取所有值的集合，并返回一个集合：dict_values([95, 75, 85])</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict_1.values():  <span class="comment"># 遍历所有的值</span></span><br><span class="line">	<span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<h5 id="items-常用于dict的遍历"><a href="#items-常用于dict的遍历" class="headerlink" title="items() - 常用于dict的遍历"></a>items() - 常用于dict的遍历</h5><ul>
<li>把所有的键值对转换为二元组</li>
<li>并返回一个集合：dict_items([(‘Michael’, 95), (‘Bob’, 75), (‘Tracy’, 85)])</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(dict_1.items())  <span class="comment"># 以二元组的方式获取所有的键值，并返回一个集合：dict_items([(&#x27;Michael&#x27;, 95), (&#x27;Bob&#x27;, 75), (&#x27;Tracy&#x27;, 85)])</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> dict_1.items():  <span class="comment"># 遍历所有的键和值</span></span><br><span class="line">        <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure>

<h5 id="len-长度-1"><a href="#len-长度-1" class="headerlink" title="len_() - 长度"></a><em>len</em>_() - 长度</h5><ul>
<li>返回dict的长度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict_1.__len__())  <span class="comment"># 返回dict的长度</span></span><br></pre></td></tr></table></figure>

<h5 id="clear-清空字典"><a href="#clear-清空字典" class="headerlink" title="clear - 清空字典"></a>clear - 清空字典</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">dict_1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict_1)  <span class="comment"># 返回一个空字典&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="in-判断是否包含"><a href="#in-判断是否包含" class="headerlink" title="in - 判断是否包含"></a>in - 判断是否包含</h5><ul>
<li>A in B(iterable) ：判断A是否在B中，B一般为一个可迭代的数据容器，如列表，元组，字典 ，set集合</li>
<li>如果B为字典，则A只能为键，但是可以通过其他方法取出字典中的值，再判断</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in 判断是否包含</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Michael&#x27;</span> <span class="keyword">in</span> dict_1)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Michael&#x27;</span> <span class="keyword">in</span> dict_1.keys())  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">95</span> <span class="keyword">in</span> dict_1.values())  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((<span class="string">&#x27;Michael&#x27;</span>,<span class="number">95</span>) <span class="keyword">in</span> dict_1.items())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h5 id="注意：字典中的字符串输出都是以单引号输出"><a href="#注意：字典中的字符串输出都是以单引号输出" class="headerlink" title="注意：字典中的字符串输出都是以单引号输出"></a>注意：字典中的字符串输出都是以单引号输出</h5><h4 id="4、set集合"><a href="#4、set集合" class="headerlink" title="4、set集合"></a>4、set集合</h4><ul>
<li><p>set集合的特点：值是唯一的，会去重，会排序，无序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.3</span>, <span class="number">1.2</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(set_1)  <span class="comment"># &#123;False, 1, 2, 3, 1.2, 5, &#x27;a&#x27;&#125;，1就是True，0就是False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建空的set集合 {}是空字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(set_1, <span class="built_in">type</span>(set_1))  <span class="comment"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">set_1 = <span class="built_in">set</span>([])</span><br><span class="line"><span class="built_in">print</span>(set_1, <span class="built_in">type</span>(set_1))  <span class="comment"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><ul>
<li>这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.3</span>, <span class="number">1.2</span>&#125;</span><br><span class="line">set_1.pop()  <span class="comment"># 这里的pop不需要参数，会随机（arbitrary）删除集合内的元素</span></span><br><span class="line"><span class="built_in">print</span>(set_1)</span><br></pre></td></tr></table></figure>

<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><ul>
<li>删除指定元素，没有返回值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.3</span>, <span class="number">1.2</span>&#125;</span><br><span class="line">set_1.remove(<span class="number">1</span>)  <span class="comment"># 删除指定元素</span></span><br><span class="line"><span class="built_in">print</span>(set_1)</span><br></pre></td></tr></table></figure>

<h5 id="discard-抛弃"><a href="#discard-抛弃" class="headerlink" title="discard - 抛弃"></a>discard - 抛弃</h5><ul>
<li>抛弃，删除指定元素，如果元素不存在，也不会报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.3</span>, <span class="number">1.2</span>&#125;</span><br><span class="line">set_1.discard(<span class="string">&#x27;b&#x27;</span>)  <span class="comment"># 抛弃，删除指定元素，如果元素不存在，也不会报错</span></span><br><span class="line"><span class="built_in">print</span>(set_1)</span><br></pre></td></tr></table></figure>

<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><ul>
<li>添加指定元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set_1.add(<span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 添加指定元素</span></span><br><span class="line"><span class="built_in">print</span>(set_1)</span><br></pre></td></tr></table></figure>

<h5 id="intersection-交"><a href="#intersection-交" class="headerlink" title="intersection - 交"></a>intersection - 交</h5><h5 id="union-并"><a href="#union-并" class="headerlink" title="union - 并"></a>union - 并</h5><h5 id="difference-差"><a href="#difference-差" class="headerlink" title="difference - 差"></a>difference - 差</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交、并、差</span></span><br><span class="line">set_1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">set_2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment"># intersection - 交</span></span><br><span class="line">inter = set_1.intersection(set_2)  <span class="comment"># A 交 B</span></span><br><span class="line"><span class="built_in">print</span>(inter)</span><br><span class="line"><span class="comment"># union - 并</span></span><br><span class="line">uni = set_1.union(set_2)  <span class="comment"># A 并 B</span></span><br><span class="line"><span class="built_in">print</span>(uni)</span><br><span class="line"><span class="comment"># different - 差</span></span><br><span class="line">dif = set_1.difference(set_2)  <span class="comment"># A-B ，返回A中不是B中元素的集合</span></span><br><span class="line"><span class="built_in">print</span>(dif)</span><br></pre></td></tr></table></figure>

<h4 id="5、遍历数据容器"><a href="#5、遍历数据容器" class="headerlink" title="5、遍历数据容器"></a>5、遍历数据容器</h4><ul>
<li><p>1.遍历列表、元组、set、直接遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line"><span class="keyword">for</span> list_1_sub <span class="keyword">in</span> list_1:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_1_sub:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.遍历列表、元组 通过索引遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_1[i])):</span><br><span class="line">        <span class="built_in">print</span>(list_1[i][j])</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.遍历字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.遍历字典</span></span><br><span class="line">dict_1 = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;k3&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 遍历key值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict_1:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict_1.keys():</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># 遍历value值</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dict_1.values():</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"><span class="comment"># 遍历key,value</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict_1.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6、列表推导式"><a href="#6、列表推导式" class="headerlink" title="6、列表推导式"></a>6、列表推导式</h4><ul>
<li>生成一个 1~10的奇数 的列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个 1~10的奇数 的列表</span></span><br><span class="line">list_1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">list_1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line"><span class="comment"># 使用列表推到式方式</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>列表推导式中嵌入for和if语句</p>
<ul>
<li>由于列表推导式的语法规则，正确的顺序应该是先定义外层循环（i 循环），然后在内层循环（j 循环）中引用外层循环的变量，从左到右嵌套，要生成的变量写在最左边</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复杂嵌套的列表推导式</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span>(j, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>([j <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>) <span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>九九乘法表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 99乘法表变为列表推导式的形式</span></span><br><span class="line">    <span class="comment"># 通过join方法把列表转换为字符串</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join([<span class="string">&quot;\t&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;i * j&#125;</span>&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]))</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7、冒泡排序"><a href="#7、冒泡排序" class="headerlink" title="7、冒泡排序"></a>7、冒泡排序</h4><ul>
<li><p>冒泡排序思想</p>
<ul>
<li>循环遍历（遍历n-1次）</li>
<li>两两比较</li>
<li>大的往后挪</li>
</ul>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># num_list = [213, 3415, 3466, 247, 241, 86, 589, 222, 1]</span></span><br><span class="line">num_list = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_list) - <span class="number">1</span>):  <span class="comment"># 只需要进行 n-1 轮排序即可</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_list) - <span class="number">1</span> - i):  <span class="comment"># -1-i代表不需要动的数值的个数</span></span><br><span class="line">        <span class="keyword">if</span> num_list[j] &gt; num_list[j + <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 只有python才会有的交换方式</span></span><br><span class="line">            num_list[j], num_list[j + <span class="number">1</span>] = num_list[j + <span class="number">1</span>], num_list[j]</span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h5 id="flag优化"><a href="#flag优化" class="headerlink" title="flag优化"></a>flag优化</h5><ul>
<li>优化思想，当某一次循环遍历时，没有数据进行交换，说明此时已经排序完成，flag是检查每次循环遍历时，】&#x3D;】是否发生了数据交换的工具</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_list = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_list) - <span class="number">1</span>):</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_list) - <span class="number">1</span> - i):</span><br><span class="line">        <span class="keyword">if</span> num_list[j] &gt; num_list[j + <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 只有python才会有的交换方式</span></span><br><span class="line">            num_list[j], num_list[j + <span class="number">1</span>] = num_list[j + <span class="number">1</span>], num_list[j]</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure>

<h4 id="8、杨辉三角"><a href="#8、杨辉三角" class="headerlink" title="8、杨辉三角"></a>8、杨辉三角</h4><ul>
<li><p>构建杨辉三角并打印，每一行用list列表接收，期望的最终结果如下所示：</p>
</li>
<li><img src="/posts/c00b24b1/image-20230714090438935.png" class="">
</li>
<li><img src="/posts/c00b24b1/image-20230714090457699.png" class="">
</li>
<li><p>第一种方法（自己实现）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 定义一个空列表，用来存储杨辉三角</span></span><br><span class="line">    big_list = []</span><br><span class="line">    <span class="comment"># i 代表每一行的索引位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 定义一个空列表，用来动态存储杨辉三角的每一行</span></span><br><span class="line">        small_list = []</span><br><span class="line">        <span class="comment"># j 代表索引元素位置</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 起始位置</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                small_list.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 结束位置</span></span><br><span class="line">            <span class="keyword">if</span> j == i:</span><br><span class="line">                small_list.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 遍历当前行的上一行列表元素</span></span><br><span class="line">            <span class="comment"># 杨辉三角中除第一个元素和最后一个元素，其他元素的值：皆是上一行中，此位置的元素 和 前一个位置元素的值 之和</span></span><br><span class="line">            k1 = big_list[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">            k2 = big_list[i - <span class="number">1</span>][j]</span><br><span class="line">            small_list.append(k1 + k2)</span><br><span class="line">        <span class="comment"># 打印杨辉三角每一行</span></span><br><span class="line">        <span class="built_in">print</span>(small_list)</span><br><span class="line">        <span class="comment"># 把杨辉三角每一行添加到大列表中</span></span><br><span class="line">        big_list.append(small_list)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方法（gpt）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    triangle = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 保证每一行的起始位置为1，结束位置为1</span></span><br><span class="line">        row = [<span class="number">1</span>] * (i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 请注意range的默认步长为1</span></span><br><span class="line">        <span class="comment"># range(1,0) 表示一个空范围，因为默认步长为1，起始值 1 大于或等于终止值 0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">            row[j] = triangle[i-<span class="number">1</span>][j-<span class="number">1</span>] + triangle[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line">        triangle.append(row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种方法（上课教的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">triangle = [[<span class="number">1</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):  <span class="comment"># i表示行数</span></span><br><span class="line">	pre_list = triangle[i - <span class="number">1</span>]</span><br><span class="line">	new_list = []</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pre_list) - <span class="number">1</span>):  <span class="comment"># 会循环本行长度的n-2次，也就是头和尾不会出现</span></span><br><span class="line">		new_list.append(pre_list[j] + pre_list[j + <span class="number">1</span>])  <span class="comment"># 去除头尾后，本行的j位置的值为上一行j位置和j+1位置的值之和</span></span><br><span class="line">	new_list = [<span class="number">1</span>] + new_list + [<span class="number">1</span>]</span><br><span class="line">	<span class="built_in">print</span>(new_list)</span><br><span class="line">	triangle.append(new_list)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种方法列表推导式写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用列表推导式实现（一维数组形式）</span></span><br><span class="line">pre_list = [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):  <span class="comment"># i 表示执行次数</span></span><br><span class="line">	<span class="built_in">print</span>(pre_list)</span><br><span class="line">	new_list = [<span class="number">1</span>]+ [ pre_list[j] + pre_list[j + <span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pre_list) - <span class="number">1</span>)] + [<span class="number">1</span>]</span><br><span class="line">	pre_list = new_list</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四部分-函数"><a href="#第四部分-函数" class="headerlink" title="第四部分 函数"></a>第四部分 函数</h2><ul>
<li><p>函数定义</p>
<ul>
<li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段</li>
<li>函数能提高应用的模块性，和代码的重复利用率</li>
<li>Python提供了许多内建函数，比如print()、type()、类型转换函数等等</li>
<li>用户也可以自己创建函数，这被叫做用户自定义函数（user difined function，简称UDF）</li>
</ul>
</li>
<li><p>函数结构</p>
<ul>
<li>可选择性地使用return返回一个值给调用方，<strong>不 return 相当于返回 None</strong></li>
<li><strong>def</strong> 是定义函数的关键字</li>
<li><img src="/posts/c00b24b1/image-20230714204312252.png" class=""></li>
</ul>
</li>
<li><p>定义函数，求圆的面积</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br><span class="line"><span class="comment"># 求圆的面积</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle_area</span>(<span class="params">r</span>):</span><br><span class="line">    S = PI * r * r</span><br><span class="line">    <span class="comment"># 不写return默认返回空值</span></span><br><span class="line">    <span class="built_in">print</span>(S)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = circle_area(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><h5 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h5><ul>
<li>必须传参</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必选参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_1</span>(<span class="params">name, gender</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param name: 必选参数</span></span><br><span class="line"><span class="string">    :param gender: 必选参数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">person(<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">person(name=<span class="string">&#x27;小王&#x27;</span>,gender=<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">person(gender=<span class="string">&#x27;小王&#x27;</span>,name=<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">person(gender=<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)  <span class="comment"># 错误写法</span></span><br></pre></td></tr></table></figure>

<h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><ul>
<li>传参时，可传可不传，不传使用默认值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_2</span>(<span class="params">name, gender, clazz=<span class="string">&#x27;01&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param clazz: 默认参数，顺序赋值，如果不赋值，将按照默认值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(clazz)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">person_2(name, gender, clazz=<span class="string">&#x27;02&#x27;</span>)</span><br><span class="line">person_2(name, gender)</span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><ul>
<li>可变参数，可以传入0到多个值，并以元组的形式存储</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person_3</span>(<span class="params">name, gender, clazz=<span class="string">&#x27;01&#x27;</span>, *args</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param args: 可变参数，可以传入0到多个值，并以元组的形式存储</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">person_3(<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>) <span class="comment"># (1, 2, 5, &#x27;6&#x27;)</span></span><br></pre></td></tr></table></figure>

<h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><ul>
<li>关键字参数，需要以 参数名(参数中没有出现的参数名)&#x3D;值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_4</span>(<span class="params">name, gender, clazz=<span class="string">&#x27;01&#x27;</span>, *args,**kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param kwargs: 关键字参数，需要以 参数名(参数中没有出现的参数名)=值 的方式传入0到多个参数，并以字典的形式存储，参数名为键</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">person_4(<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>,weight=<span class="number">180</span>,high=<span class="number">150</span>)  <span class="comment"># &#123;&#x27;weight&#x27;: 180, &#x27;high&#x27;: 150&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><ul>
<li>命名关键字参数，跟在args后面的有名参数或者跟在*后面赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值、</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_5</span>(<span class="params">name,gender,clazz=<span class="string">&#x27;01&#x27;</span>,*args,weight=<span class="number">180</span>,high,**kwargs</span>):</span><br><span class="line"><span class="comment"># def person_5(name,gender,clazz=&#x27;01&#x27;,*,weight=180,high):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param weight:  命名关键字参数，跟在*args后面的有名参数或者跟在*后面</span></span><br><span class="line"><span class="string">    :param high:    赋值时，需要指定参数名，而且如果无默认值的话，必须要赋值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(clazz)  <span class="comment"># 02</span></span><br><span class="line">    <span class="built_in">print</span>(args)  <span class="comment"># (1, 2, 5, &#x27;6&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(weight)  <span class="comment"># 190</span></span><br><span class="line">    <span class="built_in">print</span>(high)  <span class="comment"># 150</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)  <span class="comment"># &#123;&#x27;city&#x27;: &#x27;合肥&#x27;, &#x27;number&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class="line">person_5(<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>,weight=<span class="number">190</span>,high=<span class="number">150</span>,city=<span class="string">&#x27;合肥&#x27;</span>,number=<span class="string">&#x27;12345&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h5><ul>
<li><p>定义函数时，各参数的位置</p>
<ul>
<li>先写必选参数,再写默认参数,再写可选参数,命名关键词参数,关键字参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">gender, cardId, clazz=<span class="string">&quot;01&quot;</span>, *args, weight=<span class="number">181</span>, height, **kwargs</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="递归函数-Recursive-Function"><a href="#递归函数-Recursive-Function" class="headerlink" title="递归函数(Recursive Function)"></a>递归函数(Recursive Function)</h4><ul>
<li><p>如果一个函数在内部调用自身本身，这个函数就是递归函数</p>
</li>
<li><p>递归函数需要满足两个条件：</p>
<ul>
<li>自己调用自己</li>
<li>有停止条件</li>
</ul>
</li>
</ul>
<h5 id="DeBug"><a href="#DeBug" class="headerlink" title="DeBug"></a>DeBug</h5><img src="/posts/c00b24b1/image-20230715193157730.png" class="">

<h5 id="求阶乘"><a href="#求阶乘" class="headerlink" title="求阶乘"></a>求阶乘</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求阶乘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 停止条件</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h5 id="求斐波拉契数列"><a href="#求斐波拉契数列" class="headerlink" title="求斐波拉契数列"></a>求斐波拉契数列</h5><ul>
<li><p>著名的斐波拉契数列（Fibonacci）</p>
<p>1, 1, 2, 3, 5, 8, 13, 21, 34, … 除第一、二个数之外，后一个数等于前两个数之和</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># todo:斐波拉契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> factorial(n-<span class="number">1</span>) + factorial(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="汉诺塔（Hanoi）"><a href="#汉诺塔（Hanoi）" class="headerlink" title="汉诺塔（Hanoi）"></a>汉诺塔（Hanoi）</h5><ul>
<li><img src="/posts/c00b24b1/image-20230715194720536.png" class="">
</li>
<li><p>思路</p>
<ul>
<li>把A柱子上面的n-1个盘子看成整体</li>
<li>第一步：这n-1个盘子由：A柱子–&gt;C柱子–&gt;B柱子</li>
<li>第二步：把A柱子剩余的1个大盘子由：A–&gt;C</li>
<li>第三步：把B柱子的n-1个盘子由：B–&gt;C</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 汉诺塔</span></span><br><span class="line"><span class="comment"># n是A柱子的盘子数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n, a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(a + <span class="string">&#x27;--&gt;&#x27;</span> + c)</span><br><span class="line">    hanoi(n - <span class="number">1</span>, a, c, b)  <span class="comment"># 把A柱子上面的n-1个盘子看成整体，第一步：这n-1个盘子由：A柱子--&gt;C柱子--&gt;B柱子</span></span><br><span class="line">    hanoi(<span class="number">1</span>, a, b, c)      <span class="comment"># 第二步：把A柱子剩余的1个大盘子由：A--&gt;C</span></span><br><span class="line">    hanoi(n - <span class="number">1</span>, b, a, c)  <span class="comment"># 第三步：把B柱子的n-1个盘子由：B--&gt;C</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;执行过程</span></span><br><span class="line"><span class="string">hanoi(3,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; hanoi(2,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class="line"><span class="string">                                                hanoi(1,&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;) -&gt; A--&gt;B</span></span><br><span class="line"><span class="string">                                                hanoi(1,&#x27;C&#x27;,&#x27;A&#x27;,&#x27;B&#x27;) -&gt; C--&gt;B</span></span><br><span class="line"><span class="string">                     -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class="line"><span class="string">                     -&gt; hanoi(2,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; hanoi(1,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;A&#x27;) -&gt; B--&gt;A</span></span><br><span class="line"><span class="string">                                             -&gt; hanoi(1,&#x27;B&#x27;,&#x27;A&#x27;,&#x27;C&#x27;) -&gt; B--&gt;C</span></span><br><span class="line"><span class="string">                                             -&gt; hanoi(1,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) -&gt; A--&gt;C</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Python练习题-一"><a href="#Python练习题-一" class="headerlink" title="Python练习题 一"></a>Python练习题 一</h2><p><strong>1、有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">question1</span>():</span><br><span class="line">    list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    three_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> list_1:</span><br><span class="line">            <span class="keyword">if</span> i == j:  <span class="comment"># 防止第一位与第二位重复，如果第一位与第二位重复，那么第三位就不需要循环了</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> list_1:</span><br><span class="line">                <span class="comment"># if i != j and i != k and j != k</span></span><br><span class="line">                <span class="comment"># 	three_1 = str(i) + str(j) + str(k)</span></span><br><span class="line">                <span class="comment"># 	three_list.append(three_1)</span></span><br><span class="line">                <span class="keyword">if</span> i == k <span class="keyword">or</span> j == k:  <span class="comment"># 防止第一位与第三位重复  防止第二位与第三位重复</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                three_1 = <span class="built_in">str</span>(i) + <span class="built_in">str</span>(j) + <span class="built_in">str</span>(k)</span><br><span class="line">                three_list.append(three_1)</span><br><span class="line">    <span class="built_in">print</span>(three_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(three_list))</span><br></pre></td></tr></table></figure>

<p><strong>2、企业发放的奖金根据利润提成</strong></p>
<ul>
<li><p>利润(I)低于或等于10万元时，奖金可提10%；</p>
</li>
<li><p>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</p>
</li>
<li><p>20万到40万之间时，高于20万元的部分，可提成5%；</p>
</li>
<li><p>40万到60万之间时高于40万元的部分，可提成3%；</p>
</li>
<li><p>60万到100万之间时，高于60万元的部分，可提成1.5%；</p>
</li>
<li><p>高于100万元时，超过100万元的部分按1%提成；</p>
</li>
</ul>
<p><strong>从键盘输入当月利润I，求应发放奖金总数？</strong></p>
<ul>
<li><strong>第一种</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">question2</span>():</span><br><span class="line">    I = <span class="number">3000000</span></span><br><span class="line">    reward = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> I &lt;= <span class="number">100000</span>:</span><br><span class="line">        reward = I * <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">200000</span>:</span><br><span class="line">        reward = <span class="number">100000</span> * <span class="number">0.1</span> + (I - <span class="number">100000</span>) * <span class="number">0.075</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">400000</span>:</span><br><span class="line">        reward = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + (I - <span class="number">200000</span>) * <span class="number">0.05</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">600000</span>:</span><br><span class="line">        reward = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + (I - <span class="number">400000</span>) * <span class="number">0.03</span></span><br><span class="line">    <span class="keyword">elif</span> I &lt;= <span class="number">1000000</span>:</span><br><span class="line">        reward = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + <span class="number">200000</span> * <span class="number">0.03</span> + (I - <span class="number">600000</span>) * <span class="number">0.015</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reward = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + <span class="number">200000</span> * <span class="number">0.03</span> + <span class="number">400000</span> * <span class="number">0.015</span> + (I - <span class="number">1000000</span>) * <span class="number">0.01</span></span><br><span class="line">    <span class="built_in">print</span>(reward)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>第二种</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用区间边界值匹配提成率</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question2_2</span>(<span class="params">I</span>):</span><br><span class="line">    reward = <span class="number">0</span></span><br><span class="line">    money_edge = [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">100</span>, <span class="number">10000000000</span>]  <span class="comment"># 最后一个表示无穷大，目的是取到超出100的值</span></span><br><span class="line">    percent = [<span class="number">0.1</span>, <span class="number">0.075</span>, <span class="number">0.05</span>, <span class="number">0.03</span>, <span class="number">0.015</span>, <span class="number">0.01</span>]  <span class="comment"># percent的值的位置与money中的区间对应</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(money_edge)):</span><br><span class="line">        <span class="keyword">if</span> I &lt; money_edge[i]:  <span class="comment"># 计算的是超出的部分</span></span><br><span class="line">            reward += (I - money_edge[i - <span class="number">1</span>]) * percent[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 找到值对应的区间，退出循环</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 计算的是每超出的内部分对应的提成</span></span><br><span class="line">            reward += (money_edge[i] - money_edge[i - <span class="number">1</span>]) * percent[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> reward</span><br></pre></td></tr></table></figure>

<p><strong>3、10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.10000以内的整数，它加上100和加上268后都是一个完全平方数，请问该数是多少？</span></span><br><span class="line"><span class="comment"># 3.1%1=0.1  3%1=0 判断是否是整数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question3</span>():</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        m = i + <span class="number">100</span></span><br><span class="line">        n = i + <span class="number">268</span></span><br><span class="line">        <span class="comment"># if int(math.pow(m, 0.5)) == math.pow(m, 0.5) and int(math.pow(n, 0.5)) == math.pow(n, 0.5):</span></span><br><span class="line">        <span class="keyword">if</span> (m**<span class="number">0.5</span>) % <span class="number">1</span> == <span class="number">0</span> <span class="keyword">and</span> (n**<span class="number">0.5</span>) % <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p><strong>4、模拟用户登录，检测用户输入的用户名和密码</strong></p>
<ul>
<li>准备一个字典，保存用户名及对应的密码</li>
<li>若用户名不存在，则提示’User Not Allowed’</li>
<li>若用户名存在，但密码不正确，则提示’Authentication failure’</li>
<li>若用户名和密码都正确，则登录成功，输出：xxx@localhost:~$</li>
<li>当用户登录失败后可重试3次，每次重试需间隔5s钟，累计3次失败后，退出登录程序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.模拟用户登录，检测用户输入的用户名和密码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">dict_1 = &#123;&#x27;user&#x27;: &#x27;123&#x27;, &#x27;user2&#x27;: &#x27;12345&#x27;&#125;</span></span><br><span class="line"><span class="string">user = &#x27;user&#x27;</span></span><br><span class="line"><span class="string">print(user in dict_1)</span></span><br><span class="line"><span class="string">print(user in dict_1 != True)  # True </span></span><br><span class="line"><span class="string">问：为什么第二个print返回True</span></span><br><span class="line"><span class="string">答：在 Python 中，比较运算符 != 具有比成员运算符 in 更高的优先级，</span></span><br><span class="line"><span class="string">因此 user in dict_1 != True 的表达式会先进行 user in dict_1 的判断，然后再将结果与 True 进行比较。</span></span><br><span class="line"><span class="string">改：print((user in dict_1) != True)  # False </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question4</span>():</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    dict_1 = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;user2&#x27;</span>: <span class="string">&#x27;12345&#x27;</span>&#125;</span><br><span class="line">    n = <span class="number">0</span>  <span class="comment"># 计数</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">        password = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (user <span class="keyword">in</span> dict_1):  <span class="comment"># 避免运算符优先级的影响 用括号括起来</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;User Not Allowed&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> password != dict_1.get(user):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Authentication failure&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(user + <span class="string">&#x27;@localhost:~$&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><strong>5、有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</strong></p>
<ul>
<li>第一种</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析</span></span><br><span class="line"><span class="string">    月   兔子年龄    兔子对数    </span></span><br><span class="line"><span class="string">    1     1         1  </span></span><br><span class="line"><span class="string">    2     2         1</span></span><br><span class="line"><span class="string">    3     31        2</span></span><br><span class="line"><span class="string">    4     412       3</span></span><br><span class="line"><span class="string">    5     51231     5 </span></span><br><span class="line"><span class="string">    6     61231412  8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 根据上述分析，兔子对数是斐波拉契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question5</span>(<span class="params">month</span>):</span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">1</span> <span class="keyword">or</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> question5(month - <span class="number">1</span>) + question5(month - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但是上述解法太过理想</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question5_2</span>(<span class="params">month</span>):</span><br><span class="line">    rabbit_list = [&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">0</span>&#125;]  <span class="comment"># 初始化第一对兔子</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month):</span><br><span class="line">        <span class="keyword">for</span> rabbit <span class="keyword">in</span> rabbit_list:</span><br><span class="line">            rabbit[<span class="string">&#x27;age&#x27;</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> rabbit[<span class="string">&#x27;age&#x27;</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">                rabbit_list.append(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">0</span>&#125;)  <span class="comment"># 生兔子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(rabbit_list)</span><br></pre></td></tr></table></figure>

<h2 id="python练习题-二"><a href="#python练习题-二" class="headerlink" title="python练习题 二"></a>python练习题 二</h2><p>1、输入三个整数x,y,z，请把这三个数由小到大输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、输入三个整数x,y,z，请把这三个数由小到大输出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question1</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    list_1 = []</span><br><span class="line">    list_1.append(x)</span><br><span class="line">    list_1.append(y)</span><br><span class="line">    list_1.append(z)</span><br><span class="line">    list_1.sort()</span><br><span class="line">    <span class="built_in">print</span>(list_1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 最基本的排序方式，比较排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question1_2</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">if</span> y &gt; z:</span><br><span class="line">            <span class="built_in">print</span>(z, y, x)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># y &lt; z</span></span><br><span class="line">            <span class="keyword">if</span> x &gt; z:</span><br><span class="line">                <span class="built_in">print</span>(y, z, x, )</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># x &lt; z</span></span><br><span class="line">                <span class="built_in">print</span>(y, x, z)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># x &lt; y</span></span><br><span class="line">        <span class="keyword">if</span> y &lt; z:</span><br><span class="line">            <span class="built_in">print</span>(x, y, z)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># y &gt; z</span></span><br><span class="line">            <span class="keyword">if</span> x &gt; z:</span><br><span class="line">                <span class="built_in">print</span>(z, x, y)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># x &lt; z</span></span><br><span class="line">                <span class="built_in">print</span>(z, x, y)</span><br><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question1_3</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    list_a = [x,y,z]</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a)-<span class="number">1</span>-i):</span><br><span class="line">            <span class="keyword">if</span> list_a[j] &gt; list_a[j+<span class="number">1</span>]:</span><br><span class="line">                list_a[j],list_a[j+<span class="number">1</span>] = list_a[j+<span class="number">1</span>],list_a[j]</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(list_a)</span><br></pre></td></tr></table></figure>

<p>2、输入某年某月某日，判断这一天是这一年的第几天</p>
<ul>
<li>datetime模块的应用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.输入某年某月某日，判断这一天是这一年的第几天</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question2</span>(<span class="params">year, month, day</span>):</span><br><span class="line">    <span class="comment"># 创建日期对象</span></span><br><span class="line">    date = datetime.date(year, month, day)</span><br><span class="line">    <span class="comment"># timetuple().tm_yday获取日期对象在年份中的第几天</span></span><br><span class="line">    y_day = date.timetuple().tm_yday</span><br><span class="line">    <span class="built_in">print</span>(y_day)</span><br><span class="line"><span class="comment"># 面向过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question2_2</span>(<span class="params">year, month, day</span>):</span><br><span class="line">    <span class="comment"># 首先判断日期是否合法</span></span><br><span class="line">    <span class="keyword">if</span> year &lt; <span class="number">0</span> <span class="keyword">or</span> (month &gt; <span class="number">12</span> <span class="keyword">or</span> month &lt; <span class="number">0</span>) <span class="keyword">or</span> (day &gt; <span class="number">31</span> <span class="keyword">or</span> day &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日期不合法！！！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 判断是否是闰年</span></span><br><span class="line">    <span class="comment"># 能被4整除，但是不能被100整除</span></span><br><span class="line">    <span class="comment"># 能被400整除</span></span><br><span class="line">    month_31day = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line">    month_30day = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">    ydays = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">2</span> <span class="keyword">and</span> day &gt; <span class="number">29</span>) <span class="keyword">or</span> ((month <span class="keyword">not</span> <span class="keyword">in</span> month_30day) <span class="keyword">and</span> day &gt; <span class="number">30</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;日期不合法&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, month):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> month_31day:</span><br><span class="line">                ydays += <span class="number">31</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">                ydays += <span class="number">29</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ydays += <span class="number">30</span></span><br><span class="line">        ydays += day</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, month):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> month_31day:</span><br><span class="line">                ydays += <span class="number">31</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">                ydays += <span class="number">28</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ydays += <span class="number">30</span></span><br><span class="line">        ydays += day</span><br><span class="line">    <span class="built_in">print</span>(ydays)</span><br><span class="line"><span class="comment"># datetime的应用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question2_3</span>():</span><br><span class="line">    time = <span class="string">&quot;2020年7月12日&quot;</span></span><br><span class="line">    date = datetime.datetime.strptime(time, <span class="string">&quot;%Y年%m月%d日&quot;</span>)  <span class="comment"># strptime：字符串解析为datetime</span></span><br><span class="line">    <span class="built_in">print</span>(date)</span><br><span class="line">    y = date.year</span><br><span class="line">    m = date.month</span><br><span class="line">    d = date.day</span><br><span class="line"></span><br><span class="line">    str_time = datetime.datetime.strftime(date, <span class="string">&quot;%Y/%m/%d&quot;</span>)  <span class="comment"># strftime：字符串格式化datetime，也就是datetime转为字符串</span></span><br><span class="line">    <span class="built_in">print</span>(str_time)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(date.timetuple().tm_yday)  <span class="comment"># 求一年当中的第几天</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># question2_2优化</span></span><br><span class="line">    month_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    day_list_r = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]  <span class="comment"># 对应闰年</span></span><br><span class="line">    day_list_p = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]  <span class="comment"># 对应平年</span></span><br><span class="line">    yday = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):  <span class="comment"># 0,1,2,3,4,5</span></span><br><span class="line">        yday += day_list_r[i]</span><br><span class="line">    yday += d</span><br><span class="line">    <span class="built_in">print</span>(yday)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再优化</span></span><br><span class="line">    yday = <span class="built_in">sum</span>(day_list_r[<span class="number">0</span>:m - <span class="number">1</span>])</span><br><span class="line">    yday += d</span><br><span class="line">    <span class="built_in">print</span>(yday)</span><br></pre></td></tr></table></figure>

<p>3、有一分数序列：2&#x2F;1,3&#x2F;2,5&#x2F;3,8&#x2F;5,13&#x2F;8,21&#x2F;13…求出这个数列的前20项之和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.有一分数序列：2/1,3/2,5/3,8/5,13/8,21/13...求出这个数列的前20项之和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m</span>(<span class="params">k</span>):  <span class="comment"># 分母  注意要给出前两项的返回值，不然m(2-2)=m(0)=报错</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> m(k - <span class="number">1</span>) + m(k - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n</span>(<span class="params">k</span>):  <span class="comment"># 分子</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> n(k - <span class="number">1</span>) + n(k - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question3</span>(<span class="params">k</span>):</span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        summ += m(i) / n(i)</span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br><span class="line"><span class="comment"># 二维数组求解问题三</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question3_2</span>(<span class="params">n</span>):</span><br><span class="line">    list_a = [[<span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        summ += list_a[i][<span class="number">0</span>] / list_a[i][<span class="number">1</span>]</span><br><span class="line">        list_a.append([list_a[i][<span class="number">0</span>]+list_a[i][<span class="number">1</span>],list_a[i][<span class="number">0</span>]])</span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个一维数组求解问题三</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 2 3 5</span></span><br><span class="line"><span class="string">2/1,3/2,5/3,8/5,13/8,21/13</span></span><br><span class="line"><span class="string">2 4 6 8</span></span><br><span class="line"><span class="string">2/4,6/2,8/6,14/8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 本方法只适用：分子大于分母，不适用：2/4,6/2,8/6</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question3_3</span>(<span class="params">n</span>):</span><br><span class="line">    list_a = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    summ = list_a[<span class="number">1</span>]/list_a[<span class="number">0</span>]  <span class="comment"># 加第一项</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;list_a[<span class="number">1</span>]&#125;</span>/<span class="subst">&#123;list_a[<span class="number">0</span>]&#125;</span>&#x27;</span>)  <span class="comment"># 第一项</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        list_a.append(list_a[i-<span class="number">1</span>]+list_a[i-<span class="number">2</span>])</span><br><span class="line">        summ += list_a[i]/list_a[i-<span class="number">1</span>]  <span class="comment"># 加第i项</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;list_a[i]&#125;</span>/<span class="subst">&#123;list_a[i-<span class="number">1</span>]&#125;</span>&#x27;</span>)  <span class="comment"># 第i项</span></span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br><span class="line"><span class="comment"># question3_3(3)</span></span><br><span class="line"><span class="comment"># 两个一维数组求解问题三</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question3_4</span>(<span class="params">n</span>):</span><br><span class="line">    list_a = [<span class="number">2</span>]  <span class="comment"># 分子</span></span><br><span class="line">    list_b = [<span class="number">1</span>]  <span class="comment"># 分母</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        summ += list_a[i] / list_b[i]  <span class="comment"># 第i+1项</span></span><br><span class="line">        list_a.append(list_a[i]+list_b[i])</span><br><span class="line">        list_b.append(list_a[i])</span><br><span class="line">    <span class="comment"># print(list_a)  # 最后list_a和list_b中的元素会比 summ的累加项 多一项</span></span><br><span class="line">    <span class="comment"># print(list_b)</span></span><br><span class="line">    <span class="built_in">print</span>(summ)</span><br></pre></td></tr></table></figure>

<p>4、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;分析</span></span><br><span class="line"><span class="string">次数    反弹高度     经历高度</span></span><br><span class="line"><span class="string">1       50         100</span></span><br><span class="line"><span class="string">2       25         100+50*2</span></span><br><span class="line"><span class="string">3       25/2      100+50*2+25*2</span></span><br><span class="line"><span class="string">4       25/4      100+50*2+25*2+25/2*2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question4</span>(<span class="params">n</span>):</span><br><span class="line">    height = <span class="number">50</span>        <span class="comment"># 初始化第一次反弹高度</span></span><br><span class="line">    sum_height = <span class="number">100</span>  <span class="comment"># 初始化第一次落地经历高度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        sum_height += height*<span class="number">2</span></span><br><span class="line">        height /= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(sum_height)</span><br><span class="line">    <span class="built_in">print</span>(height)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 递归求反弹高度</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;初始高度100</span></span><br><span class="line"><span class="string">反弹次数 反弹高度</span></span><br><span class="line"><span class="string">1       50</span></span><br><span class="line"><span class="string">2       25</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question4_2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> question4_2(n - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">    <span class="comment"># 两种方式</span></span><br><span class="line">    <span class="comment"># if n==0:</span></span><br><span class="line">    <span class="comment">#     return 100</span></span><br><span class="line">    <span class="comment"># return question4_2(n-1)/2</span></span><br><span class="line"><span class="comment"># print(question4_2(2))</span></span><br></pre></td></tr></table></figure>

<p>5、有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;分析</span></span><br><span class="line"><span class="string">1      10</span></span><br><span class="line"><span class="string">2      age(1)+2</span></span><br><span class="line"><span class="string">3      age(2)+2</span></span><br><span class="line"><span class="string">4      age(2)+2</span></span><br><span class="line"><span class="string">5      age(4)+2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question5</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> question5(n-<span class="number">1</span>)+<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(question5(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>6、猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">天数 剩余桃子数</span></span><br><span class="line"><span class="string">1   n/2-1 </span></span><br><span class="line"><span class="string">2   (n/2 - 1)/2-1</span></span><br><span class="line"><span class="string">3   ((n/2 - 1)/2-1)/2-1</span></span><br><span class="line"><span class="string">4   (((n/2 - 1)/2-1)/2-1)/2-1   n(d-1)=(n(d)+1)*2   </span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.   </span></span><br><span class="line"><span class="string">10  1</span></span><br><span class="line"><span class="string">n(d-1)=(n(d)+1)*2</span></span><br><span class="line"><span class="string">n(d)=(n(d+1)+1)*2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question6</span>():</span><br><span class="line">    peach = <span class="number">1</span>  <span class="comment"># 第十天剩下的桃子数量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        peach = (peach+<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(peach)</span><br><span class="line"><span class="comment"># 也可以递归写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question6_2</span>(<span class="params">day</span>):</span><br><span class="line">    <span class="keyword">if</span> day == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (question6_2(day+<span class="number">1</span>)+<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(question6_2(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<h1 id="二、python进阶"><a href="#二、python进阶" class="headerlink" title="二、python进阶"></a>二、python进阶</h1><h2 id="第一部分-面向对象"><a href="#第一部分-面向对象" class="headerlink" title="第一部分 面向对象"></a>第一部分 面向对象</h2><ul>
<li><p>面向对象编程OOP——Object Oriented Programming，是一种程序设计思想</p>
</li>
<li><p>面向对象的三大特点：封装、继承、多态</p>
</li>
<li><p>多态：父类的引用指向子类的对象</p>
</li>
</ul>
<h3 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h3><ul>
<li><p>类的定义</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230717203553391.png" class=""></li>
</ul>
</li>
<li><p>类的实例化</p>
<ul>
<li>类的实例化会调用初始化方法  init()方法，传入的实参也都会传到 init()方法中</li>
</ul>
</li>
<li><p>类的方法和属性的调用</p>
<ul>
<li>在类里面通过  self.  的方式调用方法和属性</li>
<li>在类外面通过 实例对象. 的方式调用方法和属性</li>
</ul>
</li>
<li><p>定义在函数体外的属性（如chinese_name），被认为是默认属性，可以通过 self. 的方式再次赋值</p>
</li>
<li><p><strong>self 传入的是实例对象stu1</strong>，self. 参数名&#x3D;值  的方式赋值的参数都可以上述方式调用</p>
</li>
<li><p>重载：python中没有这种实现方式，会默认调用后面出现的同名方法，如果不传入后面方法对应的参数就会报错</p>
</li>
<li><p>重写：重写父类已有的方法，在此基础上获得新功能</p>
<ul>
<li>重写object类中的__str__方法，自定义打印实列输出的内容</li>
</ul>
</li>
<li><p>从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“<strong>封装</strong>”起来了，调用很容易，但却不用知道内部实现的细节</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):  <span class="comment"># 默认继承object类（所有类的父类）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 直接被添加到self里面</span></span><br><span class="line">    chinese_name = <span class="string">&#x27;小王&#x27;</span>  <span class="comment"># 默认属性值，在类里面通过 self. 的方式调用，在类外面通过 实例对象. 的方式调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score, chinese_name</span>):  <span class="comment"># 构造方法，实例化时调用</span></span><br><span class="line">        self.name = name  <span class="comment"># 通过init方法被添加到self里面的</span></span><br><span class="line">        self.score = score</span><br><span class="line">        self.chinese_name = chinese_name  <span class="comment"># 可以通过init方法传入参数，修改默认的属性值</span></span><br><span class="line">        <span class="comment"># self.print_score()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_score</span>(<span class="params">self</span>):  <span class="comment"># 打印学生成绩</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>的成绩<span class="subst">&#123;self.score&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;中文名为：<span class="subst">&#123;self.chinese_name&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self)  <span class="comment"># self是类自己，等同于类外的 stu1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重载（python中没有这种实现方式，会默认调用后面出现的方法，如果不传入后面方法对应的参数就会报错）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_score</span>(<span class="params">self,value</span>):  <span class="comment"># 打印学生成绩</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;value&#125;</span> 不传参，就报错&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写：object类中的__str__方法，自定义打印实列输出的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">self 传入的是实例对象stu1</span></span><br><span class="line"><span class="string">self是类的实例对象自己，等同于类外的 stu1</span></span><br><span class="line"><span class="string">在类中是通过 self. 的方式调用类的属性和方法</span></span><br><span class="line"><span class="string">在类外是通过 实例化对象. 的方式调用类的属性和方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">99</span>, <span class="string">&#x27;小刘&#x27;</span>)  <span class="comment"># Student类的实例化</span></span><br><span class="line"><span class="built_in">print</span>(stu1.name)</span><br><span class="line"><span class="built_in">print</span>(stu1.chinese_name)</span><br><span class="line"><span class="built_in">print</span>(stu1)  <span class="comment"># 默认打印内存地址</span></span><br><span class="line">stu1.print_score(<span class="number">250</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2、私有方法和属性"><a href="#2、私有方法和属性" class="headerlink" title="2、私有方法和属性"></a>2、私有方法和属性</h3><ul>
<li>要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，只有内部可以访问，外部不能访问<ul>
<li>强制访问私有变量方法一<ul>
<li>stu1._Student__secret</li>
</ul>
</li>
<li>强制访问私有变量方法二<ul>
<li>类的内部可以访问私有变量</li>
<li>通过getter方法，返回私有变量的值</li>
</ul>
</li>
</ul>
</li>
<li>一般约定俗成的是 变量，_方法名 是私有的 不要随意访问和修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="comment"># __开头的变量为私有变量，不能被外部的实例化对象访问，但是可以强制访问或在类内访问</span></span><br><span class="line">        self.__secret = <span class="string">&quot;This is a secret!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>每天都学习&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __开头的方法为私有方法，外部实例对象不能访问</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__play_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>天天去网吧打游戏&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getter_secret</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__secret  <span class="comment"># 类内访问私有变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stu1 = Student(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;15&#x27;</span>)</span><br><span class="line">    <span class="comment"># 强制访问私有变量方法1</span></span><br><span class="line">    <span class="built_in">print</span>(stu1._Student__secret)</span><br><span class="line">    <span class="comment"># 强制访问 私有变量访问2：通过类中的getter方法</span></span><br><span class="line">    <span class="built_in">print</span>(stu1.getter_secret())</span><br></pre></td></tr></table></figure>

<h3 id="3、兔子问题"><a href="#3、兔子问题" class="headerlink" title="3、兔子问题"></a>3、兔子问题</h3><ul>
<li>使用类的思想实现：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">growth</span>(<span class="params">self</span>):</span><br><span class="line">        self.age += <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question5</span>(<span class="params">month</span>):</span><br><span class="line">    total = [Rabbit()]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(month):</span><br><span class="line">        <span class="keyword">for</span> rabbit <span class="keyword">in</span> total:</span><br><span class="line">            rabbit.growth()</span><br><span class="line">            <span class="keyword">if</span> rabbit.age &gt;= <span class="number">3</span>:</span><br><span class="line">                total.append(Rabbit())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(total))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    question5(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4、猴子补丁（Monkey-patch）"><a href="#4、猴子补丁（Monkey-patch）" class="headerlink" title="4、猴子补丁（Monkey patch）"></a>4、猴子补丁（Monkey patch）</h3><ul>
<li><p>猴子补丁是对Python中模块和类可以在外部被动态修改这种特性的一个比喻 </p>
<p>将对类中没有的方法和属性进行赋值后，就可以调用，破坏了代码的封装性，造成了python代码的不安全</p>
</li>
<li><p>在模块和类的外部对模块和类进行修改是一种非常耍赖的做法，会破坏代码的封装结构，这种事情大概只有淘气的猴子喜欢去做，因此形象地称之为猴子补丁</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个Dog类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Zzz... Zzz... Zzz...&quot;</span>)</span><br><span class="line"><span class="comment"># Dog类外的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wang wang wang&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对Python中模块和类可以在外部被动态修改</span></span><br><span class="line">Dog.speak = speak  <span class="comment"># 猴子补丁</span></span><br><span class="line">Dog.home = <span class="string">&quot;Earth&quot;</span>  <span class="comment"># 猴子补丁</span></span><br><span class="line">spike = Dog(<span class="string">&#x27;spike&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">spike.home = <span class="string">&quot;HeFei&quot;</span></span><br><span class="line">spike.sleep()</span><br><span class="line">spike.speak()</span><br><span class="line"><span class="built_in">print</span>(spike.home)</span><br></pre></td></tr></table></figure>

<h3 id="5、继承"><a href="#5、继承" class="headerlink" title="5、继承"></a>5、继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抽取学生类和教室类的共同特征，抽象为一个Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,id_card,name,age,gender</span>):</span><br><span class="line">        self.id_card = id_card</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃饭&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;睡觉&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喜欢玩游戏&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):  <span class="comment"># 继承Person类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,id_card,name,age,gender,clazz,sid</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(id_card,name,age,gender)  <span class="comment"># 调用父类的初始化方法对共性内容初始化</span></span><br><span class="line">        self.clazz = clazz</span><br><span class="line">        self.sid = sid</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写了父类的interest方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;学生喜欢写试卷&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):  <span class="comment"># 继承Person类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,id_card,name,age,gender,office,tid</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(id_card,name,age,gender)</span><br><span class="line">        self.office = office</span><br><span class="line">        self.tid = tid</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写了父类的interest方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;老师喜欢讲知识&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stu1 = Student(<span class="string">&#x27;341281&#x27;</span>,<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>,<span class="string">&#x27;010017&#x27;</span>)</span><br><span class="line">    stu1.eat()</span><br><span class="line">    stu1.sleep()</span><br><span class="line">    stu1.interest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    tea1 = Teacher(<span class="string">&#x27;341281&#x27;</span>,<span class="string">&#x27;刘老师&#x27;</span>,<span class="string">&#x27;38&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;3号办公室&#x27;</span>,<span class="string">&#x27;30018&#x27;</span>)</span><br><span class="line">    tea1.eat()</span><br><span class="line">    tea1.sleep()</span><br><span class="line">    tea1.interest()</span><br></pre></td></tr></table></figure>

<h3 id="6、多态"><a href="#6、多态" class="headerlink" title="6、多态"></a>6、多态</h3><ul>
<li>多态：父类的引用指向子类的对象<ul>
<li>Animal animal &#x3D; new Dog()</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Description: 多态：父类的引用指向子类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;animal is running&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog is running and baking&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Cat is running and jumping&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animal_run</span>(<span class="params">animal: Animal</span>):</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 父类的引用指向子类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    animal_run(Dog)  <span class="comment"># Animal animal = new Dog()</span></span><br><span class="line">    animal_run(Cat)</span><br></pre></td></tr></table></figure>

<h3 id="7、鸭子类型"><a href="#7、鸭子类型" class="headerlink" title="7、鸭子类型"></a>7、鸭子类型</h3><ul>
<li>鸭子类型，因为python的数据类型是动态的，没有严格类型检查，所以Goose这个类具有和Duck这个类相同的方法，duck_show这个函数也可以对ee进行作用，故Python其数据类型属于鸭子类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;A duck named <span class="subst">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ga ga ga ...&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goose</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;A goose named <span class="subst">&#123;self.name&#125;</span> is swimming&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;goo goo goo ...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duck_show</span>(<span class="params">duck:Duck</span>):</span><br><span class="line">    duck.swim()</span><br><span class="line">    duck.call()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    duck = Duck(<span class="string">&quot;丑小鸭&quot;</span>)</span><br><span class="line">    duck_show(duck)</span><br><span class="line">    goose = Goose(<span class="string">&quot;白天鹅&quot;</span>)</span><br><span class="line">    duck_show(goose)</span><br></pre></td></tr></table></figure>

<h2 id="第二部分-异常处理"><a href="#第二部分-异常处理" class="headerlink" title="第二部分 异常处理"></a>第二部分 异常处理</h2><h3 id="1、基本异常类型"><a href="#1、基本异常类型" class="headerlink" title="1、基本异常类型"></a>1、基本异常类型</h3><ul>
<li><img src="/posts/c00b24b1/image-20230718201445587.png" class=""></li>
</ul>
<h5 id="keyboardInterrupt"><a href="#keyboardInterrupt" class="headerlink" title="keyboardInterrupt"></a>keyboardInterrupt</h5><ul>
<li>终止此代码后会抛出异常keyboardInterrupt<ul>
<li><img src="/posts/c00b24b1/image-20230718202052338.png" class=""></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h5 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h5><ul>
<li>语法异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h5 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h5><ul>
<li>除数为0异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ZeroDivisionError</span></span><br><span class="line">sum_1 = <span class="number">100</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">    sum_1 /= n</span><br><span class="line">    n -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h5 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h5><ul>
<li>命名异常，一般是变量没有赋值就被引用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NameError</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<h5 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h5><ul>
<li>类型错误，下面为int和str相加报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TypeError</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="ValueError"><a href="#ValueError" class="headerlink" title="ValueError"></a>ValueError</h5><ul>
<li>值错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ValueError</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="IndexError"><a href="#IndexError" class="headerlink" title="IndexError"></a>IndexError</h5><ul>
<li>索引异常，一般为索引越界异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IndexError</span></span><br><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[-<span class="number">6</span>])</span><br></pre></td></tr></table></figure>

<h5 id="AttributeError"><a href="#AttributeError" class="headerlink" title="AttributeError"></a>AttributeError</h5><ul>
<li>属性异常，一般是调用不存在的方法或变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AttributeError</span></span><br><span class="line">tuple_1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple_1.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.run()</span><br></pre></td></tr></table></figure>

<h3 id="2、捕获和抛出异常"><a href="#2、捕获和抛出异常" class="headerlink" title="2、捕获和抛出异常"></a>2、捕获和抛出异常</h3><h5 id="忽略警告"><a href="#忽略警告" class="headerlink" title="忽略警告"></a>忽略警告</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h5><ul>
<li><img src="/posts/c00b24b1/image-20230718202931072.png" class=""></li>
<li>发生异常时，try块中的异常代码的下面代码不会执行，但是try&#x2F;except代码块外的代码会执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#发生异常时，try块中的异常代码的下面代码不会执行，但是try/except代码块外的代码会执行</span></span><br><span class="line">sum_1 = <span class="number">100</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        sum_1 /= n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(sum_1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有异常会执行的代码&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有没有异常都会执行的代码&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;try/except代码块外的代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>try&#x2F;except不会引入新的作用域，只不过没有异常的时候，except中的代码块就不会执行<ul>
<li>如果没有异常在这里尝试访问 error_message 变量会引发 NameError</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    error_message_0 = <span class="string">&quot;除数不能为零&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(error_message_0)</span><br><span class="line"><span class="built_in">print</span>(error_message_0)  <span class="comment"># 除数不能为零，</span></span><br><span class="line"><span class="comment"># 如果没有异常在这里尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>

<ul>
<li>try代码块中，发生异常的代码的上方变量还是可以引用的<ul>
<li>result &#x3D; x&#x2F;y  # 如果该段代码有异常，result 变量就不被定义</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    result = x/y  <span class="comment"># 如果该段代码有异常，该变量就不被定义</span></span><br><span class="line">    u = <span class="number">100</span>   <span class="comment"># 上面代码有异常，try中下面的代码就不会执行</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> z:</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(u)</span><br><span class="line"><span class="comment">#尝试访问 error_message 变量会引发 NameError</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果数值加法中，有字符串可以把其转为ASCii码值再进行加</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果数值加法中，有字符串可以把其转为ASCii码值再进行加</span></span><br><span class="line">list_a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_a:</span><br><span class="line">        operand = i + <span class="number">5</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;操作数为<span class="subst">&#123;operand&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exception 错误&quot;</span>,e)</span><br><span class="line">    operand = <span class="built_in">ord</span>(i) + <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作数为<span class="subst">&#123;i&#125;</span>，数值为<span class="subst">&#123;operand&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h5><ul>
<li>抛出异常会终止程序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抛出异常</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&quot;x不能大于5，x的值为<span class="subst">&#123;x&#125;</span>&quot;</span>)  <span class="comment"># Exception: x不能大于5，x的值为10</span></span><br></pre></td></tr></table></figure>

<h3 id="3、自定义异常"><a href="#3、自定义异常" class="headerlink" title="3、自定义异常"></a>3、自定义异常</h3><ul>
<li>自定义异常的原因<ul>
<li>Python提供的内建异常不够用 </li>
<li>可以预估某个错误的产生</li>
</ul>
</li>
<li>定义异常类<ul>
<li>异常类继承自 Exception 类，可以直接继承，或者间接继承</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeErrorSub</span>(<span class="title class_ inherited__">AgeError</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">age = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># raise AgeError(f&quot;年龄异常，年龄为&#123;age&#125;&quot;)  # __main__.AgeError: 年龄异常，年龄为-1</span></span><br><span class="line">    <span class="keyword">raise</span> AgeErrorSub(<span class="string">f&quot;年龄异常，年龄为<span class="subst">&#123;age&#125;</span>&quot;</span>)  <span class="comment"># __main__.AgeErrorSub: 年龄异常，年龄为-1</span></span><br></pre></td></tr></table></figure>

<h2 id="第三部分-文件读写"><a href="#第三部分-文件读写" class="headerlink" title="第三部分 文件读写"></a>第三部分 文件读写</h2><h4 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h4><ul>
<li><p>with open语句的好处：无论文件操作是否有异常都会执行.close操作，</p>
<p>关闭文件读写，防止阻塞，和try…finally: .close 一个作用</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>ValueError: must have exactly one of create&#x2F;read&#x2F;write&#x2F;append mode</p>
<ul>
<li>上述错误表示：x&#x2F;r&#x2F;w&#x2F;a这四个模式不能同时出现</li>
</ul>
</li>
<li><p>‘w’ open for writing, truncating（清空） the file first</p>
<ul>
<li>会清空原有文件的内容，然后再写</li>
</ul>
</li>
</ul>
<h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><h5 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h5><ul>
<li>默认全部读取，传入整型参数代表读的字符个数（转义字符：\n \t 等算一个字符）<br>对于同一个文件对象，后面的read方法会接着上一个read方法 继续读</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># read()</span></span><br><span class="line">    <span class="comment"># 默认全部读取，传入整型参数代表读的字符个数（转义字符：\n \t 等算一个字符）</span></span><br><span class="line">    <span class="comment"># 对于同一个文件对象，后面的read方法会接着上一个read方法继续读</span></span><br><span class="line">     <span class="built_in">print</span>(fp.read(<span class="number">10</span>))</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">     <span class="built_in">print</span>(fp.read(<span class="number">10</span>))</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">     <span class="built_in">print</span>(fp.read(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h5 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h5><ul>
<li><p>默认读取一行，传入整型参数代表读的字符的个数，</p>
<p>如果这一行只有一个字符那就会读出一个字符并不会往后读</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># readline()</span></span><br><span class="line">    <span class="comment"># 默认读取一行，传入整型参数代表读的字符的个数，如果这一行只有一个字符那就会读出一个字符并不会往后读</span></span><br><span class="line">    <span class="built_in">print</span>(fp.readline(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(fp.readline(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(fp.readline(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h5 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h5><ul>
<li>默认全部行，并返回一个列表，元素为每一行<br>传入整型参数，只会读取一行的全部内容，并返会一个列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(fp.readlines(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(fp.readlines(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(fp.readlines(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><h5 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># write()</span></span><br><span class="line">    fp.write(<span class="string">&quot;006,dbh,22,male\n&quot;</span>)</span><br><span class="line">    fp.write(<span class="string">&quot;007,dl,21,male&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h5><ul>
<li>传入可以迭代的参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/data_student.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:    </span><br><span class="line">    <span class="comment"># writelines()</span></span><br><span class="line">    <span class="comment"># 传入可以迭代的参数</span></span><br><span class="line">    fp.writelines([<span class="string">&quot;006,dbh,22,male\n&quot;</span>, <span class="string">&quot;007,dl,21,male&quot;</span>])</span><br><span class="line">    fp.writelines(<span class="string">&quot;006,dbh,22,male\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="第四部分-正则表达式"><a href="#第四部分-正则表达式" class="headerlink" title="第四部分 正则表达式"></a>第四部分 正则表达式</h2><h3 id="1、正则表达式中的元字符"><a href="#1、正则表达式中的元字符" class="headerlink" title="1、正则表达式中的元字符"></a>1、正则表达式中的元字符</h3><ul>
<li><code>.</code> <strong>匹配任何字符，但不包括换行符。</strong></li>
<li><code>[\s\S]</code>  <strong>匹配任何字符，包括换行符和空白字符。</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 正则表达式中的元字符</span></span><br><span class="line"><span class="string">\d 		 可以匹配一个数字 					  等价于[0-9] </span></span><br><span class="line"><span class="string">\D(大写)  可以匹配一个非数字 					 等价于[^0-9] </span></span><br><span class="line"><span class="string">\d\d 	 可以匹配两个数字 </span></span><br><span class="line"><span class="string">\w 		 可以匹配一个数字或字母或下划线                 等价于[A-Za-z0-9_] </span></span><br><span class="line"><span class="string">\W(大写) 	可以匹配一个非数字非字母非下划线的符号          等价于[^A-Za-z0-9_]</span></span><br><span class="line"><span class="string">\w\w 	 可以 匹配 00 或者 0a等</span></span><br><span class="line"><span class="string">. 		 可以匹配任意字符，特殊字符除外如:\n</span></span><br><span class="line"><span class="string">\s 		 可以匹配空白字符 如：一个空格或\n或\r等   等价于[\f\n\r\v]  </span></span><br><span class="line"><span class="string">\S(大写)	可以匹配一个非空白字符 				等价于[^\f\n\r\v]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、匹配长字符"><a href="#2、匹配长字符" class="headerlink" title="2、匹配长字符"></a>2、匹配长字符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 匹配长字符</span></span><br><span class="line"><span class="string">*代表0-无穷个字符</span></span><br><span class="line"><span class="string">+代表1-无穷个字符</span></span><br><span class="line"><span class="string">?代表0-1个字符</span></span><br><span class="line"><span class="string">&#123;n,m&#125;代表n-m个字符 （左闭右闭）</span></span><br><span class="line"><span class="string">\d&#123;3&#125;-\d&#123;3,8&#125; 可以匹配001-123或001-12345等</span></span><br><span class="line"><span class="string">^表示行的开头，^\d表示必须以数字开头</span></span><br><span class="line"><span class="string">$表示行的结束，\d$表示必须以数字结束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、match方法"><a href="#3、match方法" class="headerlink" title="3、match方法"></a>3、match方法</h3><ul>
<li>匹配到了返回Match对象</li>
<li>匹配不到返回None</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;001-12345&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&quot;\d&#123;3&#125;-\d&#123;3,8&#125;&quot;</span>, str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>match结合if结构进行判断</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:  <span class="comment"># 匹配成功</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 匹配失败</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;failed&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4、re-split-切分字符串"><a href="#4、re-split-切分字符串" class="headerlink" title="4、re.split()切分字符串"></a>4、re.split()切分字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;切分字符串</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">str_a = <span class="string">&quot;a,b;; c  d&quot;</span></span><br><span class="line">splits = re.split(<span class="string">r&quot;\W+&quot;</span>, str_a)  <span class="comment"># 匹配0-n个非数字非字母符号作为切分符</span></span><br><span class="line"><span class="built_in">print</span>(splits)</span><br></pre></td></tr></table></figure>

<h3 id="5、group分组提取"><a href="#5、group分组提取" class="headerlink" title="5、group分组提取"></a>5、group分组提取</h3><ul>
<li><p>通过() 提取匹配到的内容</p>
<p>group(0) 代表匹配到的字符串<br>group(1) 代表提取出的第一个子字符串<br>group(2) 代表提取出的第二个子字符串<br>groups() 将所有提取的字符串串存储到元组中</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;001-12345&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&quot;(\d&#123;3&#125;)-(\d&#123;3,8&#125;)&quot;</span>, str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.groups())</span><br></pre></td></tr></table></figure>

<h3 id="6、匹配时间19-05-30"><a href="#6、匹配时间19-05-30" class="headerlink" title="6、匹配时间19:05:30"></a>6、匹配时间19:05:30</h3><ul>
<li>注意时间的格式和规则：<br>h : 00-23<br>m : 00-59<br>s : 00-59</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;19:05:30&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&quot;([0-1]\d|[2][0-3]):([0-5]\d):([0-5]\d)&quot;</span>, str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h3 id="7、-P-name-变量赋值"><a href="#7、-P-name-变量赋值" class="headerlink" title="7、(?P&lt; name &gt; ) 变量赋值"></a>7、(?P&lt; name &gt; ) 变量赋值</h3><ul>
<li>将提取到的数据赋值给name变量<br>再利用group(“name”)提取</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">id_card = <span class="string">&quot;20051001&quot;</span></span><br><span class="line">re_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?P&lt;year&gt;[1-2]\d&#123;3&#125;)(?P&lt;month&gt;[0][1-9]|[1][0-2])(?P&lt;day&gt;[0][1-9]|[1-2][0-9])&quot;</span>)</span><br><span class="line"><span class="comment"># 提取 年 月 日</span></span><br><span class="line"><span class="keyword">match</span> = re_pattern.<span class="keyword">match</span>(id_card)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="string">&quot;year&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="string">&quot;month&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="string">&quot;day&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="8、贪婪匹配"><a href="#8、贪婪匹配" class="headerlink" title="8、贪婪匹配"></a>8、贪婪匹配</h3><ul>
<li>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符<br>\d+则是贪婪匹配<br>\d+?则是非贪婪匹配</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;(\d+)(0*)&#x27;</span>, <span class="string">&#x27;102300&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.groups())</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;^(\d+?)(0*)$&#x27;</span>, <span class="string">&#x27;102300&#x27;</span>)  <span class="comment"># 加上$符才会匹配到尾部的0，否则只会停在第一个0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.groups())</span><br></pre></td></tr></table></figure>

<h3 id="9、-的区别"><a href="#9、-的区别" class="headerlink" title="9、.  .*  .*? 的区别"></a>9、.  .*  .*? 的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;xxIxxjshdxxlovexxsffaxxpythonxx&#x27;</span></span><br><span class="line">infos1 = re.findall(<span class="string">&#x27;xx(.)xx&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(infos1)</span><br><span class="line">infos2 = re.findall(<span class="string">&#x27;xx(.*)xx&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(infos2)</span><br><span class="line">infos3 = re.findall(<span class="string">&#x27;xx(.*?)xx&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(infos3)</span><br></pre></td></tr></table></figure>

<h3 id="10、re-match和re-search的区别"><a href="#10、re-match和re-search的区别" class="headerlink" title="10、re.match和re.search的区别"></a>10、re.match和re.search的区别</h3><ul>
<li>re.match(pattern, string)：<ul>
<li>re.match 只从字符串的 <em><strong>开头开始匹配</strong></em>，如果字符串的开头符合正则表达式的模式，则返回匹配对象；如果字符串开头不匹配，则返回 None。<br>适合用于检查字符串的开头是否符合某种模式。</li>
</ul>
</li>
<li>re.search(pattern, string)：<ul>
<li>re.search 在 <em><strong>整个字符串中搜索</strong></em> ，只要找到第一个匹配的子串，就返回匹配对象；如果没有找到匹配的子串，则返回 None。<br>适合用于在整个字符串中查找某种模式的出现。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;a12345&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&quot;\d+&quot;</span>, str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>)  <span class="comment"># 返回None</span></span><br><span class="line">search = re.search(<span class="string">r&quot;\d+&quot;</span>, str_a)</span><br><span class="line"><span class="built_in">print</span>(search)  <span class="comment"># 返回Search对象</span></span><br></pre></td></tr></table></figure>

<h3 id="11、预编译"><a href="#11、预编译" class="headerlink" title="11、预编译"></a>11、预编译</h3><ul>
<li>re.compile(正则表达式)<br>便于修改正则表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;19:05:30&quot;</span></span><br><span class="line">re_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;([0-1]\d|[2][0-3]):([0-5]\d):([0-5]\d)&quot;</span>)</span><br><span class="line"><span class="keyword">match</span> = re_pattern.<span class="keyword">match</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.groups())</span><br></pre></td></tr></table></figure>

<h2 id="第五部分-爬虫"><a href="#第五部分-爬虫" class="headerlink" title="第五部分 爬虫"></a>第五部分 爬虫</h2><ul>
<li>爬虫是一种模仿浏览器上网过程的一种程序，可以获取一些网页的数据</li>
</ul>
<h3 id="1、URL"><a href="#1、URL" class="headerlink" title="1、URL"></a>1、URL</h3><ul>
<li>统一资源定位符  uniform resource locator</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="/posts/c00b24b1/LjTR2tNPAO81cnU.png" class=""></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http: 超文本传输协议  HyperText Transfer Protocol  默认端口 80</span><br><span class="line">https: 安全的超文本传输协议  security               默认端口 443</span><br><span class="line">www.example.com  域名</span><br><span class="line">80  端口 port</span><br><span class="line">/path/to/myfile.html 资源路径</span><br><span class="line">?key1=value1&amp;key2=value2  参数 &amp; 表示多个参数的拼接</span><br><span class="line"># 锚点</span><br></pre></td></tr></table></figure>

<h3 id="2、准备"><a href="#2、准备" class="headerlink" title="2、准备"></a>2、准备</h3><ul>
<li>安装requests包</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<ul>
<li>pip 换源<ul>
<li>改写该文件内容 <code>C:\Users\dongjiaxin\AppData\Roaming\pip\pip.ini</code></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url http://pypi.douban.com/simple/</span><br><span class="line">pip config <span class="built_in">set</span> install.trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>

<ul>
<li><p>User-Agent： 身份标识  表示你是哪个浏览器</p>
</li>
<li><p>status_code：状态码</p>
<ul>
<li>200 OK：请求成功，服务器成功返回请求的数据。</li>
<li>201 Created：请求成功，服务器成功创建了新的资源。</li>
<li>204 No Content：请求成功，服务器成功处理了请求，但没有返回任何内容。</li>
<li>400 Bad Request：客户端请求错误，服务器无法理解请求。</li>
<li>401 Unauthorized：请求要求用户认证，用户没有提供有效的认证信息。</li>
<li>403 Forbidden：服务器拒绝请求，通常是因为没有足够的权限。</li>
<li>404 Not Found：请求的资源不存在。</li>
<li>500 Internal Server Error：服务器内部错误，无法完成请求。</li>
</ul>
</li>
<li><p>使用随机生成的user-agnet</p>
<ul>
<li>下载包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install fake_useragent</span><br></pre></td></tr></table></figure>

<ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgnet</span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">  py  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取百度网页源码"><a href="#获取百度网页源码" class="headerlink" title="获取百度网页源码"></a>获取百度网页源码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Description:  获取百度搜索源代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=header)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span>  <span class="comment"># 修改编码形式，防止中文乱码</span></span><br><span class="line">    <span class="comment"># print(response.content)  # 网页代码二进制</span></span><br><span class="line">    <span class="comment"># print(response.text)  # 网页代码文本</span></span><br><span class="line">    <span class="built_in">print</span>(response.status_code)  <span class="comment"># 状态码</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-http-httpbin-org-get-网站测试get请求"><a href="#使用-http-httpbin-org-get-网站测试get请求" class="headerlink" title="使用 http://httpbin.org/get 网站测试get请求"></a>使用 <a href="http://httpbin.org/get">http://httpbin.org/get</a> 网站测试get请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Description: 使用 http://httpbin.org/get 网站测试get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line"></span><br><span class="line">    response = requests.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="3、豆瓣top250"><a href="#3、豆瓣top250" class="headerlink" title="3、豆瓣top250"></a>3、豆瓣top250</h3><ul>
<li><strong>可以把获取的html保存到本地，然后用浏览器打开，查看是否正确</strong></li>
</ul>
<h3 id="4、Xpath解析（静态页面）"><a href="#4、Xpath解析（静态页面）" class="headerlink" title="4、Xpath解析（静态页面）"></a>4、Xpath解析（静态页面）</h3><ul>
<li><p>XPath 是一种用于在 XML 和 HTML 文档中定位和选择节点的查询语言。可以帮助开发者轻松地从 XML 和 HTML 数据中提取、过滤和处理所需的信息，是数据解析和处理中的重要工具之一。</p>
</li>
<li><p>下载相关包</p>
<ul>
<li><pre><code class="python">pip install lxml
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 导入相关包</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    from lxml import etree</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>两种创建解析对象的方式</p>
<ul>
<li><p>解析本地html</p>
<ul>
<li><pre><code class="python">html = etree.parse(本地文件路径)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 解析爬取下来的html</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    html = etree.HTML(response.text)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Xpath相关语法"><a href="#Xpath相关语法" class="headerlink" title="Xpath相关语法"></a>Xpath相关语法</h4><ul>
<li><p>.xpath()，获取所有符号规则的内容，并返回一个列表</p>
</li>
<li><p><strong>.xpath() 返回的元素对象，还可以继续进行xpath解析</strong></p>
</li>
<li><pre><code class="python">/	表示从根节点选取
//	从当前节点选取子孙节点
.	选取当前节点
./	表示从当前节点
..	选取当前节点的父节点
@	选取属性
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 基本语法</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class="line">  &lt;html&gt;&lt;body&gt;&lt;div&gt;&amp;#13;</span><br><span class="line">      &lt;ul&gt;&amp;#13;</span><br><span class="line">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class="line">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class="line">          &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class="line">          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;&amp;#13;</span><br><span class="line">          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&amp;#13;</span><br><span class="line">  &lt;/li&gt;&lt;/ul&gt;&amp;#13;</span><br><span class="line">  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  html = etree.parse(&#x27;./test.html&#x27;, etree.HTMLParser())</span><br><span class="line">  result = etree.tostring(html).decode(&#x27;utf-8&#x27;)</span><br><span class="line">  # 基本语法</span><br><span class="line">  result = html.xpath(&#x27;.&#x27;)  # .获取当前节点 html</span><br><span class="line">  result = html.xpath(&#x27;..&#x27;)  # .. 获取当前节点的父节点 空</span><br><span class="line">  result = html.xpath(&#x27;./body&#x27;)  # 选取子节点</span><br><span class="line">  result = html.xpath(&#x27;//div&#x27;)  # 选取所有的子孙节点div</span><br><span class="line">  result = html.xpath(&#x27;//body&#x27;)  # 选取子孙节点body</span><br><span class="line">  result = html.xpath(&#x27;//*&#x27;)  # //* 选取所有节点</span><br><span class="line">  result = html.xpath(&#x27;//li&#x27;)  # //li 获取所有的li节点</span><br><span class="line">  result = html.xpath(&#x27;//li/a&#x27;)  # //li/a 获取li节点的所有的子节点a</span><br><span class="line">  result = html.xpath(&#x27;//ul/a&#x27;)  # //ul/a 无返回结果，因为ul的子节点不是a</span><br><span class="line">  result = html.xpath(&#x27;//ul//a&#x27;)  # //ul//a 获取ul的所有孙子节点a</span><br><span class="line">  result = html.xpath(&#x27;/html/body/div&#x27;)  # 逐层定位body的所有的div子节点</span><br><span class="line">  result = html.xpath(&#x27;//div&#x27;)  # 定位到所有的div节点</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h5 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h5><ul>
<li><p>获取a父节点li的class属性值</p>
</li>
<li><pre><code>result = html.xpath(&#39;//a[@href=&quot;link5.html&quot;]/../@class&#39;) 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 索引定位</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  result = html.xpath(&#x27;//li[1]&#x27;)  # 定位到第一个li节点</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h5 id="属性定位"><a href="#属性定位" class="headerlink" title="属性定位"></a>属性定位</h5><ul>
<li><p>定位class属性值为[“item-0”]的li节点</p>
</li>
<li><pre><code class="python">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]&#39;) 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 属性获取</span><br><span class="line"></span><br><span class="line">- 获取li节点下所有字节点a的href属性值</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  result = html.xpath(&#x27;//li/a/@href&#x27;)  # </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h5 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h5><ul>
<li><p>通过 &#x2F;text()方法获取指定节点中的文本</p>
<ul>
<li><pre><code class="python">result = html.xpath(&#39;//li[@class=&quot;item-0&quot;]/a/text()&#39;) 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 通过 //text()获取所有指定节点的所有子节点的文本，包括节点本身的文本（包含缩进换行等字符）</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    result = html.xpath(&#x27;//li[@class=&quot;item-0&quot;]//text()&#x27;)  </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h5 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h5><ul>
<li><p>使用<strong>contains函数</strong>进行属性多值匹配</p>
</li>
<li><p>这里的li节点的class属性有两个属性值li、li-first</p>
</li>
<li><pre><code class="python">text = &#39;&#39;&#39;
&lt;li class=&quot;li li-first&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;
&#39;&#39;&#39;
html = etree.HTML(text)
result = html.xpath(&#39;//li[contains(@class, &quot;li&quot;)]/a/text()&#39;) 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 多属性匹配</span><br><span class="line"></span><br><span class="line">- 通过 and 连接class属性和name属性</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  text = &#x27;&#x27;&#x27;</span><br><span class="line">  &lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;https://ask.hellobi.com/link.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &#x27;&#x27;&#x27;</span><br><span class="line">  html = etree.HTML(text)</span><br><span class="line">  result = html.xpath(&#x27;//li[contains(@class,&quot;li&quot;) and @name=&quot;item&quot;]/a/text()&#x27;)  </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="5、数据格式"><a href="#5、数据格式" class="headerlink" title="5、数据格式"></a>5、数据格式</h3><ul>
<li>查看网页包文件中，响应标头中的Content-Type</li>
<li><img src="/posts/c00b24b1/image-20230723143523063.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230723143638690.png" class=""></li>
<li><img src="/posts/c00b24b1/image-20230723144731031.png" class=""></li>
</ul>
<h4 id="5-1-text"><a href="#5-1-text" class="headerlink" title="5.1 text"></a>5.1 text</h4><ul>
<li>使用.text方法接收，接收的是网页的html</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">html = response.text</span><br></pre></td></tr></table></figure>

<h4 id="5-2-json"><a href="#5-2-json" class="headerlink" title="5.2 json"></a>5.2 json</h4><ul>
<li>使用.json()方法接收，接收json字符串，并返回一个dict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">data = response.json()</span><br></pre></td></tr></table></figure>

<ul>
<li>json和dict的区别<ul>
<li>可以复制网页的json数据，在json在线解析器上解析，注意dict不能用json的在线解析</li>
<li><strong>输出时，json字符串中的字符被双引号引着，dict中的字符被单引号引着</strong></li>
<li>在python中，json数据被识别为字符串，所以不能像字典一样访问其中的元素</li>
<li>在json文件中，可以存放json字符串，并且可以用通过ctrl+alt+l的方式，将json字符串正确的格式化</li>
</ul>
</li>
<li>json和dict的相互转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># dict转为json字符串</span></span><br><span class="line"><span class="comment"># ensure_ascii默认为True，转为进制数据</span></span><br><span class="line"><span class="comment"># ensure_ascii为False，返回正常数据</span></span><br><span class="line">js = json.dumps(response.json(), ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(js))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; </span></span><br><span class="line"><span class="comment"># json字符串转为dict</span></span><br><span class="line">di = json.loads(js)</span><br></pre></td></tr></table></figure>

<h4 id="5-3-二进制（图片和视频）"><a href="#5-3-二进制（图片和视频）" class="headerlink" title="5.3 二进制（图片和视频）"></a>5.3 二进制（图片和视频）</h4><ul>
<li>请求图片和视频时，会返回二进制数据，可以使用.content接收</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">response = requests.get(url<span class="punctuation">,</span> headers=headers)</span><br><span class="line">con = response.content</span><br></pre></td></tr></table></figure>

<ul>
<li>使用’wb’模式，写入对应后缀（jsp&#x2F;png&#x2F;mp4）的文件中，就可以正常打开了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	fp.write(con)</span><br></pre></td></tr></table></figure>

<h3 id="6、get和post请求"><a href="#6、get和post请求" class="headerlink" title="6、get和post请求"></a>6、get和post请求</h3><h4 id="6-1-get请求"><a href="#6-1-get请求" class="headerlink" title="6.1 get请求"></a>6.1 get请求</h4><ul>
<li>大多数网页都是get请求，可以通过.get()方法的params参数，传入请求参数</li>
</ul>
<h4 id="6-2-post（百度翻译）"><a href="#6-2-post（百度翻译）" class="headerlink" title="6.2 post（百度翻译）"></a>6.2 post（百度翻译）</h4><ul>
<li>部分网页是post请求，可以通过.post()方法的data参数，传入表单数据</li>
</ul>
<h3 id="7、BeautifulSoup解析（静态页面）"><a href="#7、BeautifulSoup解析（静态页面）" class="headerlink" title="7、BeautifulSoup解析（静态页面）"></a>7、BeautifulSoup解析（静态页面）</h3><ul>
<li><p>爬取豆瓣读书时，使用了bs4解析方式</p>
</li>
<li><p>下载bs4解析包</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure>

<ul>
<li>导入包</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>

<ul>
<li>首先解析html。然后定位标签，返回列表。最后正则匹配数据，也返回一个列表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bt = bs4.BeautifulSoup(html2, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bs = bt.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;subject clearfix&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = re.findall(<span class="string">r&#x27;&lt;a class=&quot;nbg&quot; href=&quot;.*?&quot; title=&quot;(?P&lt;book&gt;.*?)&quot;&gt;\n&#x27;</span>, bs)</span><br></pre></td></tr></table></figure>

<h3 id="8、京东评论（动态抓包）"><a href="#8、京东评论（动态抓包）" class="headerlink" title="8、京东评论（动态抓包）"></a>8、京东评论（动态抓包）</h3><ul>
<li>代码文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day09/demo04JDComment.py</span><br></pre></td></tr></table></figure>

<h3 id="9、豆瓣Top250（非详情页）"><a href="#9、豆瓣Top250（非详情页）" class="headerlink" title="9、豆瓣Top250（非详情页）"></a>9、豆瓣Top250（非详情页）</h3><ul>
<li>代码文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day09/demo05SpiderDouBan.py</span><br></pre></td></tr></table></figure>

<h3 id="10、豆瓣读书（详情页）"><a href="#10、豆瓣读书（详情页）" class="headerlink" title="10、豆瓣读书（详情页）"></a>10、豆瓣读书（详情页）</h3><ul>
<li>代码文件</li>
<li>使用了xpath解析和bs4解析方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day10/demo01DoubanReadBook.py</span><br></pre></td></tr></table></figure>

<h3 id="11、WallHaven（高清图片）"><a href="#11、WallHaven（高清图片）" class="headerlink" title="11、WallHaven（高清图片）"></a>11、WallHaven（高清图片）</h3><ul>
<li>代码文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day09/demo06WallHaven.py</span><br></pre></td></tr></table></figure>

<h3 id="11、大麦网（selenium）"><a href="#11、大麦网（selenium）" class="headerlink" title="11、大麦网（selenium）"></a>11、大麦网（selenium）</h3><ul>
<li>代码文件</li>
<li>由于大麦网网页跳转时的网址不会改变，该方式获取的数据量很少</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day10/demo02SeleniumDaMai.py</span><br></pre></td></tr></table></figure>

<h3 id="12、大麦网（动态抓包）"><a href="#12、大麦网（动态抓包）" class="headerlink" title="12、大麦网（动态抓包）"></a>12、大麦网（动态抓包）</h3><ul>
<li>代码文件</li>
<li>大麦网采用的是，异步加载数据的方式，然后js渲染，所以动态抓包可以获取更多的数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">day10/demo03JsonDamai.py</span><br></pre></td></tr></table></figure>

<h3 id="13、遇到的坑"><a href="#13、遇到的坑" class="headerlink" title="13、遇到的坑"></a>13、遇到的坑</h3><h4 id="13-1-显示字符串中特殊字符"><a href="#13-1-显示字符串中特殊字符" class="headerlink" title="13.1 显示字符串中特殊字符"></a>13.1 显示字符串中特殊字符</h4><ul>
<li>使用””” … “””包含字符串，并放到列表，打印输出</li>
<li>‘’’ … ‘’’ 在列表中，并把列表输出会显示字符串中的特殊字符，如 \n、\r等</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bt = bs4.BeautifulSoup(html2, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>([<span class="string">f&quot;&quot;&quot;<span class="subst">&#123;bt.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;subject clearfix&quot;</span>)[<span class="number">0</span>]&#125;</span>&quot;&quot;&quot;</span>])</span><br></pre></td></tr></table></figure>

<h4 id="13-2-替换字符串中的转义字符不要加-r"><a href="#13-2-替换字符串中的转义字符不要加-r" class="headerlink" title="13.2 替换字符串中的转义字符不要加 r"></a>13.2 替换字符串中的转义字符不要加 r</h4><ul>
<li>替换转义字符不要加 r</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.replace(<span class="string">&quot;\xa0&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="13-3-xpath二次解析尽量开头带上"><a href="#13-3-xpath二次解析尽量开头带上" class="headerlink" title="13.3 xpath二次解析尽量开头带上 .&#x2F;"></a>13.3 xpath二次解析尽量开头带上 .&#x2F;</h4><ul>
<li>如果不带可能会导致二次解析定位不到</li>
<li>selenium的xpath解析可以直接  div&#x2F;div[@class&#x3D;’info’]&#x2F;&#x2F;a&#x2F;span[1]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li_list = tree.xpath(<span class="string">r&quot;//ol[@class=&#x27;grid_view&#x27;]/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    title = li.xpath(<span class="string">&quot;./div/div[@class=&#x27;info&#x27;]//a/span[1]/text()&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h4 id="13-4-正则匹配的字符串一般不要含有"><a href="#13-4-正则匹配的字符串一般不要含有" class="headerlink" title="13.4 正则匹配的字符串一般不要含有 |"></a>13.4 正则匹配的字符串一般不要含有 |</h4><ul>
<li>如果带了，会匹配不到，可以先使用.replace()方法替换掉</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般不要匹配 | ，不然匹配不到</span></span><br><span class="line"> <span class="comment"># directore = &quot;|&quot;.join(列表)</span></span><br><span class="line">directo = <span class="string">&quot;#&quot;</span>.join(列表)</span><br><span class="line">search = re.search(<span class="string">r&quot;导演: (?P&lt;director&gt;.*?) .*?主演: (?P&lt;actor&gt;.*?) .*?#(?P&lt;time&gt;.*?) (?P&lt;country&gt;.*?) (?P&lt;type_&gt;.*)&quot;</span>,director)</span><br></pre></td></tr></table></figure>

<h4 id="13-5-正则匹配表达式中不要含有-span-或-span"><a href="#13-5-正则匹配表达式中不要含有-span-或-span" class="headerlink" title="13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;"></a>13.5 正则匹配表达式中不要含有&lt; span &gt;或&lt; &#x2F;span &gt;</h4><ul>
<li>可以使用 .*? 忽略它，不然匹配不到</li>
</ul>
<h4 id="13-6-反爬导致解析获取的列表为空，造成-list-out-of-range"><a href="#13-6-反爬导致解析获取的列表为空，造成-list-out-of-range" class="headerlink" title="13.6 反爬导致解析获取的列表为空，造成 list out of range"></a>13.6 反爬导致解析获取的列表为空，造成 list out of range</h4><ul>
<li>反爬导致解析获取的列表为空，由于索引取值，造成列表越界异常</li>
<li>可以捕获该异常代码，保证后续的url请求不受阻</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bt = bs4.BeautifulSoup(html2, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27; ... &#x27;&#x27;&#x27; 在列表中，并把列表输出会显示字符串中的特殊字符，如 \n、\r等</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    bs = bt.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;subject clearfix&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    bs = bs[<span class="number">0</span>]  <span class="comment"># 提取列表中的字符串</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;反爬机制&quot;</span>, e)</span><br></pre></td></tr></table></figure>

<h4 id="13-7-应对部分元素为空，导致list-out-of-range错误"><a href="#13-7-应对部分元素为空，导致list-out-of-range错误" class="headerlink" title="13.7 应对部分元素为空，导致list out of range错误"></a>13.7 应对部分元素为空，导致list out of range错误</h4><ul>
<li><p>导致此错误的原因一般都是列表为空，但是使用了索引获取其中的元素</p>
</li>
<li><p><strong>可以自定义一个函数，用来捕获这类错误</strong>，</p>
<p>如果报错，则返回一个空值；如果不报错，则返回处理好的值</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 捕获元素不存在时的错误</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">element, by, pattern, split</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> element.find_element(by, pattern).text.split(split)[<span class="number">1</span>].strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="13-8-通过xpath获取标签外的文本内容"><a href="#13-8-通过xpath获取标签外的文本内容" class="headerlink" title="13.8 通过xpath获取标签外的文本内容"></a>13.8 通过xpath获取标签外的文本内容</h4><ul>
<li><img src="/posts/c00b24b1/image-20230724090823259.png" class=""></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tree.xpath( <span class="string">&quot;//div[@class=&#x27;subject clearfix&#x27;]/div[@id=&#x27;info&#x27;]/span[@class=&#x27;pl&#x27;][contains(text(), &#x27;页数:&#x27;)]/following-sibling::text()[1]&quot;</span>,html)</span><br></pre></td></tr></table></figure>

<ul>
<li>或者使用bs4解析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.findall(r&#x27;定价:.*? (?P&lt;money&gt;.*?)&lt;br/&gt;&#x27;, bs)[0]</span><br></pre></td></tr></table></figure>



<h4 id="13-9-遇到无法避免的异常"><a href="#13-9-遇到无法避免的异常" class="headerlink" title="13.9 遇到无法避免的异常"></a>13.9 遇到无法避免的异常</h4><ul>
<li>遇到无法避免的异常时，可以捕获该异常信息，确保后续程序正常运行</li>
</ul>
<h2 id="第六部分-selenium半自动化工具"><a href="#第六部分-selenium半自动化工具" class="headerlink" title="第六部分 selenium半自动化工具"></a>第六部分 selenium半自动化工具</h2><ul>
<li>首先下载selenium包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<ul>
<li><p>下载对应浏览器版本的浏览器驱动，并放到处于环境变量的包中</p>
<ul>
<li><img src="/posts/c00b24b1/image-20230723151140532.png" class=""></li>
</ul>
</li>
<li><p>导入包</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenuim <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure>

<h3 id="1、等待网页js渲染"><a href="#1、等待网页js渲染" class="headerlink" title="1、等待网页js渲染"></a>1、等待网页js渲染</h3><h3 id="2、通过cookie免密登录"><a href="#2、通过cookie免密登录" class="headerlink" title="2、通过cookie免密登录"></a>2、通过cookie免密登录</h3><h2 id="第七部分-Pandas"><a href="#第七部分-Pandas" class="headerlink" title="第七部分 Pandas"></a>第七部分 Pandas</h2><ul>
<li>安装pandas包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip insatll pandas</span><br></pre></td></tr></table></figure>

<ul>
<li>安装jupyter notebook</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyter notebook</span><br></pre></td></tr></table></figure>

<ul>
<li>在pycharm终端启动jupyter notebook</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F:\BigData26\Code\python\bigdata26&gt;jupyter notebook</span><br></pre></td></tr></table></figure>

<ul>
<li>导入pandas的包</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure>

<h3 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h3><ul>
<li>使用布尔索引可以提取指定条件的值</li>
<li>df[‘Age’] &gt; 32的值</li>
</ul>
<img src="/posts/c00b24b1/image-20230724212046687.png" class="">

<ul>
<li>如下代码，可以获取次df的Age列，值大于32的行</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">32</span>]</span><br></pre></td></tr></table></figure>

<img src="/posts/c00b24b1/image-20230724212222545.png" class="">

<h3 id="pandas-读取文件"><a href="#pandas-读取文件" class="headerlink" title="pandas 读取文件"></a>pandas 读取文件</h3><ul>
<li><p>pd.read_csv()方法中，index_col参数和names参数的区别</p>
<ul>
<li><p>index_col需要指定，文件中已有的head信息，才能够读取</p>
<ul>
<li><pre><code class="python">id,name,age,gender,clazz
1500100001,施笑槐,22,女,文科六班

df_student = pd.read_csv(&#39;../data/student.csv&#39;,index_col=[&quot;id&quot;,&quot;name&quot;,&quot;age&quot;,&quot;gender&quot;,&quot;clazz&quot;])
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - names参数，会当作读取文件的列名</span><br><span class="line"></span><br><span class="line">### DF取值</span><br><span class="line"></span><br><span class="line">#### 1、取列</span><br><span class="line"></span><br><span class="line">- df[&quot;name&quot;]，注意是两对中括号</span><br><span class="line">  - 取列名为name的列</span><br><span class="line">- df[[&quot;name1&quot;,&quot;name2&quot;,&quot;name3]]</span><br><span class="line">  - 取列名为name1、name2、name3的列</span><br><span class="line"></span><br><span class="line">#### 2、取行</span><br><span class="line"></span><br><span class="line">- df.iloc[[0,1]]，注意是两对中括号</span><br><span class="line">  - 取行索引为0，为1的行</span><br><span class="line">- df.loc[[&quot;name1&quot;,&quot;name2&quot;]]</span><br><span class="line">  - 取行名为name1，name2的行</span><br><span class="line">- df_student[1:3]</span><br><span class="line">  - 取行索引，[2,3)的所有行</span><br><span class="line"></span><br><span class="line">#### 3、取行列</span><br><span class="line"></span><br><span class="line">- 可以通过.iloc[ 行索引切片, 列索引切片 ]的方式取行列</span><br><span class="line">  - df_student.iloc[1:4,0:2]</span><br><span class="line">    - 取[1,4)行，且[0,2)列</span><br><span class="line">      - ![](python笔记/image-20230724214335918.png)</span><br><span class="line"></span><br><span class="line">### 连接</span><br><span class="line"></span><br><span class="line">#### 1、join</span><br><span class="line"></span><br><span class="line">- 默认情况下他是把行索引相同的数据合并到一起</span><br><span class="line"></span><br><span class="line">![](python笔记/image-20230724153228728.png)</span><br><span class="line"></span><br><span class="line">#### 2、merge:</span><br><span class="line"></span><br><span class="line">- 按照指定的列把数据按照一定的方式合并到一起</span><br><span class="line">  	左外连接、右外连接、全外连接、内连接、</span><br><span class="line"></span><br><span class="line">![](python笔记/image-20230724153243607.png)</span><br><span class="line"></span><br><span class="line">### 分组聚合</span><br><span class="line"></span><br><span class="line">- df.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])</span><br><span class="line">  - 先根据clazz列进行分组和默认的排序</span><br><span class="line">  - 然后再根据subject_id列，在clazz分组的基础上，再进行分组和默认的排序</span><br><span class="line">  - 最后聚合的聚合，根据分的各个组进行的聚合操作</span><br><span class="line">  - 除了指定列，其他未分组的列也会进行聚合操作</span><br><span class="line"></span><br><span class="line">![](python笔记/image-20230724215256243.png)</span><br><span class="line"></span><br><span class="line">- df_result.groupby([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;name&quot;]).sum(&quot;score&quot;)</span><br><span class="line">  -  由于分组列太多（分组过后，各组只有一条数据），聚合不起作用，可以用来显示分组过后的情况</span><br><span class="line"></span><br><span class="line">![image-20230724223358859](python笔记/image-20230724223358859.png)</span><br><span class="line"></span><br><span class="line">- rank()聚合</span><br><span class="line">  - rank只会排名，不会改变原来数据的顺序</span><br><span class="line">  - 可以根据如下代码，取各个班级各个学科得前三名</span><br><span class="line">  - ascending=False，代表值降序，从1开始排序</span><br><span class="line"></span><br><span class="line">df_merge[&quot;rank&quot;] = df_merge.groupby([&quot;clazz&quot;,&quot;subject_id&quot;])[&#x27;score&#x27;].rank(&quot;dense&quot;,ascending=False)</span><br><span class="line"></span><br><span class="line">df_result = df_merge[df_merge[&quot;rank&quot;]&lt;=3]  # 取各班各科前三名的行</span><br><span class="line"></span><br><span class="line">如图，代码结果（在day11的homework文件中）</span><br><span class="line"></span><br><span class="line">![image-20230724223247119](python笔记/image-20230724223247119.png)</span><br><span class="line"></span><br><span class="line">![image-20230724223315189](python笔记/image-20230724223315189.png)</span><br><span class="line"></span><br><span class="line">### sort_values()分组排序</span><br><span class="line"></span><br><span class="line">- df_result.sort_values([&quot;clazz&quot;,&quot;subject_id&quot;,&quot;rank&quot;],ascending=[False,False,False]).reset_index(drop=True)</span><br><span class="line">  - 使用sort_valus()方法进行分组排序</span><br><span class="line">  - reset_index并重置索引，drop=Ture删除原来的乱序索引</span><br><span class="line">  - 传给ascending参数一个bool列表，指定每列的排序方式，默认为True(升序)</span><br><span class="line">  - **sort_values() 会先排序指定的第一列，然后在此基础上继续排序其他列，有分组的作用，并按每列指定的规则排序**</span><br><span class="line"></span><br><span class="line">![image-20230725102707716](python笔记/image-20230725102707716.png)</span><br><span class="line"></span><br><span class="line"># Python 内存管理和垃圾回收</span><br><span class="line"></span><br><span class="line">基于C源码 </span><br><span class="line"></span><br><span class="line">- 引用计数器</span><br><span class="line">- 标记清除</span><br><span class="line">- 分代回收</span><br><span class="line">- 缓存机制</span><br><span class="line"></span><br><span class="line">## 1. 引用计数器</span><br><span class="line"></span><br><span class="line">### 环状双向链表 refchain</span><br><span class="line"></span><br><span class="line">python创建对象时会把任何对象放在refchain中</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">name = &#x27;西西&#x27;</span><br><span class="line">age = 18</span><br><span class="line">height = 1.81</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数】</span><br><span class="line">name = <span class="string">&#x27;西西&#x27;</span></span><br><span class="line">new_name = name</span><br><span class="line"></span><br><span class="line">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、val=<span class="number">18</span>】</span><br><span class="line">age=<span class="number">18</span></span><br><span class="line"></span><br><span class="line">内部创建对象时会存储一些数据  【上一个对象、下一个对象、类型、引用计数、元素个数、值】</span><br><span class="line">hobby = [<span class="string">&#x27;唱&#x27;</span>,<span class="string">&#x27;跳&#x27;</span>,<span class="string">&#x27;rap&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>C源码中每个对象都有不一样的存储结构数据   PyObject结构体（4个值） PyVarObject &#x3D; PyObject + ob_size</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">内部会创建：</span><br><span class="line">	_ob_next = refchain中的下一个对象</span><br><span class="line">    _ob_prev = refchain中的上一个对象</span><br><span class="line">    ob_refcnt = <span class="number">1</span> 引用计数  </span><br><span class="line">    ob_type = <span class="built_in">float</span></span><br><span class="line">    ob_fval = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<h3 id="引用计数器"><a href="#引用计数器" class="headerlink" title="引用计数器"></a>引用计数器</h3><p>创建一个对象的时候 默认refcnt是1</p>
<ul>
<li>引用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">9999</span>   <span class="comment"># refcnt = 1</span></span><br><span class="line">b = a      <span class="comment"># refcnt + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除引用</span></span><br><span class="line"><span class="keyword">del</span> b      <span class="comment"># refcnt - 1</span></span><br><span class="line"><span class="keyword">del</span> a      <span class="comment"># refcnt - 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当一个对象的引用计数器为0时，表示这个对象不存在了，这个对象就是一个垃圾  就回收了</span></span><br><span class="line"><span class="comment"># 回收</span></span><br><span class="line">	<span class="comment"># 1.对象从refchain中移除</span></span><br><span class="line">    <span class="comment"># 2.对象销毁，内存归还</span></span><br></pre></td></tr></table></figure>

<ul>
<li>但是会出现以下问题</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="comment"># a\refcnt = 1</span></span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   <span class="comment"># b\refcnt = 1</span></span><br><span class="line"></span><br><span class="line">a.append(b)   <span class="comment"># b\refcnt + 1</span></span><br><span class="line">b.append(a)   <span class="comment"># a\refcnt + 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a         <span class="comment"># a\refcnt - 1</span></span><br><span class="line"><span class="keyword">del</span> b         <span class="comment"># b\refcnt - 1   值都还是1   没有实现回收的功能</span></span><br></pre></td></tr></table></figure>



<h2 id="2-标记清除"><a href="#2-标记清除" class="headerlink" title="2. 标记清除"></a>2. 标记清除</h2><ul>
<li>目的： 解决引用计数器出现的循环引用的问题</li>
<li>实现：在底层再次维护一个链表，用于存放可能出现循环引用的对象（list,tuple,dict,set）</li>
</ul>
<img src="/posts/c00b24b1/hZ9SjgCDRMUGOxT.png" class="" title="hZ9SjgCDRMUGOxT">

<blockquote>
<p>在python内部<code>某种情况</code>下触发，回头触发扫描<code>可能出现循环引用的链表</code>中的每个元素，检查该对象是否出现一个循环引用的现象，如果出现，refcnt - 1 ；如果refcnt&#x3D;0，垃圾回收。</p>
</blockquote>
<ul>
<li><p>问题：</p>
<p>​	什么时候扫描？</p>
<p>​	可能存在扫描循环引用的链表代价大，耗时久。</p>
</li>
</ul>
<h2 id="3-分代回收"><a href="#3-分代回收" class="headerlink" title="3. 分代回收"></a>3. 分代回收</h2><img src="/posts/c00b24b1/hZ9SjgCDRMUGOxT.png" class="" title="image.png">

<ul>
<li>0代 ： 0代中对象到达700个，记录循环引用的链表扫描一次</li>
<li>1代 ： 0代扫描十次，1代扫描一次</li>
<li>2代 ： 1代扫描十次，2代扫描一次</li>
</ul>
<h2 id="Python缓存池"><a href="#Python缓存池" class="headerlink" title="Python缓存池"></a>Python缓存池</h2><p>为了避免重复和创建一些常见对象，维护池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动解释器时，python会内部创建 ： -5、-4 ...... 257，值在次范围的int对象会被放到缓存池中</span></span><br><span class="line">v1 = <span class="number">7</span></span><br><span class="line">v2 = <span class="number">9</span></span><br><span class="line">v3 = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存地址</span></span><br><span class="line"><span class="built_in">id</span>(v1)</span><br><span class="line"><span class="built_in">id</span>(v2)</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">9999</span></span><br><span class="line">v5 = <span class="number">9999</span></span><br></pre></td></tr></table></figure>



<h3 id="free-list"><a href="#free-list" class="headerlink" title="free_list"></a>free_list</h3><blockquote>
<p>refcnt &#x3D; 0 按道理来说是不是应该会回收，但是内部不会直接回收，他会把这个对象存到一个free_list的链表中当缓存，之后取创建一个相同对象的时候，不重新开辟内存，而是从free_list中取一个对象</p>
</blockquote>
<img src="/posts/c00b24b1/bxmZRYfl4UXaeB6.png" class="" title="image.png">

<h3 id="缓存机制（自己理解）"><a href="#缓存机制（自己理解）" class="headerlink" title="缓存机制（自己理解）"></a>缓存机制（自己理解）</h3><ul>
<li><p>即使删除了值，但是对象并不会删除，会放到该对象对应的缓存池中，（如果值得范围，在缓存范围内）</p>
<p>如上图的cmd中的例子，虽然删除了v1的值，但是v1对应的float对象并没有被清除内存，而是被放到缓存池中（所在内存不变）</p>
<p>所以下下一个定义的v3对应的float对象可能是v1的float对象，只是值有所改变</p>
<p>打印内存地址发现，v3和已经被放入缓存池的v1的的地址相同，所以v3和v1使用的是同一个float对象</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
